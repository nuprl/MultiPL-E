language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|number| match number {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmm4g4i15.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral {}\", numeral),\n        })\n        .collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers\n        .iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number {}\", num),\n        })\n        .collect::<Vec<&str>>()\n    \
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split_whitespace().map(|s| match s {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    Invalid input\"),\n    }).collect::<Vec<u8>>();\n    sorted.sort();\n    sorted.iter().map(|n|\
    \ match n {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => panic!(\"Invalid input\"),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ num_vec.push(match num {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input!\"),\n        });\n    }\n    num_vec.sort();\n\
    \    let mut result = String::new();\n    for num in num_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input!\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    num_vec.sort();\n    let\
    \ mut result = String::new();\n    for num in num_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\"\
    , num),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmm4g4i15.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = match a {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number: {}\", a),\n        };\n        let\
    \ b = match b {\n            \"zero\" => 0,\n            \"one\" => 1,\n     \
    \       \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Invalid number: {}\", b),\n        };\n        a.cmp(&b)\n   \
    \ });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcouvfel2.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcouvfel2.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcouvfel2.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  stdout: ''
  timestamp: 1660011080
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", n),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ num_vec.push(match num {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input\"),\n        });\n    }\n    num_vec.sort();\n\
    \    let mut result = String::new();\n    for num in num_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a = number_to_int(a);\n        let\
    \ b = number_to_int(b);\n        a.cmp(&b)\n    });\n    numbers.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp159onscl.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmp159onscl.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011080
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u32> = Vec::new();\n    for number in numbers.split_whitespace() {\n   \
    \     match number {\n            \"zero\" => numbers_vec.push(0),\n         \
    \   \"one\" => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n\
    \            \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"Invalid\
    \ number: {}\", number),\n        }\n    }\n    numbers_vec.sort();\n    let mut\
    \ sorted_numbers: String = String::new();\n    for number in numbers_vec {\n \
    \       sorted_numbers.push_str(match number {\n            0 => \"zero\",\n \
    \           1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", number),\n \
    \       });\n        sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n\
    \    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for number in numbers.split_whitespace() {\n    \
    \    match number {\n            \"zero\" => nums.push(0),\n            \"one\"\
    \ => nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\"\
    \ => nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\"\
    \ => nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\"\
    \ => nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => panic!(\"Invalid input\"),\n        }\n \
    \   }\n    nums.sort();\n    let mut result = String::new();\n    for num in nums\
    \ {\n        match num {\n            0 => result.push_str(\"zero \"),\n     \
    \       1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two\
    \ \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid input\"),\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  match num {\n            \"zero\" => nums.push(0),\n            \"one\" =>\
    \ nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\" =>\
    \ nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\" =>\
    \ nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\" =>\
    \ nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => panic!(\"Invalid input\"),\n        }\n \
    \   }\n    nums.sort();\n    let mut result = String::new();\n    for num in nums\
    \ {\n        match num {\n            0 => result.push_str(\"zero \"),\n     \
    \       1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two\
    \ \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid input\"),\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input\"),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|s| match s\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", n),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpakd7ov2t.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\"\
    , num),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers_vec.sort();\n\
    \    let mut sorted_numbers = String::new();\n    for number in numbers_vec {\n\
    \        sorted_numbers.push_str(match number {\n            0 => \"zero\",\n\
    \            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        });\n\
    \        sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = match a {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number\"),\n        };\n        let b = match\
    \ b {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyv8my8a0.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    numbers.sort();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpwwvkixxx.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  match num {\n            \"zero\" => nums.push(0),\n            \"one\" =>\
    \ nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\" =>\
    \ nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\" =>\
    \ nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\" =>\
    \ nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => panic!(\"Invalid number: {}\", num),\n  \
    \      }\n    }\n    nums.sort();\n    let mut result = String::new();\n    for\
    \ num in nums {\n        match num {\n            0 => result.push_str(\"zero\
    \ \"),\n            1 => result.push_str(\"one \"),\n            2 => result.push_str(\"\
    two \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a = number_to_int(a);\n        let\
    \ b = number_to_int(b);\n        a.cmp(&b)\n    });\n    numbers.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp159onscl.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmp159onscl.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011080
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(String::from).collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpba5id18a.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<i32> = Vec::new();\n    for number in numbers.split_whitespace() {\n   \
    \     match number {\n            \"zero\" => numbers_vec.push(0),\n         \
    \   \"one\" => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n\
    \            \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"Invalid\
    \ number\"),\n        }\n    }\n    numbers_vec.sort();\n    let mut sorted_numbers\
    \ = String::new();\n    for number in numbers_vec {\n        match number {\n\
    \            0 => sorted_numbers.push_str(\"zero \"),\n            1 => sorted_numbers.push_str(\"\
    one \"),\n            2 => sorted_numbers.push_str(\"two \"),\n            3 =>\
    \ sorted_numbers.push_str(\"three \"),\n            4 => sorted_numbers.push_str(\"\
    four \"),\n            5 => sorted_numbers.push_str(\"five \"),\n            6\
    \ => sorted_numbers.push_str(\"six \"),\n            7 => sorted_numbers.push_str(\"\
    seven \"),\n            8 => sorted_numbers.push_str(\"eight \"),\n          \
    \  9 => sorted_numbers.push_str(\"nine \"),\n            _ => panic!(\"Invalid\
    \ number\"),\n        }\n    }\n    sorted_numbers.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number: {}\", number),\n        })\n        .collect();\n \
    \   numbers.sort();\n    numbers\n        .iter()\n        .map(|number| match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", number),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|word| match word\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number!\"),\n        })\n        .collect();\n    numbers.sort();\n  \
    \  numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number!\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    num_vec.sort();\n   \
    \ num_vec\n        .iter()\n        .map(|num| match num {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u8> = Vec::new();\n    for number in numbers.split_whitespace() {\n    \
    \    match number {\n            \"zero\" => numbers_vec.push(0),\n          \
    \  \"one\" => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n\
    \            \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"Invalid\
    \ input\"),\n        }\n    }\n    numbers_vec.sort();\n    let mut result = String::new();\n\
    \    for number in numbers_vec {\n        match number {\n            0 => result.push_str(\"\
    zero \"),\n            1 => result.push_str(\"one \"),\n            2 => result.push_str(\"\
    two \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid input\"),\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", n),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\"\
    , num),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number string: {}\", s),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| numeral_to_number(numeral))\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|&number| number_to_numeral(number))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmp4g8vgx8c.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmp4g8vgx8c.rs:14:24\n\
    \   |\n14 |         .map(|&number| number_to_numeral(number))\n   |          \
    \              ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect();\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  match num {\n            \"zero\" => nums.push(0),\n            \"one\" =>\
    \ nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\" =>\
    \ nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\" =>\
    \ nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\" =>\
    \ nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => panic!(\"Invalid number\"),\n        }\n\
    \    }\n    nums.sort();\n    let mut result = String::new();\n    for num in\
    \ nums {\n        match num {\n            0 => result.push_str(\"zero \"),\n\
    \            1 => result.push_str(\"one \"),\n            2 => result.push_str(\"\
    two \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number\"),\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|number| match number {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n      \
    \  })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    let mut result = String::new();\n    for num in numbers {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid numeral\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = Vec::new();\n    for number in numbers.split_whitespace() {\n   \
    \     match number {\n            \"zero\" => sorted_numbers.push(0),\n      \
    \      \"one\" => sorted_numbers.push(1),\n            \"two\" => sorted_numbers.push(2),\n\
    \            \"three\" => sorted_numbers.push(3),\n            \"four\" => sorted_numbers.push(4),\n\
    \            \"five\" => sorted_numbers.push(5),\n            \"six\" => sorted_numbers.push(6),\n\
    \            \"seven\" => sorted_numbers.push(7),\n            \"eight\" => sorted_numbers.push(8),\n\
    \            \"nine\" => sorted_numbers.push(9),\n            _ => panic!(\"Invalid\
    \ input\"),\n        }\n    }\n    sorted_numbers.sort();\n    let mut sorted_numbers_string\
    \ = String::new();\n    for number in sorted_numbers {\n        match number {\n\
    \            0 => sorted_numbers_string.push_str(\"zero \"),\n            1 =>\
    \ sorted_numbers_string.push_str(\"one \"),\n            2 => sorted_numbers_string.push_str(\"\
    two \"),\n            3 => sorted_numbers_string.push_str(\"three \"),\n     \
    \       4 => sorted_numbers_string.push_str(\"four \"),\n            5 => sorted_numbers_string.push_str(\"\
    five \"),\n            6 => sorted_numbers_string.push_str(\"six \"),\n      \
    \      7 => sorted_numbers_string.push_str(\"seven \"),\n            8 => sorted_numbers_string.push_str(\"\
    eight \"),\n            9 => sorted_numbers_string.push_str(\"nine \"),\n    \
    \        _ => panic!(\"Invalid input\"),\n        }\n    }\n    sorted_numbers_string.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ numeral_to_number(a).cmp(&numeral_to_number(b)));\n    numbers.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmpe1r4ay4e.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| numeral_to_number(a).cmp(&numeral_to_number(b)));\n\
    \  |                            ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `numeral_to_number` in this scope\n --> /tmp/tmpe1r4ay4e.rs:8:54\n\
    \  |\n8 |     numbers.sort_by(|a, b| numeral_to_number(a).cmp(&numeral_to_number(b)));\n\
    \  |                                                      ^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n      \
    \  })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    let mut result = String::new();\n    for num in numbers {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid numeral\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number {}\", num),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number {}\", num),\n        });\n        result.push(' ');\n    }\n  \
    \  result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| numeral_to_number(numeral))\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|number| number_to_numeral(*number))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmp8a_ug2j2.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmp8a_ug2j2.rs:14:23\n\
    \   |\n14 |         .map(|number| number_to_numeral(*number))\n   |          \
    \             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input\"),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| numeral_to_number(numeral))\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|number| number_to_numeral(*number))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmpf00l2gla.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmpf00l2gla.rs:14:23\n\
    \   |\n14 |         .map(|number| number_to_numeral(*number))\n   |          \
    \             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmm4g4i15.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", n),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = match a {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number\"),\n        };\n        let b = match\
    \ b {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyv8my8a0.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| {\n\
    \            match numeral {\n                \"zero\" => 0,\n               \
    \ \"one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => panic!(\"Invalid\
    \ numeral\"),\n            }\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| {\n            match num {\n\
    \                0 => \"zero\",\n                1 => \"one\",\n             \
    \   2 => \"two\",\n                3 => \"three\",\n                4 => \"four\"\
    ,\n                5 => \"five\",\n                6 => \"six\",\n           \
    \     7 => \"seven\",\n                8 => \"eight\",\n                9 => \"\
    nine\",\n                _ => panic!(\"Invalid number\"),\n            }\n   \
    \     })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a_num = number_to_int(a);\n       \
    \ let b_num = number_to_int(b);\n        a_num.cmp(&b_num)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp7sy1tz8u.rs:9:21\n  |\n9 |         let a_num = number_to_int(a);\n \
    \ |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n  --> /tmp/tmp7sy1tz8u.rs:10:21\n\
    \   |\n10 |         let b_num = number_to_int(b);\n   |                     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = Vec::new();\n    for number in numbers.split_whitespace() {\n    \
    \    sorted_numbers.push(match number {\n            \"zero\" => 0,\n        \
    \    \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n \
    \           \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", number),\n     \
    \   });\n    }\n    sorted_numbers.sort();\n    let mut sorted_numbers_string\
    \ = String::new();\n    for number in sorted_numbers {\n        sorted_numbers_string.push_str(match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", number),\n        });\n        sorted_numbers_string.push('\
    \ ');\n    }\n    sorted_numbers_string.pop();\n    sorted_numbers_string\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = match a {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number: {}\", a),\n        };\n        let\
    \ b = match b {\n            \"zero\" => 0,\n            \"one\" => 1,\n     \
    \       \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Invalid number: {}\", b),\n        };\n        a.cmp(&b)\n   \
    \ });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcouvfel2.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcouvfel2.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcouvfel2.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcouvfel2.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  stdout: ''
  timestamp: 1660011080
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|number| match number {\n        \
    \    0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n  \
    \          3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for word in numbers.split_whitespace() {\n      \
    \  match word {\n            \"zero\" => nums.push(0),\n            \"one\" =>\
    \ nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\" =>\
    \ nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\" =>\
    \ nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\" =>\
    \ nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => panic!(\"Invalid input\"),\n        }\n \
    \   }\n    nums.sort();\n    let mut result = String::new();\n    for num in nums\
    \ {\n        match num {\n            0 => result.push_str(\"zero \"),\n     \
    \       1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two\
    \ \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid input\"),\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(number_to_u32(num));\n    }\n    nums.sort();\n    let mut result\
    \ = String::new();\n    for num in nums {\n        result.push_str(&u32_to_number(num));\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_u32` in this scope\n -->\
    \ /tmp/tmpkwteljtw.rs:9:19\n  |\n9 |         nums.push(number_to_u32(num));\n\
    \  |                   ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u32_to_number` in this scope\n  --> /tmp/tmpkwteljtw.rs:14:26\n\
    \   |\n14 |         result.push_str(&u32_to_number(num));\n   |              \
    \            ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|n| match n\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = match a {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number\"),\n        };\n        let b = match\
    \ b {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyv8my8a0.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyv8my8a0.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyv8my8a0.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpk4yf1gma.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpk4yf1gma.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ let numbers: Vec<String> = numbers\n        .iter()\n        .map(|num| match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .map(|num| String::from(num))\n      \
    \  .collect();\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| {\n       \
    \     match s {\n                \"zero\" => 0,\n                \"one\" => 1,\n\
    \                \"two\" => 2,\n                \"three\" => 3,\n            \
    \    \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => panic!(\"Invalid input\"),\n\
    \            }\n        })\n        .collect();\n    numbers.sort();\n    let\
    \ mut result = String::new();\n    for number in numbers {\n        match number\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral: {}\", numeral),\n        })\n        .collect();\n\
    \    numbers.sort();\n    numbers\n        .iter()\n        .map(|num| match num\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        })\n        .collect::<Vec<&str>>()\n   \
    \     .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|number| match number {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", n),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| numeral_to_number(numeral))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|number| number_to_numeral(*number))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmppxl8_r4u.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmppxl8_r4u.rs:14:23\n\
    \   |\n14 |         .map(|number| number_to_numeral(*number))\n   |          \
    \             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a_num = match a {\n            \"zero\" => 0,\n            \"\
    one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n        \
    \    \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n \
    \           \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => panic!(\"Invalid number: {}\", a),\n        };\n   \
    \     let b_num = match b {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", b),\n        };\n        a_num.cmp(&b_num)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq2dd644i.rs:10:13\n   |\n\
    9  |         let a_num = match a {\n   |                           - this expression\
    \ has type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpq2dd644i.rs:11:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n10 |           \
    \  \"zero\" => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpq2dd644i.rs:12:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n...\n12 |      \
    \       \"two\" => 2,\n   |             ^^^^^ expected `&str`, found `str`\n \
    \  |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq2dd644i.rs:13:13\n  \
    \ |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n13 |             \"three\" => 3,\n   |   \
    \          ^^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq2dd644i.rs:14:13\n   |\n9  |         let a_num = match\
    \ a {\n   |                           - this expression has type `&&str`\n...\n\
    14 |             \"four\" => 4,\n   |             ^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq2dd644i.rs:15:13\n\
    \   |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n15 |             \"five\" => 5,\n   |    \
    \         ^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n    "
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|num| match num {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n      \
    \  })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for num in numbers.split_whitespace() {\n       \
    \ match num {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmm4g4i15.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers_vec.sort();\n\
    \    let mut result = String::new();\n    for num in numbers_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|word| match word\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|n| match n {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid input\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n  \
    \      a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpouddvq15.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpouddvq15.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    let\
    \ nums_str: Vec<String> = nums\n        .iter()\n        .map(|num| match num\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .map(|num| String::from(num))\n      \
    \  .collect();\n    nums_str.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers_vec.sort();\n\
    \    numbers_vec\n        .iter()\n        .map(|num| match num {\n          \
    \  0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n    \
    \        3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = Vec::new();\n    for num in numbers.split_whitespace() {\n      \
    \  nums.push(match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        });\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n      \
    \  })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", s),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", n),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n   \
    \ numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpu_v6qgdx.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpu_v6qgdx.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011081
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    let\
    \ mut result = String::new();\n    for num in numbers {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011083
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011082
