language: rs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ &x| acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ &x| acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 101
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpah_23y3z.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 101
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpah_23y3z.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let sum = numbers.iter().fold(0, |acc,\
    \ x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    (numbers.iter().sum(), numbers.iter().product())\n\
    }\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
- exit_code: 0
  program: "/// For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n/// Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
    \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011885
