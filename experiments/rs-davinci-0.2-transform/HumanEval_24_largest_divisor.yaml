name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut i = n - 1;\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i;\n        }\n        i -= 1;\n    }\n    0", "    let mut\
    \ i = n - 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n\
    \        }\n        i -= 1;\n    }\n    return 0;", "    let mut i = n - 1;\n\
    \    while i > 0 {\n        if n % i == 0 {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;", "    let mut divisor = n - 1;\n    while\
    \ n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor", "    let mut\
    \ i = n - 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n\
    \        }\n        i -= 1;\n    }\n    return 0;", "    let mut i = n - 1;\n\
    \    while i > 0 {\n        if n % i == 0 {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;", "    let mut divisor = n - 1;\n    while\
    \ divisor > 0 {\n        if n % divisor == 0 {\n            return divisor;\n\
    \        }\n        divisor -= 1;\n    }\n    1", "    let mut i = n - 1;\n  \
    \  while i > 0 {\n        if n % i == 0 {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;", "    let mut divisor = n - 1;\n    while\
    \ n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor", "    let mut\
    \ divisor = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n\
    \    divisor", "    let mut divisor = n - 1;\n    while divisor > 0 {\n      \
    \  if n % divisor == 0 {\n            return divisor;\n        }\n        divisor\
    \ -= 1;\n    }\n    0", "    let mut divisor = n - 1;\n    while divisor > 0 {\n\
    \        if n % divisor == 0 {\n            return divisor;\n        }\n     \
    \   divisor -= 1;\n    }\n    return 0;", "    let mut divisor = n - 1;\n    while\
    \ n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor", "    let mut\
    \ divisor = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n \
    \           return divisor;\n        }\n        divisor -= 1;\n    }\n    return\
    \ 1;", "    for i in (1..n).rev() {\n        if n % i == 0 {\n            return\
    \ i;\n        }\n    }\n    return 1;", "    let mut i = n - 1;\n    while i >\
    \ 0 {\n        if n % i == 0 {\n            return i;\n        }\n        i -=\
    \ 1;\n    }\n    0", "    let mut i = n - 1;\n    while i > 0 {\n        if n\
    \ % i == 0 {\n            return i;\n        }\n        i -= 1;\n    }\n    return\
    \ 0;", "    let mut divisor = n - 1;\n    while n % divisor != 0 {\n        divisor\
    \ -= 1;\n    }\n    divisor", "    let mut divisor = n - 1;\n    while n % divisor\
    \ != 0 {\n        divisor -= 1;\n    }\n    divisor", "    let mut divisor = n\
    \ - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n            return\
    \ divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;"]
stop_tokens:
- "\n}"
