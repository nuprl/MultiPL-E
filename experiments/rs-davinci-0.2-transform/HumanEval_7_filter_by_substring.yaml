name: HumanEval_7_filter_by_substring
language: rs
prompt: "/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"),\
  \ String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings:\
  \ Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ['    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()']
stop_tokens:
- "\n}"
