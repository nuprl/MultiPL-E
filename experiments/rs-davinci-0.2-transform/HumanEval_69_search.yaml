name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for (k, v) in counts {\n        if k <= v {\n            return\
    \ k;\n        }\n    }\n    -1", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n       \
    \ if k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (i, count) in counts\
    \ {\n        if i <= count && i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut counter = HashMap::new();\n    for i in lst {\n      \
    \  let count = counter.entry(i).or_insert(0);\n        *count += 1;\n    }\n \
    \   let mut max = -1;\n    for (key, value) in counter {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut counter = HashMap::new();\n    for i in lst {\n        let count = counter.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counter\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n \
    \   for (k, v) in counts {\n        if k <= v && k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n    for i\
    \ in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (key, value) in freq {\n        if key\
    \ <= value && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(v) = freq.get(&i)\
    \ {\n            if *v >= i {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n \
    \   }\n    let mut max = -1;\n    for (key, val) in freq {\n        if key <=\
    \ val && key > max {\n            max = key;\n        }\n    }\n    max", "  \
    \  let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > result {\n            result = k;\n        }\n \
    \   }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max_count\
    \ = 0;\n    let mut max_val = 0;\n    for (val, count) in counts {\n        if\
    \ count >= val && count > max_count {\n            max_count = count;\n      \
    \      max_val = val;\n        }\n    }\n    if max_count == 0 {\n        -1\n\
    \    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in count {\n       \
    \ if key <= val && key > max {\n            max = key;\n        }\n    }\n   \
    \ max", "    let mut counts = HashMap::new();\n    for i in lst {\n        let\
    \ count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max {\n\
    \            max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut ans = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > ans {\n            ans = k;\n        }\n    }\n    ans", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut counts = HashMap::new();\n    for i in\
    \ lst {\n        let count = counts.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut counts = HashMap::new();\n    for &i\
    \ in &lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut result\
    \ = -1;\n    for (&k, &v) in &counts {\n        if k <= v && k > result {\n  \
    \          result = k;\n        }\n    }\n    result", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ v >= k && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(count) = counts.get(&i)\
    \ {\n            if *count >= i {\n                return i;\n            }\n\
    \        }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k > v {\n            continue;\n       \
    \ }\n        if k > max {\n            max = k;\n        }\n    }\n    max", " \
    \   let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n       \
    \ if k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > max {\n            max\
    \ = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if v >= k && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..lst.len() as isize + 1).rev() {\n        if freq.get(&i).unwrap_or(&0)\
    \ >= &i {\n            return i;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq: HashMap<isize, isize> = HashMap::new();\n    for num in lst {\n      \
    \  *freq.entry(num).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if *key <= *val && *key > max {\n     \
    \       max = *key;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (key, val) in freq {\n        if key <= val && key >\
    \ res {\n            res = key;\n        }\n    }\n    res", "    let mut m =\
    \ HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n\
    \    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <= v && k >\
    \ res {\n            res = k;\n        }\n    }\n    res", "    let mut counts\
    \ = HashMap::new();\n    for n in lst {\n        *counts.entry(n).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n      \
    \  if n <= count && n > max {\n            max = n;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ v >= k && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = HashMap::new();\n    for i in lst {\n        let c = m.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut v = Vec::new();\n    for (k, v) in m {\n\
    \        if k <= v {\n            v.push(k);\n        }\n    }\n    v.sort();\n\
    \    if v.len() == 0 {\n        return -1;\n    }\n    v[v.len() - 1]", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in\
    \ counts {\n        if key <= value && key > result {\n            result = key;\n\
    \        }\n    }\n    result", "    let mut counts = HashMap::new();\n    for\
    \ i in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > res {\n            res = k;\n        }\n    }\n    res", "   \
    \ let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut m = HashMap::new();\n    for i in lst\
    \ {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n  \
    \  for (k, v) in m {\n        if k <= v && k > max {\n            max = k;\n \
    \       }\n    }\n    max", "    let mut map = HashMap::new();\n    for i in lst\
    \ {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n  \
    \  }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <= v && k >\
    \ max {\n            max = k;\n        }\n    }\n    max", "    let mut freq =\
    \ HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <= v &&\
    \ k > res {\n            res = k;\n        }\n    }\n    res", "    let mut cnt\
    \ = HashMap::new();\n    for i in lst {\n        let entry = cnt.entry(i).or_insert(0);\n\
    \        *entry += 1;\n    }\n    let mut max = -1;\n    for (k, v) in cnt {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > max {\n            max\
    \ = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize, isize> =\
    \ HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > res {\n            res = key;\n        }\n\
    \    }\n    res", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        *freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut result = -1;\n    for (key, val) in counts\
    \ {\n        if key <= val && key > result {\n            result = key;\n    \
    \    }\n    }\n    result", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v &&\
    \ k > max {\n            max = k;\n        }\n    }\n    max", "    let mut freq:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k > v && k > max {\n            max = k;\n        }\n    }\n \
    \   max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ val >= key && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut cnt = HashMap::new();\n    for i in lst {\n        *cnt.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut ans = -1;\n    for (k, v) in cnt {\n        if k <=\
    \ v && k > ans {\n            ans = k;\n        }\n    }\n    ans", "    let mut\
    \ count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = 0;\n    for (k, v) in freq.iter() {\n        if *k <= *v && *k > max\
    \ {\n            max = *k;\n        }\n    }\n    if max == 0 {\n        return\
    \ -1;\n    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst\
    \ {\n        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut result = -1;\n    for (key, value) in counts {\n        if\
    \ key <= value && key > result {\n            result = key;\n        }\n    }\n\
    \    result", "    let mut counts = HashMap::new();\n    for i in lst {\n    \
    \    let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, value) in counts {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for &x in &lst {\n        *counts.entry(x).or_insert(0)\
    \ += 1;\n    }\n    for &x in &lst {\n        if x > 0 && x <= counts[&x] {\n\
    \            return x;\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n \
    \   for (k, v) in counts {\n        if k <= v && k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for\
    \ i in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts {\n    \
    \    if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut counts = HashMap::new();\n    for i in\
    \ lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max =\
    \ -1;\n    for (k, v) in counts {\n        if k > v && k > max {\n           \
    \ max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize, isize>\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut m = HashMap::new();\n    for i in lst {\n        let count = m.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in m {\n \
    \       if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        let c = count.entry(i).or_insert(0);\n\
    \        *c += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n \
    \       if k > v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (n, count) in\
    \ counts {\n        if n <= count && n > result {\n            result = n;\n \
    \       }\n    }\n    result", "    let mut counts = HashMap::new();\n    for\
    \ i in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts {\n    \
    \    if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut counts = HashMap::new();\n    for i in lst {\n       \
    \ let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (k, v) in counts {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for n in lst {\n        let count = counts.entry(n).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n\
    \        if count >= n && n > max {\n            max = n;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        let\
    \ count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max_freq = 0;\n    let mut max_val = 0;\n    for (val, freq) in freq {\n   \
    \     if val > max_val && freq >= val {\n            max_val = val;\n        \
    \    max_freq = freq;\n        }\n    }\n    if max_freq >= max_val {\n      \
    \  max_val\n    } else {\n        -1\n    }", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (i, count) in counts {\n\
    \        if i <= count && i > max {\n            max = i;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for num in lst {\n       \
    \ *freq.entry(num).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for (num,\
    \ freq) in freq {\n        if num > max && num <= freq {\n            max = num;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v &&\
    \ k > max {\n            max = k;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k > v\
    \ {\n            continue;\n        }\n        if k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n    for i\
    \ in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        let count = counts.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..freq.len()).rev() {\n        if freq[i] >= i\
    \ as isize {\n            return i as isize;\n        }\n    }\n    -1", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (k, v) in count {\n        if\
    \ k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = 0;\n    let mut max_freq_val = 0;\n   \
    \ for (k, v) in freq {\n        if v > max_freq {\n            max_freq = v;\n\
    \            max_freq_val = k;\n        }\n    }\n    if max_freq_val >= max_freq\
    \ {\n        max_freq_val\n    } else {\n        -1\n    }", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut max = -1;\n    let mut counts = HashMap::new();\n    for i in lst {\n  \
    \      if let Some(c) = counts.get_mut(&i) {\n            *c += 1;\n        }\
    \ else {\n            counts.insert(i, 1);\n        }\n    }\n    for (k, v) in\
    \ counts {\n        if k > 0 && k <= v && k > max {\n            max = k;\n  \
    \      }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in counts {\n        if k > v && k > max {\n         \
    \   max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ v >= k && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        *freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in counts\
    \ {\n        if key <= val && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k > max && k <= v {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        *freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = 0;\n\
    \    for (key, val) in freq {\n        if key > max && key <= val {\n        \
    \    max = key;\n        }\n    }\n    if max == 0 {\n        -1\n    } else {\n\
    \        max\n    }", "    let mut counts = HashMap::new();\n    for item in lst\
    \ {\n        *counts.entry(item).or_insert(0) += 1;\n    }\n    let mut max_val\
    \ = -1;\n    for (key, val) in counts {\n        if val >= key && key > max_val\
    \ {\n            max_val = key;\n        }\n    }\n    max_val", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_freq = 0;\n    let mut max_val =\
    \ 0;\n    for (key, val) in counts {\n        if val >= key && val > max_freq\
    \ {\n            max_freq = val;\n            max_val = key;\n        }\n    }\n\
    \    if max_freq == 0 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ > v {\n            continue;\n        }\n        if k > max {\n            max\
    \ = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for\
    \ num in lst {\n        *freq.entry(num).or_insert(0) += 1;\n    }\n    let mut\
    \ max = -1;\n    for (num, count) in freq {\n        if num > max && count >=\
    \ num {\n            max = num;\n        }\n    }\n    max", "    let mut freq:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i in\
    \ lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    for i in (1..).rev()\
    \ {\n        if let Some(count) = counts.get(&i) {\n            if *count >= i\
    \ {\n                return i;\n            }\n        }\n    }\n    -1", "  \
    \  let mut lst = lst;\n    lst.sort();\n    let mut prev = 0;\n    let mut count\
    \ = 0;\n    for i in lst {\n        if i == prev {\n            count += 1;\n\
    \        } else {\n            if count >= prev {\n                return prev;\n\
    \            }\n            prev = i;\n            count = 1;\n        }\n   \
    \ }\n    if count >= prev {\n        return prev;\n    }\n    -1", "    let mut\
    \ freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let\
    \ count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n      \
    \      max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut sorted_keys: Vec<isize> = counts.keys().map(|&k|\
    \ k).collect();\n    sorted_keys.sort();\n    for &k in sorted_keys.iter().rev()\
    \ {\n        if k <= counts[&k] {\n            return k;\n        }\n    }\n \
    \   -1", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i\
    \ in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if key\
    \ <= val && key > max {\n            max = key;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq {\n      \
    \  if value >= key && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut counter = HashMap::new();\n    for i in lst {\n      \
    \  let count = counter.entry(i).or_insert(0);\n        *count += 1;\n    }\n \
    \   let mut max = 0;\n    for (key, value) in counter {\n        if key > max\
    \ && key <= value {\n            max = key;\n        }\n    }\n    if max == 0\
    \ {\n        return -1;\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut count = HashMap::new();\n\
    \    for i in lst {\n        *count.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in count {\n        if k > v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n\
    \    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in m {\n        if k > v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for item in lst {\n        *counts.entry(item).or_insert(0) += 1;\n    }\n\
    \    let mut result = -1;\n    for (key, value) in counts {\n        if key <=\
    \ value && key > result {\n            result = key;\n        }\n    }\n    result",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if v >= k && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in counts {\n        if k > v && k > max {\n         \
    \   max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n \
    \       if key <= val && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for n in lst {\n        *freq.entry(n).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = 0;\n    let mut max_val = 0;\n    for (k,\
    \ v) in freq {\n        if v >= k && v > max_freq {\n            max_freq = v;\n\
    \            max_val = k;\n        }\n    }\n    if max_freq >= max_val {\n  \
    \      max_val\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counts\
    \ {\n        if key > max && value >= key {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      *freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k > v {\n            continue;\n        }\n   \
    \     if k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max_freq = 0;\n    let mut max_freq_num = 0;\n    for (num,\
    \ freq) in freq {\n        if num <= freq && freq > max_freq {\n            max_freq\
    \ = freq;\n            max_freq_num = num;\n        }\n    }\n    if max_freq_num\
    \ == 0 {\n        -1\n    } else {\n        max_freq_num\n    }", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if v >= k && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k > v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in\
    \ counts {\n        if key <= value && key > result {\n            result = key;\n\
    \        }\n    }\n    result", "    let mut counts = HashMap::new();\n    for\
    \ &x in &lst {\n        let count = counts.entry(x).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut result = -1;\n    for (&x, &count) in &counts {\n\
    \        if x <= count && x > result {\n            result = x;\n        }\n \
    \   }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, val) in freq {\n        if key <= val && key >\
    \ max {\n            max = key;\n        }\n    }\n    max", "    let mut counts\
    \ = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut map = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (key, value) in map {\n        if key <= value && key > max\
    \ {\n            max = key;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n\
    \    for i in lst {\n        let c = m.entry(i).or_insert(0);\n        *c += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in m {\n        if k <= v && k >\
    \ max {\n            max = k;\n        }\n    }\n    max", "    let mut freq =\
    \ HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for n in lst {\n        *freq.entry(n).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (n, f) in freq {\n        if f\
    \ >= n && n > max {\n            max = n;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if v >= k && k > max {\n            max = k;\n        }\n    }\n    max"]
stop_tokens:
- "\n}"
