name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for (k, v) in counts {\n        if k <= v {\n            return\
    \ k;\n        }\n    }\n    -1", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n       \
    \ if k <= v && k > result {\n            result = k;\n        }\n    }\n    result",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if v\
    \ >= k && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (i, count) in counts\
    \ {\n        if i <= count && i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut m = HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in m {\n        if k <=\
    \ v && k > res {\n            res = k;\n        }\n    }\n    res", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut counter = HashMap::new();\n    for i in lst {\n      \
    \  let count = counter.entry(i).or_insert(0);\n        *count += 1;\n    }\n \
    \   let mut max = -1;\n    for (key, value) in counter {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut counter = HashMap::new();\n    for i in lst {\n        let count = counter.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in counter\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n\
    \        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n \
    \   for (k, v) in counts {\n        if k <= v && k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut m = HashMap::new();\n    for i\
    \ in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (key, value) in freq {\n        if key\
    \ <= value && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..).rev() {\n        if let Some(v) = freq.get(&i)\
    \ {\n            if *v >= i {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n \
    \   }\n    let mut max = -1;\n    for (key, val) in freq {\n        if key <=\
    \ val && key > max {\n            max = key;\n        }\n    }\n    max", "  \
    \  let mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > result {\n            result = k;\n        }\n \
    \   }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max_count\
    \ = 0;\n    let mut max_val = 0;\n    for (val, count) in counts {\n        if\
    \ count >= val && count > max_count {\n            max_count = count;\n      \
    \      max_val = val;\n        }\n    }\n    if max_count == 0 {\n        -1\n\
    \    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res"]
stop_tokens:
- "\n}"
