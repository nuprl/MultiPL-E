name: HumanEval_77_iscube
language: rs
prompt: "/// Write a function that takes an integer a and returns True \n/// if this\
  \ ingeger is a cube of some integer number.\n/// Note: you may assume the input\
  \ is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>> iscube(2)\n\
  /// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n/// true\n/// >>> iscube(0)\n\
  /// true\n/// >>> iscube(180)\n/// false\nfn iscube(a: isize) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut i = 0;\n    while i * i * i < a {\n        i += 1;\n  \
    \  }\n    i * i * i == a", "    let mut i = 1;\n    while i * i * i < a {\n  \
    \      i += 1;\n    }\n    i * i * i == a", "    let mut i = 0;\n    while i *\
    \ i * i < a {\n        i += 1;\n    }\n    i * i * i == a", "    let mut i = 1;\n\
    \    while i * i * i <= a {\n        if i * i * i == a {\n            return true;\n\
    \        }\n        i += 1;\n    }\n    false", "    let mut i = 1;\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true;\n  \
    \      }\n        i += 1;\n    }\n    false", "    let mut i = 1;\n    while i\
    \ * i * i < a {\n        i += 1;\n    }\n    i * i * i == a", "    let mut i =\
    \ 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i == a",
  "    let mut i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i *\
    \ i * i == a", "    let mut i = 0;\n    while i * i * i <= a {\n        if i *\
    \ i * i == a {\n            return true;\n        }\n        i += 1;\n    }\n\
    \    false", "    let mut i = 0;\n    while i * i * i < a {\n        i += 1;\n\
    \    }\n    i * i * i == a", "    let mut i = 1;\n    while i * i * i <= a {\n\
    \        if i * i * i == a {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false", "    if a == 0 {\n        return true;\n    }\n    let\
    \ mut i = 1;\n    while i * i * i < a.abs() {\n        i += 1;\n    }\n    i *\
    \ i * i == a.abs()", "    let mut i = 0;\n    while i * i * i < a {\n        i\
    \ += 1;\n    }\n    i * i * i == a", "    if a == 0 {\n        return true;\n\
    \    }\n    let mut i = 1;\n    while i * i * i <= a.abs() {\n        if i * i\
    \ * i == a.abs() {\n            return true;\n        }\n        i += 1;\n   \
    \ }\n    false", "    if a < 0 {\n        return iscube(-a);\n    }\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false", "    let mut i\
    \ = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false", "    let mut i = 0;\n\
    \    while i * i * i <= a {\n        if i * i * i == a {\n            return true;\n\
    \        }\n        i += 1;\n    }\n    false", "    let mut i = 1;\n    while\
    \ i * i * i < a {\n        i += 1;\n    }\n    i * i * i == a", "    if a == 0\
    \ {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <= a.abs()\
    \ {\n        if i * i * i == a.abs() {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false", "    let mut i = 0;\n    while i * i * i\
    \ <= a {\n        if i * i * i == a {\n            return true;\n        }\n \
    \       i += 1;\n    }\n    false"]
stop_tokens:
- "\n}"
