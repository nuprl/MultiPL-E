name: HumanEval_159_eat
language: rs
prompt: "/// You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// >>> eat(5, 6, 10)\n/// vec![11, 4]\n/// >>> eat(4, 8, 9)\n/// vec![12, 1]\n\
  /// >>> eat(1, 10, 10)\n/// vec![11, 0]\n/// >>> eat(2, 11, 5)\n/// vec![7, 0]\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = vec![];\n    if number + remaining >= need {\n\
    \        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + need;\n    let mut left = remaining - need;\n    if left < 0 {\n\
    \        total += left;\n        left = 0;\n    }\n    vec![total, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    if number + remaining >= need {\n        result.push(number +\
    \ need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        result.push(need);\n        result.push(total - need);\n    } else {\n\
    \        result.push(total);\n        result.push(0);\n    }\n    result", " \
    \   let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut res = vec![];\n    let mut total\
    \ = number + remaining;\n    if total >= need {\n        res.push(need);\n   \
    \     res.push(total - need);\n    } else {\n        res.push(total);\n      \
    \  res.push(0);\n    }\n    res", "    let mut result = vec![];\n    let mut total_carrots\
    \ = number + remaining;\n    if total_carrots >= need {\n        result.push(need);\n\
    \        result.push(total_carrots - need);\n    } else {\n        result.push(total_carrots);\n\
    \        result.push(0);\n    }\n    result", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = number + remaining;\n\
    \    } else {\n        total = number + need;\n    }\n    vec![total, remaining\
    \ - need]", "    let mut res = vec![];\n    if number + remaining >= need {\n\
    \        res.push(number + need);\n        res.push(remaining - need);\n    }\
    \ else {\n        res.push(number + remaining);\n        res.push(0);\n    }\n\
    \    res", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ need > left {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut result = Vec::new();\n    let mut total = number + remaining;\n  \
    \  if total >= need {\n        total -= need;\n    } else {\n        total = 0;\n\
    \    }\n    result.push(number + remaining - total);\n    result.push(total);\n\
    \    result", "    let mut eaten = number;\n    let mut left = remaining;\n  \
    \  if left > need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut total = number + need;\n    let mut remaining = remaining - need;\n\
    \    if remaining < 0 {\n        total = total + remaining;\n        remaining\
    \ = 0;\n    }\n    vec![total, remaining]", "    let mut result = vec![];\n  \
    \  let mut total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    let mut total = number\
    \ + remaining;\n    if total >= need {\n        result.push(need);\n        result.push(total\
    \ - need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + need;\n    if total > remaining\
    \ {\n        total = remaining;\n    }\n    vec![total, remaining - total]", " \
    \   let mut result = Vec::new();\n    if remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }\n    result", "    let\
    \ mut total = number + remaining;\n    if total >= need {\n        total = need;\n\
    \    }\n    vec![total, remaining - (total - number)]", "    let mut result =\
    \ vec![];\n    if number + remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        total -= need;\n    } else {\n        total = 0;\n    }\n    result.push(number\
    \ + remaining - total);\n    result.push(total);\n    result", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        result.push(need);\n        result.push(total - need);\n    } else {\n\
    \        result.push(total);\n        result.push(0);\n    }\n    result", " \
    \   let mut total = number + need;\n    if total > remaining {\n        total\
    \ = remaining;\n    }\n    vec![total, remaining - total]", "    if number + need\
    \ > remaining {\n        vec![remaining, 0]\n    } else {\n        vec![number\
    \ + need, remaining - (number + need)]\n    }", "    let mut total = number +\
    \ need;\n    let mut left = 0;\n    if total > remaining {\n        total = remaining;\n\
    \        left = 0;\n    } else {\n        left = remaining - total;\n    }\n \
    \   vec![total, left]", "    let mut result = vec![];\n    if remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ result = vec![];\n    if number + remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }\n    result", "    let\
    \ mut result = vec![];\n    if number + remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut result = vec![];\n\
    \    if remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if remaining >= need {\n\
    \        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total <\
    \ need {\n        total = number + remaining;\n    } else {\n        total = number\
    \ + need;\n    }\n    vec![total, remaining - need]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > left {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > left {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![number + need, remaining - need];\n    if\
    \ result[1] < 0 {\n        result[1] = 0;\n        result[0] = number + remaining;\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if remaining >=\
    \ need {\n        eaten += need;\n        left -= need;\n    } else {\n      \
    \  eaten += remaining;\n        left = 0;\n    }\n    vec![eaten, left]", "  \
    \  let mut result = Vec::new();\n    let mut total = number + remaining;\n   \
    \ if total >= need {\n        result.push(need);\n        result.push(total -\
    \ need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = vec![];\n    let mut total = number + remaining;\n    if total\
    \ >= need {\n        result.push(need);\n        result.push(total - need);\n\
    \    } else {\n        result.push(total);\n        result.push(0);\n    }\n \
    \   result", "    let mut result = vec![];\n    if number + remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + need;\n    let mut left = remaining\
    \ - need;\n    if left < 0 {\n        total += left;\n        left = 0;\n    }\n\
    \    vec![total, left]", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![number + need, remaining - need];\n\
    \    if result[1] < 0 {\n        result[1] = 0;\n        result[0] = number +\
    \ remaining;\n    }\n    result", "    let mut total = number + remaining;\n \
    \   if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > left {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need <= remaining {\n     \
    \   eaten += need;\n        left -= need;\n    } else {\n        eaten += remaining;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut result = vec![];\n\
    \    if remaining < need {\n        result.push(number + remaining);\n       \
    \ result.push(0);\n    } else {\n        result.push(number + need);\n       \
    \ result.push(remaining - need);\n    }\n    result", "    let mut total = number\
    \ + need;\n    if total > remaining {\n        total = remaining;\n    }\n   \
    \ vec![total, remaining - total]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ need > left {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut total = number +\
    \ remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut total = number + remaining;\n \
    \   if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if need > left {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut total = number +\
    \ need;\n    if total > remaining {\n        total = remaining;\n    }\n    vec![total,\
    \ remaining - total]", "    let mut result = vec![];\n    if remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![];\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        result.push(need);\n        result.push(total\
    \ - need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![number + need, remaining - need];\n\
    \    if result[1] < 0 {\n        result[1] = 0;\n        result[0] = number +\
    \ remaining;\n    }\n    result", "    let mut result = Vec::new();\n    if remaining\
    \ < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result", "    let mut result = vec![];\n    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    result.push(eaten);\n    result.push(left);\n    result",
  "    let mut result = Vec::new();\n    if number + need <= remaining {\n       \
    \ result.push(number + need);\n        result.push(remaining - number - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = vec![number + need, remaining - need];\n    if result[1] <\
    \ 0 {\n        result[1] = 0;\n        result[0] = number + remaining;\n    }\n\
    \    result", "    let mut result = vec![];\n    if number + remaining < need\
    \ {\n        result.push(number + remaining);\n        result.push(0);\n    }\
    \ else {\n        result.push(number + need);\n        result.push(remaining -\
    \ need);\n    }\n    result", "    let mut total = number + need;\n    if total\
    \ > remaining {\n        total = remaining;\n    }\n    vec![total, remaining\
    \ - total]", "    if remaining >= need {\n        vec![number + need, remaining\
    \ - need]\n    } else {\n        vec![number + remaining, 0]\n    }", "    let\
    \ mut result = vec![number + need, remaining - need];\n    if result[1] < 0 {\n\
    \        result[1] = 0;\n        result[0] = number + remaining;\n    }\n    result",
  "    let mut total = number + need;\n    if total > remaining {\n        total =\
    \ remaining;\n    }\n    vec![total, remaining - total]", "    let mut result\
    \ = Vec::new();\n    let mut total_carrots = number + remaining;\n    if total_carrots\
    \ >= need {\n        result.push(need);\n        result.push(total_carrots - need);\n\
    \    } else {\n        result.push(total_carrots);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    if number + remaining >= need {\n        result.push(number +\
    \ need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    let mut total = number\
    \ + remaining;\n    if total < need {\n        result.push(total);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(total\
    \ - need);\n    }\n    result", "    let mut result = vec![];\n    let mut total\
    \ = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut result = vec![];\n\
    \    if number + remaining >= need {\n        result.push(number + need);\n  \
    \      result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut remaining = remaining;\n    let mut need = need;\n  \
    \  if remaining >= need {\n        eaten += need;\n        remaining -= need;\n\
    \    } else {\n        eaten += remaining;\n        remaining = 0;\n    }\n  \
    \  vec![eaten, remaining]", "    let mut total = number + remaining;\n    let\
    \ mut left = 0;\n    if total >= need {\n        total = need;\n        left =\
    \ remaining - (need - number);\n    }\n    vec![total, left]", "    let mut result\
    \ = vec![number + need, remaining - need];\n    if result[1] < 0 {\n        result[1]\
    \ = 0;\n        result[0] = number + remaining;\n    }\n    result", "    let\
    \ mut result = vec![];\n    let mut total = number + remaining;\n    if total\
    \ >= need {\n        result.push(need);\n        result.push(total - need);\n\
    \    } else {\n        result.push(total);\n        result.push(0);\n    }\n \
    \   result", "    let mut result = vec![];\n    if remaining >= need {\n     \
    \   result.push(number + need);\n        result.push(remaining - need);\n    }\
    \ else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut number = number;\n    let mut remaining = remaining;\n    if remaining\
    \ < need {\n        number += remaining;\n        remaining = 0;\n    } else {\n\
    \        number += need;\n        remaining -= need;\n    }\n    vec![number,\
    \ remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if left + eaten >= need {\n        eaten += need;\n        left -= need;\n\
    \    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        result.push(need);\n        result.push(total - need);\n    } else {\n\
    \        result.push(total);\n        result.push(0);\n    }\n    result", " \
    \   let mut result = vec![];\n    if number + remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }\n    result", "    let\
    \ mut total = number + remaining;\n    if total < need {\n        total = number\
    \ + remaining;\n    } else {\n        total = number + need;\n    }\n    vec![total,\
    \ remaining - need]", "    let mut result = vec![];\n    if remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut total = number + need;\n    if total > remaining {\n        total =\
    \ remaining;\n    }\n    vec![total, remaining - total]", "    let mut total_carrots\
    \ = number + remaining;\n    let mut carrots_left = 0;\n    if total_carrots >=\
    \ need {\n        total_carrots = need;\n        carrots_left = remaining - (need\
    \ - number);\n    }\n    vec![total_carrots, carrots_left]", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total < need {\n\
    \        result.push(total);\n        result.push(0);\n    } else {\n        result.push(need);\n\
    \        result.push(total - need);\n    }\n    result", "    let mut result =\
    \ vec![];\n    let mut total = number + remaining;\n    if total < need {\n  \
    \      result.push(total);\n        result.push(0);\n    } else {\n        result.push(need);\n\
    \        result.push(total - need);\n    }\n    result", "    let mut result =\
    \ vec![number + need, remaining - need];\n    if result[1] < 0 {\n        result[1]\
    \ = 0;\n        result[0] = number + remaining;\n    }\n    result", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if need > left {\n \
    \       eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = vec![];\n    if remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    }\n    result", "    let\
    \ mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut eaten = number;\n    let mut remain = remaining;\n  \
    \  if need > remaining {\n        eaten += remain;\n        remain = 0;\n    }\
    \ else {\n        eaten += need;\n        remain -= need;\n    }\n    result.push(eaten);\n\
    \    result.push(remain);\n    result", "    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]", "  \
    \  let mut eaten = number;\n    let mut left = remaining;\n    if remaining >=\
    \ need {\n        eaten += need;\n        left -= need;\n    } else {\n      \
    \  eaten += remaining;\n        left = 0;\n    }\n    vec![eaten, left]", "  \
    \  let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ total = number + remaining;\n    if total >= need {\n        total = need;\n\
    \    }\n    vec![total, remaining - (total - number)]", "    let mut result =\
    \ vec![];\n    if remaining >= need {\n        result.push(number + need);\n \
    \       result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut result = vec![];\n   \
    \ let mut total_eaten = number + remaining;\n    if total_eaten >= need {\n  \
    \      result.push(need);\n        result.push(total_eaten - need);\n    } else\
    \ {\n        result.push(total_eaten);\n        result.push(0);\n    }\n    result",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + need;\n    if total > remaining {\n        total = remaining;\n    }\n   \
    \ vec![total, remaining - total]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + need;\n    if total > remaining\
    \ {\n        total = remaining;\n    }\n    vec![total, remaining - total]", " \
    \   let mut result = Vec::new();\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut total = number +\
    \ need;\n    if total > remaining {\n        total = remaining;\n    }\n    vec![total,\
    \ remaining - total]", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if remaining >= need {\n\
    \        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut result = vec![];\n    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total -= need;\n    } else {\n        total = 0;\n    }\n\
    \    result.push(number + remaining - total);\n    result.push(total);\n    result",
  "    let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    if need > remaining {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    } else {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    }\n    result", "    let mut total\
    \ = number + need;\n    if total > remaining {\n        total = remaining;\n \
    \   }\n    vec![total, remaining - total]", "    let mut result = Vec::new();\n\
    \    if number + need <= remaining {\n        result.push(number + need);\n  \
    \      result.push(remaining - (number + need));\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut total = number + remaining;\n    if total >= need\
    \ {\n        result.push(need);\n        result.push(total - need);\n    } else\
    \ {\n        result.push(total);\n        result.push(0);\n    }\n    result",
  "    let mut result = vec![number + need, remaining - need];\n    if result[1] <\
    \ 0 {\n        result[1] = 0;\n        result[0] = number + remaining;\n    }\n\
    \    result", "    let total = number + need;\n    if total <= remaining {\n \
    \       vec![total, remaining - total]\n    } else {\n        vec![total - remaining,\
    \ 0]\n    }", "    let mut result = Vec::new();\n    let mut total = number +\
    \ remaining;\n    if total >= need {\n        total -= need;\n    } else {\n \
    \       total = 0;\n    }\n    result.push(number + remaining - total);\n    result.push(total);\n\
    \    result", "    let mut result = vec![];\n    if number + remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if number + remaining\
    \ < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(need);\n        result.push(remaining - (need\
    \ - number));\n    }\n    result", "    let mut result = vec![number + need, remaining\
    \ - need];\n    if result[1] < 0 {\n        result[1] = 0;\n        result[0]\
    \ = number + remaining;\n    }\n    result", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = number + remaining;\n\
    \    } else {\n        total = number + need;\n    }\n    vec![total, remaining\
    \ - need]", "    let mut result = vec![];\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        result.push(need);\n        result.push(total\
    \ - need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > left {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if left + eaten >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > left {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut result = vec![];\n    let mut total = number + remaining;\n    if\
    \ total >= need {\n        result.push(need);\n        result.push(total - need);\n\
    \    } else {\n        result.push(total);\n        result.push(0);\n    }\n \
    \   result", "    let mut eaten = number;\n    let mut left = remaining;\n   \
    \ if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut total = number + remaining;\n    if total < need {\n        total =\
    \ number + remaining;\n    } else {\n        total = number + need;\n    }\n \
    \   vec![total, remaining - need]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]", "    let mut result = Vec::new();\n    let mut total =\
    \ number + remaining;\n    if total >= need {\n        result.push(need);\n  \
    \      result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut result\
    \ = vec![];\n    if number + remaining >= need {\n        result.push(number +\
    \ need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    if remaining < need {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    } else {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    }\n    result", "    let mut result\
    \ = vec![];\n    if remaining < need {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    } else {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut number = number;\n\
    \    let mut remaining = remaining;\n    let mut need = need;\n    if number +\
    \ remaining >= need {\n        number += need;\n        remaining -= need;\n \
    \       need = 0;\n    } else {\n        number += remaining;\n        need -=\
    \ remaining;\n        remaining = 0;\n    }\n    vec![number, remaining]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = Vec::new();\n    if number + remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = vec![];\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need <= remaining {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += remaining;\n        left\
    \ = 0;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut result = vec![];\n    if number + remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![];\n    if remaining < need {\n\
    \        result.push(number + remaining);\n        result.push(0);\n    } else\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    }\n    result", "    let mut result = vec![];\n    let mut total = number\
    \ + remaining;\n    if total >= need {\n        result.push(need);\n        result.push(total\
    \ - need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut remaining = remaining;\n\
    \    if remaining >= need {\n        eaten += need;\n        remaining -= need;\n\
    \    } else {\n        eaten += remaining;\n        remaining = 0;\n    }\n  \
    \  vec![eaten, remaining]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut total = number + need;\n    let mut left = remaining\
    \ - need;\n    if left < 0 {\n        total += left;\n        left = 0;\n    }\n\
    \    vec![total, left]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut result = vec![];\n\
    \    let mut total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    if number + remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
