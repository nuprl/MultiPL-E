name: HumanEval_86_anti_shuffle
language: rs
prompt: "/// Write a function that takes a string and returns an ordered version of\
  \ it.\n/// Ordered version of string, is a string where all words (separated by\
  \ space)\n/// are replaced by a new word where all the characters arranged in\n\
  /// ascending order based on ascii value.\n/// Note: You should keep the order of\
  \ words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"\
  Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n\
  /// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"\
  ))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut res = String::new();\n    for word in s.split_whitespace()\
    \ {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        res.push_str(&chars.iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for c in chars {\n            result.push(c);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result",
  "    let mut res = String::new();\n    for word in s.split_whitespace() {\n    \
    \    let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        res.push_str(&chars.iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for c in chars {\n            result.push(c);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result",
  "    let mut result = String::new();\n    for word in s.split_whitespace() {\n \
    \       let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut res = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for c in chars {\n            res.push(c);\n \
    \       }\n        res.push(' ');\n    }\n    res.pop();\n    res", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ words: Vec<String> = Vec::new();\n    let mut word = String::new();\n    for\
    \ c in s.chars() {\n        if c == ' ' {\n            words.push(word);\n   \
    \         word = String::new();\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    words.push(word);\n    let mut result = String::new();\n\
    \    for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for c in chars {\n            result.push(c);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result",
  "    let mut result = String::new();\n    for word in s.split_whitespace() {\n \
    \       let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result", "    let mut result = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result"]
stop_tokens:
- "\n}"
