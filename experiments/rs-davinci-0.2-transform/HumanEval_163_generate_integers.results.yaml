language: rs
name: HumanEval_163_generate_integers
results:
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let start = if a < b { a } else { b };\n    let end = if a < b { b } else\
    \ { a };\n    for i in start..=end {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp58abgdb_.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut start, mut end) = (a, b);\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp415_f9f4.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end + 1 {\n        if i % 2\
    \ == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp_75z_2rm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut start, mut end) = (a, b);\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp415_f9f4.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut min, mut max) = (a, b);\n    if min > max {\n        std::mem::swap(&mut\
    \ min, &mut max);\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpol4pyr1l.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end + 1 {\n        if i % 2\
    \ == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp_75z_2rm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a.min(b);\n    let mut end = a.max(b);\n    while start <=\
    \ end {\n        if start % 2 == 0 {\n            result.push(start);\n      \
    \  }\n        start += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpax4wopey.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut min, mut max) = (a, b);\n    if min > max {\n        std::mem::swap(&mut\
    \ min, &mut max);\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpol4pyr1l.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = if a < b { a } else { b };\n    let mut end = if a > b {\
    \ a } else { b };\n    while start <= end {\n        if start % 2 == 0 {\n   \
    \         result.push(start);\n        }\n        start += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpthviewj_.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end + 1 {\n        if i % 2\
    \ == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp_75z_2rm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ for i in a..b + 1 {\n        if i % 2 == 0 {\n            v.push(i);\n     \
    \   }\n    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp1soo1ti6.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for n in start..=end {\n        if n % 2 ==\
    \ 0 {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdns_qyjx.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut start, mut end) = (a, b);\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp415_f9f4.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end + 1 {\n        if i % 2\
    \ == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp_75z_2rm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let start = if a < b { a } else { b };\n    let end = if a < b { b } else\
    \ { a };\n    for i in start..=end {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp58abgdb_.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = if a < b { a } else { b };\n    let mut end = if a > b {\
    \ a } else { b };\n    while start <= end {\n        if start % 2 == 0 {\n   \
    \         result.push(start);\n        }\n        start += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpthviewj_.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let start = if a < b { a } else { b };\n    let end = if a < b { b } else\
    \ { a };\n    for i in start..=end {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp58abgdb_.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpvot9fq7v.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    while i <= b {\n        if i % 2 == 0 {\n           \
    \ result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxgg7klg2.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end + 1 {\n        if i % 2\
    \ == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp_75z_2rm.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut start, mut end) = (a, b);\n    if a > b {\n        start = b;\n\
    \        end = a;\n    }\n    for i in start..=end {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpg9xs_l0q.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    while i <= b {\n        if i % 2 == 0 {\n           \
    \ result.push(i);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxgg7klg2.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    if a > b {\n        for i in (b..=a).rev() {\n            if i % 2 == 0 {\n\
    \                result.push(i);\n            }\n        }\n    } else {\n   \
    \     for i in a..=b {\n            if i % 2 == 0 {\n                result.push(i);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpcstgbed6.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a.min(b);\n    let mut end = a.max(b);\n    while start <=\
    \ end {\n        if start % 2 == 0 {\n            result.push(start);\n      \
    \  }\n        start += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpax4wopey.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut min, mut max) = (a, b);\n    if min > max {\n        std::mem::swap(&mut\
    \ min, &mut max);\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpol4pyr1l.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let (mut start, mut end) = (a, b);\n    if a > b {\n        start = b;\n\
    \        end = a;\n    }\n    for i in start..=end {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpg9xs_l0q.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v = Vec::<isize>::new();\n   \
    \ let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            v.push(i);\n        }\n        i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2,\
    \ 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp2e8gm831.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdblhibp5.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if start > end {\n        std::mem::swap(&mut\
    \ start, &mut end);\n    }\n    for i in start..=end {\n        if i % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpxls4c5od.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut i = a;\n    if a > b {\n        i = b;\n    }\n    while i <= b {\n\
    \        if i % 2 == 0 {\n            result.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = generate_integers;\n\
    \    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n\
    \    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkf0rbiph.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut min = a;\n    let mut max = b;\n    if a > b {\n        min = b;\n\
    \        max = a;\n    }\n    for i in min..=max {\n        if i % 2 == 0 {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2,\
    \ 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132,\
    \ 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpdb6vsju1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..end+1 {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmp617_s3rs.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 101
  program: "/// Given two positive integers a and b, return the even digits between\
    \ a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2,\
    \ 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6,\
    \ 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a:\
    \ isize, b: isize) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n\
    \    let mut start = a;\n    let mut end = b;\n    if a > b {\n        start =\
    \ b;\n        end = a;\n    }\n    for i in start..=end {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10),\
    \ vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n  \
    \  assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17,\
    \ 89), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 6, 8, 10]`,\n right: `[2, 4, 6, 8]`', /tmp/tmpkw35bzlw.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010349
