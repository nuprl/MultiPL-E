name: HumanEval_93_encode
language: rs
prompt: "/// Write a function that takes a message, and encodes in such a \n/// way\
  \ that it swaps case of all letters, replaces all vowels in \n/// the message with\
  \ the letter that appears 2 places ahead of that \n/// vowel in the english alphabet.\
  \ \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"\
  ))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"\
  ))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let c = match c {\n            'a' => 'c',\n            'e' => 'g',\n\
    \            'i' => 'k',\n            'o' => 'q',\n            'u' => 'w',\n \
    \           'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n  \
    \          'O' => 'Q',\n            'U' => 'W',\n            _ => c.to_ascii_uppercase(),\n\
    \        };\n        encoded.push(c);\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in\
    \ message.chars() {\n        if vowels.contains(&c) {\n            encoded.push((c\
    \ as u8 + 2) as char);\n        } else {\n            encoded.push(c);\n     \
    \   }\n    }\n    encoded", "    let mut encoded = String::new();\n    for c in\
    \ message.chars() {\n        let mut c = c;\n        if c.is_ascii_lowercase()\
    \ {\n            c = c.to_ascii_uppercase();\n        }\n        match c {\n \
    \           'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n\
    \            'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n\
    \            _ => encoded.push(c),\n        }\n    }\n    encoded", "    let mut\
    \ encoded_message = String::new();\n    let mut iter = message.chars();\n    while\
    \ let Some(c) = iter.next() {\n        if c.is_alphabetic() {\n            let\
    \ mut next_char = c;\n            if c.is_lowercase() {\n                next_char\
    \ = c.to_uppercase().next().unwrap();\n            }\n            match next_char\
    \ {\n                'A' => encoded_message.push('C'),\n                'E' =>\
    \ encoded_message.push('G'),\n                'I' => encoded_message.push('K'),\n\
    \                'O' => encoded_message.push('Q'),\n                'U' => encoded_message.push('S'),\n\
    \                'Y' => encoded_message.push('A'),\n                _ => encoded_message.push(next_char),\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut result = String::new();\n   \
    \ for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'y' {\n                c = 'b';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            result.push(c);\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_ascii_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'b';\n            } else if c == 'y' {\n                c = 'a';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \               c = ' ';\n            }\n            encoded.push(c);\n      \
    \  } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    let mut vowels = String::from(\"aeiou\"\
    );\n    for c in message.chars() {\n        if c.is_alphabetic() {\n         \
    \   if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(c) {\n      \
    \      vowels.push(c);\n            vowels.remove(0);\n            vowels.remove(0);\n\
    \            vowels.remove(0);\n        }\n    }\n    vowels.push_str(\"aeiou\"\
    );\n    let mut i = 0;\n    let mut encoded_vowels = String::new();\n    for c\
    \ in encoded.chars() {\n        if vowels.contains(c) {\n            encoded_vowels.push(vowels.chars().nth(i).unwrap());\n\
    \            i += 1;\n        } else {\n            encoded_vowels.push(c);\n\
    \        }\n    }\n    encoded_vowels", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_alphabetic() {\n      \
    \      if c.is_ascii_uppercase() {\n                encoded.push(c.to_ascii_lowercase());\n\
    \            } else {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded_message = String::new();\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        let mut\
    \ encoded_char = c;\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                encoded_char = c.to_uppercase().next().unwrap();\n      \
    \      } else {\n                encoded_char = c.to_lowercase().next().unwrap();\n\
    \            }\n            if vowels.contains(&encoded_char) {\n            \
    \    encoded_char = match encoded_char {\n                    'a' => 'c',\n  \
    \                  'e' => 'g',\n                    'i' => 'k',\n            \
    \        'o' => 'q',\n                    'u' => 'y',\n                    _ =>\
    \ encoded_char,\n                }\n            }\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            let mut c\
    \ = c.to_ascii_lowercase();\n            if c == 'z' {\n                c = 'a';\n\
    \            } else if c == 'y' {\n                c = 'b';\n            } else\
    \ {\n                c = (c as u8 + 2) as char;\n            }\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded_message.push(c);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut result = String::new();\n    let mut vowels = HashSet::new();\n   \
    \ vowels.insert('a');\n    vowels.insert('e');\n    vowels.insert('i');\n    vowels.insert('o');\n\
    \    vowels.insert('u');\n    vowels.insert('A');\n    vowels.insert('E');\n \
    \   vowels.insert('I');\n    vowels.insert('O');\n    vowels.insert('U');\n  \
    \  for c in message.chars() {\n        if vowels.contains(&c) {\n            result.push(match\
    \ c {\n                'a' => 'c',\n                'e' => 'g',\n            \
    \    'i' => 'k',\n                'o' => 'q',\n                'u' => 'y',\n \
    \               'A' => 'C',\n                'E' => 'G',\n                'I'\
    \ => 'K',\n                'O' => 'Q',\n                'U' => 'Y',\n        \
    \        _ => c,\n            });\n        } else {\n            result.push(match\
    \ c {\n                'A' => 'a',\n                'B' => 'b',\n            \
    \    'C' => 'c',\n                'D' => 'd',\n                'E' => 'e',\n \
    \               'F' => 'f',\n                'G' => 'g',\n                'H'\
    \ => 'h',\n                'I' => 'i',\n                'J' => 'j',\n        \
    \        'K' => 'k',\n                'L' => 'l',\n                'M' => 'm',\n\
    \                'N' => 'n',\n                'O' => 'o',\n                'P'\
    \ => 'p',\n                'Q' => 'q',\n                'R' => 'r',\n        \
    \        'S' => 's',\n                'T' => 't',\n                'U' => 'u',\n\
    \                'V' => 'v',\n                'W' => 'w',\n                'X'\
    \ => 'x',\n                'Y' => 'y',\n                'Z' => 'z',\n        \
    \        _ => c,\n            });\n        }\n    }\n    result", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_lowercase()\
    \ {\n                c = c.to_ascii_uppercase();\n            } else {\n     \
    \           c = c.to_ascii_lowercase();\n            }\n            if c == 'a'\
    \ {\n                c = 'c';\n            } else if c == 'e' {\n            \
    \    c = 'g';\n            } else if c == 'i' {\n                c = 'k';\n  \
    \          } else if c == 'o' {\n                c = 'q';\n            } else\
    \ if c == 'u' {\n                c = 'y';\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            if c.is_lowercase() {\n       \
    \         encoded.push(c.to_ascii_uppercase());\n            } else {\n      \
    \          encoded.push(c);\n            }\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let mut\
    \ c = c.to_ascii_lowercase();\n            if c == 'z' {\n                c =\
    \ 'a';\n            } else if c == 'y' {\n                c = 'b';\n         \
    \   } else {\n                c = (c as u8 + 2) as char;\n            }\n    \
    \        encoded.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ c = if c.is_lowercase() {\n                c.to_uppercase()\n            } else\
    \ {\n                c.to_lowercase()\n            };\n            encoded.push(match\
    \ c {\n                'A' => 'C',\n                'E' => 'G',\n            \
    \    'I' => 'K',\n                'O' => 'Q',\n                'U' => 'W',\n \
    \               'Y' => 'A',\n                _ => c,\n            });\n      \
    \  } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n        if vowels.contains(&c.to_ascii_lowercase())\
    \ {\n            encoded.push(c.to_ascii_lowercase().wrapping_add(2));\n     \
    \   }\n    }\n    encoded", "    let mut encoded = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_alphabetic() {\n            encoded.push(match\
    \ c {\n                'a' => 'c',\n                'e' => 'g',\n            \
    \    'i' => 'k',\n                'o' => 'q',\n                'u' => 'w',\n \
    \               'A' => 'C',\n                'E' => 'G',\n                'I'\
    \ => 'K',\n                'O' => 'Q',\n                'U' => 'W',\n        \
    \        _ => c.to_ascii_uppercase(),\n            });\n        }\n    }\n   \
    \ encoded"]
stop_tokens:
- "\n}"
