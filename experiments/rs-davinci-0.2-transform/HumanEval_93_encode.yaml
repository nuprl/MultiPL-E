name: HumanEval_93_encode
language: rs
prompt: "/// Write a function that takes a message, and encodes in such a \n/// way\
  \ that it swaps case of all letters, replaces all vowels in \n/// the message with\
  \ the letter that appears 2 places ahead of that \n/// vowel in the english alphabet.\
  \ \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"\
  ))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"\
  ))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
  TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
  )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")),\
  \ String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\"\
  )), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
  I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    let mut encoded_message = String::new();\n    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ if c.is_ascii_lowercase() {\n            if vowels.contains(&c) {\n        \
    \        let mut index = vowels.iter().position(|&v| v == c).unwrap();\n     \
    \           index += 2;\n                if index > 4 {\n                    index\
    \ -= 5;\n                }\n                encoded_message.push(vowels[index]);\n\
    \            } else {\n                encoded_message.push(c);\n            }\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'x' {\n                c = 'c';\n     \
    \       } else if c == 'y' {\n                c = 'd';\n            } else {\n\
    \                c = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            let mut encoded_char\
    \ = c.to_ascii_uppercase();\n            if encoded_char.is_ascii_lowercase()\
    \ {\n                encoded_char = encoded_char.to_ascii_uppercase();\n     \
    \       } else {\n                encoded_char = encoded_char.to_ascii_lowercase();\n\
    \            }\n            if encoded_char.is_ascii_lowercase() {\n         \
    \       encoded_char = encoded_char.to_ascii_uppercase();\n            } else\
    \ {\n                encoded_char = encoded_char.to_ascii_lowercase();\n     \
    \       }\n            encoded_message.push(encoded_char);\n        } else {\n\
    \            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            if c.is_lowercase() {\n                let\
    \ c = c.to_uppercase().next().unwrap();\n                encoded.push(match c\
    \ {\n                    'A' => 'C',\n                    'E' => 'G',\n      \
    \              'I' => 'K',\n                    'O' => 'Q',\n                \
    \    'U' => 'S',\n                    _ => c.wrapping_add(2),\n              \
    \  });\n            } else {\n                encoded.push(match c {\n       \
    \             'A' => 'C',\n                    'E' => 'G',\n                 \
    \   'I' => 'K',\n                    'O' => 'Q',\n                    'U' => 'S',\n\
    \                    _ => c.wrapping_add(2),\n                });\n          \
    \  }\n        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n           \
    \     c.to_lowercase().next().unwrap()\n            } else {\n               \
    \ c\n            };\n            let c = match c {\n                'a' => 'c',\n\
    \                'e' => 'g',\n                'i' => 'k',\n                'o'\
    \ => 'q',\n                'u' => 'y',\n                _ => c,\n            };\n\
    \            encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'a';\n            } else if c == 'y' {\n            \
    \    c = 'b';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            if c.is_vowel() {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            } else {\n                encoded.push(c);\n            }\n     \
    \   } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded_message.push(c);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_lowercase()\
    \ {\n                c = c.to_ascii_uppercase();\n            } else {\n     \
    \           c = c.to_ascii_lowercase();\n            }\n            if vowels.contains(&c)\
    \ {\n                let mut c = c as u8;\n                c += 2;\n         \
    \       if c > b'u' {\n                    c -= 5;\n                }\n      \
    \          encoded.push(c as char);\n            } else {\n                encoded.push(c);\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded_message.push(c.to_ascii_uppercase());\n        } else\
    \ if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if vowels.contains(&c) {\n    \
    \        encoded_message.push(c);\n        }\n    }\n    encoded_message", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ let new_char = match c {\n            'a' => 'c',\n            'e' => 'g',\n\
    \            'i' => 'k',\n            'o' => 'q',\n            'u' => 'w',\n \
    \           'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n  \
    \          'O' => 'Q',\n            'U' => 'W',\n            _ => c.to_ascii_uppercase(),\n\
    \        };\n        encoded.push(new_char);\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        let c = match c {\n\
    \            'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n \
    \           'o' => 'q',\n            'u' => 'y',\n            'A' => 'C',\n  \
    \          'E' => 'G',\n            'I' => 'K',\n            'O' => 'Q',\n   \
    \         'U' => 'Y',\n            _ => c.to_ascii_uppercase(),\n        };\n\
    \        encoded.push(c);\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'y' {\n                c = 'b';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n\
    \        if vowels.contains(&c) {\n            let index = vowels.iter().position(|&x|\
    \ x == c).unwrap();\n            encoded_message.push(vowels[(index + 2) % vowels.len()]);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    result",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       c = match c {\n                'a' => 'c',\n                'e' => 'g',\n\
    \                'i' => 'k',\n                'o' => 'q',\n                'u'\
    \ => 'y',\n                _ => c,\n            };\n            if c.is_lowercase()\
    \ {\n                c = c.to_ascii_uppercase();\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_alphabetic() {\n      \
    \      let c = if c.is_ascii_uppercase() {\n                c.to_ascii_lowercase()\n\
    \            } else {\n                c.to_ascii_uppercase()\n            };\n\
    \            let c = match c {\n                'a' => 'c',\n                'e'\
    \ => 'g',\n                'i' => 'k',\n                'o' => 'q',\n        \
    \        'u' => 'y',\n                _ => c,\n            };\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        encoded.push(match\
    \ c {\n            'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n\
    \            'o' => 'q',\n            'u' => 'w',\n            'A' => 'C',\n \
    \           'E' => 'G',\n            'I' => 'K',\n            'O' => 'Q',\n  \
    \          'U' => 'W',\n            _ => c.to_ascii_uppercase(),\n        });\n\
    \    }\n    encoded", "    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            if c.is_uppercase()\
    \ {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded = String::new();\n  \
    \  let mut iter = message.chars();\n    while let Some(c) = iter.next() {\n  \
    \      if c.is_ascii_alphabetic() {\n            let mut shifted = c.to_ascii_lowercase();\n\
    \            if shifted == 'a' {\n                shifted = 'c';\n           \
    \ } else if shifted == 'e' {\n                shifted = 'g';\n            } else\
    \ if shifted == 'i' {\n                shifted = 'k';\n            } else if shifted\
    \ == 'o' {\n                shifted = 'q';\n            } else if shifted == 'u'\
    \ {\n                shifted = 'w';\n            } else {\n                shifted\
    \ = ((shifted as u8) + 2) as char;\n            }\n            if c.is_ascii_uppercase()\
    \ {\n                encoded.push(shifted.to_ascii_uppercase());\n           \
    \ } else {\n                encoded.push(shifted);\n            }\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'a';\n            } else if c == 'y' {\n            \
    \    c = 'b';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c_encoded = c.to_ascii_uppercase();\n            if c_encoded.is_ascii_uppercase()\
    \ {\n                c_encoded = c_encoded.to_ascii_lowercase();\n           \
    \ } else {\n                c_encoded = c_encoded.to_ascii_uppercase();\n    \
    \        }\n            if c_encoded == 'a' {\n                c_encoded = 'c';\n\
    \            } else if c_encoded == 'e' {\n                c_encoded = 'g';\n\
    \            } else if c_encoded == 'i' {\n                c_encoded = 'k';\n\
    \            } else if c_encoded == 'o' {\n                c_encoded = 'q';\n\
    \            } else if c_encoded == 'u' {\n                c_encoded = 'w';\n\
    \            }\n            encoded_message.push(c_encoded);\n        } else {\n\
    \            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded_message.push(c);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n     \
    \           encoded.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_lowercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded", "    let mut encoded_message = String::new();\n    let mut chars\
    \ = message.chars();\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = ((c as u8) + 2) as char;\n\
    \            }\n            encoded_message.push(c);\n        } else {\n     \
    \       encoded_message.push(c);\n        }\n    }\n    encoded_message", "  \
    \  let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ c = match c {\n            'a' => 'c',\n            'e' => 'g',\n          \
    \  'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n           \
    \ 'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n            'O'\
    \ => 'Q',\n            'U' => 'Y',\n            _ => c,\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            if c.is_ascii_uppercase() {\n                encoded.push(c.to_ascii_lowercase());\n\
    \            } else {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for (i, c) in encoded.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let mut new_c = c;\n            for _ in 0..2 {\n           \
    \     new_c = match new_c {\n                    'a' => 'c',\n               \
    \     'e' => 'g',\n                    'i' => 'k',\n                    'o' =>\
    \ 'q',\n                    'u' => 'y',\n                    _ => new_c,\n   \
    \             }\n            }\n            encoded.replace_range(i..i+1, &new_c.to_string());\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_lowercase() {\n         \
    \       if vowels.contains(&c) {\n                    encoded_message.push((c\
    \ as u8 + 2) as char);\n                } else {\n                    encoded_message.push((c\
    \ as u8 + 32) as char);\n                }\n            } else {\n           \
    \     if vowels.contains(&c.to_lowercase().next().unwrap()) {\n              \
    \      encoded_message.push((c as u8 + 2) as char);\n                } else {\n\
    \                    encoded_message.push((c as u8 - 32) as char);\n         \
    \       }\n            }\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n           \
    \     c.to_lowercase().next().unwrap()\n            } else {\n               \
    \ c\n            };\n            let c = match c {\n                'a' => 'c',\n\
    \                'e' => 'g',\n                'i' => 'k',\n                'o'\
    \ => 'q',\n                'u' => 'y',\n                _ => c,\n            };\n\
    \            encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded_message\
    \ = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in\
    \ message.chars() {\n        if vowels.contains(&c) {\n            let mut new_char\
    \ = c as u8 + 2;\n            if new_char > 'u' as u8 {\n                new_char\
    \ = new_char - 26;\n            }\n            encoded_message.push(new_char as\
    \ char);\n        } else {\n            encoded_message.push(c);\n        }\n\
    \    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut new_char = c.to_ascii_lowercase();\n            if new_char.is_ascii_lowercase()\
    \ {\n                new_char = new_char.to_ascii_uppercase();\n            }\
    \ else {\n                new_char = new_char.to_ascii_lowercase();\n        \
    \    }\n            if new_char == 'a' {\n                new_char = 'c';\n  \
    \          } else if new_char == 'e' {\n                new_char = 'g';\n    \
    \        } else if new_char == 'i' {\n                new_char = 'k';\n      \
    \      } else if new_char == 'o' {\n                new_char = 'q';\n        \
    \    } else if new_char == 'u' {\n                new_char = 'y';\n          \
    \  }\n            encoded_message.push(new_char);\n        } else {\n        \
    \    encoded_message.push(c);\n        }\n    }\n    encoded_message", "    let\
    \ mut encoded = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_lowercase()\
    \ {\n                c = c.to_ascii_uppercase();\n            } else {\n     \
    \           c = c.to_ascii_lowercase();\n            }\n            match c {\n\
    \                'a' => encoded.push('C'),\n                'e' => encoded.push('G'),\n\
    \                'i' => encoded.push('K'),\n                'o' => encoded.push('M'),\n\
    \                'u' => encoded.push('Q'),\n                _ => encoded.push(c),\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            c = match c {\n                'a' => 'c',\n                'e' =>\
    \ 'g',\n                'i' => 'k',\n                'o' => 'q',\n           \
    \     'u' => 'y',\n                _ => c,\n            };\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    let mut chars = message.chars();\n    while let Some(c) = chars.next() {\n\
    \        let mut c = c;\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                c = c.to_uppercase().next().unwrap();\n            }\n  \
    \          match c {\n                'A' => c = 'C',\n                'E' =>\
    \ c = 'G',\n                'I' => c = 'K',\n                'O' => c = 'Q',\n\
    \                'U' => c = 'S',\n                'Y' => c = 'A',\n          \
    \      _ => {}\n            }\n        }\n        encoded_message.push(c);\n \
    \   }\n    encoded_message", "    let mut encoded = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            let mut c\
    \ = c.to_ascii_lowercase();\n            if c == 'z' {\n                c = 'a';\n\
    \            } else if c == 'y' {\n                c = 'b';\n            } else\
    \ {\n                c = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ mut c = c;\n        if c.is_ascii_lowercase() {\n            c = c.to_ascii_uppercase();\n\
    \        }\n        if c.is_ascii_uppercase() {\n            c = c.to_ascii_lowercase();\n\
    \        }\n        match c {\n            'a' => encoded.push('c'),\n       \
    \     'e' => encoded.push('g'),\n            'i' => encoded.push('k'),\n     \
    \       'o' => encoded.push('q'),\n            'u' => encoded.push('s'),\n   \
    \         'y' => encoded.push('a'),\n            _ => encoded.push(c),\n     \
    \   }\n    }\n    encoded", "    let mut encoded_message = String::new();\n  \
    \  for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'b';\n            } else if c == 'y' {\n                c = 'a';\n     \
    \       } else {\n                c = ((c as u8) + 2) as char;\n            }\n\
    \            encoded_message.push(c);\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            encoded.push(encode_char(c));\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'x' {\n                c = 'c';\n            } else if c == 'y' {\n     \
    \           c = 'd';\n            } else {\n                c = (c as u8 + 2)\
    \ as char;\n            }\n            encoded.push(c);\n        } else {\n  \
    \          encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = ((c as u8) + 2) as char;\n\
    \            }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded_message.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        let c = if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        };\n        let\
    \ c = match c {\n            'a' => 'c',\n            'e' => 'g',\n          \
    \  'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n           \
    \ _ => c,\n        };\n        encoded_message.push(c);\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            } else {\n                encoded.push(c);\n            }\n     \
    \   } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    let mut message_chars = message.chars();\n\
    \    while let Some(c) = message_chars.next() {\n        let mut encoded_char\
    \ = c;\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n  \
    \              encoded_char = c.to_lowercase().next().unwrap();\n            }\
    \ else {\n                encoded_char = c.to_uppercase().next().unwrap();\n \
    \           }\n            if encoded_char == 'a' {\n                encoded_char\
    \ = 'c';\n            } else if encoded_char == 'e' {\n                encoded_char\
    \ = 'g';\n            } else if encoded_char == 'i' {\n                encoded_char\
    \ = 'k';\n            } else if encoded_char == 'o' {\n                encoded_char\
    \ = 'q';\n            } else if encoded_char == 'u' {\n                encoded_char\
    \ = 'y';\n            }\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_ascii_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'b';\n            } else if c == 'y' {\n                c = 'a';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            encoded_message.push(match\
    \ c {\n                'a' => 'c',\n                'e' => 'g',\n            \
    \    'i' => 'k',\n                'o' => 'q',\n                'u' => 'y',\n \
    \               'A' => 'C',\n                'E' => 'G',\n                'I'\
    \ => 'K',\n                'O' => 'Q',\n                'U' => 'Y',\n        \
    \        _ => c.to_ascii_uppercase(),\n            });\n        }\n    }\n   \
    \ encoded_message", "    let mut encoded_message = String::new();\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                if vowels.contains(&c)\
    \ {\n                    encoded_message.push((c as u8 + 2) as char);\n      \
    \          } else {\n                    encoded_message.push((c as u8 + 32) as\
    \ char);\n                }\n            } else {\n                if vowels.contains(&c.to_lowercase().to_string().chars().next().unwrap())\
    \ {\n                    encoded_message.push((c as u8 + 2) as char);\n      \
    \          } else {\n                    encoded_message.push((c as u8 - 32) as\
    \ char);\n                }\n            }\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_uppercase() {\n       \
    \     encoded_message.push(c.to_ascii_lowercase());\n        } else if c.is_ascii_lowercase()\
    \ {\n            encoded_message.push(c.to_ascii_uppercase());\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ let mut c = c;\n        if c.is_ascii_lowercase() {\n            c = c.to_ascii_uppercase();\n\
    \        }\n        match c {\n            'A' => encoded.push('C'),\n       \
    \     'E' => encoded.push('G'),\n            'I' => encoded.push('K'),\n     \
    \       'O' => encoded.push('Q'),\n            'U' => encoded.push('S'),\n   \
    \         'Y' => encoded.push('A'),\n            _ => encoded.push(c),\n     \
    \   }\n    }\n    encoded", "    let mut encoded = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ if c.is_alphabetic() {\n            if c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut char_to_add = c;\n        if c.is_alphabetic() {\n      \
    \      let mut char_to_add = c.to_ascii_uppercase();\n            if char_to_add.is_ascii_lowercase()\
    \ {\n                char_to_add = char_to_add.to_ascii_uppercase();\n       \
    \     }\n            if char_to_add.is_ascii_uppercase() {\n                char_to_add\
    \ = char_to_add.to_ascii_lowercase();\n            }\n            if char_to_add\
    \ == 'A' {\n                char_to_add = 'C';\n            } else if char_to_add\
    \ == 'E' {\n                char_to_add = 'G';\n            } else if char_to_add\
    \ == 'I' {\n                char_to_add = 'K';\n            } else if char_to_add\
    \ == 'O' {\n                char_to_add = 'Q';\n            } else if char_to_add\
    \ == 'U' {\n                char_to_add = 'S';\n            }\n        }\n   \
    \     encoded.push(char_to_add);\n    }\n    encoded", "    let mut encoded_message\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            encoded_message.push(c);\n        } else {\n     \
    \       encoded_message.push(c);\n        }\n    }\n    encoded_message", "  \
    \  let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut new_char = c.to_ascii_uppercase();\n\
    \            if new_char.is_ascii_lowercase() {\n                new_char = new_char.to_ascii_uppercase();\n\
    \            }\n            if new_char.is_ascii_uppercase() {\n             \
    \   new_char = new_char.to_ascii_lowercase();\n            }\n            encoded.push(new_char);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            encoded.push(match c {\n                'a'\
    \ => 'c',\n                'e' => 'g',\n                'i' => 'k',\n        \
    \        'o' => 'q',\n                'u' => 'w',\n                'A' => 'C',\n\
    \                'E' => 'G',\n                'I' => 'K',\n                'O'\
    \ => 'Q',\n                'U' => 'W',\n                _ => c.to_ascii_uppercase()\n\
    \            });\n        } else {\n            encoded.push(c);\n        }\n\
    \    }\n    encoded", "    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        let mut encoded_char = c;\n        if c.is_alphabetic()\
    \ {\n            encoded_char = match c {\n                'a' => 'c',\n     \
    \           'e' => 'g',\n                'i' => 'k',\n                'o' => 'q',\n\
    \                'u' => 'y',\n                _ => c,\n            };\n      \
    \      encoded_char = match encoded_char.is_uppercase() {\n                true\
    \ => encoded_char.to_lowercase().next().unwrap(),\n                false => encoded_char.to_uppercase().next().unwrap(),\n\
    \            };\n        }\n        encoded_message.push(encoded_char);\n    }\n\
    \    encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded", "    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut x = c.to_ascii_lowercase();\n\
    \            if x.is_ascii_lowercase() {\n                x = x.to_ascii_uppercase();\n\
    \            } else {\n                x = x.to_ascii_lowercase();\n         \
    \   }\n            match x {\n                'A' => encoded_message.push('C'),\n\
    \                'E' => encoded_message.push('G'),\n                'I' => encoded_message.push('K'),\n\
    \                'O' => encoded_message.push('Q'),\n                'U' => encoded_message.push('S'),\n\
    \                _ => encoded_message.push(x),\n            }\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        let c_lower = c.to_lowercase().to_string();\n        if c_lower == \"\
    a\" {\n            encoded_message.push_str(\"c\");\n        } else if c_lower\
    \ == \"e\" {\n            encoded_message.push_str(\"g\");\n        } else if\
    \ c_lower == \"i\" {\n            encoded_message.push_str(\"k\");\n        }\
    \ else if c_lower == \"o\" {\n            encoded_message.push_str(\"q\");\n \
    \       } else if c_lower == \"u\" {\n            encoded_message.push_str(\"\
    s\");\n        } else if c_lower == \"y\" {\n            encoded_message.push_str(\"\
    a\");\n        } else if c_lower == \"z\" {\n            encoded_message.push_str(\"\
    b\");\n        } else if c_lower == \" \" {\n            encoded_message.push_str(\"\
    \ \");\n        } else {\n            encoded_message.push_str(&(c_lower.chars().next().unwrap()\
    \ as u8 + 2) as char);\n        }\n    }\n    encoded_message", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        let c = match c {\n\
    \            'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n \
    \           'o' => 'q',\n            'u' => 'y',\n            'A' => 'C',\n  \
    \          'E' => 'G',\n            'I' => 'K',\n            'O' => 'Q',\n   \
    \         'U' => 'Y',\n            _ => c,\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_alphabetic() {\n            if c.is_ascii_uppercase()\
    \ {\n                encoded.push(c.to_ascii_lowercase());\n            } else\
    \ {\n                encoded.push(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_alphabetic() {\n            let c_lower = c.to_ascii_lowercase();\n\
    \            if c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower\
    \ == 'o' || c_lower == 'u' {\n                encoded.push((c_lower as u8 + 2)\
    \ as char);\n            } else {\n                encoded.push(c);\n        \
    \    }\n        } else {\n            encoded.push(c);\n        }\n    }\n   \
    \ encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(&c) {\n     \
    \       encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_alphabetic() {\n            if c.is_ascii_uppercase()\
    \ {\n                encoded.push(c.to_ascii_lowercase());\n            } else\
    \ {\n                encoded.push(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        let mut encoded_char = c;\n        if\
    \ c.is_alphabetic() {\n            encoded_char = match c {\n                'a'\
    \ => 'c',\n                'e' => 'g',\n                'i' => 'k',\n        \
    \        'o' => 'q',\n                'u' => 'y',\n                _ => c,\n \
    \           };\n            if encoded_char.is_lowercase() {\n               \
    \ encoded_char = encoded_char.to_uppercase().next().unwrap();\n            } else\
    \ {\n                encoded_char = encoded_char.to_lowercase().next().unwrap();\n\
    \            }\n        }\n        encoded_message.push(encoded_char);\n    }\n\
    \    encoded_message", "    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \               c = ((c as u8) + 2) as char;\n            }\n            result.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    result", "    let mut encoded = String::new();\n    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n  \
    \      if vowels.contains(&c) {\n            encoded.push((c as u8 + 2) as char);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_lowercase() {\n         \
    \       encoded_message.push(c.to_uppercase().next().unwrap());\n            }\
    \ else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded = String::new();\n  \
    \  for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'y' {\n                c = 'b';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded_message.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_alphabetic() {\n            if c.is_ascii_uppercase() {\n       \
    \         encoded.push(c.to_ascii_lowercase());\n            } else {\n      \
    \          encoded.push(c.to_ascii_uppercase());\n            }\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    message.chars().map(|c|\
    \ {\n        match c {\n            'a' => 'c',\n            'e' => 'g',\n   \
    \         'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n    \
    \        'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n     \
    \       'O' => 'Q',\n            'U' => 'Y',\n            _ => c.to_ascii_uppercase(),\n\
    \        }\n    }).collect()", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        let c = match c {\n            'a' => 'c',\n\
    \            'e' => 'g',\n            'i' => 'k',\n            'o' => 'q',\n \
    \           'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n  \
    \          'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n   \
    \         _ => c.to_ascii_uppercase(),\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded = String::new();\n    let mut chars\
    \ = message.chars();\n    while let Some(c) = chars.next() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            if c.is_lowercase() {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            } else {\n                encoded.push(c);\n            }\n     \
    \   } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n  \
    \          if c == 'z' {\n                c = 'a';\n            } else if c ==\
    \ 'y' {\n                c = 'b';\n            } else {\n                c = (c\
    \ as u8 + 2) as char;\n            }\n            encoded.push(c);\n        }\
    \ else {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let\
    \ mut encoded_message = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n    \
    \        let mut c = c.to_lowercase().next().unwrap();\n            c = match\
    \ c {\n                'a' => 'c',\n                'e' => 'g',\n            \
    \    'i' => 'k',\n                'o' => 'q',\n                'u' => 'y',\n \
    \               _ => c,\n            };\n            encoded_message.push(c);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ if c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n        \
    \        c.to_lowercase().next().unwrap()\n            } else {\n            \
    \    c\n            };\n            let c = match c {\n                'a' =>\
    \ 'c',\n                'e' => 'g',\n                'i' => 'k',\n           \
    \     'o' => 'q',\n                'u' => 'y',\n                _ => c,\n    \
    \        };\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_ascii_alphabetic() {\n\
    \            let mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n\
    \                c = 'b';\n            } else if c == 'y' {\n                c\
    \ = 'a';\n            } else {\n                c = ((c as u8) + 2) as char;\n\
    \            }\n            encoded_message.push(c);\n        } else {\n     \
    \       encoded_message.push(c);\n        }\n    }\n    encoded_message", "  \
    \  let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'b';\n            } else if c == 'y'\
    \ {\n                c = 'a';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for\
    \ c in message.chars() {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n        if vowels.contains(&c.to_ascii_lowercase())\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        }\n    }\n   \
    \ encoded", "    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            encoded.push(if c.is_lowercase()\
    \ {\n                (((c as u8 - b'a' + 2) % 26) + b'a') as char\n          \
    \  } else {\n                (((c as u8 - b'A' + 2) % 26) + b'A') as char\n  \
    \          });\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded", "    let mut encoded_message = String::new();\n    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_lowercase()\
    \ {\n            if vowels.contains(&c) {\n                encoded_message.push(vowels[(vowels.iter().position(|&x|\
    \ x == c).unwrap() + 2) % 5]);\n            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            if vowels.contains(&c.to_lowercase().next().unwrap())\
    \ {\n                encoded_message.push(vowels[(vowels.iter().position(|&x|\
    \ x == c.to_lowercase().next().unwrap()).unwrap() + 2) % 5].to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        }\n    }\n    encoded_message", "    let mut encoded =\
    \ String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'a';\n            } else if c == 'y' {\n            \
    \    c = 'b';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    let\
    \ mut chars = message.chars();\n    while let Some(c) = chars.next() {\n     \
    \   if c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n      \
    \          c.to_lowercase().next().unwrap()\n            } else {\n          \
    \      c\n            };\n            let c = match c {\n                'a' =>\
    \ 'c',\n                'e' => 'g',\n                'i' => 'k',\n           \
    \     'o' => 'q',\n                'u' => 'y',\n                _ => c,\n    \
    \        };\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded_message = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n    \
    \        let mut c = c.to_ascii_lowercase();\n            if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n                c = match c {\n \
    \                   'a' => 'c',\n                    'e' => 'g',\n           \
    \         'i' => 'k',\n                    'o' => 'q',\n                    'u'\
    \ => 'y',\n                    _ => c,\n                };\n            }\n  \
    \          encoded_message.push(c);\n        }\n    }\n    encoded_message", " \
    \   let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            let mut encoded_char = c.to_ascii_uppercase();\n\
    \            if encoded_char.is_ascii_uppercase() {\n                encoded_char\
    \ = encoded_char.to_ascii_lowercase();\n            } else {\n               \
    \ encoded_char = encoded_char.to_ascii_uppercase();\n            }\n         \
    \   if encoded_char == 'a' {\n                encoded_char = 'c';\n          \
    \  } else if encoded_char == 'e' {\n                encoded_char = 'g';\n    \
    \        } else if encoded_char == 'i' {\n                encoded_char = 'k';\n\
    \            } else if encoded_char == 'o' {\n                encoded_char = 'q';\n\
    \            } else if encoded_char == 'u' {\n                encoded_char = 'y';\n\
    \            }\n            encoded_message.push(encoded_char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded_message = String::new();\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c) {\n\
    \            encoded_message.push((c as u8 + 2) as char);\n        } else {\n\
    \            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n        for v in vowels.iter() {\n    \
    \        if c == *v {\n                encoded.pop();\n                encoded.push(vowels[(vowels.iter().position(|&x|\
    \ x == *v).unwrap() + 2) % 5]);\n            }\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    let mut chars = message.chars();\n  \
    \  while let Some(c) = chars.next() {\n        let c = match c {\n           \
    \ 'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n            'o'\
    \ => 'q',\n            'u' => 'w',\n            'A' => 'C',\n            'E' =>\
    \ 'G',\n            'I' => 'K',\n            'O' => 'Q',\n            'U' => 'W',\n\
    \            _ => c.to_ascii_uppercase(),\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_lowercase() {\n            c = c.to_uppercase().next().unwrap();\n\
    \        }\n        match c {\n            'A' => encoded.push('C'),\n       \
    \     'E' => encoded.push('G'),\n            'I' => encoded.push('K'),\n     \
    \       'O' => encoded.push('Q'),\n            'U' => encoded.push('S'),\n   \
    \         'Y' => encoded.push('A'),\n            _ => encoded.push(c),\n     \
    \   }\n    }\n    encoded", "    let mut encoded_message = String::new();\n  \
    \  for c in message.chars() {\n        let encoded_char = match c {\n        \
    \    'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n         \
    \   'o' => 'q',\n            'u' => 'y',\n            'A' => 'C',\n          \
    \  'E' => 'G',\n            'I' => 'K',\n            'O' => 'Q',\n           \
    \ 'U' => 'Y',\n            _ => c.to_ascii_uppercase(),\n        };\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut next_vowel = c;\n            for _ in 0..2 {\n      \
    \          next_vowel = match next_vowel {\n                    'a' => 'e',\n\
    \                    'e' => 'i',\n                    'i' => 'o',\n          \
    \          'o' => 'u',\n                    'u' => 'a',\n                    _\
    \ => panic!(\"Not a vowel\"),\n                }\n            }\n            encoded.push(next_vowel);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded_message = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        encoded_message.push(match c {\n            'a'\
    \ => 'c',\n            'e' => 'g',\n            'i' => 'k',\n            'o' =>\
    \ 'q',\n            'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n\
    \            'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n \
    \           _ => c.to_ascii_uppercase(),\n        });\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ c = if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n  \
    \      } else {\n            c\n        };\n        let c = match c {\n      \
    \      'a' => 'c',\n            'e' => 'g',\n            'i' => 'k',\n       \
    \     'o' => 'q',\n            'u' => 'y',\n            _ => c,\n        };\n\
    \        encoded.push(c);\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'y' {\n                c = 'b';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let c =\
    \ match c {\n                'a' => 'c',\n                'e' => 'g',\n      \
    \          'i' => 'k',\n                'o' => 'q',\n                'u' => 'y',\n\
    \                'A' => 'C',\n                'E' => 'G',\n                'I'\
    \ => 'K',\n                'O' => 'Q',\n                'U' => 'Y',\n        \
    \        _ => c.to_ascii_uppercase(),\n            };\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n  \
    \      if vowels.contains(&c) {\n            encoded.push(vowels[(vowels.iter().position(|&x|\
    \ x == c).unwrap() + 2) % 5]);\n        } else if c.is_lowercase() {\n       \
    \     encoded.push(c.to_uppercase().next().unwrap());\n        } else {\n    \
    \        encoded.push(c.to_lowercase().next().unwrap());\n        }\n    }\n \
    \   encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_uppercase() {\n                encoded.push(match c {\n\
    \                    'A' => 'C',\n                    'B' => 'D',\n          \
    \          'C' => 'E',\n                    'D' => 'F',\n                    'E'\
    \ => 'G',\n                    'F' => 'H',\n                    'G' => 'I',\n\
    \                    'H' => 'J',\n                    'I' => 'K',\n          \
    \          'J' => 'L',\n                    'K' => 'M',\n                    'L'\
    \ => 'N',\n                    'M' => 'O',\n                    'N' => 'P',\n\
    \                    'O' => 'Q',\n                    'P' => 'R',\n          \
    \          'Q' => 'S',\n                    'R' => 'T',\n                    'S'\
    \ => 'U',\n                    'T' => 'V',\n                    'U' => 'W',\n\
    \                    'V' => 'X',\n                    'W' => 'Y',\n          \
    \          'X' => 'Z',\n                    'Y' => 'A',\n                    'Z'\
    \ => 'B',\n                    _ => c,\n                });\n            } else\
    \ {\n                encoded.push(match c {\n                    'a' => 'c',\n\
    \                    'b' => 'd',\n                    'c' => 'e',\n          \
    \          'd' => 'f',\n                    'e' => 'g',\n                    'f'\
    \ => 'h',\n                    'g' => 'i',\n                    'h' => 'j',\n\
    \                    'i' => 'k',\n                    'j' => 'l',\n          \
    \          'k' => 'm',\n                    'l' => 'n',\n                    'm'\
    \ => 'o',\n                    'n' => 'p',\n                    'o' => 'q',\n\
    \                    'p' => 'r',\n                    'q' => 's',\n          \
    \          'r' => 't',\n                    's' => 'u',\n                    't'\
    \ => 'v',\n                    'u' => 'w',\n                    'v' => 'x',\n\
    \                    'w", "    let mut encoded = String::new();\n    for c in\
    \ message.chars() {\n        let mut c = c;\n        if c.is_lowercase() {\n \
    \           c = c.to_uppercase().next().unwrap();\n        }\n        if c.is_uppercase()\
    \ {\n            c = c.to_lowercase().next().unwrap();\n        }\n        if\
    \ c == 'A' {\n            c = 'C';\n        } else if c == 'E' {\n           \
    \ c = 'G';\n        } else if c == 'I' {\n            c = 'K';\n        } else\
    \ if c == 'O' {\n            c = 'Q';\n        } else if c == 'U' {\n        \
    \    c = 'Y';\n        }\n        encoded.push(c);\n    }\n    encoded", "   \
    \ let mut encoded_message = String::new();\n    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c) {\n  \
    \          encoded_message.push(vowels[(vowels.iter().position(|&x| x == c).unwrap()\
    \ + 2) % 5]);\n        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        let mut encoded_char = c;\n        if\
    \ c.is_alphabetic() {\n            encoded_char = match c {\n                'A'\
    \ => 'C',\n                'B' => 'D',\n                'C' => 'E',\n        \
    \        'D' => 'F',\n                'E' => 'G',\n                'F' => 'H',\n\
    \                'G' => 'I',\n                'H' => 'J',\n                'I'\
    \ => 'K',\n                'J' => 'L',\n                'K' => 'M',\n        \
    \        'L' => 'N',\n                'M' => 'O',\n                'N' => 'P',\n\
    \                'O' => 'Q',\n                'P' => 'R',\n                'Q'\
    \ => 'S',\n                'R' => 'T',\n                'S' => 'U',\n        \
    \        'T' => 'V',\n                'U' => 'W',\n                'V' => 'X',\n\
    \                'W' => 'Y',\n                'X' => 'Z',\n                'Y'\
    \ => 'A',\n                'Z' => 'B',\n                _ => c,\n            };\n\
    \        }\n        encoded_message.push(encoded_char);\n    }\n    encoded_message",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_uppercase() {\n         \
    \       encoded_message.push(c.to_lowercase().next().unwrap());\n            }\
    \ else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded = String::new();\n  \
    \  for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ if c.is_alphabetic() {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    let mut chars = message.chars();\n \
    \   while let Some(c) = chars.next() {\n        let mut c = c.to_ascii_lowercase();\n\
    \        if c == 'a' {\n            c = 'c';\n        } else if c == 'e' {\n \
    \           c = 'g';\n        } else if c == 'i' {\n            c = 'k';\n   \
    \     } else if c == 'o' {\n            c = 'q';\n        } else if c == 'u' {\n\
    \            c = 'y';\n        } else if c == 'y' {\n            c = 'a';\n  \
    \      } else if c == 'z' {\n            c = 'b';\n        } else if c.is_ascii_lowercase()\
    \ {\n            c = (c as u8 + 2) as char;\n        }\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded_message = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if\
    \ vowels.contains(&c) {\n            encoded_message.push((c as u8 + 2) as char);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    message.chars().map(|c| {\n        let mut c = c.to_ascii_lowercase();\n\
    \        if c == 'z' {\n            c = 'b';\n        } else if c == 'y' {\n \
    \           c = 'a';\n        } else if c == 'x' {\n            c = '`';\n   \
    \     } else {\n            c = (c as u8 + 2) as char;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            c =\
    \ ' ';\n        }\n        c\n    }).collect()", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded_message\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_lowercase() {\n         \
    \       if vowels.contains(&c) {\n                    let index = vowels.iter().position(|&x|\
    \ x == c).unwrap();\n                    let new_index = (index + 2) % vowels.len();\n\
    \                    encoded_message.push(vowels[new_index]);\n              \
    \  } else {\n                    encoded_message.push(c);\n                }\n\
    \            } else {\n                if vowels.contains(&c.to_lowercase().next().unwrap())\
    \ {\n                    let index = vowels.iter().position(|&x| x == c.to_lowercase().next().unwrap()).unwrap();\n\
    \                    let new_index = (index + 2) % vowels.len();\n           \
    \         encoded_message.push(vowels[new_index].to_uppercase().next().unwrap());\n\
    \                } else {\n                    encoded_message.push(c);\n    \
    \            }\n            }\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        let mut c = c;\n        if c.is_ascii_lowercase()\
    \ {\n            c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase()\
    \ {\n            c = c.to_ascii_lowercase();\n        }\n        match c {\n \
    \           'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n\
    \            'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n\
    \            _ => encoded.push(c),\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    let mut chars = message.chars();\n    while let\
    \ Some(c) = chars.next() {\n        let mut c = c.to_ascii_lowercase();\n    \
    \    if c == 'z' {\n            c = 'a';\n        } else if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            c = (c as u8 + 2) as char;\n\
    \        }\n        encoded.push(c);\n    }\n    encoded", "    let mut encoded_message\
    \ = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in\
    \ message.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                if vowels.contains(&c) {\n                    encoded_message.push((c\
    \ as u8 + 2) as char);\n                } else {\n                    encoded_message.push((c\
    \ as u8 + 32) as char);\n                }\n            } else {\n           \
    \     if vowels.contains(&c.to_lowercase().to_string().chars().next().unwrap())\
    \ {\n                    encoded_message.push((c as u8 + 2) as char);\n      \
    \          } else {\n                    encoded_message.push((c as u8 - 32) as\
    \ char);\n                }\n            }\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded_message = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            encoded.push(match\
    \ c {\n                'a' => 'c',\n                'e' => 'g',\n            \
    \    'i' => 'k',\n                'o' => 'q',\n                'u' => 'w',\n \
    \               'A' => 'C',\n                'E' => 'G',\n                'I'\
    \ => 'K',\n                'O' => 'Q',\n                'U' => 'W',\n        \
    \        _ => c.to_ascii_uppercase()\n            });\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n        if vowels.contains(&c.to_ascii_lowercase())\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        }\n    }\n   \
    \ encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            encoded.push(match c {\n    \
    \            'a' => 'c',\n                'e' => 'g',\n                'i' =>\
    \ 'k',\n                'o' => 'q',\n                'u' => 'w',\n           \
    \     'A' => 'C',\n                'E' => 'G',\n                'I' => 'K',\n\
    \                'O' => 'Q',\n                'U' => 'W',\n                _ =>\
    \ c.to_ascii_uppercase(),\n            });\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n  \
    \          if c == 'z' {\n                c = 'a';\n            } else if c ==\
    \ 'y' {\n                c = 'b';\n            } else {\n                c = (c\
    \ as u8 + 2) as char;\n            }\n            encoded.push(c);\n        }\
    \ else {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let\
    \ mut encoded = String::new();\n    for c in message.chars() {\n        let mut\
    \ c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_alphabetic() {\n      \
    \      let c_lower = c.to_ascii_lowercase();\n            if c_lower == 'a' ||\
    \ c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' {\n   \
    \             encoded.push(c_lower.wrapping_add(2).to_ascii_uppercase());\n  \
    \          } else {\n                encoded.push(c_lower.wrapping_add(2).to_ascii_lowercase());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut new_char = c;\n        if c.is_ascii_lowercase() {\n    \
    \        new_char = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase()\
    \ {\n            new_char = c.to_ascii_lowercase();\n        }\n        match\
    \ new_char {\n            'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n\
    \            'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            _ => encoded.push(new_char),\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let mut\
    \ c = c.to_ascii_lowercase();\n            if c == 'z' {\n                c =\
    \ 'a';\n            } else if c == 'y' {\n                c = 'b';\n         \
    \   } else {\n                c = (c as u8 + 2) as char;\n            }\n    \
    \        encoded.push(c);\n        } else {\n            encoded.push(c);\n  \
    \      }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let mut\
    \ c = c.to_ascii_lowercase();\n            if c == 'z' {\n                c =\
    \ 'a';\n            } else if c == 'y' {\n                c = 'b';\n         \
    \   } else {\n                c = (c as u8 + 2) as char;\n            }\n    \
    \        encoded.push(c);\n        } else {\n            encoded.push(c);\n  \
    \      }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        let c = match c {\n            'a' => 'c',\n\
    \            'e' => 'g',\n            'i' => 'k',\n            'o' => 'q',\n \
    \           'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n  \
    \          'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n   \
    \         _ => c.to_ascii_uppercase(),\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        let c = match c {\n            'a' =>\
    \ 'c',\n            'e' => 'g',\n            'i' => 'k',\n            'o' => 'q',\n\
    \            'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n \
    \           'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n  \
    \          _ => c.to_ascii_uppercase(),\n        };\n        encoded_message.push(c);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            let mut c\
    \ = c.to_ascii_lowercase();\n            c = match c {\n                'a' =>\
    \ 'c',\n                'e' => 'g',\n                'i' => 'k',\n           \
    \     'o' => 'q',\n                'u' => 'y',\n                _ => c,\n    \
    \        };\n            if c.is_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n\
    \        if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if vowels.contains(&c) {\n    \
    \        encoded_message.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    encoded_message", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded_message.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ mut c = c;\n        if c.is_ascii_lowercase() {\n            c = c.to_ascii_uppercase();\n\
    \        }\n        if c.is_ascii_uppercase() {\n            c = c.to_ascii_lowercase();\n\
    \        }\n        if c == 'a' {\n            c = 'c';\n        } else if c ==\
    \ 'e' {\n            c = 'g';\n        } else if c == 'i' {\n            c = 'k';\n\
    \        } else if c == 'o' {\n            c = 'q';\n        } else if c == 'u'\
    \ {\n            c = 'y';\n        }\n        encoded.push(c);\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        let c = match c {\n            'a' =>\
    \ 'c',\n            'e' => 'g',\n            'i' => 'k',\n            'o' => 'q',\n\
    \            'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n \
    \           'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n  \
    \          _ => c,\n        };\n        encoded_message.push(c);\n    }\n    encoded_message",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_lowercase() {\n         \
    \       encoded_message.push(c.to_uppercase().next().unwrap());\n            }\
    \ else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded = String::new();\n  \
    \  let mut chars = message.chars();\n    while let Some(c) = chars.next() {\n\
    \        if c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n \
    \               c.to_lowercase().next().unwrap()\n            } else {\n     \
    \           c\n            };\n            let c = match c {\n               \
    \ 'a' => 'c',\n                'e' => 'g',\n                'i' => 'k',\n    \
    \            'o' => 'q',\n                'u' => 'y',\n                _ => c,\n\
    \            };\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            if c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded_message = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_alphabetic() {\n            let mut encoded_char\
    \ = c.to_ascii_uppercase();\n            if encoded_char.is_ascii_lowercase()\
    \ {\n                encoded_char = encoded_char.to_ascii_uppercase();\n     \
    \       }\n            match encoded_char {\n                'A' => encoded_char\
    \ = 'C',\n                'E' => encoded_char = 'G',\n                'I' => encoded_char\
    \ = 'K',\n                'O' => encoded_char = 'Q',\n                'U' => encoded_char\
    \ = 'S',\n                'Y' => encoded_char = 'A',\n                _ => {\n\
    \                    if encoded_char.is_ascii_uppercase() {\n                \
    \        encoded_char = encoded_char.to_ascii_lowercase();\n                 \
    \   }\n                }\n            }\n            encoded_message.push(encoded_char);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded", " \
    \   let mut encoded = String::new();\n    for c in message.chars() {\n       \
    \ let mut c = c;\n        if c.is_ascii_lowercase() {\n            c = c.to_ascii_uppercase();\n\
    \        } else if c.is_ascii_uppercase() {\n            c = c.to_ascii_lowercase();\n\
    \        }\n        if c == 'A' {\n            c = 'C';\n        } else if c ==\
    \ 'E' {\n            c = 'G';\n        } else if c == 'I' {\n            c = 'K';\n\
    \        } else if c == 'O' {\n            c = 'Q';\n        } else if c == 'U'\
    \ {\n            c = 'Y';\n        }\n        encoded.push(c);\n    }\n    encoded",
  "    let mut encoded = String::new();\n    let mut chars = message.chars();\n  \
    \  while let Some(c) = chars.next() {\n        let mut c = c;\n        if c.is_ascii_lowercase()\
    \ {\n            c = c.to_ascii_uppercase();\n        }\n        if c.is_ascii_uppercase()\
    \ {\n            if c == 'A' {\n                c = 'C';\n            } else if\
    \ c == 'E' {\n                c = 'G';\n            } else if c == 'I' {\n   \
    \             c = 'K';\n            } else if c == 'O' {\n                c =\
    \ 'Q';\n            } else if c == 'U' {\n                c = 'W';\n         \
    \   } else {\n                c = ((c as u8) + 2) as char;\n            }\n  \
    \      }\n        encoded.push(c);\n    }\n    encoded", "    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n                encoded.push(c);\n            } else {\n       \
    \         encoded.push(c.to_ascii_uppercase());\n            }\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded_message = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut new_char = c.to_ascii_lowercase();\n\
    \            if new_char == 'z' {\n                new_char = 'b';\n         \
    \   } else if new_char == 'y' {\n                new_char = 'a';\n           \
    \ } else {\n                new_char = ((new_char as u8) + 2) as char;\n     \
    \       }\n            if c.is_uppercase() {\n                new_char = new_char.to_ascii_uppercase();\n\
    \            }\n            encoded_message.push(new_char);\n        } else {\n\
    \            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ mut c = c;\n        if c.is_lowercase() {\n            c = c.to_uppercase().next().unwrap();\n\
    \        }\n        if c.is_uppercase() {\n            c = c.to_lowercase().next().unwrap();\n\
    \        }\n        if c == 'A' {\n            c = 'C';\n        } else if c ==\
    \ 'E' {\n            c = 'G';\n        } else if c == 'I' {\n            c = 'K';\n\
    \        } else if c == 'O' {\n            c = 'Q';\n        } else if c == 'U'\
    \ {\n            c = 'Y';\n        }\n        encoded.push(c);\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n     \
    \       if c == 'z' {\n                c = 'a';\n            } else if c == 'y'\
    \ {\n                c = 'b';\n            } else {\n                c = (c as\
    \ u8 + 2) as char;\n            }\n            encoded.push(c);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded", "    let mut\
    \ encoded_message = String::new();\n    for c in message.chars() {\n        let\
    \ mut encoded_char = c;\n        if c.is_ascii_lowercase() {\n            encoded_char\
    \ = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n    \
    \        encoded_char = c.to_ascii_lowercase();\n        }\n        if encoded_char\
    \ == 'A' {\n            encoded_char = 'C';\n        } else if encoded_char ==\
    \ 'E' {\n            encoded_char = 'G';\n        } else if encoded_char == 'I'\
    \ {\n            encoded_char = 'K';\n        } else if encoded_char == 'O' {\n\
    \            encoded_char = 'Q';\n        } else if encoded_char == 'U' {\n  \
    \          encoded_char = 'Y';\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n        if vowels.contains(&c.to_ascii_lowercase())\
    \ {\n            encoded.push(c.to_ascii_lowercase().wrapping_add(2));\n     \
    \   }\n    }\n    encoded", "    let mut encoded = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_ascii_alphabetic() {\n            let c_lower\
    \ = c.to_ascii_lowercase();\n            let c_upper = c.to_ascii_uppercase();\n\
    \            let c_lower_encoded = match c_lower {\n                'a' => 'c',\n\
    \                'e' => 'g',\n                'i' => 'k',\n                'o'\
    \ => 'q',\n                'u' => 'y',\n                _ => c_lower,\n      \
    \      };\n            let c_upper_encoded = match c_upper {\n               \
    \ 'A' => 'C',\n                'E' => 'G',\n                'I' => 'K',\n    \
    \            'O' => 'Q',\n                'U' => 'Y',\n                _ => c_upper,\n\
    \            };\n            if c.is_ascii_lowercase() {\n                encoded.push(c_lower_encoded);\n\
    \            } else {\n                encoded.push(c_upper_encoded);\n      \
    \      }\n        } else {\n            encoded.push(c);\n        }\n    }\n \
    \   encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded_message = String::new();\n    for c in message.chars() {\n\
    \        let encoded_char = match c {\n            'a' => 'c',\n            'e'\
    \ => 'g',\n            'i' => 'k',\n            'o' => 'q',\n            'u' =>\
    \ 'y',\n            'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n\
    \            'O' => 'Q',\n            'U' => 'Y',\n            _ => c.to_ascii_uppercase(),\n\
    \        };\n        encoded_message.push(encoded_char);\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            let mut c_encoded = c.to_ascii_uppercase();\n\
    \            if c_encoded.is_ascii_lowercase() {\n                c_encoded =\
    \ c_encoded.to_ascii_uppercase();\n            }\n            if c_encoded.is_ascii_uppercase()\
    \ {\n                c_encoded = c_encoded.to_ascii_lowercase();\n           \
    \ }\n            encoded.push(c_encoded);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let mut\
    \ c = c.to_ascii_lowercase();\n            if c == 'z' {\n                c =\
    \ 'a';\n            } else if c == 'y' {\n                c = 'b';\n         \
    \   } else {\n                c = (c as u8 + 2) as char;\n            }\n    \
    \        encoded.push(c);\n        } else {\n            encoded.push(c);\n  \
    \      }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        if c.is_alphabetic() {\n            let mut\
    \ c = c.to_ascii_lowercase();\n            if c == 'z' {\n                c =\
    \ 'a';\n            } else if c == 'y' {\n                c = 'b';\n         \
    \   } else {\n                c = (c as u8 + 2) as char;\n            }\n    \
    \        encoded.push(c);\n        } else {\n            encoded.push(c);\n  \
    \      }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_ascii_lowercase() {\n       \
    \     encoded_message.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        if\
    \ c.is_ascii_alphabetic() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for c in message.chars() {\n        if vowels.contains(&c) {\n          \
    \  encoded.push((c as u8 + 2) as char);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded", "    let mut encoded = String::new();\n    for\
    \ c in message.chars() {\n        let c_lower = c.to_lowercase().to_string();\n\
    \        if c_lower == \"a\" {\n            encoded.push('c');\n        } else\
    \ if c_lower == \"e\" {\n            encoded.push('g');\n        } else if c_lower\
    \ == \"i\" {\n            encoded.push('k');\n        } else if c_lower == \"\
    o\" {\n            encoded.push('q');\n        } else if c_lower == \"u\" {\n\
    \            encoded.push('y');\n        } else if c_lower == \"y\" {\n      \
    \      encoded.push('a');\n        } else if c.is_uppercase() {\n            encoded.push_str(&c_lower);\n\
    \        } else {\n            encoded.push_str(&c_lower.to_uppercase());\n  \
    \      }\n    }\n    encoded", "    let mut encoded_message = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ c = if c.is_lowercase() {\n                c.to_ascii_uppercase()\n        \
    \    } else {\n                c\n            };\n            let c = match c\
    \ {\n                'A' => 'C',\n                'E' => 'G',\n              \
    \  'I' => 'K',\n                'O' => 'Q',\n                'U' => 'W',\n   \
    \             _ => c.to_ascii_lowercase(),\n            };\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            let\
    \ mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n               \
    \ c = 'a';\n            } else if c == 'y' {\n                c = 'b';\n     \
    \       } else {\n                c = (c as u8 + 2) as char;\n            }\n\
    \            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \               encoded.push(c);\n            } else {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded_message = String::new();\n    for c in\
    \ message.chars() {\n        let mut encoded_char = c;\n        if c.is_ascii_lowercase()\
    \ {\n            encoded_char = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_char = c.to_ascii_lowercase();\n        }\n        if\
    \ encoded_char == 'A' {\n            encoded_char = 'C';\n        } else if encoded_char\
    \ == 'E' {\n            encoded_char = 'G';\n        } else if encoded_char ==\
    \ 'I' {\n            encoded_char = 'K';\n        } else if encoded_char == 'O'\
    \ {\n            encoded_char = 'Q';\n        } else if encoded_char == 'U' {\n\
    \            encoded_char = 'Y';\n        } else if encoded_char == 'C' {\n  \
    \          encoded_char = 'E';\n        } else if encoded_char == 'G' {\n    \
    \        encoded_char = 'I';\n        } else if encoded_char == 'K' {\n      \
    \      encoded_char = 'M';\n        } else if encoded_char == 'Q' {\n        \
    \    encoded_char = 'S';\n        } else if encoded_char == 'Y' {\n          \
    \  encoded_char = 'A';\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message", "    let mut encoded = String::new();\n    for c\
    \ in message.chars() {\n        if c.is_alphabetic() {\n            let mut c\
    \ = c.to_ascii_lowercase();\n            if c == 'z' {\n                c = 'a';\n\
    \            } else if c == 'y' {\n                c = 'b';\n            } else\
    \ {\n                c = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded",
  "    let mut encoded = String::new();\n    for c in message.chars() {\n        let\
    \ c = match c {\n            'a' => 'c',\n            'e' => 'g',\n          \
    \  'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n           \
    \ 'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n            'O'\
    \ => 'Q',\n            'U' => 'Y',\n            _ => c,\n        };\n        encoded.push(c);\n\
    \    }\n    encoded", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded", "    let mut encoded = String::new();\n\
    \    for c in message.chars() {\n        let mut c = c;\n        if c.is_ascii_lowercase()\
    \ {\n            c = c.to_ascii_uppercase();\n        }\n        match c {\n \
    \           'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n\
    \            'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n\
    \            _ => encoded.push(c),\n        }\n    }\n    encoded", "    let mut\
    \ encoded = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            encoded.push(if c.is_lowercase() {\n                ((c as u8\
    \ - b'a' + 2) % 26 + b'a') as char\n            } else {\n                ((c\
    \ as u8 - b'A' + 2) % 26 + b'A') as char\n            });\n        } else {\n\
    \            encoded.push(c);\n        }\n    }\n    encoded", "    let mut encoded_message\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_uppercase() {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message", "    let mut encoded = String::new();\n  \
    \  for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded", "    let mut encoded_message = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message", "    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_lowercase().next().unwrap();\n\
    \            if c == 'z' {\n                c = 'a';\n            } else if c\
    \ == 'y' {\n                c = 'b';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded"]
stop_tokens:
- "\n}"
