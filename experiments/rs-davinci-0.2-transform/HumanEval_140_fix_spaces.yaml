name: HumanEval_140_fix_spaces
language: rs
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"\
  Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"\
  Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"\
  _Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"\
  _Example-3\")\nfn fix_spaces(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = String::new();\n    let mut space_count = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            space_count +=\
    \ 1;\n            if space_count == 1 {\n                result.push('_');\n \
    \           } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            result.push(c);\n            space_count = 0;\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count > 2 {\n            \
    \    result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count == 1 {\n           \
    \     result.push('_');\n            } else if space_count == 2 {\n          \
    \      result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ == 1 {\n                result.push('_');\n            } else if space_count\
    \ == 2 {\n                result.push('_');\n            } else {\n          \
    \      result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ == 1 {\n                result.push('_');\n            } else if space_count\
    \ == 2 {\n                result.push('_');\n            } else {\n          \
    \      result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            if spaces == 1 {\n                result.push('_');\n\
    \            }\n            result.push(c);\n            spaces = 0;\n       \
    \ }\n    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            if spaces\
    \ > 0 {\n                result.push('_');\n                spaces = 0;\n    \
    \        }\n            result.push(c);\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            if c == ' ' {\n\
    \                result.push('_');\n            } else {\n                result.push(c);\n\
    \            }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if spaces > 2 {\n              \
    \  result.push('-');\n            }\n            result.push(c);\n           \
    \ spaces = 0;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces == 1 {\n                result.push('_');\n            }\n          \
    \  result.push(c);\n            spaces = 0;\n        }\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            if c == ' ' {\n\
    \                result.push('_');\n            } else {\n                result.push(c);\n\
    \            }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if spaces > 2 {\n              \
    \  result.push('-');\n            }\n            result.push(c);\n           \
    \ spaces = 0;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            if c == ' ' {\n                result.push('_');\n       \
    \     } else {\n                result.push(c);\n            }\n        }\n  \
    \  }\n    result", "    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if spaces > 2 {\n              \
    \  result.push('-');\n            }\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces == 1 {\n                result.push('_');\n            }\n          \
    \  result.push(c);\n            spaces = 0;\n        }\n    }\n    if spaces ==\
    \ 1 {\n        result.push('_');\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push('_');\n                spaces = 0;\n\
    \            }\n            result.push(c);\n        }\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces ==\
    \ 2 {\n                result.push('_');\n            }\n        } else {\n  \
    \          if spaces > 2 {\n                result.push('-');\n            }\n\
    \            result.push(c);\n            spaces = 0;\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
