name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let len = end - start\
    \ + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n    }\n    if\
    \ len == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return String::from(\"NO\");\n   \
    \     }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    if length == 2 {\n\
    \        return String::from(\"YES\");\n    }\n    for i in 2..length {\n    \
    \    if length % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut end\
    \ = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if end2\
    \ < end1 {\n        end = end2;\n    }\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    for i in 2..length {\n        if length % i == 0 {\n      \
    \      return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\"\
    )", "    let (mut start, mut end) = (interval1.0, interval1.1);\n    if start\
    \ > end {\n        start = interval2.0;\n        end = interval2.1;\n    }\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let (mut\
    \ start2, mut end2) = (interval2.0, interval2.1);\n    if start2 > end2 {\n  \
    \      start2 = interval1.0;\n        end2 = interval1.1;\n    }\n    if start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    if start2 > end ||\
    \ end2 < start {\n        return String::from(\"NO\");\n    }\n    if start2 >\
    \ start {\n        start = start2;\n    }\n    if end2 < end {\n        end =\
    \ end2;\n    }\n    if start == end {\n        return String::from(\"YES\");\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..end {\n        if i == start\
    \ {\n            continue;\n        }\n        if end % i == 0 {\n           \
    \ is_prime = false;\n            break;\n        }\n    }\n    if is_prime {\n\
    \        String::from(\"YES\")\n    } else {\n        String::from(\"NO\")\n \
    \   }", "    let mut start = std::cmp::max(interval1.0, interval2.0);\n    let\
    \ mut end = std::cmp::min(interval1.1, interval2.1);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if start % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n\
    \    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let mut start = start1;\n    let mut end = end1;\n    if start2 > start1\
    \ {\n        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..length {\n      \
    \  if length % i == 0 {\n            is_prime = false;\n            break;\n \
    \       }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n \
    \   }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let start = max(start1, start2);\n\
    \    let end = min(end1, end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    if is_prime(end - start + 1) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    let (start, end) = if a > c { (a, b) } else { (c, d)\
    \ };\n    let (start, end) = if start > end { (end, start) } else { (start, end)\
    \ };\n    let (start, end) = if start > b || start > d { (0, 0) } else { (start,\
    \ end) };\n    let (start, end) = if end < a || end < c { (0, 0) } else { (start,\
    \ end) };\n    let length = end - start + 1;\n    if length == 0 {\n        return\
    \ String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            is_prime = false;\n           \
    \ break;\n        }\n    }\n    if is_prime {\n        String::from(\"YES\")\n\
    \    } else {\n        String::from(\"NO\")\n    }", "    let (start1, end1) =\
    \ interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length) {\n\
    \        return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "  \
    \  let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start1 > start2 {\n   \
    \     start = start2;\n    }\n    if end1 < end2 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    let mut i = 2;\n    while i * i <= length {\n        if length % i\
    \ == 0 {\n            return String::from(\"NO\");\n        }\n        i += 1;\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n \
    \       return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start >= end {\n\
    \        return String::from(\"NO\");\n    }\n    if is_prime(end - start) {\n\
    \        return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "  \
    \  let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if\
    \ start > end {\n        return String::from(\"NO\");\n    }\n    let length =\
    \ end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if length\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let length = end -\
    \ start + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n   \
    \ }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (mut start, mut end) = (interval1.0, interval1.1);\n    if interval1.0 > interval1.1\
    \ {\n        start = interval1.1;\n        end = interval1.0;\n    }\n    let\
    \ (mut start2, mut end2) = (interval2.0, interval2.1);\n    if interval2.0 > interval2.1\
    \ {\n        start2 = interval2.1;\n        end2 = interval2.0;\n    }\n    if\
    \ start2 > end || start > end2 {\n        return String::from(\"NO\");\n    }\n\
    \    let (mut start, mut end) = (start, end);\n    if start2 > start {\n     \
    \   start = start2;\n    }\n    if end2 < end {\n        end = end2;\n    }\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    if start\
    \ == end {\n        return String::from(\"YES\");\n    }\n    let mut is_prime\
    \ = true;\n    for i in 2..end {\n        if end % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let len = end - start + 1;\n\
    \    if len == 1 {\n        return String::from(\"NO\");\n    }\n    if len ==\
    \ 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..len {\n \
    \       if len % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut end\
    \ = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if end2\
    \ < end1 {\n        end = end2;\n    }\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            return String::from(\"NO\");\n        }\n   \
    \ }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let start = if start1 > start2 {\
    \ start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    if start > end {\n        return String::from(\"NO\");\n    }\n    if\
    \ is_prime(end - start + 1) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            return String::from(\"NO\");\n        }\n   \
    \ }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if end % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if is_prime(length) {\n        return String::from(\"YES\");\n    }\n   \
    \ String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    if start1 > end2 || start2 > end1 {\n    \
    \    return String::from(\"NO\");\n    }\n    let start = if start1 > start2 {\
    \ start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    let length = end - start + 1;\n    if length < 2 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (i1_start, i1_end) = interval1;\n    let (i2_start, i2_end) = interval2;\n \
    \   if i1_start > i2_end || i2_start > i1_end {\n        return String::from(\"\
    NO\");\n    }\n    let start = i1_start.max(i2_start);\n    let end = i1_end.min(i2_end);\n\
    \    let length = end - start + 1;\n    if length <= 1 {\n        return String::from(\"\
    NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..length {\n      \
    \  if length % i == 0 {\n            is_prime = false;\n            break;\n \
    \       }\n    }\n    if is_prime {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let len = end - start + 1;\n\
    \    if len == 1 {\n        return String::from(\"NO\");\n    }\n    if len ==\
    \ 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..len {\n \
    \       if len % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\"\
    );\n    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            is_prime = false;\n            break;\n     \
    \   }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    if start1 > end2 || start2 > end1 {\n    \
    \    return String::from(\"NO\");\n    }\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start == end {\n        return String::from(\"\
    YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end {\n        if\
    \ end % i == 0 {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    if is_prime {\n        String::from(\"YES\")\n    } else {\n     \
    \   String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let (start, end) = if start1 > start2\
    \ {\n        (start1, end2)\n    } else {\n        (start2, end1)\n    };\n  \
    \  if start > end {\n        return String::from(\"NO\");\n    }\n    if start\
    \ == end {\n        return String::from(\"YES\");\n    }\n    let mut is_prime\
    \ = true;\n    for i in 2..end {\n        if end % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = if\
    \ start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2 {\
    \ end1 } else { end2 };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = if start1 > start2\
    \ { start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    if start > end {\n        return String::from(\"NO\");\n    }\n    if\
    \ is_prime(end - start + 1) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    if start1 > end2 || start2 > end1 {\n    \
    \    return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if end % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n\
    \    }\n    String::from(\"NO\")", "    let (a, b) = interval1;\n    let (c, d)\
    \ = interval2;\n    if a > d || b < c {\n        return String::from(\"NO\");\n\
    \    }\n    let (mut start, mut end) = (a, b);\n    if c > a {\n        start\
    \ = c;\n    }\n    if d < b {\n        end = d;\n    }\n    if is_prime(end -\
    \ start + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if length == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..length {\n        if length % i == 0 {\n     \
    \       return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\"\
    )", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let mut start = std::cmp::max(start1, start2);\n    let mut end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let mut count = 0;\n    for i in start..=end {\n        count += 1;\n   \
    \ }\n    if is_prime(count) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = if start1 > start2 { start1 } else { start2\
    \ };\n    let end = if end1 < end2 { end1 } else { end2 };\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let length = end - start\
    \ + 1;\n    if is_prime(length) {\n        return String::from(\"YES\");\n   \
    \ }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 > end1\
    \ {\n        return String::from(\"NO\");\n    }\n    let start = if start1 >\
    \ start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else\
    \ { end2 };\n    if start == end {\n        return String::from(\"YES\");\n  \
    \  }\n    let length = end - start + 1;\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n       \
    \ return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n  \
    \      return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\"\
    );\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    for i in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    if is_prime(end - start + 1) {\n        return String::from(\"YES\"\
    );\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n \
    \   let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = std::cmp::max(start1, start2);\n    let mut end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let mut length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    while length > 1 {\n        if start % length == 0 {\n    \
    \        return String::from(\"NO\");\n        }\n        length -= 1;\n    }\n\
    \    String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = max(start1, start2);\n    let end = min(end1, end2);\n    if start >\
    \ end {\n        return String::from(\"NO\");\n    }\n    let len = end - start\
    \ + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n    }\n    let\
    \ mut is_prime = true;\n    for i in 2..len {\n        if len % i == 0 {\n   \
    \         is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    if is_prime(end - start + 1) {\n        return String::from(\"YES\");\n \
    \   }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let start = if start1 > start2 {\
    \ start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    if start > end {\n        return String::from(\"NO\");\n    }\n    if\
    \ is_prime(end - start + 1) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (mut start, mut end) = (interval1.0, interval1.1);\n\
    \    if interval1.0 > interval1.1 {\n        start = interval1.1;\n        end\
    \ = interval1.0;\n    }\n    let (mut start2, mut end2) = (interval2.0, interval2.1);\n\
    \    if interval2.0 > interval2.1 {\n        start2 = interval2.1;\n        end2\
    \ = interval2.0;\n    }\n    let mut intersection = (0, 0);\n    if start > start2\
    \ {\n        intersection.0 = start;\n    } else {\n        intersection.0 = start2;\n\
    \    }\n    if end < end2 {\n        intersection.1 = end;\n    } else {\n   \
    \     intersection.1 = end2;\n    }\n    if intersection.0 > intersection.1 {\n\
    \        return String::from(\"NO\");\n    }\n    let mut length = intersection.1\
    \ - intersection.0;\n    if length < 0 {\n        length = -length;\n    }\n \
    \   length += 1;\n    if length == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if length\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if is_prime(length) {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = if start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2\
    \ { end1 } else { end2 };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = (max(start1, start2), min(end1, end2));\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let len = end - start + 1;\n\
    \    if len < 2 {\n        return String::from(\"NO\");\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return String::from(\"NO\");\n   \
    \     }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if is_prime(length) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    if is_prime(end - start + 1) {\n        return String::from(\"YES\"\
    );\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n \
    \   let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let len = end - start + 1;\n    if len ==\
    \ 1 {\n        return String::from(\"NO\");\n    }\n    if len == 2 {\n      \
    \  return String::from(\"YES\");\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n   \
    \ String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    if start1 > end2 || start2 > end1 {\n    \
    \    return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..start {\n        if start % i == 0 {\n            is_prime =\
    \ false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..end {\n        if end % i ==\
    \ 0 {\n            is_prime = false;\n            break;\n        }\n    }\n \
    \   if is_prime {\n        return String::from(\"YES\");\n    }\n    for i in\
    \ 2..(end - start) {\n        if (end - start) % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    if start1\
    \ > end2 || start2 > end1 {\n        return String::from(\"NO\");\n    }\n   \
    \ let start = if start1 > start2 { start1 } else { start2 };\n    let end = if\
    \ end1 < end2 { end1 } else { end2 };\n    let length = end - start + 1;\n   \
    \ if length < 2 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let (start, end) = if start1 > start2\
    \ {\n        (start1, end1)\n    } else {\n        (start2, end2)\n    };\n  \
    \  let intersection = if end < start {\n        0\n    } else {\n        end -\
    \ start\n    };\n    if intersection == 0 {\n        String::from(\"NO\")\n  \
    \  } else if is_prime(intersection) {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = std::cmp::max(start1,\
    \ start2);\n    let mut end = std::cmp::min(end1, end2);\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    while start <= end {\n        if start ==\
    \ 2 || start == 3 || start == 5 || start == 7 {\n            return String::from(\"\
    YES\");\n        }\n        start += 1;\n    }\n    String::from(\"NO\")", " \
    \   let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n   \
    \ let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    if is_prime(end - start\
    \ + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\"\
    )", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    if start == end {\n        return String::from(\"YES\");\n    }\n    let\
    \ mut is_prime = true;\n    for i in 2..end {\n        if start % i == 0 {\n \
    \           is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        String::from(\"YES\")\n    } else {\n        String::from(\"NO\"\
    )\n    }", "    let (mut start, mut end) = (interval1.0, interval1.1);\n    if\
    \ interval1.0 > interval1.1 {\n        start = interval1.1;\n        end = interval1.0;\n\
    \    }\n    let (mut start2, mut end2) = (interval2.0, interval2.1);\n    if interval2.0\
    \ > interval2.1 {\n        start2 = interval2.1;\n        end2 = interval2.0;\n\
    \    }\n    if start > end2 || start2 > end {\n        return String::from(\"\
    NO\");\n    }\n    let mut start_intersection = start;\n    if start2 > start\
    \ {\n        start_intersection = start2;\n    }\n    let mut end_intersection\
    \ = end;\n    if end2 < end {\n        end_intersection = end2;\n    }\n    let\
    \ length = end_intersection - start_intersection + 1;\n    if length < 2 {\n \
    \       return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if is_prime(length) {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    for i\
    \ in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = (end - start) +\
    \ 1;\n    if is_prime(length) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    let start = if start1 > start2 { start1 }\
    \ else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n   \
    \ if start > end {\n        return String::from(\"NO\");\n    }\n    if is_prime(end\
    \ - start + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    if start1 > end2 || start2 > end1 {\n        return String::from(\"\
    NO\");\n    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start == end {\n        return String::from(\"YES\");\n    }\n\
    \    if is_prime(end - start) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\"\
    );\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    let mut is_prime = true;\n    for i in 2..length {\n        if length % i\
    \ == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n\
    \    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let (mut start, mut end) = (0, 0);\n    if a\
    \ <= c && c <= b {\n        start = c;\n    } else if c <= a && a <= d {\n   \
    \     start = a;\n    }\n    if a <= d && d <= b {\n        end = d;\n    } else\
    \ if c <= b && b <= d {\n        end = b;\n    }\n    if start == 0 || end ==\
    \ 0 {\n        return String::from(\"NO\");\n    }\n    if is_prime(end - start)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let len = end - start +\
    \ 1;\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let mut start = start1;\n  \
    \  let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n  \
    \  }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = if start1 > start2\
    \ { start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    if start > end {\n        return String::from(\"NO\");\n    }\n    if\
    \ is_prime(end - start + 1) {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    if start == end {\n        return String::from(\"YES\");\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..start {\n        if start\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..end {\n        if end % i == 0 {\n            is_prime = false;\n  \
    \          break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    for i in (start + 1)..end {\n        for j in 2..i {\n   \
    \         if i % j == 0 {\n                is_prime = false;\n               \
    \ break;\n            }\n        }\n        if is_prime {\n            return\
    \ String::from(\"YES\");\n        }\n        is_prime = true;\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let len = end - start\
    \ + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n    }\n    if\
    \ len == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return String::from(\"NO\");\n   \
    \     }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    let len = end - start + 1;\n    if len <= 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (mut start, mut end) = (interval1.0, interval1.1);\n    if interval1.0\
    \ > interval1.1 {\n        start = interval1.1;\n        end = interval1.0;\n\
    \    }\n    let (mut start2, mut end2) = (interval2.0, interval2.1);\n    if interval2.0\
    \ > interval2.1 {\n        start2 = interval2.1;\n        end2 = interval2.0;\n\
    \    }\n    if start > end2 || start2 > end {\n        return String::from(\"\
    NO\");\n    }\n    let mut start_intersection = start;\n    if start2 > start\
    \ {\n        start_intersection = start2;\n    }\n    let mut end_intersection\
    \ = end;\n    if end2 < end {\n        end_intersection = end2;\n    }\n    if\
    \ start_intersection == end_intersection {\n        return String::from(\"YES\"\
    );\n    }\n    let mut length = end_intersection - start_intersection;\n    if\
    \ length < 0 {\n        length = -length;\n    }\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let len = end - start + 1;\n\
    \    if len == 1 {\n        return String::from(\"NO\");\n    }\n    if len ==\
    \ 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..len {\n \
    \       if len % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (a, b) = interval1;\n    let (c,\
    \ d) = interval2;\n    let (start, end) = if a > c {\n        (a, b)\n    } else\
    \ {\n        (c, d)\n    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c,\
    \ d)\n    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let\
    \ (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n  \
    \  };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start,\
    \ end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n  \
    \  let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start, end)\
    \ = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n    let\
    \ (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if\
    \ a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a > c {\n\
    \        (a, b)\n    } else {\n        (c, d)\n    };\n    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let (start, end) = if a > c {\n        (a, b)\n\
    \    } else {\n        (c, d)\n    };\n    let (a, b) = interval1;\n    let (c,\
    \ d) = interval2;\n    let (start, end)", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let mut start = start1;\n  \
    \  let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n  \
    \  }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length <= 1 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut\
    \ end = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if\
    \ end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    let mut is_prime =\
    \ true;\n    for i in 2..length {\n        if length % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    if start1\
    \ > end2 || start2 > end1 {\n        return String::from(\"NO\");\n    }\n   \
    \ let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let length = end - start + 1;\n    if length <= 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if length == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..length {\n        if length % i == 0 {\n     \
    \       return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\"\
    )", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start,\
    \ end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n  \
    \  let (start, end) = if start > end {\n        (end, start)\n    } else {\n \
    \       (start, end)\n    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c,\
    \ d)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (a, b) = interval1;\n   \
    \ let (c, d) = interval2;\n    let (start, end) = if a > c {\n        (a, b)\n\
    \    } else {\n        (c, d)\n    };\n    let (start, end) = if start > end {\n\
    \        (end, start)\n    } else {\n        (start, end)\n    };\n    let (a,\
    \ b) = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a >\
    \ c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n    let (start, end)\
    \ = if start > end {\n        (end, start)\n    } else {\n        (start, end)\n\
    \    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start,\
    \ end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n  \
    \  let (start, end) = if start > end {\n        (end, start)\n    } else {\n \
    \       (start, end)\n    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end)", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = if start1 > start2 { start1 } else { start2\
    \ };\n    let end = if end1 < end2 { end1 } else { end2 };\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let length = end - start\
    \ + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n    }\n  \
    \  let mut is_prime = true;\n    for i in 2..length {\n        if length % i ==\
    \ 0 {\n            is_prime = false;\n            break;\n        }\n    }\n \
    \   if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut\
    \ start = a;\n    let mut end = b;\n    if a > c {\n        start = c;\n    }\n\
    \    if b < d {\n        end = d;\n    }\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if start % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n\
    \    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    if is_prime(end - start + 1) {\n        return String::from(\"YES\"\
    );\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n \
    \   let (start2, end2) = interval2;\n    if end1 < start2 || end2 < start1 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start\
    \ + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\"\
    )", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let len = end - start\
    \ + 1;\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let (start, end) = if a > c { (a, b) } else\
    \ { (c, d) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start >", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    if start1 > end2 || start2 > end1 {\n        return String::from(\"NO\"\
    );\n    }\n    let mut start = start1;\n    let mut end = end1;\n    if start2\
    \ > start1 {\n        start = start2;\n    }\n    if end2 < end1 {\n        end\
    \ = end2;\n    }\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..end {\n        if end %\
    \ i == 0 {\n            is_prime = false;\n            break;\n        }\n   \
    \ }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut\
    \ start = a;\n    let mut end = b;\n    if a > c {\n        start = c;\n    }\n\
    \    if b < d {\n        end = d;\n    }\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let mut result = String::from(\"NO\");\n \
    \   for i in start..=end {\n        if is_prime(i) {\n            result = String::from(\"\
    YES\");\n            break;\n        }\n    }\n    result", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let mut start = start1;\n    let mut end = end1;\n    if start2 > start1 {\n\
    \        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n \
    \   }\n    if start > end {\n        return String::from(\"NO\");\n    }\n   \
    \ let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    for i\
    \ in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let mut start = start1;\n\
    \    let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n\
    \    }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if is_prime(length) {\n        return String::from(\"YES\");\n    }\n   \
    \ String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length) {\n\
    \        return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "  \
    \  let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let end\
    \ = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    if start\
    \ == end {\n        return String::from(\"YES\");\n    }\n    let len = end -\
    \ start + 1;\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    if len % 2 == 0 {\n        return String::from(\"NO\");\n    }\n    for i\
    \ in 3..len {\n        if len % i == 0 {\n            return String::from(\"NO\"\
    );\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = if start1 > start2 { start1 } else { start2 };\n    let end = if end1\
    \ < end2 { end1 } else { end2 };\n    if start > end {\n        String::from(\"\
    NO\")\n    } else {\n        if is_prime(end - start + 1) {\n            String::from(\"\
    YES\")\n        } else {\n            String::from(\"NO\")\n        }\n    }",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = if start1 > start2 {\n        (start1, end1)\n    } else {\n\
    \        (start2, end2)\n    };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..(end - start + 1)\
    \ {\n        if (end - start + 1) % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    if is_prime(end\
    \ - start + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = max(start1, start2);\n    let end = min(end1, end2);\n    if\
    \ start > end {\n        return String::from(\"NO\");\n    }\n    let len = end\
    \ - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n    }\n\
    \    if len == 2 {\n        return String::from(\"YES\");\n    }\n    if len %\
    \ 2 == 0 {\n        return String::from(\"NO\");\n    }\n    for i in 3..len {\n\
    \        if len % i == 0 {\n            return String::from(\"NO\");\n       \
    \ }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    if length == 2 {\n\
    \        return String::from(\"YES\");\n    }\n    for i in 2..length {\n    \
    \    if length % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let\
    \ end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if is_prime(length) {\n\
    \        return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "  \
    \  let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let mut start = start1;\n    let mut end = end1;\n    if start2 > start1\
    \ {\n        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  if is_prime(end - start + 1) {\n        return String::from(\"YES\");\n   \
    \ }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let mut start = start1;\n    let mut end = end1;\n    if start2 > start1\
    \ {\n        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if is_prime(length) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = (end - start) + 1;\n    if is_prime(length) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (mut start, mut end) = (interval1.0,\
    \ interval1.1);\n    if interval1.0 > interval1.1 {\n        start = interval1.1;\n\
    \        end = interval1.0;\n    }\n    let (mut start2, mut end2) = (interval2.0,\
    \ interval2.1);\n    if interval2.0 > interval2.1 {\n        start2 = interval2.1;\n\
    \        end2 = interval2.0;\n    }\n    if start > end2 || start2 > end {\n \
    \       return String::from(\"NO\");\n    }\n    let mut start_intersection =\
    \ start;\n    if start2 > start {\n        start_intersection = start2;\n    }\n\
    \    let mut end_intersection = end;\n    if end2 < end {\n        end_intersection\
    \ = end2;\n    }\n    if start_intersection >= end_intersection {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end_intersection - start_intersection;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ is_prime = true;\n    for i in 2..length {\n        if length % i == 0 {\n \
    \           is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let end\
    \ = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = if start1 > start2 {\n        (start1, end1)\n    } else {\n\
    \        (start2, end2)\n    };\n    if end < start {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    if is_prime {\n        String::from(\"YES\")\n    } else {\n     \
    \   String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let mut start = std::cmp::max(start1, start2);\n\
    \    let mut end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let mut length = end - start + 1;\n    if\
    \ length == 1 {\n        return String::from(\"NO\");\n    }\n    while length\
    \ > 1 {\n        if start % length == 0 {\n            return String::from(\"\
    NO\");\n        }\n        length -= 1;\n    }\n    String::from(\"YES\")", " \
    \   let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n   \
    \ let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if end % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    if is_prime(end - start) {\n\
    \        return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "  \
    \  let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let length = end - start\
    \ + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n    }\n  \
    \  if length == 2 {\n        return String::from(\"YES\");\n    }\n    for i in\
    \ 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n   \
    \ }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    if is_prime(end - start + 1) {\n        return String::from(\"YES\");\n \
    \   }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let end\
    \ = end1.min(end2);\n    if start > end {\n        return String::from(\"NO\"\
    );\n    }\n    let length = end - start + 1;\n    if is_prime(length) {\n    \
    \    return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let start = if start1 > start2 { start1 } else { start2 };\n    let end = if\
    \ end1 < end2 { end1 } else { end2 };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    if is_prime(end - start + 1) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..end {\n        if start % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let mut start\
    \ = interval1.0;\n    let mut end = interval1.1;\n    if interval2.0 > start {\n\
    \        start = interval2.0;\n    }\n    if interval2.1 < end {\n        end\
    \ = interval2.1;\n    }\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..end {\n        if\
    \ end % i == 0 {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let length = end -\
    \ start + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n   \
    \ }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let length = end - start\
    \ + 1;\n    if length < 2 {\n        return String::from(\"NO\");\n    }\n   \
    \ if length == 2 {\n        return String::from(\"YES\");\n    }\n    for i in\
    \ 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    let mut start = start1;\n\
    \    let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n\
    \    }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n \
    \   for i in 2..(end - start + 1) {\n        if (end - start + 1) % i == 0 {\n\
    \            is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return String::from(\"NO\");\n    }\n    let length = end - start\
    \ + 1;\n    if is_prime(length) {\n        return String::from(\"YES\");\n   \
    \ }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = if start1 > start2 { start1 } else\
    \ { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let length = end -\
    \ start + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n   \
    \ }\n    if length == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let (start, end) = if a > c { (a, b) } else\
    \ { (c, d) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > b || start > d { (0, 0) } else {\
    \ (start, end) };\n    let (start, end) = if end < a || end < c { (0, 0) } else\
    \ { (start, end) };\n    let length = end - start + 1;\n    let is_prime = length\
    \ > 1 && (2..length).all(|x| length % x != 0);\n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = (end - start) +\
    \ 1;\n    if length == 1 {\n        return String::from(\"NO\");\n    }\n    if\
    \ length == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let len = end - start + 1;\n    if len ==\
    \ 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..len {\n  \
    \      if len % i == 0 {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if length == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..length {\n        if length % i == 0 {\n     \
    \       return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\"\
    )", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    let length = end -\
    \ start + 1;\n    if length == 1 {\n        return String::from(\"NO\");\n   \
    \ }\n    if length == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let (start, end) = if\
    \ start1 > start2 {\n        (start1, end1)\n    } else {\n        (start2, end2)\n\
    \    };\n    if start > end {\n        return String::from(\"NO\");\n    }\n \
    \   let length = end - start + 1;\n    if length < 2 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = if start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2\
    \ { end1 } else { end2 };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n       \
    \ return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n   \
    \ if is_prime(length) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    if start == end {\n        return String::from(\"YES\");\n    }\n    let\
    \ mut is_prime = true;\n    for i in 2..end {\n        if end % i == 0 {\n   \
    \         is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        String::from(\"YES\")\n    } else {\n        String::from(\"NO\"\
    )\n    }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let mut start = start1;\n    let mut end = end1;\n    if start2 > start1\
    \ {\n        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  let mut is_prime = true;\n    for i in 2..(end - start + 1) {\n        if (end\
    \ - start + 1) % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n\
    \    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let end\
    \ = end1.min(end2);\n    if start > end {\n        return String::from(\"NO\"\
    );\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let mut start = start1;\n\
    \    let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n\
    \    }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    if start == end {\n        return\
    \ String::from(\"YES\");\n    }\n    let mut is_prime = true;\n    for i in 2..end\
    \ {\n        if start % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        String::from(\"YES\")\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    if len == 2 {\n        return String::from(\"YES\");\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let mut start = a;\n    let mut end = b;\n \
    \   if c > a {\n        start = c;\n    }\n    if d < b {\n        end = d;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    let mut is_prime = true;\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n       \
    \ return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n  \
    \      return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return String::from(\"NO\");\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = max(start1,\
    \ start2);\n    let end = min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let len = end - start + 1;\n    if is_prime(len)\
    \ {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start2 > start1 {\n   \
    \     start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if is_prime(length) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..end {\n        if end % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..end {\n        if end % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let (start, end) = (max(start1, start2),\
    \ min(end1, end2));\n    if start > end {\n        return String::from(\"NO\"\
    );\n    }\n    let mut is_prime = true;\n    for i in 2..(end - start + 1) {\n\
    \        if (end - start + 1) % i == 0 {\n            is_prime = false;\n    \
    \        break;\n        }\n    }\n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 2 {\n     \
    \   return String::from(\"YES\");\n    }\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            return String::from(\"NO\");\n        }\n   \
    \ }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n     \
    \   return String::from(\"NO\");\n    }\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    if is_prime(end - start + 1) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start == end {\n\
    \        return String::from(\"YES\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..start {\n        if start % i == 0 {\n            is_prime =\
    \ false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..end {\n        if end % i ==\
    \ 0 {\n            is_prime = false;\n            break;\n        }\n    }\n \
    \   if is_prime {\n        return String::from(\"YES\");\n    }\n    for i in\
    \ start..end {\n        for j in 2..i {\n            if i % j == 0 {\n       \
    \         is_prime = false;\n                break;\n            }\n        }\n\
    \        if is_prime {\n            return String::from(\"YES\");\n        }\n\
    \        is_prime = true;\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let mut start =\
    \ std::cmp::max(start1, start2);\n    let mut end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    if start\
    \ == end {\n        return String::from(\"YES\");\n    }\n    while start < end\
    \ {\n        if end - start == 1 {\n            return String::from(\"YES\");\n\
    \        }\n        start += 1;\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1\
    \ || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let start\
    \ = if start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2\
    \ { end1 } else { end2 };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    if is_prime(end - start + 1) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut\
    \ end = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if\
    \ end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut\
    \ end = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if\
    \ end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let len = end - start + 1;\n    if len ==\
    \ 1 {\n        return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if is_prime(len) {\n      \
    \  return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let len = end - start + 1;\n    if len == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    if len == 2 {\n        return String::from(\"\
    YES\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start2 > start1 {\n   \
    \     start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\"\
    );\n    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            is_prime = false;\n            break;\n     \
    \   }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 2 {\n        return String::from(\"YES\");\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return String::from(\"\
    NO\");\n    }\n    for i in 2..len {\n        if len % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    if is_prime(end -\
    \ start + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let mut start = std::cmp::max(start1, start2);\n    let mut end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let mut count = 0;\n    while start <= end {\n        count += 1;\n     \
    \   start += 1;\n    }\n    if is_prime(count) {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n\
    \        return String::from(\"NO\");\n    }\n    if start1 > end2 || start2 >\
    \ end1 {\n        return String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let diff = end - start;\n\
    \    if diff == 0 {\n        return String::from(\"NO\");\n    }\n    if diff\
    \ == 1 {\n        return String::from(\"YES\");\n    }\n    let mut is_prime =\
    \ true;\n    for i in 2..diff {\n        if diff % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let (start, end)\
    \ = (start1.max(start2), end1.min(end2));\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let len = end - start + 1;\n    if len ==\
    \ 1 {\n        return String::from(\"NO\");\n    }\n    if len == 2 {\n      \
    \  return String::from(\"YES\");\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n   \
    \ String::from(\"YES\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return String::from(\"NO\");\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return String::from(\"NO\"\
    );\n    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            is_prime = false;\n            break;\n     \
    \   }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n\
    \    String::from(\"NO\")", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = if start1 > start2 { start1 } else { start2\
    \ };\n    let end = if end1 < end2 { end1 } else { end2 };\n    if start > end\
    \ {\n        String::from(\"NO\")\n    } else {\n        let len = end - start\
    \ + 1;\n        if len == 1 {\n            String::from(\"NO\")\n        } else\
    \ {\n            let mut is_prime = true;\n            for i in 2..len {\n   \
    \             if len % i == 0 {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if is_prime\
    \ {\n                String::from(\"YES\")\n            } else {\n           \
    \     String::from(\"NO\")\n            }\n        }\n    }", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return String::from(\"NO\");\n    }\n    for i\
    \ in 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let (start, end) = if start1 > start2 {\n        (start1, end1)\n    } else\
    \ {\n        (start2, end2)\n    };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let mut length = end - start;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    length += 1;\n    let mut is_prime\
    \ = true;\n    for i in 2..length {\n        if length % i == 0 {\n          \
    \  is_prime = false;\n            break;\n        }\n    }\n    if is_prime {\n\
    \        String::from(\"YES\")\n    } else {\n        String::from(\"NO\")\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n       \
    \ return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n  \
    \      return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let (start, end) = if start1 > start2 {\n        (start1, end2)\n    } else\
    \ {\n        (start2, end1)\n    };\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n\
    \    let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    String::from(\"YES\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let start\
    \ = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end {\n\
    \        String::from(\"NO\")\n    } else {\n        if is_prime(end - start +\
    \ 1) {\n            String::from(\"YES\")\n        } else {\n            String::from(\"\
    NO\")\n        }\n    }", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return\
    \ String::from(\"NO\");\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ String::from(\"NO\");\n    }\n    let length = end - start + 1;\n    if length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let (start, end) = if start1 > start2\
    \ {\n        (start1, end1)\n    } else {\n        (start2, end2)\n    };\n  \
    \  if start > end {\n        return String::from(\"NO\");\n    }\n    let len\
    \ = end - start + 1;\n    if len == 2 {\n        return String::from(\"YES\");\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2\
    \ > end2 {\n        return String::from(\"NO\");\n    }\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    if is_prime(end - start + 1) {\n        return String::from(\"YES\"\
    );\n    }\n    String::from(\"NO\")", "    let (start1, end1) = interval1;\n \
    \   let (start2, end2) = interval2;\n    let start = start1.max(start2);\n   \
    \ let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (i1_start, i1_end) = interval1;\n    let (i2_start, i2_end)\
    \ = interval2;\n    if i1_start > i2_end || i2_start > i1_end {\n        return\
    \ String::from(\"NO\");\n    }\n    let start = i1_start.max(i2_start);\n    let\
    \ end = i1_end.min(i2_end);\n    let length = end - start + 1;\n    if length\
    \ <= 1 {\n        return String::from(\"NO\");\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    String::from(\"YES\")", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return String::from(\"\
    NO\");\n    }\n    let length = end - start + 1;\n    if length == 1 {\n     \
    \   return String::from(\"NO\");\n    }\n    if length == 2 {\n        return\
    \ String::from(\"YES\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    if start > end {\n       \
    \ return String::from(\"NO\");\n    }\n    if is_prime(end - start + 1) {\n  \
    \      return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1\
    \ > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n   \
    \ let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return String::from(\"NO\");\n    }\n    if is_prime(end -\
    \ start + 1) {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let mut start = start1;\n    let mut end = end1;\n    if start2 > start1\
    \ {\n        start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n\
    \    }\n    if start > end {\n        return String::from(\"NO\");\n    }\n  \
    \  let length = end - start + 1;\n    if length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if length == 2 {\n        return String::from(\"YES\");\n \
    \   }\n    let mut is_prime = true;\n    for i in 2..length {\n        if length\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"\
    NO\")", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n\
    \    }\n    if start1 > end2 || start2 > end1 {\n        return String::from(\"\
    NO\");\n    }\n    let start = if start1 > start2 { start1 } else { start2 };\n\
    \    let end = if end1 < end2 { end1 } else { end2 };\n    let len = end - start\
    \ + 1;\n    if len < 2 {\n        return String::from(\"NO\");\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return String::from(\"NO\");\n    }\n    let length = end - start + 1;\n\
    \    if length < 2 {\n        return String::from(\"NO\");\n    }\n    for i in\
    \ 2..length {\n        if length % i == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    String::from(\"YES\")", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return String::from(\"NO\");\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ String::from(\"NO\");\n    }\n    for i in 2..length {\n        if length %\
    \ i == 0 {\n            return String::from(\"NO\");\n        }\n    }\n    String::from(\"\
    YES\")"]
stop_tokens:
- "\n}"
