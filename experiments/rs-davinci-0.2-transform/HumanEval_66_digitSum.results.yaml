language: rs
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |sum, c| sum + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmpu9kc351k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        acc + if c.is_ascii_uppercase()\
    \ { c as isize } else { 0 }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |sum, c| sum + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmpu9kc351k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        let c = c as isize;\n   \
    \     if c >= 65 && c <= 90 {\n            acc + c\n        } else {\n       \
    \     acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, x| acc + x as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp970g6urf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        acc + if c.is_ascii_uppercase()\
    \ {\n            c as isize\n        } else {\n            0\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        acc + if c.is_uppercase()\
    \ {\n            c as isize\n        } else {\n            0\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        let c = c as\
    \ u8;\n        if c >= 65 && c <= 90 {\n            sum += c as isize;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        acc + if c.is_uppercase()\
    \ { c as isize } else { 0 }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |sum, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            sum + c as isize\n        } else {\n            sum\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, x| {\n        if x.is_uppercase() {\n \
    \           acc + x as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010647
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp8ner507o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010647
