language: rs
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6y_cvqep.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6y_cvqep.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6y_cvqep.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (idx, num) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && num % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6y_cvqep.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6y_cvqep.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6d8rffln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpv7rjdwep.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, v)| v % 2 != 0).map(|(_, v)| v).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5norub1z.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ v)| v % 2 != 0).map(|(_, v)| v).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `v`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, v)| *v % 2 != 0).map(|(_, v)| v).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpy026w1bk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp2qugo2jd.rs:10:74\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum()\n   |                                \
    \                                        - ^ - {integer}\n   |               \
    \                                                         |\n   |            \
    \                                                            &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n   |   \
    \                                                                     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, i)| i).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5ekut8h5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n\
    \ % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpl5t4l5kb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpjwzxr1zt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011018
