name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n \
    \           acc + c as isize\n        } else {\n            acc\n        }\n \
    \   })", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, c| acc + c as isize)',
  '    s.chars().fold(0, |acc, c| acc + c as isize)', '    s.chars().fold(0, |acc,
    c| acc + if c.is_uppercase() { c as isize } else { 0 })', '    s.chars().fold(0,
    |acc, c| acc + if c.is_uppercase() { c as isize } else { 0 })', '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_uppercase() {\n            acc + c as isize\n        } else\
    \ {\n            acc\n        }\n    })", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_ascii_uppercase() {\n            sum += c as isize;\n       \
    \ }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n      \
    \  if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n \
    \   sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |acc, c|
    acc + c as isize)', "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", '    s.chars().fold(0, |acc, c| acc + c as isize)', "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
