name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ['    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut filtered_strings = Vec::<String>::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut result = Vec::<String>::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::<String>::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut result = Vec::<String>::new();\n    for string in strings {\n     \
    \   if string.starts_with(&prefix) {\n            result.push(string);\n     \
    \   }\n    }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::<String>::new();\n    for string in strings {\n        if\
    \ string.starts_with(&prefix) {\n            result.push(string);\n        }\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
