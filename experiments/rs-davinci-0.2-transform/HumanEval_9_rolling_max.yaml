name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1, 2,\
  \ 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut max = numbers[0];\n    let mut result = Vec::new();\n \
    \   result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for number in numbers.iter().skip(1) {\n        if\
    \ *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = Vec::new();\n    result.push(max_so_far);\n    for n in numbers.iter().skip(1)\
    \ {\n        max_so_far = max_so_far.max(*n);\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = Vec::new();\n    result.push(max_so_far);\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for n in numbers {\n        max = std::cmp::max(max,\
    \ n);\n        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for number in numbers {\n        max\
    \ = std::cmp::max(max, number);\n        result.push(max);\n    }\n    result",
  "    let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \    for n in numbers.iter().skip(1) {\n        if *n > max {\n            max\
    \ = *n;\n        }\n        result.push(max);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = Vec::new();\n    result.push(max_so_far);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far {\n     \
    \       max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut result = Vec::with_capacity(numbers.len());\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = Vec::new();\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in numbers\
    \ {\n        max = std::cmp::max(max, number);\n        result.push(max);\n  \
    \  }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
