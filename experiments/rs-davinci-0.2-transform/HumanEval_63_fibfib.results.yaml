language: rs
name: HumanEval_63_fibfib
results:
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        a = b;\n      \
    \  b = c;\n        c = a + b + c;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpaibr5iq6.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 0..n {\n  \
    \      d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_4klhmjc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let\
    \ mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n        a = b;\n  \
    \      b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpu2xkk839.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = a + b + c;\n    for _\
    \ in 3..n {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b\
    \ + c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..n+1\
    \ {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_3 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_1 = 1;\n    let mut n = 0;\n    for _ in 3..n {\n  \
    \      n = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = n;\n    }\n    n\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpb95s3gk1.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut f1 = 0;\n    let mut f2 = 0;\n    let mut\
    \ f3 = 1;\n    let mut f4 = 1;\n    for _ in 3..n {\n        f4 = f1 + f2 + f3;\n\
    \        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n    f4\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpi931afhf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _\
    \ in 3..n + 1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..n+1\
    \ {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be >= 0\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..n\
    \ + 1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9qow4ifl.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 0..n {\n  \
    \      d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_4klhmjc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut i = 3;\n    while i <= n {\n\
    \        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \        i += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n < 2 {\n        return 0;\n    }\n\
    \    if n == 2 {\n        return 1;\n    }\n    let mut n_minus_1 = 1;\n    let\
    \ mut n_minus_2 = 1;\n    let mut n_minus_3 = 0;\n    let mut result = 2;\n  \
    \  for _ in 3..n {\n        result = n_minus_1 + n_minus_2 + n_minus_3;\n    \
    \    n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1\
    \ = result;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_1 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_3 = 1;\n    let mut result = 0;\n    for _ in 3..n +\
    \ 1 {\n        result = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_1\
    \ = n_minus_2;\n        n_minus_2 = n_minus_3;\n        n_minus_3 = result;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    } else if n == 2 {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxs30kkrw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9qow4ifl.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let\
    \ mut d = 1;\n    for _ in 3..n {\n        d = a + b + c;\n        a = b;\n  \
    \      b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp85kmpwkx.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    Negative number\");\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    for _ in 0..n {\n        let d = a + b + c;\n        a = b;\n  \
    \      b = c;\n        c = d;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 0..n {\n  \
    \      d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_4klhmjc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut n1 = 0;\n\
    \    let mut n2 = 0;\n    let mut n3 = 1;\n    let mut sum = 0;\n    for _ in\
    \ 3..n {\n        sum = n1 + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n  \
    \      n3 = sum;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyyc_59k_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be greater than or equal to 0\");\n    }\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 1;\n    }\n    let mut n_minus_1 = 1;\n    let mut n_minus_2 = 1;\n\
    \    let mut n_minus_3 = 0;\n    let mut result = 0;\n    for _ in 3..n {\n  \
    \      result = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_3 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_1 = 1;\n    let mut n_th = 0;\n    for _ in 3..n + 1\
    \ {\n        n_th = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = n_th;\n    }\n    n_th\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n - 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n\
    \    for _ in 3..n {\n        let d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr1o4wcl1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    let mut a = 0;\n    let mut b = 0;\n  \
    \  let mut c = 1;\n    for _ in 0..n {\n        let d = a + b + c;\n        a\
    \ = b;\n        b = c;\n        c = d;\n    }\n    a\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    } else if n == 1 {\n        return 0;\n    } else if n == 2 {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp90up5fw7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut n_minus_3 = 0;\n    let mut n_minus_2 =\
    \ 0;\n    let mut n_minus_1 = 1;\n    let mut n = 0;\n    for _ in 3..n + 1 {\n\
    \        n = n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = n;\n    }\n    n\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpik_n7big.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = a + b + c;\n    for _\
    \ in 3..n {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b\
    \ + c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut\
    \ c = 1;\n    let mut d = a + b + c;\n    for _ in 3..n {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _\
    \ in 3..n+1 {\n        let d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp00a7954u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut a = 0;\n \
    \   let mut b = 0;\n    let mut c = 1;\n    let mut d = 0;\n    for _ in 3..n\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpiie69eld.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011577
