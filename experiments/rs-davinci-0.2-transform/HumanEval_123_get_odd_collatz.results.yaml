language: rs
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        i = if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n\
    \        collatz.push(i);\n    }\n    collatz.into_iter().filter(|&x| x % 2 !=\
    \ 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjtm7cnf5.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_seq = Vec::new();\n    let mut n\
    \ = n;\n    while n != 1 {\n        collatz_seq.push(n);\n        if n % 2 ==\
    \ 0 {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n   \
    \     }\n    }\n    collatz_seq.push(1);\n    collatz_seq.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpkme8f85z.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 { current / 2 } else { 3 * current\
    \ + 1 };\n    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7wgsvz33.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = 3 * i + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsb3rjp3_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd = vec![];\n\
    \    while collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd.push(last);\n  \
    \      }\n    }\n    odd.push(1);\n    odd\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ec8xdu4.rs:26:14\n   |\n\
    26 |     odd.push(1);\n   |              ^\n   |              |\n   |        \
    \      expected `&isize`, found integer\n   |              help: consider borrowing\
    \ here: `&1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ec8xdu4.rs:27:5\n\
    \   |\n14 | fn get_odd_collatz(n: isize) -> Vec<isize> {\n   |               \
    \                  ---------- expected `Vec<isize>` because of return type\n...\n\
    27 |     odd\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_seq = vec![n];\n    let mut i =\
    \ n;\n    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n  \
    \      } else {\n            i = 3 * i + 1;\n        }\n        collatz_seq.push(i);\n\
    \    }\n    collatz_seq.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn\
    \ main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphys58v9z.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 == 0 {\n            n /= 2;\n        } else\
    \ {\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n\
    \    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpojv26b83.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        result.push(n);\n        n = if n % 2 == 0 {\n  \
    \          n / 2\n        } else {\n            3 * n + 1\n        };\n    }\n\
    \    result.push(1);\n    result.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp78u8qmm.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_vec: Vec<isize> = Vec::new();\n\
    \    let mut n = n;\n    while n > 1 {\n        collatz_vec.push(n);\n       \
    \ if n % 2 == 0 {\n            n = n / 2;\n        } else {\n            n = 3\
    \ * n + 1;\n        }\n    }\n    collatz_vec.push(1);\n    collatz_vec.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp5odppgay.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![];\n    let mut m = n;\n    while\
    \ m != 1 {\n        if m % 2 == 1 {\n            v.push(m);\n        }\n     \
    \   m = if m % 2 == 0 { m / 2 } else { 3 * m + 1 };\n    }\n    v.push(1);\n \
    \   v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpyu9_6fp2.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 != 0 {\n            result.push(i);\n  \
    \      }\n        i = if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpv02gi35w.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        collatz.push(current);\n    }\n    collatz.into_iter().filter(|x| x %\
    \ 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvr7qso5_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n\
    \        collatz.push(current);\n    }\n    collatz.into_iter().filter(|x| x %\
    \ 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7l0hepnr.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut odd_collatz = Vec::new();\n    let mut num\
    \ = n;\n    while num != 1 {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    odd_collatz.push(1);\n  \
    \  odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphrnm95t7.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 { current / 2 } else { 3 * current\
    \ + 1 };\n    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7wgsvz33.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut curr = n;\n\
    \    while curr != 1 {\n        if curr % 2 == 0 {\n            curr /= 2;\n \
    \       } else {\n            curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp4y7yh3l.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n \
    \           3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmph2arhptq.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        collatz.push(current);\n    }\n    collatz.into_iter().filter(|x| x %\
    \ 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvr7qso5_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut m = n;\n\
    \    while m != 1 {\n        if m % 2 == 1 {\n            result.push(m);\n  \
    \      }\n        m = if m % 2 == 0 {\n            m / 2\n        } else {\n \
    \           3 * m + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp83i458x_.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut odd_collatz = Vec::new();\n    let mut num\
    \ = n;\n    while num != 1 {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    odd_collatz.push(1);\n    odd_collatz\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphav8ekj_.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 != 0 {\n            result.push(i);\n  \
    \      }\n        i = if i % 2 == 0 {\n            i / 2\n        } else {\n \
    \           3 * i + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7l_rctd8.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i]\
    \ % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n        } else {\n  \
    \          collatz.push(collatz[i] * 3 + 1);\n        }\n        i += 1;\n   \
    \ }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpc3eiv92w.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut odd_collatz = Vec::new();\n    let mut current_num\
    \ = n;\n    while current_num != 1 {\n        if current_num % 2 != 0 {\n    \
    \        odd_collatz.push(current_num);\n        }\n        current_num = if current_num\
    \ % 2 == 0 {\n            current_num / 2\n        } else {\n            current_num\
    \ * 3 + 1\n        };\n    }\n    odd_collatz.push(1);\n    odd_collatz\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4swdk95z.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_vec: Vec<isize> = Vec::new();\n\
    \    let mut num = n;\n    while num != 1 {\n        collatz_vec.push(num);\n\
    \        if num % 2 == 0 {\n            num = num / 2;\n        } else {\n   \
    \         num = 3 * num + 1;\n        }\n    }\n    collatz_vec.push(1);\n   \
    \ collatz_vec.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3i8rit7o.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i]\
    \ % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n        } else {\n  \
    \          collatz.push(collatz[i] * 3 + 1);\n        }\n        i += 1;\n   \
    \ }\n    for j in 0..collatz.len() {\n        if collatz[j] % 2 != 0 {\n     \
    \       odd_collatz.push(collatz[j]);\n        }\n    }\n    odd_collatz\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp0odvd2f.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = 3 * i + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsb3rjp3_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    // TODO: Implement this function.\n    let mut collatz:\
    \ Vec<isize> = Vec::new();\n    let mut num = n;\n    while num != 1 {\n     \
    \   collatz.push(num);\n        if num % 2 == 0 {\n            num = num / 2;\n\
    \        } else {\n            num = 3 * num + 1;\n        }\n    }\n    collatz.push(1);\n\
    \    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpj5tvgpue.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_vec: Vec<isize> = Vec::new();\n\
    \    let mut n = n;\n    while n != 1 {\n        collatz_vec.push(n);\n      \
    \  if n % 2 == 0 {\n            n = n / 2;\n        } else {\n            n =\
    \ 3 * n + 1;\n        }\n    }\n    collatz_vec.push(1);\n    collatz_vec.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp__5tx7mj.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = i * 3 + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpqh88dld9.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = 0;\n\
    \    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i]\
    \ / 2);\n        } else {\n            collatz.push(collatz[i] * 3 + 1);\n   \
    \     }\n        i += 1;\n    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvsni8va9.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0lxqvtrv.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 != 0 {\n            v.push(i);\n        }\n     \
    \   i = if i % 2 == 0 {\n            i / 2\n        } else {\n            3 *\
    \ i + 1\n        };\n    }\n    v.push(1);\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3lsuqv4c.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n \
    \           3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmph2arhptq.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i]\
    \ % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n        } else {\n  \
    \          collatz.push(collatz[i] * 3 + 1);\n        }\n        i += 1;\n   \
    \ }\n    for i in 0..collatz.len() {\n        if collatz[i] % 2 != 0 {\n     \
    \       odd_collatz.push(collatz[i]);\n        }\n    }\n    odd_collatz\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp3eqseho.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        if n % 2 == 1 {\n            result.push(n);\n   \
    \     }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdaohrx4s.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut\
    \ n = n;\n    while n != 1 {\n        v.push(n);\n        if n % 2 == 0 {\n  \
    \          n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n\
    \    }\n    v.push(1);\n    v.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcnxv6kpb.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        if n % 2 == 1 {\n            result.push(n);\n   \
    \     }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n  \
    \          3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpnxqa2tcb.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp_l7865d.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut odd_collatz = Vec::new();\n    let mut num\
    \ = n;\n    while num != 1 {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    odd_collatz.push(1);\n    odd_collatz\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphav8ekj_.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp_l7865d.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        i = if i % 2 == 0 {\n            i / 2\n        }\
    \ else {\n            3 * i + 1\n        };\n        collatz.push(i);\n    }\n\
    \    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpb_g38om1.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_vec: Vec<isize> = Vec::new();\n\
    \    let mut num = n;\n    while num != 1 {\n        collatz_vec.push(num);\n\
    \        if num % 2 == 0 {\n            num = num / 2;\n        } else {\n   \
    \         num = num * 3 + 1;\n        }\n    }\n    collatz_vec.push(1);\n   \
    \ collatz_vec.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpap_x9twz.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = i * 3 + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpt6l_4h8f.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for num in collatz {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpas7ojchn.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        collatz.push(current);\n    }\n    collatz.into_iter().filter(|&x| x\
    \ % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjdi94ytl.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n \
    \           3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmph2arhptq.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 != 0 {\n            result.push(i);\n  \
    \      }\n        i = if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpv02gi35w.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        if n % 2 == 1 {\n            result.push(n);\n   \
    \     }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdaohrx4s.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = 3 * i + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsb3rjp3_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 { current / 2 } else { 3 * current\
    \ + 1 };\n    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7wgsvz33.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i]\
    \ % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n        } else {\n  \
    \          collatz.push(collatz[i] * 3 + 1);\n        }\n        i += 1;\n   \
    \ }\n    for x in collatz {\n        if x % 2 != 0 {\n            odd_collatz.push(x);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpk8mftrv0.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut\
    \ n = n;\n    while n != 1 {\n        if n % 2 == 1 {\n            v.push(n);\n\
    \        }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n \
    \   v.push(1);\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpml2qyy2q.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![];\n    let mut n = n;\n    while\
    \ n != 1 {\n        if n % 2 != 0 {\n            v.push(n);\n        }\n     \
    \   n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    v.push(1);\n \
    \   v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvy618qtq.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = 0;\n\
    \    while collatz[i] != 1 {\n        collatz.push(if collatz[i] % 2 == 0 { collatz[i]\
    \ / 2 } else { collatz[i] * 3 + 1 });\n        i += 1;\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp8as5_ha7.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_vec: Vec<isize> = Vec::new();\n\
    \    let mut current_num = n;\n    while current_num != 1 {\n        collatz_vec.push(current_num);\n\
    \        if current_num % 2 == 0 {\n            current_num = current_num / 2;\n\
    \        } else {\n            current_num = 3 * current_num + 1;\n        }\n\
    \    }\n    collatz_vec.push(1);\n    collatz_vec.iter().filter(|&x| x % 2 !=\
    \ 0).map(|&x| x).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsiarv3ur.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpo73a4sei.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    let mut num = n;\n  \
    \  while num != 1 {\n        if num % 2 != 0 {\n            res.push(num);\n \
    \       }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    res.push(1);\n    res\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvowz2em2.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut current = n;\n    while current != 1 {\n        if\
    \ current % 2 == 0 {\n            current /= 2;\n        } else {\n          \
    \  current = 3 * current + 1;\n        }\n        collatz.push(current);\n   \
    \ }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6tfrzt8w.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = n;\n\
    \    while i > 1 {\n        if i % 2 == 1 {\n            result.push(i);\n   \
    \     }\n        i = if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpb2squo4x.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut odd_collatz = Vec::new();\n    let mut num\
    \ = n;\n    while num != 1 {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    odd_collatz.push(1);\n  \
    \  odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpfe02qisf.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut curr =\
    \ n;\n    while curr != 1 {\n        if curr % 2 != 0 {\n            result.push(curr);\n\
    \        }\n        curr = if curr % 2 == 0 {\n            curr / 2\n        }\
    \ else {\n            curr * 3 + 1\n        };\n    }\n    result.push(1);\n \
    \   result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7yerzey0.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        if n % 2 == 1 {\n            result.push(n);\n   \
    \     }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n  \
    \          3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpnxqa2tcb.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp_l7865d.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    let mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i]\
    \ % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n        } else {\n  \
    \          collatz.push(collatz[i] * 3 + 1);\n        }\n        i += 1;\n   \
    \ }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpc3eiv92w.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_seq = vec![n];\n    let mut curr_num\
    \ = n;\n    while curr_num != 1 {\n        if curr_num % 2 == 0 {\n          \
    \  curr_num /= 2;\n        } else {\n            curr_num = 3 * curr_num + 1;\n\
    \        }\n        collatz_seq.push(curr_num);\n    }\n    collatz_seq.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpkkws_dss.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp_l7865d.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpo73a4sei.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpo73a4sei.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        result.push(n);\n        n = if n % 2 == 0 {\n  \
    \          n / 2\n        } else {\n            3 * n + 1\n        };\n    }\n\
    \    result.push(1);\n    result.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp78u8qmm.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        v.push(i);\n    }\n    v.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpo73a4sei.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = i * 3 + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpt6l_4h8f.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![];\n    let mut n = n;\n    while\
    \ n != 1 {\n        if n % 2 != 0 {\n            v.push(n);\n        }\n     \
    \   n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    v.push(1);\n \
    \   v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvy618qtq.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = i * 3 + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpt6l_4h8f.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut curr = n;\n\
    \    while curr != 1 {\n        if curr % 2 == 0 {\n            curr /= 2;\n \
    \       } else {\n            curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp4y7yh3l.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb4kt_md.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6rfg5nbz.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpa37x5n20.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_list = vec![n];\n    let mut odd_collatz_list\
    \ = vec![];\n    let mut current_number = n;\n    while current_number != 1 {\n\
    \        if current_number % 2 == 0 {\n            current_number = current_number\
    \ / 2;\n        } else {\n            current_number = 3 * current_number + 1;\n\
    \        }\n        collatz_list.push(current_number);\n    }\n    for num in\
    \ collatz_list {\n        if num % 2 != 0 {\n            odd_collatz_list.push(num);\n\
    \        }\n    }\n    odd_collatz_list\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3y10ococ.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 {\n            num / 2\n        } else\
    \ {\n            num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp91fbbm0f.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0lxqvtrv.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut\
    \ n = n;\n    while n != 1 {\n        if n % 2 == 1 {\n            v.push(n);\n\
    \        }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n\
    \            3 * n + 1\n        };\n    }\n    v.push(1);\n    v\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpne3bv929.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2bap00hl.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut\
    \ n = n;\n    while n != 1 {\n        v.push(n);\n        if n % 2 == 0 {\n  \
    \          n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n\
    \    }\n    v.push(1);\n    v.retain(|&x| x % 2 != 0);\n    v\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpmbxcg4c2.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut curr = n;\n\
    \    while curr != 1 {\n        if curr % 2 == 0 {\n            curr /= 2;\n \
    \       } else {\n            curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp4y7yh3l.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 != 0 {\n            result.push(i);\n  \
    \      }\n        i = if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpv02gi35w.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    let mut\
    \ n = n;\n    while n != 1 {\n        if n % 2 == 1 {\n            v.push(n);\n\
    \        }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n \
    \   v.push(1);\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpml2qyy2q.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    while num != 1 {\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n        num = if num % 2 == 0 { num / 2 } else { num * 3 + 1 };\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp61jsuc7y.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut m = n;\n    while\
    \ m != 1 {\n        if m % 2 == 0 {\n            m = m / 2;\n        } else {\n\
    \            m = 3 * m + 1;\n        }\n        if m % 2 != 0 {\n            v.push(m);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpb060uh1s.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n \
    \           3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmph2arhptq.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz_sequence = vec![n];\n    let mut\
    \ current_number = n;\n    while current_number != 1 {\n        if current_number\
    \ % 2 == 0 {\n            current_number /= 2;\n        } else {\n           \
    \ current_number = current_number * 3 + 1;\n        }\n        collatz_sequence.push(current_number);\n\
    \    }\n    collatz_sequence.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpzuhd6t_o.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        if n % 2 == 1 {\n            result.push(n);\n   \
    \     }\n        n = if n % 2 == 0 {\n            n / 2\n        } else {\n  \
    \          3 * n + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpnxqa2tcb.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = 3 * i + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprximy72k.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut current\
    \ = n;\n    while current != 1 {\n        if current % 2 == 0 {\n            current\
    \ /= 2;\n        } else {\n            current = current * 3 + 1;\n        }\n\
    \        if current % 2 != 0 {\n            collatz.push(current);\n        }\n\
    \    }\n    collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp800oyy0y.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut odd_collatz\
    \ = Vec::new();\n    while collatz.last().unwrap() != &1 {\n        let last =\
    \ collatz.last().unwrap();\n        if last % 2 == 0 {\n            collatz.push(last\
    \ / 2);\n        } else {\n            collatz.push(last * 3 + 1);\n        }\n\
    \    }\n    for i in collatz {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n\
    \        }\n    }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdjcse16z.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = 3 * i + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsb3rjp3_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n\
    \            i = i * 3 + 1;\n        }\n        if i % 2 != 0 {\n            v.push(i);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpt6l_4h8f.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = n;\n\
    \    while i != 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n       \
    \ } else {\n            i = 3 * i + 1;\n        }\n        collatz.push(i);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsb3rjp3_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut collatz = vec![n];\n    let mut i = 0;\n\
    \    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i]\
    \ / 2);\n        } else {\n            collatz.push(collatz[i] * 3 + 1);\n   \
    \     }\n        i += 1;\n    }\n    collatz.retain(|&x| x % 2 != 0);\n    collatz\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2cm45w38.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 101
  program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        if n % 2 != 0 {\n            result.push(n);\n  \
    \      }\n        n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n   \
    \ result.push(1);\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4vaw5cj8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010461
