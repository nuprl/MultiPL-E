name: HumanEval_21_rescale_to_unit
language: rs
prompt: "/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
tests: "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
  \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
  \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
  \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0,\
  \ 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
completions: ["    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let (min, max) = (numbers.iter().min().unwrap(), numbers.iter().max().unwrap());\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let mut\
    \ result = numbers.clone();\n    let min = result.iter().min().unwrap();\n   \
    \ let max = result.iter().max().unwrap();\n    let range = max - min;\n    for\
    \ i in 0..result.len() {\n        result[i] = (result[i] - min) / range;\n   \
    \ }\n    result", "    let min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n\
    \    let max = numbers.iter().cloned().fold(f64::MIN, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()", "    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::MIN, f64::max);\n    let range = max - min;\n\
    \    numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let diff = max - min;\n   \
    \ numbers.iter().map(|x| (x - min) / diff).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x -\
    \ min) / (max - min)).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x -\
    \ min) / (max - min)).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let diff = max - min;\n   \
    \ numbers.iter().map(|x| (x - min) / diff).collect()", "    let (min, max) = (numbers.iter().min().unwrap(),\
    \ numbers.iter().max().unwrap());\n    let (min, max) = (*min, *max);\n    let\
    \ scale = 1.0 / (max - min);\n    numbers.iter().map(|x| (x - min) * scale).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let max = numbers.iter().max().unwrap();\n    let min = numbers.iter().min().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let mut result = Vec::new();\n    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    for number in numbers {\n \
    \       result.push((number - min) / (max - min));\n    }\n    result", "    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let delta = max - min;\n    numbers.iter().map(|x| (x - min) / delta).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::MIN, f64::max);\n    let range = max - min;\n\
    \    numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    for i in 0..result.len() {\n\
    \        result[i] = (result[i] - min) / (max - min);\n    }\n    result", " \
    \   let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (*x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let (min, max) = numbers.iter().fold((numbers[0], numbers[0]), |(min, max),\
    \ &x| {\n        (min.min(x), max.max(x))\n    });\n    let range = max - min;\n\
    \    numbers.iter().map(|&x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()", "    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    let mut rescaled = Vec::new();\n    for n in\
    \ numbers {\n        rescaled.push((n - min) / range);\n    }\n    rescaled",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()", "    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let min =\
    \ numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let range = max\
    \ - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let diff =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()", "    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()",
  "    let (min, max) = get_min_max(&numbers);\n    let mut rescaled = Vec::new();\n\
    \    for number in numbers {\n        rescaled.push((number - min) / (max - min));\n\
    \    }\n    rescaled", "    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let (min, max) = (numbers.iter().min().unwrap(), numbers.iter().max().unwrap());\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()", "    let min\
    \ = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|n| (n - min)\
    \ / range).collect()", "    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()",
  "    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range\
    \ = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()", "  \
    \  assert!(numbers.len() >= 2);\n    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let mut result =\
    \ Vec::new();\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    for number in numbers {\n        result.push((number - min) / (max - min));\n\
    \    }\n    result", "    let min = numbers.iter().min().unwrap();\n    let max\
    \ = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x|\
    \ (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x -\
    \ min) / (max - min)).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|n| (n - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x -\
    \ min) / (max - min)).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().min().unwrap();\n\
    \    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n  \
    \  numbers.iter().map(|x| (x - min) / range).collect()", "    let min = numbers.iter().cloned().fold(f64::MAX,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::MIN, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()"]
stop_tokens:
- "\n}"
