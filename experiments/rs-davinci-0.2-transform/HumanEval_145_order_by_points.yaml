name: HumanEval_145_order_by_points
language: rs
prompt: "/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n\
  /// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\n\
  fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
  \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
  \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
  \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
  \ 23, 6, 6]);\n}\n"
completions: ["    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum +=\
    \ x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|n| n.abs() % 10 + n.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize\
    \ % 10 + x.abs() as usize / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&num| {\n\
    \        let mut sum = 0;\n        let mut num = num;\n        while num != 0\
    \ {\n            sum += num % 10;\n            num /= 10;\n        }\n       \
    \ sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let\
    \ mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut n = *n;\n        let mut sum = 0;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() as usize);\n    nums", "    let\
    \ mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums", "  \
    \  let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() % 10 + x.abs() / 10, x));\n    nums", "  \
    \  let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|num| {\n        let mut sum = 0;\n        let\
    \ mut num = *num;\n        while num != 0 {\n            sum += num % 10;\n  \
    \          num /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let mut n = *n;\n\
    \        let mut sum = 0;\n        while n != 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| n.abs() % 10 + n.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| n.abs() % 10 + n.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        if x < 0 {\n            x = -x;\n\
    \        }\n        while x > 0 {\n            sum += x % 10;\n            x /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut n = *n;\n        let mut sum = 0;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() as usize);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ sum_digits(*n));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    nums.into_iter().enumerate().map(|(i, x)| (i, x, x.abs()\
    \ as usize)).collect::<Vec<_>>().sort_by(|a, b| {\n        let (i1, x1, s1) =\
    \ a;\n        let (i2, x2, s2) = b;\n        match s1.cmp(&s2) {\n           \
    \ Ordering::Equal => i1.cmp(&i2),\n            _ => s1.cmp(&s2)\n        }\n \
    \   }).into_iter().map(|(_, x, _)| x).collect()", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut num = *x;\n\
    \        while num != 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums_with_points: Vec<(isize, usize)> = nums\n\
    \        .iter()\n        .enumerate()\n        .map(|(i, n)| (*n, i))\n     \
    \   .collect();\n    nums_with_points.sort_by_key(|(n, _)| {\n        let mut\
    \ sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums_with_points.into_iter().map(|(n,\
    \ _)| n).collect()", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n \
    \       let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n  \
    \          sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 +\
    \ x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| (n.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ n.abs() as usize % 10 + n.abs() as usize / 10);\n    nums", "    let mut result\
    \ = nums.clone();\n    result.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    result", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut n = *n;\n        let mut sum = 0;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut\
    \ n = *n;\n        while n != 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        if x < 0 {\n            x = -x;\n        }\n        while x > 0 {\n \
    \           sum += x % 10;\n            x /= 10;\n        }\n        sum\n   \
    \ });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n   \
    \     let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n     \
    \       sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let\
    \ mut x = x;\n        while x != 0 {\n            sum += x % 10;\n           \
    \ x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        if x < 0 {\n            x = -x;\n        }\n\
    \        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n   \
    \     }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n        let\
    \ mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ sum_digits(x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs());\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| sum_of_digits(*n));\n    nums",
  "    let mut result = nums.clone();\n    result.sort_by(|a, b| {\n        let a_sum\
    \ = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n   \
    \     let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize) % 10 + (x.abs() as usize) / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|num|\
    \ {\n        let mut sum = 0;\n        let mut num = *num;\n        while num\
    \ != 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ n.abs() % 10 + n.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        if x < 0 {\n            x = -x;\n        }\n\
    \        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n   \
    \     }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", '    unimplemented!()', "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ {\n        let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut x = x;\n        let mut sum = 0;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() / 10 + x.abs() % 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut\
    \ n = *n;\n        while n != 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| sum_digits(*n));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut n = *n;\n        let mut sum = 0;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs()\
    \ % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n|\
    \ (n.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        if x < 0 {\n \
    \           x = -x;\n        }\n        while x > 0 {\n            sum += x %\
    \ 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums", "   \
    \ let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        if x < 0 {\n            x = -x;\n        }\n\
    \        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n   \
    \     }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n  \
    \      let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums_with_points: Vec<(isize, usize)> = nums\n      \
    \  .iter()\n        .enumerate()\n        .map(|(i, x)| (*x, i))\n        .collect();\n\
    \    nums_with_points.sort_by_key(|(x, _)| {\n        x.abs()\n            .to_string()\n\
    \            .chars()\n            .map(|c| c.to_digit(10).unwrap() as usize)\n\
    \            .sum::<usize>()\n    });\n    nums_with_points.iter().map(|(x, _)|\
    \ *x).collect()", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n    \
    \    let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n     \
    \       sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut result = nums.clone();\n    result.sort_by(|a, b| {\n\
    \        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n|\
    \ {\n        let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as u32).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let\
    \ mut x = x;\n        while x != 0 {\n            sum += x % 10;\n           \
    \ x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| n.abs() % 10 + n.abs() / 10);\n    nums", "    let mut\
    \ result = nums.clone();\n    result.sort_by(|a, b| {\n        let a_sum = get_sum_of_digits(*a);\n\
    \        let b_sum = get_sum_of_digits(*b);\n        if a_sum == b_sum {\n   \
    \         a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n\
    \    });\n    result", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| x.abs() as usize\
    \ % 10 + x.abs() as usize / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| {\n  \
    \      let mut sum = 0;\n        let mut n = n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| x.abs() as usize);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| sum_digits(*n));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x),\
    \ x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        n.abs()\n       \
    \     .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n            .sum::<isize>()\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let\
    \ mut x = x;\n        while x != 0 {\n            sum += x % 10;\n           \
    \ x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() as usize % 10 + x.abs() as usize / 10);\n  \
    \  nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as u32).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n       \
    \ let mut n = *n;\n        while n != 0 {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut n = *n;\n\
    \        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| n.abs()\
    \ as usize % 10 + n.abs() as usize / 10);\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x),\
    \ x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs()\
    \ as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| sum_digits(*x));\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| (sum_digits(x), x));\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n\
    \        let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n      \
    \  let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|n| {\n        let mut sum = 0;\n        let mut\
    \ n = *n;\n        while n != 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sum\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n        let mut x = x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs() % 10 + x.abs() / 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n   \
    \     let mut sum = 0;\n        let mut x = *x;\n        while x != 0 {\n    \
    \        sum += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&n| (n.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum_digits(*x));\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ {\n        let mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n        sum\n  \
    \  });\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|n| {\n   \
    \     let mut sum = 0;\n        let mut n = *n;\n        while n != 0 {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        sum\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        let mut x = x;\n        while x != 0 {\n            sum\
    \ += x % 10;\n            x /= 10;\n        }\n        sum\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        let mut x = x;\n        while x != 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by_key(|x| {\n        let mut sum = 0;\n       \
    \ let mut x = *x;\n        while x != 0 {\n            sum += x % 10;\n      \
    \      x /= 10;\n        }\n        sum\n    });\n    nums", "    let mut nums\
    \ = nums;\n    nums.sort_by_key(|x| x.abs() as usize % 10 + x.abs() as usize /\
    \ 10);\n    nums", "    let mut nums = nums;\n    nums.sort_by_key(|x| {\n   \
    \     x.abs()\n            .to_string()\n            .chars()\n            .map(|c|\
    \ c.to_digit(10).unwrap())\n            .sum::<u32>()\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by_key(|&x| (x.abs() as usize).to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>());\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by_key(|x| {\n        let mut sum = 0;\n        let mut x = *x;\n\
    \        while x != 0 {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum\n    });\n    nums"]
stop_tokens:
- "\n}"
