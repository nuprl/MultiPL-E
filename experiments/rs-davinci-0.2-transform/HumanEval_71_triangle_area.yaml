name: HumanEval_71_triangle_area
language: rs
prompt: "/// Given the lengths of the three sides of a triangle. Return the area of\n\
  /// the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum\
  \ of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>>\
  \ triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n/// -1.0\nfn\
  \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sides = [a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n  \
    \  let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s\
    \ * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = [a, b, c];\n    sides.sort();\n    if sides[0] +\
    \ sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p\
    \ * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n \
    \       -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n   \
    \ if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = [a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = [a, b, c];\n    sides.sort();\n    if sides[0] +\
    \ sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p\
    \ * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n \
    \       -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n   \
    \ if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = [a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    if a + b > c && a + c > b && b + c >\
    \ a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64)\
    \ * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }",
  "    let mut sides = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    if a + b > c && a + c > b && b + c > a {\n        let p = (a + b\
    \ + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as\
    \ f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = [a, b,\
    \ c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let\
    \ p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = [a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64\
    \ / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }"]
stop_tokens:
- "\n}"
