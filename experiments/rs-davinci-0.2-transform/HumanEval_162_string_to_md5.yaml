name: HumanEval_162_string_to_md5
language: rs
prompt: "/// Given a string 'text', return its md5 hash equivalent string.\n/// If\
  \ 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
  Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
  fn string_to_md5(text: String) -> Option<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    if text.is_empty() {\n        return None;\n    }\n\n    let mut\
    \ hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"\
    {:x}\", hasher.result()))", "    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    Some(format!(\"{:x}\", result))", "  \
    \  if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ mut output = String::new();\n    for byte in result.iter() {\n        output.push_str(&format!(\"\
    {:02x}\", byte));\n    }\n    Some(output)", "    if text.is_empty() {\n     \
    \   return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut s = String::new();\n    for i\
    \ in result.iter() {\n        s.push_str(&format!(\"{:x}\", i));\n    }\n    Some(s)",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\", hasher.result()))",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    Some(format!(\"\
    {:x}\", result))", "    if text.is_empty() {\n        return None;\n    }\n\n\
    \    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    let\
    \ result = hasher.result();\n    let mut s = String::new();\n    for i in result.iter()\
    \ {\n        s.push_str(&format!(\"{:x}\", i));\n    }\n    Some(s)", "    if\
    \ text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ mut hex_str = String::new();\n    for byte in result.iter() {\n        hex_str.push_str(&format!(\"\
    {:02x}\", byte));\n    }\n    Some(hex_str)", "    if text.is_empty() {\n    \
    \    return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut s = String::new();\n    for byte\
    \ in result.iter() {\n        s.push_str(&format!(\"{:x}\", byte));\n    }\n \
    \   Some(s)", "    if text.is_empty() {\n        return None;\n    }\n\n    let\
    \ mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    let result\
    \ = hasher.result();\n    let mut s = String::new();\n    for i in result.iter()\
    \ {\n        s.push_str(&format!(\"{:x}\", i));\n    }\n    Some(s)", "    if\
    \ text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\", hasher.result()))",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let digest = md5::compute(text);\n\
    \    let mut md5_string = String::new();\n    for byte in digest.iter() {\n  \
    \      md5_string.push_str(&format!(\"{:02x}\", byte));\n    }\n\n    Some(md5_string)",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\", hasher.result()))",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ mut md5_string = String::new();\n    for byte in result.iter() {\n        md5_string.push_str(&format!(\"\
    {:02x}\", byte));\n    }\n    Some(md5_string)", "    if text.is_empty() {\n \
    \       return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut s = String::new();\n    for i\
    \ in result.iter() {\n        s.push_str(&format!(\"{:x}\", i));\n    }\n    Some(s)"]
stop_tokens:
- "\n}"
