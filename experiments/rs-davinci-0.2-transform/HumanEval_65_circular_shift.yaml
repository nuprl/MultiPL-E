name: HumanEval_65_circular_shift
language: rs
prompt: "/// Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"21\"\
  )\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
  \ isize, shift: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut digits = x.to_string();\n    let len = digits.len();\n\
    \    let shift = shift % len;\n    if shift == 0 {\n        return digits;\n \
    \   }\n    let mut result = String::new();\n    for i in 0..len {\n        let\
    \ index = (i + shift) % len;\n        result.push(digits.chars().nth(index).unwrap());\n\
    \    }\n    result", "    let mut x = x;\n    let mut digits = Vec::new();\n \
    \   while x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n   \
    \ let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()",
  "    let mut x = x;\n    let mut result = String::new();\n    let mut digits = Vec::new();\n\
    \    while x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n  \
    \  let len = digits.len();\n    for i in 0..len {\n        let idx = (i + shift)\
    \ % len;\n        result.push_str(&digits[idx].to_string());\n    }\n    result",
  "    let mut s = x.to_string();\n    let len = s.len();\n    if shift > len as isize\
    \ {\n        s.chars().rev().collect()\n    } else {\n        let (a, b) = s.split_at(len\
    \ - shift as usize);\n        format!(\"{}{}\", b, a)\n    }", "    let mut x\
    \ = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n        digits.push(x\
    \ % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n    for\
    \ i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i +\
    \ shift) % digits.len()]));\n    }\n    result", "    let mut x = x;\n    let\
    \ mut digits = Vec::new();\n    while x > 0 {\n        digits.push(x % 10);\n\
    \        x /= 10;\n    }\n    digits.reverse();\n    let mut shifted = Vec::new();\n\
    \    for i in 0..digits.len() {\n        shifted.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()",
  "    if shift == 0 {\n        return x.to_string();\n    }\n    let mut digits =\
    \ Vec::new();\n    let mut x = x;\n    while x > 0 {\n        digits.push(x %\
    \ 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n    for i in\
    \ 0..digits.len() {\n        result.push(digits[(i + shift as usize) % digits.len()]);\n\
    \    }\n    result.iter().map(|x| x.to_string()).collect()", "    let mut x =\
    \ x;\n    let mut digits = Vec::new();\n    while x > 0 {\n        digits.push(x\
    \ % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut result = String::new();\n    for _ in 0..shift {\n        if let\
    \ Some(digit) = digits.next() {\n            result.push_str(&digit.to_string());\n\
    \        }\n    }\n    for digit in digits {\n        result.push_str(&digit.to_string());\n\
    \    }\n    result", "    let mut x = x;\n    let mut digits = Vec::new();\n \
    \   let mut result = String::new();\n    while x > 0 {\n        digits.push(x\
    \ % 10);\n        x /= 10;\n    }\n    for _ in 0..shift {\n        let digit\
    \ = digits.pop().unwrap();\n        digits.insert(0, digit);\n    }\n    for digit\
    \ in digits {\n        result.push_str(&digit.to_string());\n    }\n    result",
  "    let mut digits = x.to_string();\n    let len = digits.len();\n    let shift\
    \ = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n    let\
    \ mut result = String::new();\n    for i in 0..len {\n        let digit = digits.chars().nth((i\
    \ + shift) % len).unwrap();\n        result.push(digit);\n    }\n    result",
  "    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n   \
    \ let mut result = String::new();\n    for i in 0..digits.len() {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % digits.len()]));\n    }\n    result", "  \
    \  let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n   \
    \ let mut result = String::new();\n    for i in 0..digits.len() {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % digits.len()]));\n    }\n    result", "  \
    \  let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()",
  "    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let mut i = digits.len() - shift as usize;\n    if i >= digits.len() {\n\
    \        i = 0;\n    }\n    while i < digits.len() {\n        result.push_str(&digits[i].to_string());\n\
    \        i += 1;\n    }\n    i = 0;\n    while i < digits.len() - shift as usize\
    \ {\n        result.push_str(&digits[i].to_string());\n        i += 1;\n    }\n\
    \    result", "    let mut x = x;\n    let mut digits = Vec::new();\n    while\
    \ x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n    let n =\
    \ digits.len();\n    if shift >= n {\n        digits.reverse();\n    } else {\n\
    \        let mut tmp = Vec::new();\n        for i in 0..n {\n            tmp.push(digits[(i\
    \ + shift) % n]);\n        }\n        digits = tmp;\n    }\n    let mut s = String::new();\n\
    \    for i in 0..n {\n        s.push_str(&digits[i].to_string());\n    }\n   \
    \ s", "    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    if shift > digits.len() as isize {\n        digits.reverse();\n    } else\
    \ {\n        let mut tmp = Vec::new();\n        for i in 0..digits.len() {\n \
    \           tmp.push(digits[(i + shift as usize) % digits.len()]);\n        }\n\
    \        digits = tmp;\n    }\n    digits.into_iter().map(|x| x.to_string()).collect::<Vec<_>>().join(\"\
    \")", "    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    if shift > digits.len() as isize {\n        for i in (0..digits.len()).rev()\
    \ {\n            result.push_str(&digits[i].to_string());\n        }\n    } else\
    \ {\n        for i in (0..digits.len()).rev() {\n            result.push_str(&digits[(i\
    \ + shift as usize) % digits.len()].to_string());\n        }\n    }\n    result",
  "    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&(digits[(i + shift as\
    \ usize) % digits.len()]).to_string());\n    }\n    result", "    let mut x =\
    \ x;\n    let mut digits = Vec::new();\n    let mut result = String::new();\n\
    \    while x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n  \
    \  if shift > digits.len() as isize {\n        digits.reverse();\n        for\
    \ d in digits {\n            result.push_str(&d.to_string());\n        }\n   \
    \ } else {\n        for i in 0..digits.len() {\n            result.push_str(&digits[(i\
    \ + shift as usize) % digits.len()].to_string());\n        }\n    }\n    result",
  "    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    let n = digits.len();\n    if shift > n {\n        return digits.into_iter().rev().map(|x|\
    \ x.to_string()).collect();\n    }\n    let mut res = Vec::new();\n    for i in\
    \ 0..n {\n        res.push(digits[(i + shift) % n]);\n    }\n    res.into_iter().map(|x|\
    \ x.to_string()).collect()"]
stop_tokens:
- "\n}"
