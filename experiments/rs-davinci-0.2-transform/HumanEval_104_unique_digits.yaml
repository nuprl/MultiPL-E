name: HumanEval_104_unique_digits
language: rs
prompt: "/// Given a list of positive integers x. return a sorted list of all \n///\
  \ elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
  \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n///\
  \ Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = Vec::<isize>::new();\n    for i in x {\n     \
    \   if i.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0) {\n            continue;\n        }\n        result.push(i);\n   \
    \ }\n    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result", '    x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()
    % 2 == 1)).collect()', "    let mut result = Vec::<isize>::new();\n    for i in\
    \ x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 !=\
    \ 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n  \
    \  result", "    let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            n /= 10;\n     \
    \   }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if is_unique {\n            result.push(i);\n        }\n   \
    \ }\n    result.sort();\n    result", "    let mut result = Vec::<isize>::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result", "    let mut result\
    \ = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.push(i);\n        }\n    }\n    result.sort();\n    result",
  "    let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res", "    let mut res = Vec::new();\n    for i in\
    \ x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 !=\
    \ 0) {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result", "    let mut res = Vec::new();\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            res.push(i);\n      \
    \  }\n    }\n    res.sort();\n    res", "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        for j in i.to_string().chars()\
    \ {\n            if j.to_digit(10).unwrap() % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n        }\n        if is_unique\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even = false;\n        let mut num = i;\n        while num > 0 {\n     \
    \       if num % 2 == 0 {\n                has_even = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if !has_even {\n  \
    \          result.push(i);\n        }\n    }\n    result.sort();\n    result",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result",
  "    let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result"]
stop_tokens:
- "\n}"
