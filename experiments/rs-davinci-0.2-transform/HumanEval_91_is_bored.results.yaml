language: rs
name: HumanEval_91_is_bored
results:
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored && c == ' ' {\n            boredoms += 1;\n            is_bored = false;\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp12tbn02u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if let Some(c) = chars.next() {\n            if c ==\
    \ 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg5clzo8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut sentence = String::new();\n    for c\
    \ in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n            if\
    \ sentence.starts_with(\"I\") {\n                count += 1;\n            }\n\
    \            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl4kdsed1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars()\
    \ {\n        if c == 'I' && prev_char == ' ' {\n            boredoms += 1;\n \
    \       }\n        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpztgbes3y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars()\
    \ {\n        if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n \
    \       }\n        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp68wv9e4r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        }\n        if\
    \ is_bored && c == '.' {\n            boredoms += 1;\n            is_bored = false;\n\
    \        }\n        if is_bored && c == '?' {\n            boredoms += 1;\n  \
    \          is_bored = false;\n        }\n        if is_bored && c == '!' {\n \
    \           boredoms += 1;\n            is_bored = false;\n        }\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg8j1y0e5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored && c == ' ' {\n            count += 1;\n            is_bored = false;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwqkk4hy0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjc4b1uu_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.to_uppercase()\
    \ == \"I\" {\n            boredoms += 1;\n        }\n        sentence_start =\
    \ word.ends_with('.') || word.ends_with('?') || word.ends_with('!');\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpim9187o3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpim9187o3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut words = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8l2lyyy9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpim9187o3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars()\
    \ {\n        if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n \
    \       }\n        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp68wv9e4r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if let Some(c) = chars.next() {\n            if c ==\
    \ 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg5clzo8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if is_bored {\n            if c == '.' || c == '?' || c == '!' {\n\
    \                is_bored = false;\n            }\n        } else {\n        \
    \    if c == 'I' {\n                is_bored = true;\n                boredoms\
    \ += 1;\n            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9f90jlid.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  count += 1;\n            }\n            is_bored = false;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0w3eyrpx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if let Some(c) = chars.next() {\n            if c ==\
    \ 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg5clzo8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for sentence in words {\n        let mut words\
    \ = sentence.split_whitespace();\n        if let Some(word) = words.next() {\n\
    \            if word == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        }\n     \
    \   if is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `0`', /tmp/tmp3osj6_nq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    let\
    \ mut words = S.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        sentence.push_str(word);\n        sentence.push(' ');\n        if word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!') {\n            if sentence.starts_with(\"\
    I \") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if chars.next() == Some('I') {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkndsj_c0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut word_iter = S.split_whitespace();\n\
    \    while let Some(word) = word_iter.next() {\n        if word == \"I\" {\n \
    \           boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvoy8plsy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if is_bored\
    \ && c == '.' {\n            boredoms += 1;\n            is_bored = false;\n \
    \       } else if is_bored && c == '?' {\n            boredoms += 1;\n       \
    \     is_bored = false;\n        } else if is_bored && c == '!' {\n          \
    \  boredoms += 1;\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc5bdsk5k.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let words: Vec<&str> = S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!').collect();\n    for word in words {\n      \
    \  if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp61v54a02.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut words = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for word in words {\n        let mut chars = word.chars();\n\
    \        if chars.next() == Some('I') {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8t4e33wm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if let Some(c) = chars.next() {\n            if c ==\
    \ 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg5clzo8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut word_iter = S.split_whitespace();\n\
    \    while let Some(word) = word_iter.next() {\n        if word == \"I\" {\n \
    \           boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvoy8plsy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut words = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8l2lyyy9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if is_bored\
    \ && c == ' ' {\n            count += 1;\n            is_bored = false;\n    \
    \    } else if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnroasj5a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  boredoms += 1;\n            }\n            is_bored = false;\n        }\n \
    \   }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp51hhf09e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjc4b1uu_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  boredoms += 1;\n            }\n            is_bored = false;\n        }\n \
    \   }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp51hhf09e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjc4b1uu_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence_start = word.ends_with(\"\
    .\") || word.ends_with(\"?\") || word.ends_with(\"!\");\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3bio7yay.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word.to_lowercase()\
    \ == \"i\" {\n            boredoms += 1;\n        }\n        sentence_start =\
    \ word.ends_with('.') || word.ends_with('?') || word.ends_with('!');\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  boredoms += 1;\n            }\n            is_bored = false;\n        }\n \
    \   }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp51hhf09e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    let\
    \ mut words = S.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if word == \".\" || word == \"?\" || word == \"!\" {\n            if\
    \ sentence.starts_with(\"I\") {\n                boredoms += 1;\n            }\n\
    \            sentence.clear();\n        } else {\n            sentence.push_str(word);\n\
    \            sentence.push(' ');\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp_xnb0_f0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_first_word = true;\n    for word\
    \ in S.split_whitespace() {\n        if is_first_word && word == \"I\" {\n   \
    \         boredoms += 1;\n        }\n        is_first_word = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars()\
    \ {\n        if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n \
    \       }\n        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp68wv9e4r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars()\
    \ {\n        if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n \
    \       }\n        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp68wv9e4r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        }\n     \
    \   if is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `0`', /tmp/tmp3osj6_nq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        }\n        if\
    \ c == '.' || c == '?' || c == '!' {\n            if is_bored {\n            \
    \    count += 1;\n            }\n            is_bored = false;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_gbxy7pg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if chars.next() == Some('I') {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkndsj_c0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut start = 0;\n    let mut end = 0;\n\
    \    let mut i = 0;\n    let mut chars = S.chars();\n    while i < S.len() {\n\
    \        let c = chars.next().unwrap();\n        if c == '.' || c == '?' || c\
    \ == '!' {\n            end = i;\n            if S[start..end].starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            start = i +\
    \ 1;\n        }\n        i += 1;\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb7avj8_q.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  count += 1;\n            }\n            is_bored = false;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0w3eyrpx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  count += 1;\n            }\n            is_bored = false;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0w3eyrpx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut word_iter = S.split_whitespace();\n\
    \    while let Some(word) = word_iter.next() {\n        if word == \"I\" {\n \
    \           boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvoy8plsy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if chars.next() == Some('I') {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkndsj_c0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for sentence in words {\n        let mut words\
    \ = sentence.split_whitespace();\n        if let Some(word) = words.next() {\n\
    \            if word == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut iter = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for s in iter {\n        if s.starts_with(\"I\"\
    ) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkjfjp6h5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut iter = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!');\n    for sentence in iter {\n        if sentence.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmponaxqwy_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if is_bored {\n            if c == '.' || c == '?' || c == '!' {\n\
    \                is_bored = false;\n            }\n        } else {\n        \
    \    if c == 'I' {\n                is_bored = true;\n                boredoms\
    \ += 1;\n            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9f90jlid.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        if let Some(c) = chars.next() {\n            if c ==\
    \ 'I' {\n                boredoms += 1;\n            }\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg5clzo8a.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if is_bored {\n\
    \                boredoms += 1;\n            }\n            is_bored = false;\n\
    \        } else if c == ' ' {\n            is_bored = false;\n        } else if\
    \ c == 'I' {\n            is_bored = true;\n        }\n    }\n    boredoms\n}\n\
    \nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpyt4zdxnv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut sentence = String::new();\n    for c\
    \ in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n            if\
    \ sentence.starts_with(\"I\") {\n                count += 1;\n            }\n\
    \            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl4kdsed1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3a0ag75v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        }\n        if c == 'I' {\n            is_bored = true;\n        }\n \
    \       if is_bored {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `0`', /tmp/tmponeyyyjv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.chars();\n        match chars.next() {\n            Some(c) => {\n    \
    \            if c == 'I' {\n                    boredoms += 1;\n             \
    \   }\n            }\n            None => {}\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbyaeqid5.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence_start = true;\n    for word\
    \ in S.split_whitespace() {\n        if sentence_start && word == \"I\" {\n  \
    \          boredoms += 1;\n        }\n        sentence_start = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            is_bored = true;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if is_bored {\n              \
    \  boredoms += 1;\n            }\n            is_bored = false;\n        }\n \
    \   }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp51hhf09e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    S.split(|c: char| c == '.' || c == '?' || c == '!')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpim9187o3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut chars =\
    \ word.split_whitespace();\n        if let Some(first) = chars.next() {\n    \
    \        if first == \"I\" {\n                boredoms += 1;\n            }\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 0
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        let mut words =\
    \ word.split_whitespace();\n        if words.next() == Some(\"I\") {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptjbb3_zt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut sentence = String::new();\n    for\
    \ c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  if sentence.starts_with(\"I\") {\n                boredoms += 1;\n        \
    \    }\n            sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdu9gz2b3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
- exit_code: 101
  program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
    Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize\
    \ {\n    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if is_bored {\n            if c == '.' || c == '?' || c == '!' {\n\
    \                is_bored = false;\n            }\n        } else {\n        \
    \    if c == 'I' {\n                is_bored = true;\n                boredoms\
    \ += 1;\n            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n   \
    \ let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9f90jlid.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009019
