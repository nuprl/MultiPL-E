name: HumanEval_147_get_max_triples
language: rs
prompt: "/// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
  \ i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i <\
  \ j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>>\
  \ get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The\
  \ only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count", "    let mut a = vec![0;\
    \ n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n\
    \    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i +\
    \ 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i as usize]\
    \ + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count", "    let mut\
    \ a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i\
    \ - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for j\
    \ in i + 1..n {\n            for k in j + 1..n {\n                if (a[i as usize]\
    \ + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count", "    let mut\
    \ a = vec![];\n    for i in 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n\
    \    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n -\
    \ 1 {\n            for k in j + 1..n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count", "    let mut a = vec![];\n    for i in 1..n+1\
    \ {\n        a.push(i*i - i + 1);\n    }\n    let mut count = 0;\n    for i in\
    \ 0..n-2 {\n        for j in i+1..n-1 {\n            for k in j+1..n {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count", "    let mut\
    \ a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i\
    \ - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i\
    \ as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count", "   \
    \ let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize]\
    \ = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n \
    \       for j in i + 1..n - 1 {\n            for k in j + 1..n {\n           \
    \     if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n        \
    \            count += 1;\n                }\n            }\n        }\n    }\n\
    \    count", "    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() {\n  \
    \      for j in i + 1..a.len() {\n            for k in j + 1..a.len() {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count", "    let\
    \ mut a = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i - i + 1);\n \
    \   }\n    let mut count = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1\
    \ {\n            for k in j+1..n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count", "    let mut a = Vec::with_capacity(n as usize);\n\
    \    for i in 1..n+1 {\n        a.push(i * i - i + 1);\n    }\n    let mut count\
    \ = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n            for k\
    \ in j+1..n {\n                if (a[i as usize] + a[j as usize] + a[k as usize])\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count", "    let mut a = vec![0; n as usize];\n   \
    \ for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            for\
    \ k in j + 1..n {\n                if (a[i as usize] + a[j as usize] + a[k as\
    \ usize]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count", "    let mut a = vec![0; n as usize];\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            for\
    \ k in j+1..n {\n                if (a[i as usize] + a[j as usize] + a[k as usize])\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count", "    let mut a = Vec::new();\n    for i in\
    \ 1..=n {\n        a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n   \
    \ for i in 0..(n - 2) {\n        for j in (i + 1)..(n - 1) {\n            for\
    \ k in (j + 1)..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                count += 1;\n                }\n            }\n        }\n  \
    \  }\n    count", "    let mut a = vec![0; n as usize];\n    for i in 0..n {\n\
    \        a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for\
    \ i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n\
    \ {\n                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count", "    let mut a = Vec::with_capacity(n as usize);\n\
    \    for i in 1..n+1 {\n        a.push(i * i - i + 1);\n    }\n    let mut count\
    \ = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n            for k\
    \ in j+1..n {\n                if (a[i as usize] + a[j as usize] + a[k as usize])\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count", "    let mut a = vec![0; n as usize];\n   \
    \ for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            for\
    \ k in j + 1..n {\n                if (a[i as usize] + a[j as usize] + a[k as\
    \ usize]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count", "    let mut a = vec![];\n    for i\
    \ in 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n           \
    \         count += 1;\n                }\n            }\n        }\n    }\n  \
    \  count", "    let mut a = vec![0; n as usize];\n    for i in 0..n {\n      \
    \  a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in\
    \ 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n\
    \                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    count", "    let mut a = Vec::new();\n    for i in 1..=n {\n     \
    \   a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count", "    let\
    \ mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i - i + 1);\n\
    \    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i +\
    \ 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count"]
stop_tokens:
- "\n}"
