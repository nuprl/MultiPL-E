name: HumanEval_48_is_palindrome
language: rs
prompt: "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\
  \"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>>\
  \ is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"\
  zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c1),\
    \ Some(c2)) => {\n                if c1 != c2 {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }", "    let mut chars = text.chars();\n\
    \    let mut rev_chars = text.chars().rev();\n    loop {\n        match (chars.next(),\
    \ rev_chars.next()) {\n            (Some(c1), Some(c2)) => {\n               \
    \ if c1 != c2 {\n                    return false;\n                }\n      \
    \      }\n            (None, None) => return true,\n            _ => return false,\n\
    \        }\n    }", "    let mut chars = text.chars();\n    let mut reversed =\
    \ text.chars().rev();\n    loop {\n        match (chars.next(), reversed.next())\
    \ {\n            (Some(c1), Some(c2)) => {\n                if c1 != c2 {\n  \
    \                  return false;\n                }\n            }\n         \
    \   (None, None) => return true,\n            _ => return false,\n        }\n\
    \    }", "    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c1),\
    \ Some(c2)) => {\n                if c1 != c2 {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }", "    let text_chars: Vec<char>\
    \ = text.chars().collect();\n    let text_len = text_chars.len();\n    for i in\
    \ 0..text_len / 2 {\n        if text_chars[i] != text_chars[text_len - i - 1]\
    \ {\n            return false;\n        }\n    }\n    true", "    let mut chars\
    \ = text.chars();\n    let mut rev_chars = text.chars().rev();\n    loop {\n \
    \       match (chars.next(), rev_chars.next()) {\n            (Some(c1), Some(c2))\
    \ => {\n                if c1 != c2 {\n                    return false;\n   \
    \             }\n            }\n            (None, None) => return true,\n   \
    \         _ => return false,\n        }\n    }", "    let mut chars = text.chars();\n\
    \    let mut rev_chars = text.chars().rev();\n    loop {\n        match (chars.next(),\
    \ rev_chars.next()) {\n            (Some(c1), Some(c2)) => {\n               \
    \ if c1 != c2 {\n                    return false;\n                }\n      \
    \      }\n            (None, None) => return true,\n            _ => return false,\n\
    \        }\n    }", "    let mut chars = text.chars();\n    let mut rev_chars\
    \ = text.chars().rev();\n    loop {\n        match (chars.next(), rev_chars.next())\
    \ {\n            (Some(c1), Some(c2)) => {\n                if c1 != c2 {\n  \
    \                  return false;\n                }\n            }\n         \
    \   (None, None) => return true,\n            _ => return false,\n        }\n\
    \    }", "    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c1),\
    \ Some(c2)) => {\n                if c1 != c2 {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }", "    let mut chars = text.chars();\n\
    \    let mut rev_chars = text.chars().rev();\n    loop {\n        match (chars.next(),\
    \ rev_chars.next()) {\n            (Some(c1), Some(c2)) => {\n               \
    \ if c1 != c2 {\n                    return false;\n                }\n      \
    \      }\n            (None, None) => return true,\n            _ => return false,\n\
    \        }\n    }", "    let mut chars = text.chars();\n    let mut rev_chars\
    \ = text.chars().rev();\n    loop {\n        match (chars.next(), rev_chars.next())\
    \ {\n            (Some(c1), Some(c2)) => {\n                if c1 != c2 {\n  \
    \                  return false;\n                }\n            }\n         \
    \   (None, None) => return true,\n            _ => return false,\n        }\n\
    \    }", "    let text = text.to_lowercase();\n    let mut chars = text.chars();\n\
    \    let mut rev_chars = text.chars().rev();\n    loop {\n        match (chars.next(),\
    \ rev_chars.next()) {\n            (Some(c1), Some(c2)) => {\n               \
    \ if c1 != c2 {\n                    return false;\n                }\n      \
    \      }\n            (None, None) => return true,\n            _ => return false,\n\
    \        }\n    }", "    let mut chars = text.chars();\n    let mut rev_chars\
    \ = text.chars().rev();\n    loop {\n        match (chars.next(), rev_chars.next())\
    \ {\n            (Some(c1), Some(c2)) => {\n                if c1 != c2 {\n  \
    \                  return false;\n                }\n            }\n         \
    \   (None, None) => return true,\n            _ => return false,\n        }\n\
    \    }", "    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c1),\
    \ Some(c2)) => {\n                if c1 != c2 {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }", "    let text_chars: Vec<char>\
    \ = text.chars().collect();\n    let text_len = text_chars.len();\n    for i in\
    \ 0..text_len / 2 {\n        if text_chars[i] != text_chars[text_len - i - 1]\
    \ {\n            return false;\n        }\n    }\n    true", "    let mut chars\
    \ = text.chars();\n    let mut rev_chars = text.chars().rev();\n    while let\
    \ (Some(c), Some(rc)) = (chars.next(), rev_chars.next()) {\n        if c != rc\
    \ {\n            return false;\n        }\n    }\n    true", "    let mut chars\
    \ = text.chars();\n    let mut rev_chars = text.chars().rev();\n    loop {\n \
    \       match (chars.next(), rev_chars.next()) {\n            (Some(c1), Some(c2))\
    \ => {\n                if c1 != c2 {\n                    return false;\n   \
    \             }\n            }\n            (None, None) => return true,\n   \
    \         _ => return false,\n        }\n    }", "    let mut chars = text.chars();\n\
    \    let mut rev_chars = text.chars().rev();\n    loop {\n        match (chars.next(),\
    \ rev_chars.next()) {\n            (Some(c1), Some(c2)) => {\n               \
    \ if c1 != c2 {\n                    return false;\n                }\n      \
    \      }\n            (None, None) => return true,\n            _ => return false,\n\
    \        }\n    }", "    let mut chars = text.chars();\n    let mut rev_chars\
    \ = text.chars().rev();\n    loop {\n        match (chars.next(), rev_chars.next())\
    \ {\n            (Some(c1), Some(c2)) => {\n                if c1 != c2 {\n  \
    \                  return false;\n                }\n            }\n         \
    \   (None, None) => return true,\n            _ => return false,\n        }\n\
    \    }", "    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c1),\
    \ Some(c2)) => {\n                if c1 != c2 {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }"]
stop_tokens:
- "\n}"
