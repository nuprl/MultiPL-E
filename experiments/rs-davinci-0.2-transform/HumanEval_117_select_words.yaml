name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 4)\n/// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"\
  lamb\")]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
  /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
  world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
  Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut words = s.split_whitespace();\n    let mut result = Vec::<String>::new();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push(word.to_string());\n        }\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !is_vowel(c) {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                if count_consonants(&word) == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !c.is_vowel() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push(word.to_string());\n\
    \        }\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n \
    \       if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                if count_consonants(&word) ==\
    \ n {\n                    words.push(word.clone());\n                }\n    \
    \            word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !is_vowel(c) {\n                count += 1;\n            }\n        } else {\n\
    \            if count == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            count = 0;\n        }\n  \
    \  }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut words = Vec::new();\n    let mut word = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_whitespace() {\n            if word.len() >\
    \ 0 {\n                if count_consonants(&word) == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        if count_consonants(&word) == n {\n        \
    \    words.push(word.clone());\n        }\n    }\n    words", "    let mut words\
    \ = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                if count_consonants(&word) ==\
    \ n {\n                    words.push(word.clone());\n                }\n    \
    \            word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if !c.is_vowel() {\n        \
    \        consonants += 1;\n            }\n            word.push(c);\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n             \
    \   word.push(c);\n                count += 1;\n            } else {\n       \
    \         word.push(c.to_ascii_lowercase());\n                count += 1;\n  \
    \          }\n        } else {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = s.split_whitespace().map(|s| s.to_string()).collect::<Vec<String>>();\n\
    \    let mut result = Vec::<String>::new();\n    for word in words.iter_mut()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n        if count == n {\n        \
    \    result.push(word.clone());\n        }\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        } else {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                count += 1;\n            }\n \
    \       }\n    }\n    if count == n {\n        result.push(word);\n    }\n   \
    \ result", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result.push(word);\n      \
    \      }\n            word = String::new();\n            consonants = 0;\n   \
    \     } else {\n            word.push(c);\n            if !is_vowel(c) {\n   \
    \             consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n \
    \       if c == ' ' {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words"]
stop_tokens:
- "\n}"
