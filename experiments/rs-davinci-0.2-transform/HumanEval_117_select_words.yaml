name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 4)\n/// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"\
  Mary had a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"\
  lamb\")]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n\
  /// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"\
  world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"\
  Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                words.push(word);\n       \
    \     }\n            word = String::new();\n            consonants = 0;\n    \
    \    } else {\n            word.push(c);\n            consonants += match c {\n\
    \                'a' | 'e' | 'i' | 'o' | 'u' | 'y' => 0,\n                _ =>\
    \ 1,\n            };\n        }\n    }\n    if consonants == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut result = Vec::<String>::new();\n    let mut word\
    \ = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    for word in s.split_whitespace() {\n     \
    \   if count_consonants(word) == n {\n            words.push(word.to_string());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push(word);\n    }\n  \
    \  result", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' && c != 'y' {\n                count += 1;\n          \
    \  }\n        }\n    }\n    if count == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'y' {\n                count += 1;\n            }\n        }\n    }\n   \
    \ if count == n {\n        result.push(word);\n    }\n    result", "    let mut\
    \ result = Vec::<String>::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            word.push(c);\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n        } else {\n            if consonants == n {\n \
    \               result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            if is_consonant(c) {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n\
    \                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                    continue;\n                }\n            }\n           \
    \ count += 1;\n            word.push(c);\n        } else {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        }\n    }\n    if count ==\
    \ n {\n        result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            if !c.is_vowel() {\n\
    \                consonants += 1;\n            }\n            word.push(c);\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                words.push(word);\n       \
    \     }\n            word = String::new();\n            consonants = 0;\n    \
    \    } else {\n            word.push(c);\n            if !is_vowel(c) {\n    \
    \            consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        } else {\n          \
    \  word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                consonants += 1;\n            }\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result.push(word);\n      \
    \      }\n            word = String::new();\n            consonants = 0;\n   \
    \     } else {\n            word.push(c);\n            if !is_vowel(c) {\n   \
    \             consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            word.push(c);\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n        } else {\n            if consonants == n {\n \
    \               words.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     words.push(word);\n    }\n    words", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if consonants == n {\n     \
    \           result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        } else {\n            word.push(c);\n  \
    \          if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut counter = 0;\n    for c in s.chars() {\n       \
    \ if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n          \
    \      if !is_vowel(c) {\n                    counter += 1;\n                }\n\
    \            }\n            word.push(c);\n        } else {\n            if counter\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            counter = 0;\n        }\n    }\n    if counter\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        } else {\n            word.push(c);\n  \
    \          if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n  \
    \      if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c.is_ascii_lowercase()\
    \ && !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \   }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut words = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n         \
    \   if consonants == n {\n                words.push(word);\n            }\n \
    \           word = String::new();\n            consonants = 0;\n        } else\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        }\n    }\n    if consonants == n {\n\
    \        words.push(word);\n    }\n    words", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push(word);\n \
    \   }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_whitespace() {\n            if word.len()\
    \ > 0 {\n                if count_consonants(&word) == n {\n                 \
    \   words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        if count_consonants(&word) == n {\n        \
    \    words.push(word.clone());\n        }\n    }\n    words", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        } else {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                count += 1;\n            }\n \
    \       }\n    }\n    if count == n {\n        result.push(word);\n    }\n   \
    \ result", "    let mut words: Vec<String> = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    for word in s.split_whitespace() {\n        if count_consonants(word) ==\
    \ n {\n            words.push(word.to_string());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !c.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_ascii_lowercase() && !is_vowel(c) {\n               \
    \ count += 1;\n            }\n            word.push(c);\n        } else {\n  \
    \          if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        }\n    }\n\
    \    if count == n {\n        result.push(word);\n    }\n    result", "    let\
    \ mut words = Vec::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            count = 0;\n        } else {\n            word.push(c);\n\
    \            if c.is_ascii_lowercase() && !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    for word in s.split_whitespace() {\n        if count_consonants(word) ==\
    \ n {\n            words.push(word.to_string());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result.push(word);\n      \
    \      }\n            word = String::new();\n            consonants = 0;\n   \
    \     } else {\n            word.push(c);\n            if !is_vowel(c) {\n   \
    \             consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut v: Vec<String>\
    \ = Vec::new();\n    let mut c: isize = 0;\n    let mut word: String = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    v.push(word.clone());\n                }\n     \
    \           word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            v.push(word.clone());\n\
    \        }\n    }\n    v", "    let mut result = Vec::<String>::new();\n    let\
    \ mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if consonants == n {\n               \
    \ result.push(word);\n            }\n            word = String::new();\n     \
    \       consonants = 0;\n        } else {\n            word.push(c);\n       \
    \     consonants += match c {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'y'\
    \ => 0,\n                _ => 1,\n            };\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        } else {\n            if count == n {\n              \
    \  result.push(word);\n            }\n            word = String::new();\n    \
    \        count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        } else {\n            word.push(c);\n            if !is_vowel(c) {\n\
    \                consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !c.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push(word.to_string());\n \
    \       }\n    }\n    result", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            if !c.is_vowel() {\n            \
    \    consonants += 1;\n            }\n            word.push(c);\n        } else\
    \ {\n            if consonants == n {\n                result.push(word);\n  \
    \          }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push(word);\n \
    \   }\n    result", "    let mut result = Vec::<String>::new();\n    let mut word\
    \ = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            if !c.is_vowel() {\n              \
    \  consonants += 1;\n            }\n            word.push(c);\n        } else\
    \ {\n            if consonants == n {\n                result.push(word);\n  \
    \          }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words: Vec<String> = Vec::new();\n    let mut word:\
    \ String = String::new();\n    let mut consonants: isize = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            if !c.is_vowel() {\n                consonants\
    \ += 1;\n            }\n            word.push(c);\n        } else {\n        \
    \    if consonants == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            consonants = 0;\n        }\n \
    \   }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n                consonants\
    \ += 1;\n            }\n            word.push(c);\n        } else {\n        \
    \    if consonants == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            consonants = 0;\n        }\n \
    \   }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                result.push(word);\n            }\n      \
    \      word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut words\
    \ = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if word.len() > 0 {\n                let consonants\
    \ = word.chars().filter(|c| !is_vowel(*c)).count();\n                if consonants\
    \ as isize == n {\n                    words.push(word.clone());\n           \
    \     }\n                word.clear();\n            }\n        } else {\n    \
    \        word.push(c);\n        }\n    }\n    if word.len() > 0 {\n        let\
    \ consonants = word.chars().filter(|c| !is_vowel(*c)).count();\n        if consonants\
    \ as isize == n {\n            words.push(word.clone());\n        }\n    }\n \
    \   words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        } else {\n            if count == n {\n              \
    \  result.push(word);\n            }\n            word = String::new();\n    \
    \        count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    let mut word\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            word.push(c);\n        } else {\n            if word.len() > 0 {\n\
    \                if count_consonants(&word) == n {\n                    words.push(word.clone());\n\
    \                }\n                word.clear();\n            }\n        }\n\
    \    }\n    if word.len() > 0 {\n        if count_consonants(&word) == n {\n \
    \           words.push(word.clone());\n        }\n    }\n    words", "    let\
    \ mut result = Vec::<String>::new();\n    let mut word = String::new();\n    let\
    \ mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n            if !c.is_vowel() {\n                count\
    \ += 1;\n            }\n        } else {\n            if count == n {\n      \
    \          result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                words.push(word);\n       \
    \     }\n            word = String::new();\n            consonants = 0;\n    \
    \    } else {\n            word.push(c);\n            if !is_vowel(c) {\n    \
    \            consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        } else {\n          \
    \  word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                consonants += 1;\n            }\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !c.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words: Vec<String> = Vec::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n            if !is_vowel(c)\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                words.push(word);\n            }\n\
    \            word = String::new();\n            consonants = 0;\n        }\n \
    \   }\n    if consonants == n {\n        words.push(word);\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    let mut word\
    \ = String::new();\n    for c in s.chars() {\n        if c == ' ' {\n        \
    \    if count_consonants(&word) == n {\n                words.push(word);\n  \
    \          }\n            word = String::new();\n        } else {\n          \
    \  word.push(c);\n        }\n    }\n    if count_consonants(&word) == n {\n  \
    \      words.push(word);\n    }\n    words", "    let mut res: Vec<String> = Vec::new();\n\
    \    let mut word: String = String::new();\n    let mut count: isize = 0;\n  \
    \  for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                res.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count +=\
    \ 1;\n            }\n            word.push(c);\n        }\n    }\n    if count\
    \ == n {\n        res.push(word);\n    }\n    res", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                count += 1;\n            }\n        } else\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\n\
    \    }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ c.is_ascii_lowercase() {\n                count += 1;\n            }\n     \
    \   } else {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                count += 1;\n            }\n        } else\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\n\
    \    }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut words = Vec::new();\n    let mut word = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    let mut word\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            word.push(c);\n        } else {\n            if word.len() > 0 {\n\
    \                if count_consonants(&word) == n {\n                    words.push(word.clone());\n\
    \                }\n                word.clear();\n            }\n        }\n\
    \    }\n    if word.len() > 0 {\n        if count_consonants(&word) == n {\n \
    \           words.push(word.clone());\n        }\n    }\n    words", "    let\
    \ mut result = Vec::<String>::new();\n    let mut word = String::new();\n    let\
    \ mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\
    \ else {\n            word.push(c);\n            consonants += match c {\n   \
    \             'a' | 'e' | 'i' | 'o' | 'u' | 'y' => 0,\n                _ => 1,\n\
    \            };\n        }\n    }\n    if consonants == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                result.push(word);\n            }\n      \
    \      word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                words.push(word);\n                word = String::new();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n\
    \    }\n    words.into_iter().filter(|w| count_consonants(w) == n).collect()",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if count_consonants(&word) ==\
    \ n {\n                words.push(word);\n            }\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n        }\n    }\n    if count_consonants(&word)\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                count += 1;\n            }\n        } else\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\n\
    \    }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if !is_vowel(c) {\n  \
    \              count += 1;\n            }\n        }\n    }\n    if count == n\
    \ {\n        result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                if count_consonants(&word) == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    let mut word\
    \ = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                words.push(word);\n            }\n\
    \            word = String::new();\n            consonants = 0;\n        }\n \
    \   }\n    if consonants == n {\n        words.push(word);\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n         \
    \   if consonants == n {\n                words.push(word);\n            }\n \
    \           word = String::new();\n            consonants = 0;\n        } else\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        }\n    }\n    if consonants == n\
    \ {\n        words.push(word);\n    }\n    words", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            if !c.is_vowel() {\n\
    \                consonants += 1;\n            }\n            word.push(c);\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n\
    \                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                    continue;\n                }\n            }\n           \
    \ count += 1;\n            word.push(c);\n        } else {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            count\
    \ = 0;\n            word = String::new();\n        }\n    }\n    if count == n\
    \ {\n        result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                if count_consonants(&word) == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if count_consonants(&word) ==\
    \ n {\n                words.push(word);\n            }\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n        }\n    }\n    if count_consonants(&word)\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if count_consonants(&word) == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n        } else {\n        \
    \    word.push(c);\n        }\n    }\n    if count_consonants(&word) == n {\n\
    \        words.push(word);\n    }\n    words", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n\
    \                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                    continue;\n                }\n            }\n           \
    \ count += 1;\n            word.push(c);\n        } else {\n            if count\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            count = 0;\n        }\n    }\n    if count ==\
    \ n {\n        result.push(word);\n    }\n    result", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                if count_consonants(&word) == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result.push(word);\n      \
    \      }\n            word = String::new();\n            consonants = 0;\n   \
    \     } else {\n            word.push(c);\n            if !is_vowel(c) {\n   \
    \             consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut vec = Vec::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n\
    \                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                    continue;\n                }\n            }\n           \
    \ count += 1;\n            word.push(c);\n        } else {\n            if count\
    \ == n {\n                vec.push(word);\n            }\n            count =\
    \ 0;\n            word = String::new();\n        }\n    }\n    if count == n {\n\
    \        vec.push(word);\n    }\n    vec", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() &&\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n               \
    \ count += 1;\n            }\n            word.push(c);\n        } else {\n  \
    \          if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        }\n    }\n\
    \    if count == n {\n        result.push(word);\n    }\n    result", "    let\
    \ mut result = Vec::<String>::new();\n    let mut word = String::new();\n    let\
    \ mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n \
    \       if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                if count_consonants(&word) ==\
    \ n {\n                    words.push(word.clone());\n                }\n    \
    \            word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if consonants == n {\n               \
    \ result.push(word);\n            }\n            word = String::new();\n     \
    \       consonants = 0;\n        } else {\n            word.push(c);\n       \
    \     consonants += if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n                0\n            } else {\n                1\n            };\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                result.push(word);\n            }\n      \
    \      word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut words\
    \ = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                if count_consonants(&word) ==\
    \ n {\n                    words.push(word.clone());\n                }\n    \
    \            word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n     \
    \           word.push(c);\n                count += 1;\n            } else {\n\
    \                word.push(c.to_lowercase().next().unwrap());\n              \
    \  count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if count_consonants(&word) ==\
    \ n {\n                words.push(word);\n            }\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n        }\n    }\n    if count_consonants(&word)\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        } else {\n            if count == n {\n              \
    \  result.push(word);\n            }\n            word = String::new();\n    \
    \        count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ current_word = String::new();\n    let mut current_consonants = 0;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            if !c.is_vowel()\
    \ {\n                current_consonants += 1;\n            }\n            current_word.push(c);\n\
    \        } else {\n            if current_consonants == n {\n                result.push(current_word);\n\
    \            }\n            current_word = String::new();\n            current_consonants\
    \ = 0;\n        }\n    }\n    if current_consonants == n {\n        result.push(current_word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        } else {\n            word.push(c);\n            if !is_vowel(c) {\n\
    \                consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words:\
    \ Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let\
    \ mut consonants: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    if word.len() > 0 {\n        if count_consonants(&word)\
    \ == n {\n            words.push(word.clone());\n        }\n    }\n    words",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n         \
    \   if consonants == n {\n                words.push(word);\n            }\n \
    \           word = String::new();\n            consonants = 0;\n        } else\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        }\n    }\n    if consonants == n {\n\
    \        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words:\
    \ Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let\
    \ mut consonants: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if !c.is_vowel() {\n                consonants += 1;\n      \
    \      }\n            word.push(c);\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                count += 1;\n            }\n        } else\
    \ {\n            if count == n {\n                result.push(word);\n       \
    \     }\n            word = String::new();\n            count = 0;\n        }\n\
    \    }\n    if count == n {\n        result.push(word);\n    }\n    result", " \
    \   let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push(word);\n \
    \   }\n    result", "    let mut result = Vec::<String>::new();\n    let mut word\
    \ = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result.push(word);\n      \
    \      }\n            word = String::new();\n            consonants = 0;\n   \
    \     } else {\n            word.push(c);\n            if !is_vowel(c) {\n   \
    \             consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        } else {\n          \
    \  word.push(c);\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                consonants += 1;\n            }\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result.push(word);\n            }\n\
    \            word = String::new();\n            count = 0;\n        } else {\n\
    \            word.push(c);\n            if c.is_ascii_lowercase() && !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n    }\n    if count\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n            word.push(c);\n\
    \        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if consonants == n {\n                words.push(word);\n       \
    \     }\n            word = String::new();\n            consonants = 0;\n    \
    \    } else {\n            word.push(c);\n            consonants += match c {\n\
    \                'a' | 'e' | 'i' | 'o' | 'u' | 'y' => 0,\n                _ =>\
    \ 1,\n            };\n        }\n    }\n    if consonants == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut current_word = String::new();\n    for c in s.chars() {\n       \
    \ if c == ' ' {\n            if count_consonants(&current_word) == n {\n     \
    \           words.push(current_word);\n            }\n            current_word\
    \ = String::new();\n        } else {\n            current_word.push(c);\n    \
    \    }\n    }\n    if count_consonants(&current_word) == n {\n        words.push(current_word);\n\
    \    }\n    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if !c.is_vowel() {\n                count += 1;\n           \
    \ }\n            word.push(c);\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words: Vec<String> = Vec::new();\n    let mut word:\
    \ String = String::new();\n    let mut consonants: isize = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count_consonants(&word)\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n        } else {\n            word.push(c);\n        }\n   \
    \ }\n    if count_consonants(&word) == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ if !c.is_vowel() {\n                consonants += 1;\n            }\n      \
    \      word.push(c);\n        } else {\n            if consonants == n {\n   \
    \             result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if consonants == n {\n     \
    \           result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        } else {\n            word.push(c);\n  \
    \          if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        } else {\n            word.push(c);\n            if is_consonant(c) {\n\
    \                consonants += 1;\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    let mut consonants = 0;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \            if !c.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                words.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = Vec::new();\n    for word in s.split_whitespace()\
    \ {\n        if count_consonants(word) == n {\n            words.push(word.to_string());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !is_vowel(c) {\n                consonants += 1;\n            }\n        } else\
    \ {\n            if consonants == n {\n                result.push(word);\n  \
    \          }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            if !c.is_vowel() {\n                count +=\
    \ 1;\n            }\n            word.push(c);\n        } else {\n           \
    \ if count == n {\n                result.push(word);\n            }\n       \
    \     word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        } else {\n            if count == n {\n              \
    \  result.push(word);\n            }\n            word = String::new();\n    \
    \        count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n  \
    \      if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push(word);\n    }\n  \
    \  result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut current_word = String::new();\n    let mut\
    \ current_word_consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_vowel() {\n                current_word_consonants =\
    \ 0;\n            } else {\n                current_word_consonants += 1;\n  \
    \          }\n            current_word.push(c);\n        } else {\n          \
    \  if current_word_consonants == n {\n                result.push(current_word);\n\
    \            }\n            current_word = String::new();\n            current_word_consonants\
    \ = 0;\n        }\n    }\n    if current_word_consonants == n {\n        result.push(current_word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut result = Vec::<String>::new();\n \
    \   let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                consonants += 1;\n            }\n        }\
    \ else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut result = Vec::<String>::new();\n    let mut word =\
    \ String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                result.push(word);\n            }\n      \
    \      word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ if c.is_ascii_lowercase() {\n                if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n                    continue;\n             \
    \   }\n            }\n            word.push(c);\n            count += 1;\n   \
    \     } else {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      }\n    }\n    if count == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                result.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut result = Vec::<String>::new();\n    let mut\
    \ word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                result.push(word);\n            }\n      \
    \      word = String::new();\n            count = 0;\n        }\n    }\n    if\
    \ count == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    for word in s.split_whitespace() {\n        if\
    \ count_consonants(word) == n {\n            result.push(word.to_string());\n\
    \        }\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c == ' ' {\n            if consonants == n {\n     \
    \           result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        } else {\n            word.push(c);\n  \
    \          if !is_vowel(c) {\n                consonants += 1;\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut result =\
    \ Vec::<String>::new();\n    let mut word = String::new();\n    let mut consonants\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                consonants +=\
    \ 1;\n            }\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            count = 0;\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push(word);\n \
    \   }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   count += 1;\n            }\n        } else {\n            if count == n {\n\
    \                words.push(word);\n            }\n            word = String::new();\n\
    \            count = 0;\n        }\n    }\n    if count == n {\n        words.push(word);\n\
    \    }\n    words", "    let mut result = Vec::<String>::new();\n    let mut word\
    \ = String::new();\n    let mut consonants = 0;\n    for c in s.chars() {\n  \
    \      if c.is_alphabetic() {\n            word.push(c);\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        } else {\n     \
    \       if consonants == n {\n                result.push(word);\n           \
    \ }\n            word = String::new();\n            consonants = 0;\n        }\n\
    \    }\n    if consonants == n {\n        result.push(word);\n    }\n    result",
  "    let mut result = Vec::<String>::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                result.push(word);\n            }\n            word\
    \ = String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        result.push(word);\n    }\n    result", "    let mut result\
    \ = Vec::<String>::new();\n    let mut word = String::new();\n    let mut count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n        } else {\n            if count == n {\n              \
    \  result.push(word);\n            }\n            word = String::new();\n    \
    \        count = 0;\n        }\n    }\n    if count == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    let mut consonants = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n            if !c.is_vowel() {\n             \
    \   consonants += 1;\n            }\n        } else {\n            if consonants\
    \ == n {\n                words.push(word);\n            }\n            word =\
    \ String::new();\n            consonants = 0;\n        }\n    }\n    if consonants\
    \ == n {\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if word.len() >\
    \ 0 {\n                let mut consonants = 0;\n                for c in word.chars()\
    \ {\n                    if !c.is_vowel() {\n                        consonants\
    \ += 1;\n                    }\n                }\n                if consonants\
    \ == n as usize {\n                    words.push(word.clone());\n           \
    \     }\n                word.clear();\n            }\n        }\n    }\n    if\
    \ word.len() > 0 {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                consonants += 1;\n      \
    \      }\n        }\n        if consonants == n as usize {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    let mut word\
    \ = String::new();\n    for c in s.chars() {\n        if c == ' ' {\n        \
    \    if count_consonants(&word) == n {\n                words.push(word);\n  \
    \          }\n            word = String::new();\n        } else {\n          \
    \  word.push(c);\n        }\n    }\n    if count_consonants(&word) == n {\n  \
    \      words.push(word);\n    }\n    words", "    let mut result = Vec::<String>::new();\n\
    \    let mut word = String::new();\n    let mut consonants = 0;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                result.push(word);\n\
    \            }\n            word = String::new();\n            consonants = 0;\n\
    \        }\n    }\n    if consonants == n {\n        result.push(word);\n    }\n\
    \    result", "    let mut words = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                if count_consonants(&word)\
    \ == n {\n                    words.push(word.clone());\n                }\n \
    \               word.clear();\n            }\n        }\n    }\n    if word.len()\
    \ > 0 {\n        if count_consonants(&word) == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words"]
stop_tokens:
- "\n}"
