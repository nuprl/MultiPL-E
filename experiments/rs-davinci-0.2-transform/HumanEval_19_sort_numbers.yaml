name: HumanEval_19_sort_numbers
language: rs
prompt: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
  one three five\")\nfn sort_numbers(numbers: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut nums: Vec<u32> = numbers\n        .split_whitespace()\n\
    \        .map(|num| match num {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid input\"),\n        })\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|num| match num {\n         \
    \   0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n   \
    \         3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let\
    \ mut sorted_numbers: Vec<u8> = numbers\n        .split_whitespace()\n       \
    \ .map(|number| match number {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Invalid number\"),\n        })\n        .collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers\n        .iter()\n        .map(|number|\
    \ match number {\n            0 => \"zero\",\n            1 => \"one\",\n    \
    \        2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut numbers: Vec<u8> = numbers\n        .split_whitespace()\n\
    \        .map(|s| match s {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input\"),\n        })\n        .collect();\n   \
    \ numbers.sort();\n    numbers\n        .iter()\n        .map(|n| match n {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")",
  "    let mut sorted_numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers.join(\" \")", "    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a_num = number_to_int(a);\n       \
    \ let b_num = number_to_int(b);\n        a_num.cmp(&b_num)\n    });\n    numbers.join(\"\
    \ \")", "    let mut nums = numbers.split_whitespace().map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n\
    \    nums.sort();\n    nums.iter().map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")", "    let mut nums: Vec<u32> = numbers\n        .split_whitespace()\n \
    \       .map(|n| match n {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        })\n        .collect();\n  \
    \  nums.sort();\n    nums.iter()\n        .map(|n| match n {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let\
    \ mut numbers: Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s|\
    \ match s {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut\
    \ numbers: Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| match\
    \ s {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut numbers_vec:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect();\n    numbers_vec.sort();\n\
    \    let mut result = String::new();\n    for num in numbers_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result", "    let mut numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a = match a {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      };\n        let b = match b {\n            \"zero\" => 0,\n           \
    \ \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n    \
    \        \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n\
    \            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => panic!(\"Invalid number\"),\n        };\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")", "    let mut nums: Vec<u8> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result", "    let mut sorted_numbers: Vec<u8> = numbers\n        .split_whitespace()\n\
    \        .map(|s| match s {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        })\n        .collect();\n  \
    \  sorted_numbers.sort();\n    sorted_numbers\n        .iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")", "    let mut numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by(|a, b| {\n        let a = match a {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      };\n        let b = match b {\n            \"zero\" => 0,\n           \
    \ \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n    \
    \        \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n\
    \            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => panic!(\"Invalid number\"),\n        };\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")", "    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut nums: Vec<u8> = numbers\n        .split_whitespace()\n\
    \        .map(|s| match s {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        })\n        .collect();\n  \
    \  nums.sort();\n    nums.iter()\n        .map(|n| match n {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let\
    \ mut numbers_vec: Vec<u32> = Vec::new();\n    for number in numbers.split_whitespace()\
    \ {\n        match number {\n            \"zero\" => numbers_vec.push(0),\n  \
    \          \"one\" => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n\
    \            \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"Invalid\
    \ number\"),\n        }\n    }\n    numbers_vec.sort();\n    let mut result =\
    \ String::new();\n    for number in numbers_vec {\n        match number {\n  \
    \          0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()", "    let mut numbers: Vec<u8> = numbers\n     \
    \   .split_whitespace()\n        .map(|s| match s {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n        })\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut nums: Vec<u8> = Vec::new();\n    for num\
    \ in numbers.split_whitespace() {\n        nums.push(match num {\n           \
    \ \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n     \
    \       \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"\
    ),\n        });\n    }\n    nums.sort();\n    let mut result = String::new();\n\
    \    for num in nums {\n        result.push_str(match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n\
    \        });\n        result.push(' ');\n    }\n    result.pop();\n    result",
  "    let mut numbers: Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s|\
    \ match s {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid input\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    let mut result = String::new();\n    for number in numbers {\n        result.push_str(match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result"]
stop_tokens:
- "\n}"
