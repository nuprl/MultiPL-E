name: HumanEval_128_prod_signs
language: rs
prompt: "/// You are given an array arr of integers and you need to return\n/// sum\
  \ of magnitudes of integers multiplied by product of all signs\n/// of each number\
  \ in the array, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n\
  /// Example:\n/// >>> prod_signs(vec![1, 2, 2, -4])\n/// Some(9)\n/// >>> prod_signs(vec![0,\
  \ 1])\n/// Some(0)\n/// >>> prod_signs(vec![])\n/// None\nfn prod_signs(arr: Vec<isize>)\
  \ -> Option<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    if arr.is_empty() {\n        return None;\n    }\n    let mut prod\
    \ = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n       \
    \     prod *= 1;\n        } else if i < 0 {\n            prod *= -1;\n       \
    \ } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n    }\n\
    \    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i\
    \ > 0 {\n            prod *= 1;\n        } else if i < 0 {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n    \
    \    if i > 0 {\n            prod *= 1;\n        } else if i < 0 {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty() {\n  \
    \      return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for\
    \ i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else if i\
    \ < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else\
    \ if i < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else\
    \ if i < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else\
    \ if i < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i < 0 {\n            prod *= -1;\n        } else\
    \ if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum * prod)",
  "    if arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n \
    \   let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod\
    \ *= 1;\n        } else if i < 0 {\n            prod *= -1;\n        } else {\n\
    \            prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)", "    if arr.is_empty() {\n        return None;\n    }\n    let mut\
    \ prod = 1;\n    let mut sum = 0;\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1;\n        } else if num < 0 {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += num.abs();\n\
    \    }\n    Some(sum * prod)", "    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1;\n            sum\
    \ += i;\n        } else if i < 0 {\n            prod *= -1;\n            sum +=\
    \ i.abs();\n        } else {\n            prod *= 0;\n        }\n    }\n    if\
    \ arr.len() == 0 {\n        None\n    } else {\n        Some(sum * prod)\n   \
    \ }", "    if arr.is_empty() {\n        return None;\n    }\n    let mut prod\
    \ = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n       \
    \     prod *= 1;\n        } else if i < 0 {\n            prod *= -1;\n       \
    \ } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n    }\n\
    \    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i\
    \ > 0 {\n            prod *= 1;\n        } else if i < 0 {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n    \
    \    if i > 0 {\n            prod *= 1;\n        } else if i < 0 {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += i.abs();\n    }\n    Some(sum * prod)", "    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \            sum += i;\n        } else if i < 0 {\n            prod *= -1;\n \
    \           sum += -i;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    if arr.len() == 0 {\n        None\n    } else {\n        Some(sum\
    \ * prod)\n    }", "    if arr.is_empty() {\n        return None;\n    }\n   \
    \ let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i >\
    \ 0 {\n            prod *= 1;\n        } else if i < 0 {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n    \
    \    if i > 0 {\n            prod *= 1;\n        } else if i < 0 {\n         \
    \   prod *= -1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty() {\n  \
    \      return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for\
    \ i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else if i\
    \ < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n \
    \       }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1;\n        } else\
    \ if i < 0 {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += i.abs();\n    }\n    Some(sum * prod)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    let mut sum = 0;\n\
    \    for i in arr {\n        if i < 0 {\n            prod *= -1;\n        } else\
    \ if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum * prod)"]
stop_tokens:
- "\n}"
