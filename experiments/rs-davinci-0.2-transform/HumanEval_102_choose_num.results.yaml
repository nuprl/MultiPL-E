language: rs
name: HumanEval_102_choose_num
results:
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpfu4kwtzn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return y;\n        }\n    }\
    \ else {\n        if x + 1 >= y {\n            return -1;\n        } else {\n\
    \            return y;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpo8yhdslh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 && x <= y {\n        return x;\n\
    \    } else if x % 2 == 1 && x + 1 <= y {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp6gfirb2z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    let mut\
    \ num = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            num =\
    \ i;\n        }\n    }\n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    return choose_num(x + 1, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpnx42aehv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkeiv29_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ for i in (x..y+1).rev() {\n        if i % 2 == 0 {\n            return i;\n\
    \        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    let mut\
    \ result = -1;\n    for i in x..(y+1) {\n        if i % 2 == 0 {\n           \
    \ result = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut i = x;\n    while i <= y {\n      \
    \  if i % 2 == 0 {\n            return i;\n        }\n        i += 1;\n    }\n\
    \    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpdrdfcdci.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            if i\
    \ > max {\n                max = i;\n            }\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    let\
    \ mut max_even = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n       \
    \     max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 && x >= y {\n        return x;\n\
    \    } else if y % 2 == 0 && y >= x {\n        return y;\n    } else if x % 2\
    \ == 0 && y % 2 == 0 {\n        return y;\n    } else if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return -1;\n    } else if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ y;\n    } else if x % 2 == 0 && y % 2 != 0 {\n        return x;\n    } else\
    \ {\n        return -1;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpafaq3ks_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   let mut result = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n   \
    \         result = i;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            if i\
    \ > max {\n                max = i;\n            }\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpom0_h2gx.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   if x % 2 == 0 {\n        return x;\n    }\n\n    if y % 2 == 0 {\n       \
    \ return y;\n    }\n\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7j0xs7gg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkeiv29_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   for i in (x..y+1).rev() {\n        if i % 2 == 0 {\n            return i;\n\
    \        }\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        else {\n            return choose_num(x\
    \ + 2, y);\n        }\n    }\n    else {\n        if x + 1 >= y {\n          \
    \  return -1;\n        }\n        else {\n            return choose_num(x + 2,\
    \ y);\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpfsylz02x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            num = i;\n        }\n    }\n    num\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpom0_h2gx.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 && i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkeiv29_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut result = -1;\n    for i in x..y + 1 {\n        if i % 2 == 0 {\n   \
    \         result = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 && x <= y {\n        x\n    }\
    \ else if x + 1 <= y {\n        x + 1\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp_3tuqd3k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = y;\n    while i >= x {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i -= 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..(y+1)\
    \ {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    } else {\n        if x + 1 <= y {\n       \
    \     return x + 1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpji4p3txq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x%2\
    \ == 0 {\n        if y%2 == 0 {\n            if x > y {\n                return\
    \ y;\n            } else {\n                return x;\n            }\n       \
    \ } else {\n            if x > y-1 {\n                return y-1;\n          \
    \  } else {\n                return x;\n            }\n        }\n    } else {\n\
    \        if y%2 == 0 {\n            if x+1 > y {\n                return y;\n\
    \            } else {\n                return x+1;\n            }\n        } else\
    \ {\n            if x+1 > y-1 {\n                return y-1;\n            } else\
    \ {\n                return x+1;\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpc_t04oix.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpftcqm4x_.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 && x <= y {\n        return x;\n\
    \    } else if x % 2 == 1 && x + 1 <= y {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp6gfirb2z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpom0_h2gx.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    let mut\
    \ max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            if i\
    \ > max {\n                max = i;\n            }\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x\
    \ % 2 == 0 {\n        if x <= y {\n            return x;\n        }\n    }\n \
    \   if x % 2 == 1 {\n        if x + 1 <= y {\n            return x + 1;\n    \
    \    }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3od4djah.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpom0_h2gx.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 1, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpg_2wdmxe.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpom0_h2gx.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else if x\
    \ + 1 <= y {\n        x + 1\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpzzofne5r.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else if x\
    \ + 1 <= y {\n        x + 1\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpzzofne5r.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuqnangsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpk3_04v5r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else if y\
    \ % 2 == 0 {\n        y\n    } else {\n        -1\n    }\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9ebw7e09.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return y;\n        }\n    }\
    \ else {\n        if x + 1 >= y {\n            return -1;\n        } else {\n\
    \            return y;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpo8yhdslh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuqnangsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut result = -1;\n    for i in x..y + 1 {\n        if i % 2 == 0 {\n   \
    \         result = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..(y+1)\
    \ {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpk3_04v5r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        } else {\n            return x;\n        }\n    }\
    \ else {\n        if x + 1 > y {\n            return -1;\n        } else {\n \
    \           return x + 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq_h2d3qi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if y % 2 == 0 {\n        return y;\n    }\n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpuqhto2bz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2gq4xha8.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x\
    \ % 2 == 0 {\n        if x >= y {\n            return x;\n        } else {\n \
    \           return y;\n        }\n    } else {\n        if x + 1 >= y {\n    \
    \        return -1;\n        } else {\n            return y;\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpo072y1x4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            if i\
    \ > max {\n                max = i;\n            }\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpfu4kwtzn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if y % 2 == 0 {\n        if x <= y {\n\
    \            return y;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp1gs8hhr8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = x;\n    for i in x..y+1 {\n        if i % 2 == 0 && i > max {\n\
    \            max = i;\n        }\n    }\n    if max % 2 == 0 {\n        return\
    \ max;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        if x > y {\n            return y;\n      \
    \  } else {\n            return x;\n        }\n    } else if x % 2 == 0 && y %\
    \ 2 != 0 {\n        return x;\n    } else if x % 2 != 0 && y % 2 == 0 {\n    \
    \    return y;\n    } else {\n        return -1;\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp_yhbc77e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuqnangsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ result = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n            result\
    \ = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n\n    return max_even;\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return y;\n        }\n    }\
    \ else {\n        if x >= y {\n            return x - 1;\n        } else {\n \
    \           return y - 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpo3e4s9yt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n    \
    \        max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if x + 1 == y {\n        return -1;\n    }\n    choose_num(x + 1, y)\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9ya0qgyg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkeiv29_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        else {\n            return choose_num(x\
    \ + 2, y);\n        }\n    }\n    else {\n        if x + 1 >= y {\n          \
    \  return -1;\n        }\n        else {\n            return choose_num(x + 2,\
    \ y);\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpfsylz02x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpj2wigd6a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if y % 2 == 0 {\n        if x <= y {\n\
    \            return y;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp1gs8hhr8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        else {\n            return choose_num(x\
    \ + 2, y);\n        }\n    }\n    else {\n        if x + 1 >= y {\n          \
    \  return -1;\n        }\n        else {\n            return choose_num(x + 2,\
    \ y);\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpfsylz02x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n        \
    \    max = i;\n        }\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if x + 1 == y {\n        return\
    \ -1;\n    }\n    return x + 2;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpfu4kwtzn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3gxsmz8n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n\n \
    \   let mut max = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n      \
    \      max = i;\n        }\n    }\n\n    return max;\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    let mut\
    \ even_num = -1;\n    for num in x..y+1 {\n        if num % 2 == 0 {\n       \
    \     even_num = num;\n        }\n    }\n    even_num\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return choose_num(x + 2, y);\n    }\n \
    \   if x + 1 == y {\n        return -1;\n    }\n    return choose_num(x + 1, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpkbk4lfa8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if y % 2 == 0 {\n        return y;\n    }\n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpuqhto2bz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement me!\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvyvw_2n2.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut num = y;\n    while num >= x {\n        if num % 2 == 0 {\n        \
    \    return num;\n        }\n        num -= 1;\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x <= y {\n    \
    \        return x;\n        }\n    }\n    if x + 1 <= y {\n        return x +\
    \ 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp0k93l4n_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 1, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpg_2wdmxe.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        }\n        return x + 2;\n    }\n    if x + 1 >= y\
    \ {\n        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `12354`', /tmp/tmpxry8k0eb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_fgh5be.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    // Hint:\
    \ You can use the modulo operator (%) to check if a number is even\n    // or\
    \ odd.\n    // Hint: You can use the max function to find the maximum of two numbers.\n\
    \    // Hint: You can use the if-else statement to return different values\n \
    \   // depending on the condition.\n    unimplemented!()\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpud64gsu2.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 1, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpg_2wdmxe.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        } else {\n            return x;\n        }\n    }\
    \ else {\n        if x + 1 > y {\n            return -1;\n        } else {\n \
    \           return x + 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq_h2d3qi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y + 1\
    \ {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        }\n        return x;\n    }\n    if x + 1 > y {\n\
    \        return -1;\n    }\n    return x + 1;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpk3_04v5r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    } else\
    \ if y % 2 == 0 {\n        return y;\n    } else {\n        return -1;\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpst2d_8s3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function.\n    if x\
    \ > y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        return x;\n \
    \   }\n    if y % 2 == 0 {\n        return y;\n    }\n    return -1;\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpcfy9_1ww.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x > y {\n     \
    \       return -1;\n        } else {\n            return x;\n        }\n    }\
    \ else {\n        if x + 1 > y {\n            return -1;\n        } else {\n \
    \           return x + 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq_h2d3qi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = -1;\n    for i in x..y+1 {\n\
    \        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: Implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6o4ue6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..y+1 {\n        if i % 2 == 0 {\n   \
    \         max_even = i;\n        }\n    }\n    return max_even;\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x == y {\n    \
    \        return x;\n        }\n        return choose_num(x + 2, y);\n    }\n \
    \   if x + 1 == y {\n        return -1;\n    }\n    return choose_num(x + 1, y);\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010219
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        if x >= y {\n    \
    \        return x;\n        } else {\n            return choose_num(x + 2, y);\n\
    \        }\n    } else {\n        if x + 1 >= y {\n            return -1;\n  \
    \      } else {\n            return choose_num(x + 2, y);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuqnangsp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = -1;\n    for i in x..y+1\
    \ {\n        if i % 2 == 0 {\n            max_even = i;\n        }\n    }\n  \
    \  max_even\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 0
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ let mut max_even = -1;\n    for i in x..(y + 1) {\n        if i % 2 == 0 {\n\
    \            max_even = i;\n        }\n    }\n    max_even\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpjro36dgm.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkeiv29_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        return x;\n    }\n\
    \    if x + 1 == y {\n        return -1;\n    }\n    choose_num(x + 1, y)\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp9ya0qgyg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        return -1;\n    }\n   \
    \ if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return\
    \ y;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4eo2dlhm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else if x\
    \ + 1 < y {\n        x + 1\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpvs6d9hll.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010213
