name: HumanEval_100_make_a_pile
language: rs
prompt: "/// Given a positive integer n, you have to make a pile of n levels of stones.\n\
  /// The first level has n stones.\n/// The number of stones in the next level is:\n\
  /// - the next odd number if n is odd.\n/// - the next even number if n is even.\n\
  /// Return the number of stones in each level in a list, where element at index\n\
  /// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>>\
  \ make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut res = vec![n];\n    let mut i = n;\n    while i > 1 {\n\
    \        if i % 2 == 0 {\n            i -= 1;\n        } else {\n            i\
    \ -= 2;\n        }\n        res.push(i);\n    }\n    res", "    let mut v = vec![n];\n\
    \    let mut i = n;\n    while i > 0 {\n        if i % 2 == 0 {\n            i\
    \ += 1;\n        } else {\n            i += 2;\n        }\n        v.push(i);\n\
    \    }\n    v", "    let mut pile = vec![n];\n    let mut next = n;\n    while\
    \ next > 1 {\n        next = if next % 2 == 0 { next - 1 } else { next - 2 };\n\
    \        pile.push(next);\n    }\n    pile", "    let mut result = vec![n];\n\
    \    let mut next = n;\n    while next > 1 {\n        next = if next % 2 == 0\
    \ { next / 2 } else { (next + 1) / 2 };\n        result.push(next);\n    }\n \
    \   result", "    let mut result = vec![n];\n    let mut next = n;\n    while\
    \ next > 1 {\n        next = if next % 2 == 0 { next / 2 } else { (next + 1) /\
    \ 2 };\n        result.push(next);\n    }\n    result", "    let mut result =\
    \ vec![n];\n    let mut next = n;\n    while next > 1 {\n        next = if next\
    \ % 2 == 0 { next / 2 } else { (next + 1) / 2 };\n        result.push(next);\n\
    \    }\n    result", "    let mut v = vec![n];\n    let mut i = n;\n    while\
    \ i > 1 {\n        if i % 2 == 0 {\n            i += 1;\n        } else {\n  \
    \          i -= 1;\n        }\n        v.push(i);\n    }\n    v", "    let mut\
    \ result = vec![n];\n    let mut next = n + 2;\n    while next <= n * 2 {\n  \
    \      result.push(next);\n        next += 2;\n    }\n    result", "    let mut\
    \ result = vec![n];\n    let mut i = n;\n    while i > 1 {\n        i = if i %\
    \ 2 == 0 { i / 2 } else { (i + 1) / 2 };\n        result.push(i);\n    }\n   \
    \ result", "    let mut result = vec![n];\n    let mut i = n;\n    while i > 1\
    \ {\n        i = if i % 2 == 0 { i / 2 } else { (i + 1) / 2 };\n        result.push(i);\n\
    \    }\n    result", "    let mut pile = vec![n];\n    while pile.last().unwrap()\
    \ != &1 {\n        let last = pile.last().unwrap();\n        if last % 2 == 0\
    \ {\n            pile.push(last - 1);\n        } else {\n            pile.push(last\
    \ - 2);\n        }\n    }\n    pile", "    let mut pile = vec![n];\n    let mut\
    \ last = n;\n    while last > 1 {\n        last = if last % 2 == 0 { last / 2\
    \ } else { (last + 1) / 2 };\n        pile.push(last);\n    }\n    pile", "  \
    \  let mut result = vec![n];\n    let mut next = n;\n    while next > 1 {\n  \
    \      next = if next % 2 == 0 { next / 2 } else { (next + 1) / 2 };\n       \
    \ result.push(next);\n    }\n    result", "    let mut result = vec![n];\n   \
    \ let mut next = n;\n    while next > 1 {\n        next = if next % 2 == 0 { next\
    \ / 2 } else { (next + 1) / 2 };\n        result.push(next);\n    }\n    result",
  "    let mut result = vec![n];\n    let mut next = n + 2;\n    while next <= n *\
    \ 2 {\n        result.push(next);\n        next += 2;\n    }\n    result", " \
    \   let mut pile = vec![n];\n    let mut next = n;\n    while next > 1 {\n   \
    \     next = if next % 2 == 0 { next / 2 } else { (next + 1) / 2 };\n        pile.push(next);\n\
    \    }\n    pile", "    let mut result = vec![n];\n    let mut next = n;\n   \
    \ while next > 1 {\n        next = if next % 2 == 0 { next / 2 } else { (next\
    \ + 1) / 2 };\n        result.push(next);\n    }\n    result", "    let mut pile\
    \ = vec![n];\n    let mut next = n;\n    while next > 1 {\n        next = if next\
    \ % 2 == 0 { next / 2 } else { (next + 1) / 2 };\n        pile.push(next);\n \
    \   }\n    pile", "    let mut result = vec![n];\n    let mut current = n;\n \
    \   while current > 1 {\n        if current % 2 == 0 {\n            current -=\
    \ 1;\n        } else {\n            current -= 2;\n        }\n        result.push(current);\n\
    \    }\n    result", "    let mut res = vec![n];\n    let mut next = n;\n    while\
    \ next > 1 {\n        next = if next % 2 == 0 { next / 2 } else { (next + 1) /\
    \ 2 };\n        res.push(next);\n    }\n    res"]
stop_tokens:
- "\n}"
