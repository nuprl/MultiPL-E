name: HumanEval_124_valid_date
language: rs
prompt: "/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"\
  ))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>>\
  \ valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"\
  06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n///\
  \ false\nfn valid_date(date: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n\
    \        let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month > 12 || day > 31 || year < 1000 {\n            return false;\n\
    \        }\n        if month == 2 && day > 29 {\n            return false;\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ && day > 30 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let mut date_vec: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n   \
    \ let month = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    let caps = re.captures(&date).unwrap();\n    let month = caps.get(1).unwrap().as_str().parse::<u32>().unwrap();\n\
    \    let day = caps.get(2).unwrap().as_str().parse::<u32>().unwrap();\n    let\
    \ year = caps.get(3).unwrap().as_str().parse::<u32>().unwrap();\n    let days_in_month\
    \ = match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => 31,\n        4 | 6 |\
    \ 9 | 11 => 30,\n        2 => if year % 4 == 0 { 29 } else { 28 },\n        _\
    \ => 0,\n    };\n    if day > days_in_month {\n        return false;\n    }\n\
    \    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month: u32 = date_vec[0].parse().unwrap();\n    let day:\
    \ u32 = date_vec[1].parse().unwrap();\n    let year: u32 = date_vec[2].parse().unwrap();\n\
    \    if month > 12 || month < 1 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day > 29 || day < 1 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 || day < 1 {\n            return false;\n        }\n    }\
    \ else {\n        if day > 31 || day < 1 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut days_in_month\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if date_vec[2] % 4\
    \ == 0 {\n        days_in_month[1] = 29;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[1] < 1 || date_vec[1]\
    \ > days_in_month[(date_vec[0] - 1) as usize] {\n        return false;\n    }\n\
    \    true", "    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    if\
    \ date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n   \
    \         return false;\n        }\n    } else {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    }\n    if year < 1 {\n     \
    \   return false;\n    }\n    true", "    let mut date_iter = date.split('-');\n\
    \    let mut date_vec: Vec<&str> = Vec::new();\n    for i in date_iter {\n   \
    \     date_vec.push(i);\n    }\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    let month: u32 = match date_vec[0].parse() {\n        Ok(num) => num,\n\
    \        Err(_) => return false,\n    };\n    let day: u32 = match date_vec[1].parse()\
    \ {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let\
    \ year: u32 = match date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_)\
    \ => return false,\n    };\n    if month < 1 || month > 12 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false;\n     \
    \   }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    }\n    return true;", "    let mut date_split = date.split('-');\n\
    \    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n   \
    \     let num = i.parse::<i32>();\n        match num {\n            Ok(n) => date_vec.push(n),\n\
    \            Err(_) => return false,\n        }\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month = date_vec[0];\n    let\
    \ day = date_vec[1];\n    let year = date_vec[2];\n    if month > 12 || month\
    \ < 1 {\n        return false;\n    }\n    if day > 31 || day < 1 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false;\n        }\n    }\n\
    \    if year < 1 {\n        return false;\n    }\n    true", "    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<&str> = Vec::new();\n    for\
    \ i in date_split {\n        date_vec.push(i);\n    }\n    if date_vec.len() !=\
    \ 3 {\n        return false;\n    }\n    let month: u32 = match date_vec[0].parse()\
    \ {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let\
    \ day: u32 = match date_vec[1].parse() {\n        Ok(num) => num,\n        Err(_)\
    \ => return false,\n    };\n    let year: u32 = match date_vec[2].parse() {\n\
    \        Ok(num) => num,\n        Err(_) => return false,\n    };\n    if month\
    \ > 12 || month < 1 {\n        return false;\n    }\n    if month == 2 {\n   \
    \     if day > 29 || day < 1 {\n            return false;\n        }\n    } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day >\
    \ 30 || day < 1 {\n            return false;\n        }\n    } else {\n      \
    \  if day > 31 || day < 1 {\n            return false;\n        }\n    }\n   \
    \ return true;", "    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        let num = i.parse::<i32>();\n\
    \        match num {\n            Ok(n) => date_vec.push(n),\n            Err(_)\
    \ => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    let month = date_vec[0];\n    let day = date_vec[1];\n  \
    \  let year = date_vec[2];\n    if month < 1 || month > 12 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false;\n     \
    \   }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    }\n    if year < 1 {\n        return false;\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<&str> =\
    \ Vec::new();\n    for i in date_split {\n        date_vec.push(i);\n    }\n \
    \   if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12 {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    } else {\n        if day < 1 || day > 30 {\n            return\
    \ false;\n        }\n    }\n    if year < 0 {\n        return false;\n    }\n\
    \    return true;", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 1\
    \ {\n        return false;\n    }\n    true", "    let mut date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    let mut date_vec: Vec<i32> = date_vec.iter().map(|x| x.parse::<i32>().unwrap()).collect();\n\
    \    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n\
    \    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n\
    \            return false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 30 {\n            return false;\n        }\n    }\n   \
    \ if date_vec[2] < 1 {\n        return false;\n    }\n    true", "    let mut\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() !=\
    \ 3 {\n        return false;\n    }\n    let month: i32 = date_vec[0].parse().unwrap();\n\
    \    let day: i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 0 {\n        return false;\n    }\n    true", "   \
    \ let date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year <\
    \ 0 {\n        return false;\n    }\n    true", "    let mut date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap();\n\
    \    let day = date_split.next().unwrap();\n    let year = date_split.next().unwrap();\n\
    \    if month.len() != 2 || day.len() != 2 || year.len() != 4 {\n        return\
    \ false;\n    }\n    let month = month.parse::<u32>().unwrap();\n    let day =\
    \ day.parse::<u32>().unwrap();\n    let year = year.parse::<u32>().unwrap();\n\
    \    if month == 0 || month > 12 {\n        return false;\n    }\n    if day ==\
    \ 0 {\n        return false;\n    }\n    if month == 2 {\n        if day > 29\
    \ {\n            return false;\n        }\n    } else if month == 4 || month ==\
    \ 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false;\n        }\n    } else {\n        if day > 31 {\n            return false;\n\
    \        }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n \
    \   let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n    \
    \    match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n      \
    \      Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n\
    \        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n\
    \        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 29 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7\n        || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12\n \
    \   {\n        if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n\
    \        }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n \
    \           return false;\n        }\n    }\n    true", "    let date_regex =\
    \ Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !date_regex.is_match(&date) {\n        return false;\n    }\n    let date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    if month > 12 || day\
    \ > 31 {\n        return false;\n    }\n    if month == 2 && day > 29 {\n    \
    \    return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) && day > 30 {\n        return false;\n    }\n    true", "    let mut\
    \ date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(num)\
    \ => date_vec.push(num),\n            Err(_) => return false,\n        }\n   \
    \ }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut days_in_month\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if date_vec[2] % 4\
    \ == 0 {\n        days_in_month[1] = 29;\n    }\n    if date_vec[0] > 0 && date_vec[0]\
    \ <= 12 && date_vec[1] > 0 && date_vec[1] <= days_in_month[(date_vec[0] - 1) as\
    \ usize] {\n        return true;\n    }\n    false"]
stop_tokens:
- "\n}"
