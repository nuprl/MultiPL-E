name: HumanEval_144_simplify
language: rs
prompt: "/// Your task is to implement a function that will simplify the expression\n\
  /// x * n. The function returns True if x * n evaluates to a whole number and False\n\
  /// otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n/// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n/// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n/// >>> simplify(String::from(\"1/5\"),\
  \ String::from(\"5/1\"))\n/// true\n/// >>> simplify(String::from(\"1/6\"), String::from(\"\
  2/1\"))\n/// false\n/// >>> simplify(String::from(\"7/10\"), String::from(\"10/2\"\
  ))\n/// false\nfn simplify(x: String, n: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = simplify;\n    assert_eq!(candidate(String::from(\"\
  1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"\
  1/6\"), String::from(\"2/1\")), false);\n    assert_eq!(candidate(String::from(\"\
  5/1\"), String::from(\"3/1\")), true);\n    assert_eq!(candidate(String::from(\"\
  7/10\"), String::from(\"10/2\")), false);\n    assert_eq!(candidate(String::from(\"\
  2/10\"), String::from(\"50/10\")), true);\n    assert_eq!(candidate(String::from(\"\
  7/2\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"\
  11/6\"), String::from(\"6/1\")), true);\n    assert_eq!(candidate(String::from(\"\
  2/3\"), String::from(\"5/2\")), false);\n    assert_eq!(candidate(String::from(\"\
  5/2\"), String::from(\"3/5\")), false);\n    assert_eq!(candidate(String::from(\"\
  2/4\"), String::from(\"8/4\")), true);\n    assert_eq!(candidate(String::from(\"\
  2/4\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"\
  1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"\
  1/5\"), String::from(\"1/5\")), false);\n}\n"
completions: ["    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let (gcd, _) = gcd_extended(num, den);\n    den / gcd == 1", "    let x_numerator\
    \ = x.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n    let result =\
    \ (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    let result_fraction\
    \ = format!(\"{}/{}\", result, 1);\n    simplify_fraction(x, result_fraction)",
  "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(&n);\n    let mut result_numerator = x_numerator\
    \ * n_numerator;\n    let mut result_denominator = x_denominator * n_denominator;\n\
    \    let mut gcd = gcd(result_numerator, result_denominator);\n    while gcd !=\
    \ 1 {\n        result_numerator /= gcd;\n        result_denominator /= gcd;\n\
    \        gcd = gcd(result_numerator, result_denominator);\n    }\n    result_numerator\
    \ % result_denominator == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    let gcd = gcd(numerator, denominator);\n    numerator / gcd == denominator\
    \ / gcd", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let (num, den) = reduce_fraction(num, den);\n    num % den == 0", "    let\
    \ x_numerator: i32 = x.split('/').nth(0).unwrap().parse().unwrap();\n    let x_denominator:\
    \ i32 = x.split('/').nth(1).unwrap().parse().unwrap();\n    let n_numerator: i32\
    \ = n.split('/').nth(0).unwrap().parse().unwrap();\n    let n_denominator: i32\
    \ = n.split('/').nth(1).unwrap().parse().unwrap();\n    let result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    let result_fraction =\
    \ (x_numerator * n_numerator) % (x_denominator * n_denominator);\n    result_fraction\
    \ == 0", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let x_numerator\
    \ = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let result =\
    \ (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    result %\
    \ 1 == 0", "    let x = x.split(\"/\").map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n\
    \    let n = n.split(\"/\").map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n\
    \    let x = x[0] * n[1];\n    let n = n[0] * x[1];\n    x % n == 0", "    let\
    \ x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n    let\
    \ x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n    let\
    \ n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n    let\
    \ n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n    let\
    \ result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let x_numerator\
    \ = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let product_numerator\
    \ = x_numerator * n_numerator;\n    let product_denominator = x_denominator *\
    \ n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let x_numerator:\
    \ i32 = x.split('/').next().unwrap().parse().unwrap();\n    let x_denominator:\
    \ i32 = x.split('/').last().unwrap().parse().unwrap();\n    let n_numerator: i32\
    \ = n.split('/').next().unwrap().parse().unwrap();\n    let n_denominator: i32\
    \ = n.split('/').last().unwrap().parse().unwrap();\n    let x_numerator = x_numerator\
    \ * n_denominator;\n    let x_denominator = x_denominator * n_numerator;\n   \
    \ x_numerator % x_denominator == 0", "    let x_numerator: i32 = x.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let x_denominator: i32 = x.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let n_numerator: i32 = n.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let n_denominator: i32 = n.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let x_numerator: i32 = x.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let x_denominator: i32 = x.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let n_numerator: i32 = n.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let n_denominator: i32 = n.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0.0", "    let x_nums: Vec<&str> = x.split(\"/\").collect();\n\
    \    let n_nums: Vec<&str> = n.split(\"/\").collect();\n    let x_num: i32 = x_nums[0].parse().unwrap();\n\
    \    let x_den: i32 = x_nums[1].parse().unwrap();\n    let n_num: i32 = n_nums[0].parse().unwrap();\n\
    \    let n_den: i32 = n_nums[1].parse().unwrap();\n    let result_num = x_num\
    \ * n_num;\n    let result_den = x_den * n_den;\n    let result = result_num /\
    \ result_den;\n    if result_num % result_den == 0 {\n        return true;\n \
    \   }\n    false", "    let x_numerator = x.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    if result % 1 == 0.0 {\n        true\n    } else {\n        false\n    }",
  "    let x_numerator: u32 = x.split('/').next().unwrap().parse().unwrap();\n   \
    \ let x_denominator: u32 = x.split('/').last().unwrap().parse().unwrap();\n  \
    \  let n_numerator: u32 = n.split('/').next().unwrap().parse().unwrap();\n   \
    \ let n_denominator: u32 = n.split('/').last().unwrap().parse().unwrap();\n  \
    \  let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let x_numerator\
    \ = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let result =\
    \ x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    result % result_denominator == 0", "    let (x_numerator, x_denominator)\
    \ = parse_fraction(x);\n    let (n_numerator, n_denominator) = parse_fraction(n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let x_numerator = x_numerator * n_denominator;\n    let x_denominator = x_denominator\
    \ * n_numerator;\n    x_numerator % x_denominator == 0", "    let x_numerator:\
    \ u64 = x.split(\"/\").next().unwrap().parse().unwrap();\n    let x_denominator:\
    \ u64 = x.split(\"/\").last().unwrap().parse().unwrap();\n    let n_numerator:\
    \ u64 = n.split(\"/\").next().unwrap().parse().unwrap();\n    let n_denominator:\
    \ u64 = n.split(\"/\").last().unwrap().parse().unwrap();\n    let x_numerator_n\
    \ = x_numerator * n_numerator;\n    let x_denominator_n = x_denominator * n_denominator;\n\
    \    x_numerator_n % x_denominator_n == 0", "    let x_numerator = x.split(\"\
    /\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator = x.split(\"\
    /\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator = n.split(\"\
    /\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator = n.split(\"\
    /\").last().unwrap().parse::<i32>().unwrap();\n    let result = x_numerator *\
    \ n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    if result % result_denominator == 0 {\n        true\n    } else {\n     \
    \   false\n    }", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator: u64 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_denominator: u64 = x.split('/').last().unwrap().parse().unwrap();\n\
    \    let n_numerator: u64 = n.split('/').next().unwrap().parse().unwrap();\n \
    \   let n_denominator: u64 = n.split('/').last().unwrap().parse().unwrap();\n\
    \    let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let x_n = x.split(\"\
    /\").collect::<Vec<&str>>();\n    let n_n = n.split(\"/\").collect::<Vec<&str>>();\n\
    \    let x_n: (u32, u32) = (x_n[0].parse().unwrap(), x_n[1].parse().unwrap());\n\
    \    let n_n: (u32, u32) = (n_n[0].parse().unwrap(), n_n[1].parse().unwrap());\n\
    \    let x_n = x_n.0 * n_n.1;\n    let n_n = n_n.0 * x_n.1;\n    x_n % n_n ==\
    \ 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let (num, den) = reduce_fraction(num,\
    \ den);\n    is_whole_number(num, den)", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd",
  "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let x_numerator: u32 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_denominator: u32 = x.split('/').last().unwrap().parse().unwrap();\n\
    \    let n_numerator: u32 = n.split('/').next().unwrap().parse().unwrap();\n \
    \   let n_denominator: u32 = n.split('/').last().unwrap().parse().unwrap();\n\
    \    let x_numerator_times_n_denominator = x_numerator * n_denominator;\n    let\
    \ n_numerator_times_x_denominator = n_numerator * x_denominator;\n    x_numerator_times_n_denominator\
    \ % n_numerator_times_x_denominator == 0", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd",
  "    let x_numerator: u32 = x.split('/').next().unwrap().parse().unwrap();\n   \
    \ let x_denominator: u32 = x.split('/').last().unwrap().parse().unwrap();\n  \
    \  let n_numerator: u32 = n.split('/').next().unwrap().parse().unwrap();\n   \
    \ let n_denominator: u32 = n.split('/').last().unwrap().parse().unwrap();\n  \
    \  let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let x: Vec<&str>\
    \ = x.split('/').collect();\n    let n: Vec<&str> = n.split('/').collect();\n\
    \    let x_numerator: u64 = x[0].parse().unwrap();\n    let x_denominator: u64\
    \ = x[1].parse().unwrap();\n    let n_numerator: u64 = n[0].parse().unwrap();\n\
    \    let n_denominator: u64 = n[1].parse().unwrap();\n    let x_numerator_product\
    \ = x_numerator * n_numerator;\n    let x_denominator_product = x_denominator\
    \ * n_denominator;\n    let x_numerator_product_gcd = gcd(x_numerator_product,\
    \ x_denominator_product);\n    let x_numerator_product_simplified = x_numerator_product\
    \ / x_numerator_product_gcd;\n    let x_denominator_product_simplified = x_denominator_product\
    \ / x_numerator_product_gcd;\n    x_numerator_product_simplified % x_denominator_product_simplified\
    \ == 0", "    let x: Vec<&str> = x.split(\"/\").collect();\n    let n: Vec<&str>\
    \ = n.split(\"/\").collect();\n    let x_num: u32 = x[0].parse().unwrap();\n \
    \   let x_den: u32 = x[1].parse().unwrap();\n    let n_num: u32 = n[0].parse().unwrap();\n\
    \    let n_den: u32 = n[1].parse().unwrap();\n    let num = x_num * n_num;\n \
    \   let den = x_den * n_den;\n    let gcd = gcd(num, den);\n    if gcd == 1 {\n\
    \        return true;\n    }\n    return false;", "    let (x_numerator, x_denominator)\
    \ = parse_fraction(x);\n    let (n_numerator, n_denominator) = parse_fraction(n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let x_numerator =\
    \ x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let result =\
    \ x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    if result % result_denominator == 0 {\n        true\n    } else {\n     \
    \   false\n    }", "    let x_numerator: i32 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split('/').last().unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split('/').next().unwrap().parse().unwrap();\n \
    \   let n_denominator: i32 = n.split('/').last().unwrap().parse().unwrap();\n\
    \    let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_numerator = x.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let product_numerator = x_numerator * n_numerator;\n    let product_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    let simplified_numerator = product_numerator / gcd;\n    let simplified_denominator\
    \ = product_denominator / gcd;\n    simplified_numerator % simplified_denominator\
    \ == 0", "    let mut x_numerator: i32 = 0;\n    let mut x_denominator: i32 =\
    \ 0;\n    let mut n_numerator: i32 = 0;\n    let mut n_denominator: i32 = 0;\n\
    \    let mut x_n: i32 = 0;\n    let mut n_n: i32 = 0;\n    let mut x_d: i32 =\
    \ 0;\n    let mut n_d: i32 = 0;\n    let mut x_n_n: i32 = 0;\n    let mut x_n_d:\
    \ i32 = 0;\n    let mut n_n_n: i32 = 0;\n    let mut n_n_d: i32 = 0;\n    let\
    \ mut x_n_n_n: i32 = 0;\n    let mut x_n_n_d: i32 = 0;\n    let mut x_n_d_n: i32\
    \ = 0;\n    let mut x_n_d_d: i32 = 0;\n    let mut n_n_n_n: i32 = 0;\n    let\
    \ mut n_n_n_d: i32 = 0;\n    let mut n_n_d_n: i32 = 0;\n    let mut n_n_d_d: i32\
    \ = 0;\n    let mut x_n_n_n_n: i32 = 0;\n    let mut x_n_n_n_d: i32 = 0;\n   \
    \ let mut x_n_n_d_n: i32 = 0;\n    let mut x_n_n_d_d: i32 = 0;\n    let mut x_n_d_n_n:\
    \ i32 = 0;\n    let mut x_n_d_n_d: i32 = 0;\n    let mut x_n_d_d_n: i32 = 0;\n\
    \    let mut x_n_d_d_d: i32 = 0;\n    let mut n_n_n_n_n: i32 = 0;\n    let mut\
    \ n_n_n_n_d: i32 = 0;\n    let mut n_n_n_d_n:", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd",
  "    let x_num: i32 = x.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let x_den: i32 = x.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let n_num: i32 = n.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let n_den: i32 = n.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let x_num_n = x_num * n_den;\n    let n_num_x = n_num * x_den;\n    x_num_n\
    \ % n_num_x == 0", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let product_numerator = x_numerator * n_numerator;\n    let product_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let x_num: i32\
    \ = x.split(\"/\").next().unwrap().parse().unwrap();\n    let x_den: i32 = x.split(\"\
    /\").last().unwrap().parse().unwrap();\n    let n_num: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let n_den: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n    let\
    \ res_num = x_num * n_num;\n    let res_den = x_den * n_den;\n    res_num % res_den\
    \ == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    let (num, den) = (num / gcd, den / gcd);\n\
    \    den == 1", "    let (x_numerator, x_denominator) = parse_fraction(x);\n \
    \   let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator =\
    \ x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator = x.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(&x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num,\
    \ den);\n    num / gcd == den / gcd", "    let x_numerator = x.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    let gcd = gcd(numerator, denominator);\n    numerator\
    \ / gcd == denominator / gcd", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    if result % result_denominator == 0 {\n        true\n\
    \    } else {\n        false\n    }", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<u64>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<u64>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<u64>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<u64>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let mut x_numerator: i32 = 0;\n    let mut x_denominator:\
    \ i32 = 0;\n    let mut n_numerator: i32 = 0;\n    let mut n_denominator: i32\
    \ = 0;\n    let mut x_numerator_str = String::new();\n    let mut x_denominator_str\
    \ = String::new();\n    let mut n_numerator_str = String::new();\n    let mut\
    \ n_denominator_str = String::new();\n    let mut x_numerator_str_vec: Vec<char>\
    \ = Vec::new();\n    let mut x_denominator_str_vec: Vec<char> = Vec::new();\n\
    \    let mut n_numerator_str_vec: Vec<char> = Vec::new();\n    let mut n_denominator_str_vec:\
    \ Vec<char> = Vec::new();\n    let mut x_numerator_str_vec_rev: Vec<char> = Vec::new();\n\
    \    let mut x_denominator_str_vec_rev: Vec<char> = Vec::new();\n    let mut n_numerator_str_vec_rev:\
    \ Vec<char> = Vec::new();\n    let mut n_denominator_str_vec_rev: Vec<char> =\
    \ Vec::new();\n    let mut x_numerator_str_rev = String::new();\n    let mut x_denominator_str_rev\
    \ = String::new();\n    let mut n_numerator_str_rev = String::new();\n    let\
    \ mut n_denominator_str_rev = String::new();\n    let mut x_numerator_str_rev_vec:\
    \ Vec<char> = Vec::new();\n    let mut x_denominator_str_rev_vec: Vec<char> =\
    \ Vec::new();\n    let mut n_numerator_str_rev_vec: Vec<char> = Vec::new();\n\
    \    let mut n_denominator_str_rev_vec: Vec<char> = Vec::new();\n    let mut x_numerator_str_rev_vec_rev:\
    \ Vec<char> = Vec", "    let x_numerator: i32 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split('/').last().unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split('/').next().unwrap().parse().unwrap();\n \
    \   let n_denominator: i32 = n.split('/').last().unwrap().parse().unwrap();\n\
    \    let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_numerator = x.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    let result_float = (x_numerator as f32 * n_numerator as f32) / (x_denominator\
    \ as f32 * n_denominator as f32);\n    result_float == result as f32", "    let\
    \ (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator)\
    \ = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_nums: Vec<&str> = x.split(\"/\").collect();\n    let n_nums:\
    \ Vec<&str> = n.split(\"/\").collect();\n    let x_num = x_nums[0].parse::<i32>().unwrap();\n\
    \    let x_den = x_nums[1].parse::<i32>().unwrap();\n    let n_num = n_nums[0].parse::<i32>().unwrap();\n\
    \    let n_den = n_nums[1].parse::<i32>().unwrap();\n    let x_num_n = x_num *\
    \ n_den;\n    let n_num_x = n_num * x_den;\n    x_num_n == n_num_x", "    let\
    \ x: Vec<&str> = x.split(\"/\").collect();\n    let n: Vec<&str> = n.split(\"\
    /\").collect();\n    let x_num: i32 = x[0].parse().unwrap();\n    let x_den: i32\
    \ = x[1].parse().unwrap();\n    let n_num: i32 = n[0].parse().unwrap();\n    let\
    \ n_den: i32 = n[1].parse().unwrap();\n    let num: i32 = x_num * n_num;\n   \
    \ let den: i32 = x_den * n_den;\n    if num % den == 0 {\n        return true;\n\
    \    }\n    false", "    let x_numerator = x.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    if result % 1 == 0.0 {\n        return true;\n    }\n    false", "    let\
    \ (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator)\
    \ = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_numerator: i32 = x.split('/').nth(0).unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split('/').nth(1).unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split('/').nth(0).unwrap().parse().unwrap();\n \
    \   let n_denominator: i32 = n.split('/').nth(1).unwrap().parse().unwrap();\n\
    \    let x_numerator = x_numerator * n_denominator;\n    let x_denominator = x_denominator\
    \ * n_numerator;\n    x_numerator % x_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num,\
    \ den);\n    num / gcd == den / gcd", "    let (x_numerator, x_denominator) =\
    \ parse_fraction(x);\n    let (n_numerator, n_denominator) = parse_fraction(n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let mut x_numerator:\
    \ i32 = 0;\n    let mut x_denominator: i32 = 0;\n    let mut n_numerator: i32\
    \ = 0;\n    let mut n_denominator: i32 = 0;\n    let mut x_numerator_str = String::new();\n\
    \    let mut x_denominator_str = String::new();\n    let mut n_numerator_str =\
    \ String::new();\n    let mut n_denominator_str = String::new();\n    let mut\
    \ x_numerator_str_iter = x.chars();\n    let mut x_denominator_str_iter = x.chars();\n\
    \    let mut n_numerator_str_iter = n.chars();\n    let mut n_denominator_str_iter\
    \ = n.chars();\n    let mut x_numerator_str_iter_flag = false;\n    let mut x_denominator_str_iter_flag\
    \ = false;\n    let mut n_numerator_str_iter_flag = false;\n    let mut n_denominator_str_iter_flag\
    \ = false;\n    for c in x_numerator_str_iter {\n        if c == '/' {\n     \
    \       x_numerator_str_iter_flag = true;\n        }\n        if !x_numerator_str_iter_flag\
    \ {\n            x_numerator_str.push(c);\n        }\n    }\n    for c in x_denominator_str_iter\
    \ {\n        if c == '/' {\n            x_denominator_str_iter_flag = true;\n\
    \        }\n        if x_denominator_str_iter_flag {\n            x_denominator_str.push(c);\n\
    \        }\n    }\n    for c in n_numerator_str_iter {\n        if c == '/' {\n\
    \            n_numerator_str_iter_flag = true;\n        }\n        if !n_numerator_str_iter_flag\
    \ {\n            n_numerator_str.push(c);\n        }\n    }\n    for c in n_",
  "    let x_num: i32 = x.split('/').next().unwrap().parse().unwrap();\n    let x_den:\
    \ i32 = x.split('/').last().unwrap().parse().unwrap();\n    let n_num: i32 = n.split('/').next().unwrap().parse().unwrap();\n\
    \    let n_den: i32 = n.split('/').last().unwrap().parse().unwrap();\n    let\
    \ x_num = x_num * n_den;\n    let x_den = x_den * n_num;\n    x_num % x_den ==\
    \ 0", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let product_numerator\
    \ = x_numerator * n_numerator;\n    let product_denominator = x_denominator *\
    \ n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    let gcd = gcd(numerator, denominator);\n    numerator / gcd == denominator\
    \ / gcd", "    let x_numerator = x.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator;\n    result % (x_denominator\
    \ * n_denominator) == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let\
    \ (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den\
    \ * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let\
    \ x_numerator: i32 = x.split(\"/\").next().unwrap().parse().unwrap();\n    let\
    \ x_denominator: i32 = x.split(\"/\").last().unwrap().parse().unwrap();\n    let\
    \ n_numerator: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n    let\
    \ n_denominator: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n    let\
    \ x_numerator_n: i32 = x_numerator * n_numerator;\n    let x_denominator_n: i32\
    \ = x_denominator * n_denominator;\n    let gcd: i32 = gcd(x_numerator_n, x_denominator_n);\n\
    \    x_numerator_n / gcd == x_denominator_n / gcd", "    let x_numerator = x.split('/').nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let mut x_numerator: i32 = 0;\n    let mut x_denominator:\
    \ i32 = 0;\n    let mut n_numerator: i32 = 0;\n    let mut n_denominator: i32\
    \ = 0;\n    let mut x_n: i32 = 0;\n    let mut n_n: i32 = 0;\n    let mut x_d:\
    \ i32 = 0;\n    let mut n_d: i32 = 0;\n    let mut x_n_n: i32 = 0;\n    let mut\
    \ x_n_d: i32 = 0;\n    let mut n_n_n: i32 = 0;\n    let mut n_n_d: i32 = 0;\n\
    \    let mut x_n_n_n: i32 = 0;\n    let mut x_n_n_d: i32 = 0;\n    let mut n_n_n_n:\
    \ i32 = 0;\n    let mut n_n_n_d: i32 = 0;\n    let mut x_n_n_n_n: i32 = 0;\n \
    \   let mut x_n_n_n_d: i32 = 0;\n    let mut n_n_n_n_n: i32 = 0;\n    let mut\
    \ n_n_n_n_d: i32 = 0;\n    let mut x_n_n_n_n_n: i32 = 0;\n    let mut x_n_n_n_n_d:\
    \ i32 = 0;\n    let mut n_n_n_n_n_n: i32 = 0;\n    let mut n_n_n_n_n_d: i32 =\
    \ 0;\n    let mut x_n_n_n_n_n_n: i32 = 0;\n    let mut x_n_n_n_n_n_d: i32 = 0;\n\
    \    let mut n_n_n_n_n_n_n: i32 = 0;\n    let mut n_n_n_n_n_n_d: i32 = 0;\n  \
    \  let mut x_n_n_n_n_n_n_n:", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator: i32 = x.split(\"/\"\
    ).nth(0).unwrap().parse().unwrap();\n    let x_denominator: i32 = x.split(\"/\"\
    ).nth(1).unwrap().parse().unwrap();\n    let n_numerator: i32 = n.split(\"/\"\
    ).nth(0).unwrap().parse().unwrap();\n    let n_denominator: i32 = n.split(\"/\"\
    ).nth(1).unwrap().parse().unwrap();\n    let x_numerator_n: i32 = x_numerator\
    \ * n_numerator;\n    let x_denominator_n: i32 = x_denominator * n_denominator;\n\
    \    x_numerator_n % x_denominator_n == 0", "    let (x_numerator, x_denominator)\
    \ = parse_fraction(&x);\n    let (n_numerator, n_denominator) = parse_fraction(&n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let mut x_numerator:\
    \ i32 = 0;\n    let mut x_denominator: i32 = 0;\n    let mut n_numerator: i32\
    \ = 0;\n    let mut n_denominator: i32 = 0;\n    let mut x_numerator_str = String::new();\n\
    \    let mut x_denominator_str = String::new();\n    let mut n_numerator_str =\
    \ String::new();\n    let mut n_denominator_str = String::new();\n    let mut\
    \ x_numerator_str_chars = x.chars();\n    let mut n_numerator_str_chars = n.chars();\n\
    \    let mut x_denominator_str_chars = x.chars();\n    let mut n_denominator_str_chars\
    \ = n.chars();\n    let mut x_numerator_str_chars_iter = x_numerator_str_chars.by_ref();\n\
    \    let mut n_numerator_str_chars_iter = n_numerator_str_chars.by_ref();\n  \
    \  let mut x_denominator_str_chars_iter = x_denominator_str_chars.by_ref();\n\
    \    let mut n_denominator_str_chars_iter = n_denominator_str_chars.by_ref();\n\
    \    let mut x_numerator_str_chars_iter_by_ref = x_numerator_str_chars_iter.by_ref();\n\
    \    let mut n_numerator_str_chars_iter_by_ref = n_numerator_str_chars_iter.by_ref();\n\
    \    let mut x_denominator_str_chars_iter_by_ref = x_denominator_str_chars_iter.by_ref();\n\
    \    let mut n_denominator_str_chars_iter_by_ref = n_denominator_str_chars_iter.by_ref();\n\
    \    let mut x_numerator_str_chars_iter_by_ref_by_ref = x_n", "    let (x_num,\
    \ x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n \
    \   let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n\
    \    num / gcd == den / gcd", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x: Vec<&str> = x.split(\"/\").collect();\n\
    \    let n: Vec<&str> = n.split(\"/\").collect();\n    let x_num: i32 = x[0].parse().unwrap();\n\
    \    let x_den: i32 = x[1].parse().unwrap();\n    let n_num: i32 = n[0].parse().unwrap();\n\
    \    let n_den: i32 = n[1].parse().unwrap();\n    let x_num = x_num * n_den;\n\
    \    let x_den = x_den * n_num;\n    x_num % x_den == 0", "    let x_numerator\
    \ = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let result =\
    \ x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    result % result_denominator == 0", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = greatest_common_divisor(num, den);\n    num /\
    \ gcd == den / gcd", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd",
  "    let x_numerator: i32 = x.split('/').next().unwrap().parse().unwrap();\n   \
    \ let x_denominator: i32 = x.split('/').last().unwrap().parse().unwrap();\n  \
    \  let n_numerator: i32 = n.split('/').next().unwrap().parse().unwrap();\n   \
    \ let n_denominator: i32 = n.split('/').last().unwrap().parse().unwrap();\n  \
    \  let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let x_numerator\
    \ = x.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let\
    \ x_denominator = x.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let x_n = x_numerator * n_denominator;\n    let n_d = n_numerator * x_denominator;\n\
    \    x_n % n_d == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num,\
    \ n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let x_fraction\
    \ = parse_fraction(x);\n    let n_fraction = parse_fraction(n);\n    let result\
    \ = x_fraction.0 * n_fraction.1 == x_fraction.1 * n_fraction.0;\n    result",
  "    let x_num: i32 = x.split('/').nth(0).unwrap().parse().unwrap();\n    let x_den:\
    \ i32 = x.split('/').nth(1).unwrap().parse().unwrap();\n    let n_num: i32 = n.split('/').nth(0).unwrap().parse().unwrap();\n\
    \    let n_den: i32 = n.split('/').nth(1).unwrap().parse().unwrap();\n    let\
    \ res = (x_num * n_num) / (x_den * n_den);\n    res % 1 == 0.0", "    let x_numerator:\
    \ i32 = x.split('/').next().unwrap().parse().unwrap();\n    let x_denominator:\
    \ i32 = x.split('/').last().unwrap().parse().unwrap();\n    let n_numerator: i32\
    \ = n.split('/').next().unwrap().parse().unwrap();\n    let n_denominator: i32\
    \ = n.split('/').last().unwrap().parse().unwrap();\n    let x_numerator_multiplied\
    \ = x_numerator * n_numerator;\n    let x_denominator_multiplied = x_denominator\
    \ * n_denominator;\n    x_numerator_multiplied % x_denominator_multiplied == 0",
  "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    if result % result_denominator == 0 {\n        true\n\
    \    } else {\n        false\n    }", "    let (x_numerator, x_denominator) =\
    \ parse_fraction(x);\n    let (n_numerator, n_denominator) = parse_fraction(n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(&x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let x_numerator_simplified = x_numerator * n_denominator;\n    let x_denominator_simplified\
    \ = x_denominator * n_numerator;\n    x_numerator_simplified % x_denominator_simplified\
    \ == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_numerator: u32 = x.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let x_denominator: u32 = x.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let n_numerator: u32 = n.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let n_denominator: u32 = n.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let result = x_numerator * n_denominator * n_numerator\
    \ * x_denominator;\n    result % (x_denominator * n_denominator) == 0", "    let\
    \ (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num,\
    \ den);\n    num / gcd == den / gcd", "    let x_numerator: u32 = x.split(\"/\"\
    ).collect::<Vec<&str>>()[0].parse().unwrap();\n    let x_denominator: u32 = x.split(\"\
    /\").collect::<Vec<&str>>()[1].parse().unwrap();\n    let n_numerator: u32 = n.split(\"\
    /\").collect::<Vec<&str>>()[0].parse().unwrap();\n    let n_denominator: u32 =\
    \ n.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n    let result =\
    \ x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    result % result_denominator == 0", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let product_numerator = x_numerator * n_numerator;\n    let product_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let x: Vec<&str>\
    \ = x.split(\"/\").collect();\n    let n: Vec<&str> = n.split(\"/\").collect();\n\
    \    let x_num: u64 = x[0].parse().unwrap();\n    let x_den: u64 = x[1].parse().unwrap();\n\
    \    let n_num: u64 = n[0].parse().unwrap();\n    let n_den: u64 = n[1].parse().unwrap();\n\
    \    let result = x_num * n_den * n_num * x_den;\n    if result % (x_den * n_den)\
    \ == 0 {\n        true\n    } else {\n        false\n    }", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_numerator = x.split('/').nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').nth(0).unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').nth(1).unwrap().parse::<i32>().unwrap();\n\
    \    let x_numerator = x_numerator * n_denominator;\n    let x_denominator = x_denominator\
    \ * n_numerator;\n    x_numerator % x_denominator == 0", "    let mut x_numerator:\
    \ u64 = 0;\n    let mut x_denominator: u64 = 0;\n    let mut n_numerator: u64\
    \ = 0;\n    let mut n_denominator: u64 = 0;\n    let mut x_numerator_str = String::new();\n\
    \    let mut x_denominator_str = String::new();\n    let mut n_numerator_str =\
    \ String::new();\n    let mut n_denominator_str = String::new();\n    let mut\
    \ x_numerator_str_chars = x.chars();\n    let mut n_numerator_str_chars = n.chars();\n\
    \    let mut x_denominator_str_chars = x.chars();\n    let mut n_denominator_str_chars\
    \ = n.chars();\n    let mut x_numerator_str_chars_iter = x_numerator_str_chars.by_ref();\n\
    \    let mut n_numerator_str_chars_iter = n_numerator_str_chars.by_ref();\n  \
    \  let mut x_denominator_str_chars_iter = x_denominator_str_chars.by_ref();\n\
    \    let mut n_denominator_str_chars_iter = n_denominator_str_chars.by_ref();\n\
    \    let mut x_numerator_str_chars_iter_by_ref = x_numerator_str_chars_iter.by_ref();\n\
    \    let mut n_numerator_str_chars_iter_by_ref = n_numerator_str_chars_iter.by_ref();\n\
    \    let mut x_denominator_str_chars_iter_by_ref = x_denominator_str_chars_iter.by_ref();\n\
    \    let mut n_denominator_str_chars_iter_by_ref = n_denominator_str_chars_iter.by_ref();\n\
    \    let mut x_numerator_str_chars_iter_by_ref_iter = x_numerator", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let\
    \ (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator = x_numerator\
    \ * n_numerator;\n    let denominator = x_denominator * n_denominator;\n    numerator\
    \ % denominator == 0", "    let x_numerator = x.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let x_numerator: i32 = x.split(\"/\").collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let x_denominator: i32 = x.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let n_numerator: i32 = n.split(\"/\").collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let n_denominator: i32 = n.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let x_nums: Vec<&str>\
    \ = x.split(\"/\").collect();\n    let n_nums: Vec<&str> = n.split(\"/\").collect();\n\
    \    let x_num: u64 = x_nums[0].parse().unwrap();\n    let x_den: u64 = x_nums[1].parse().unwrap();\n\
    \    let n_num: u64 = n_nums[0].parse().unwrap();\n    let n_den: u64 = n_nums[1].parse().unwrap();\n\
    \    let num: u64 = x_num * n_num;\n    let den: u64 = x_den * n_den;\n    let\
    \ gcd: u64 = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_split: Vec<&str> = x.split(\"/\").collect();\n\
    \    let n_split: Vec<&str> = n.split(\"/\").collect();\n    let x_numerator:\
    \ u32 = x_split[0].parse().unwrap();\n    let x_denominator: u32 = x_split[1].parse().unwrap();\n\
    \    let n_numerator: u32 = n_split[0].parse().unwrap();\n    let n_denominator:\
    \ u32 = n_split[1].parse().unwrap();\n    let numerator: u32 = x_numerator * n_numerator;\n\
    \    let denominator: u32 = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    num % den == 0", "    let (x_num,\
    \ x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n \
    \   let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n\
    \    num / gcd == den / gcd", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let product_numerator = x_numerator * n_numerator;\n    let product_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let x_parts: Vec<&str> = x.split(\"/\").collect();\n    let n_parts:\
    \ Vec<&str> = n.split(\"/\").collect();\n    let x_numerator: i32 = x_parts[0].parse().unwrap();\n\
    \    let x_denominator: i32 = x_parts[1].parse().unwrap();\n    let n_numerator:\
    \ i32 = n_parts[0].parse().unwrap();\n    let n_denominator: i32 = n_parts[1].parse().unwrap();\n\
    \    let x_numerator_product = x_numerator * n_numerator;\n    let x_denominator_product\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(x_numerator_product, x_denominator_product);\n\
    \    x_numerator_product / gcd == x_denominator_product / gcd", "    let x_numerator:\
    \ u32 = x.split(\"/\").next().unwrap().parse().unwrap();\n    let x_denominator:\
    \ u32 = x.split(\"/\").last().unwrap().parse().unwrap();\n    let n_numerator:\
    \ u32 = n.split(\"/\").next().unwrap().parse().unwrap();\n    let n_denominator:\
    \ u32 = n.split(\"/\").last().unwrap().parse().unwrap();\n    let x_numerator_product\
    \ = x_numerator * n_numerator;\n    let x_denominator_product = x_denominator\
    \ * n_denominator;\n    x_numerator_product % x_denominator_product == 0", " \
    \   let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num,\
    \ den);\n    num / gcd == den / gcd", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    let (num, den) = (num / gcd,\
    \ den / gcd);\n    den == 1", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd",
  "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let (mut num, mut den)\
    \ = (num, den);\n    while den != 0 {\n        let tmp = den;\n        den = num\
    \ % den;\n        num = tmp;\n    }\n    num == 1", "    let x_num = x.split(\"\
    /\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let x_den = x.split(\"\
    /\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let n_num = n.split(\"\
    /\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let n_den = n.split(\"\
    /\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let num = x_num *\
    \ n_num;\n    let den = x_den * n_den;\n    num % den == 0", "    let x_numerator\
    \ = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let x_denominator\
    \ = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let n_numerator\
    \ = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let n_denominator\
    \ = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n    let product_numerator\
    \ = x_numerator * n_numerator;\n    let product_denominator = x_denominator *\
    \ n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let result = x_numerator * n_denominator\
    \ * n_numerator * x_denominator;\n    result % (x_denominator * n_denominator)\
    \ == 0", "    let x_numerator: i32 = x.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let n_denominator: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let product_numerator = x_numerator * n_numerator;\n    let product_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(product_numerator, product_denominator);\n\
    \    product_numerator / gcd == product_denominator / gcd", "    let x_numerator:\
    \ u32 = x.split('/').next().unwrap().parse().unwrap();\n    let x_denominator:\
    \ u32 = x.split('/').last().unwrap().parse().unwrap();\n    let n_numerator: u32\
    \ = n.split('/').next().unwrap().parse().unwrap();\n    let n_denominator: u32\
    \ = n.split('/').last().unwrap().parse().unwrap();\n    let result_numerator =\
    \ x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    let gcd = gcd(result_numerator, result_denominator);\n    result_numerator\
    \ / gcd == result_denominator / gcd", "    let x_numerator: u32 = x.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let x_denominator: u32 = x.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let n_numerator: u32 = n.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let n_denominator: u32 = n.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let product = x_numerator * n_numerator;\n\
    \    let product_denominator = x_denominator * n_denominator;\n    product % product_denominator\
    \ == 0", "    let x = x.split(\"/\").collect::<Vec<&str>>();\n    let n = n.split(\"\
    /\").collect::<Vec<&str>>();\n    let x = (x[0].parse::<i32>().unwrap(), x[1].parse::<i32>().unwrap());\n\
    \    let n = (n[0].parse::<i32>().unwrap(), n[1].parse::<i32>().unwrap());\n \
    \   let x = x.0 * n.1;\n    let n = n.0 * x.1;\n    x % n == 0", "    let x_numerator:\
    \ u32 = x.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n    let x_denominator:\
    \ u32 = x.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n    let n_numerator:\
    \ u32 = n.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n    let n_denominator:\
    \ u32 = n.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n    let result\
    \ = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    result\
    \ % 1 == 0.0", "    let x_numerator = x.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split('/').next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split('/').last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let (numerator, denominator) = (x_numerator * n_numerator,\
    \ x_denominator * n_denominator);\n    let gcd = gcd(numerator, denominator);\n\
    \    numerator / gcd == denominator / gcd", "    let x_n = x.split(\"/\").collect::<Vec<&str>>();\n\
    \    let n_n = n.split(\"/\").collect::<Vec<&str>>();\n    let x_n = (x_n[0].parse::<u32>().unwrap(),\
    \ x_n[1].parse::<u32>().unwrap());\n    let n_n = (n_n[0].parse::<u32>().unwrap(),\
    \ n_n[1].parse::<u32>().unwrap());\n    let x_n = x_n.0 * n_n.1;\n    let n_n\
    \ = n_n.0 * x_n.1;\n    x_n % n_n == 0", "    let x: Vec<&str> = x.split(\"/\"\
    ).collect();\n    let n: Vec<&str> = n.split(\"/\").collect();\n    let x_num:\
    \ u32 = x[0].parse().unwrap();\n    let x_den: u32 = x[1].parse().unwrap();\n\
    \    let n_num: u32 = n[0].parse().unwrap();\n    let n_den: u32 = n[1].parse().unwrap();\n\
    \    let num: u32 = x_num * n_num;\n    let den: u32 = x_den * n_den;\n    let\
    \ mut gcd: u32 = 1;\n    for i in 1..=(num.min(den)) {\n        if num % i ==\
    \ 0 && den % i == 0 {\n            gcd = i;\n        }\n    }\n    if num % gcd\
    \ == 0 && den % gcd == 0 {\n        return true;\n    }\n    false", "    let\
    \ (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let num = x_num * n_num;\n    let den = x_den * n_den;\n    let gcd = gcd(num,\
    \ den);\n    num / gcd == den / gcd", "    let x_numerator: i32 = x.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let x_denominator: i32 = x.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let n_numerator: i32 = n.split(\"/\"\
    ).next().unwrap().parse().unwrap();\n    let n_denominator: i32 = n.split(\"/\"\
    ).last().unwrap().parse().unwrap();\n    let x_numerator_n: i32 = x_numerator\
    \ * n_numerator;\n    let x_denominator_n: i32 = x_denominator * n_denominator;\n\
    \    let gcd: i32 = gcd(x_numerator_n, x_denominator_n);\n    x_numerator_n /\
    \ gcd == x_denominator_n / gcd", "    let (x_num, x_den) = parse_fraction(x);\n\
    \    let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let (num, den) = reduce_fraction(num, den);\n    num %\
    \ den == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n   \
    \ let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator =\
    \ x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator: i32 = x.split(\"/\"\
    ).collect::<Vec<&str>>()[0].parse().unwrap();\n    let x_denominator: i32 = x.split(\"\
    /\").collect::<Vec<&str>>()[1].parse().unwrap();\n    let n_numerator: i32 = n.split(\"\
    /\").collect::<Vec<&str>>()[0].parse().unwrap();\n    let n_denominator: i32 =\
    \ n.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n    let result_numerator\
    \ = x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\
    \    let gcd = gcd(result_numerator, result_denominator);\n    result_numerator\
    \ / gcd == result_denominator / gcd", "    let x_num: u32 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_den: u32 = x.split('/').last().unwrap().parse().unwrap();\n    let\
    \ n_num: u32 = n.split('/').next().unwrap().parse().unwrap();\n    let n_den:\
    \ u32 = n.split('/').last().unwrap().parse().unwrap();\n    let num = x_num *\
    \ n_num;\n    let den = x_den * n_den;\n    num % den == 0", "    let (x_num,\
    \ x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n \
    \   let num = x_num * n_num;\n    let den = x_den * n_den;\n    num % den == 0",
  "    let x_parts: Vec<&str> = x.split(\"/\").collect();\n    let n_parts: Vec<&str>\
    \ = n.split(\"/\").collect();\n    let x_num: u32 = x_parts[0].parse().unwrap();\n\
    \    let x_den: u32 = x_parts[1].parse().unwrap();\n    let n_num: u32 = n_parts[0].parse().unwrap();\n\
    \    let n_den: u32 = n_parts[1].parse().unwrap();\n    let result_num = x_num\
    \ * n_num;\n    let result_den = x_den * n_den;\n    let gcd = gcd(result_num,\
    \ result_den);\n    result_num / gcd == result_den / gcd", "    let mut x: Vec<&str>\
    \ = x.split('/').collect();\n    let mut n: Vec<&str> = n.split('/').collect();\n\
    \    let x_numerator: i32 = x[0].parse().unwrap();\n    let x_denominator: i32\
    \ = x[1].parse().unwrap();\n    let n_numerator: i32 = n[0].parse().unwrap();\n\
    \    let n_denominator: i32 = n[1].parse().unwrap();\n    let mut x_numerator_copy\
    \ = x_numerator;\n    let mut x_denominator_copy = x_denominator;\n    let mut\
    \ n_numerator_copy = n_numerator;\n    let mut n_denominator_copy = n_denominator;\n\
    \    let mut x_gcd = gcd(x_numerator, x_denominator);\n    let mut n_gcd = gcd(n_numerator,\
    \ n_denominator);\n    while x_gcd != 1 {\n        x_numerator_copy /= x_gcd;\n\
    \        x_denominator_copy /= x_gcd;\n        x_gcd = gcd(x_numerator_copy, x_denominator_copy);\n\
    \    }\n    while n_gcd != 1 {\n        n_numerator_copy /= n_gcd;\n        n_denominator_copy\
    \ /= n_gcd;\n        n_gcd = gcd(n_numerator_copy, n_denominator_copy);\n    }\n\
    \    let x_numerator_copy = x_numerator_copy;\n    let x_denominator_copy = x_denominator_copy;\n\
    \    let n_numerator_copy = n_numerator_copy;\n    let n_denominator_copy = n_denominator_copy;\n\
    \    let mut x_numerator_copy = x_numerator_copy;\n    let mut x_denominator_copy\
    \ = x_denominator_copy;\n    let mut n_numerator_", "    let x_num = x.split(\"\
    /\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let x_den = x.split(\"\
    /\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let n_num = n.split(\"\
    /\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let n_den = n.split(\"\
    /\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let num = x_num *\
    \ n_num;\n    let den = x_den * n_den;\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let x_numerator: u64 = x.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let x_denominator: u64 = x.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let n_numerator: u64 = n.split('/').collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let n_denominator: u64 = n.split('/').collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let result = x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    result % 1 == 0.0", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0.0", "    let (x_num, x_den) = parse_fraction(x);\n    let\
    \ (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den\
    \ * n_den);\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let\
    \ x_numerator: i32 = x.split(\"/\").next().unwrap().parse().unwrap();\n    let\
    \ x_denominator: i32 = x.split(\"/\").last().unwrap().parse().unwrap();\n    let\
    \ n_numerator: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n    let\
    \ n_denominator: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n    let\
    \ mut result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    if result < 0 {\n        result = result * -1;\n    }\n    if (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0 {\n        return true;\n\
    \    }\n    false", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    numerator % denominator == 0", "    let x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(&x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num,\
    \ den);\n    den / gcd == 1", "    let (x_num, x_den) = parse_fraction(x);\n \
    \   let (n_num, n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num,\
    \ x_den * n_den);\n    let gcd = greatest_common_divisor(num, den);\n    num /\
    \ gcd == den / gcd", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num,\
    \ n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num,\
    \ n_den) = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let x_split:\
    \ Vec<&str> = x.split(\"/\").collect();\n    let n_split: Vec<&str> = n.split(\"\
    /\").collect();\n    let x_numerator: i32 = x_split[0].parse().unwrap();\n   \
    \ let x_denominator: i32 = x_split[1].parse().unwrap();\n    let n_numerator:\
    \ i32 = n_split[0].parse().unwrap();\n    let n_denominator: i32 = n_split[1].parse().unwrap();\n\
    \    let product_numerator: i32 = x_numerator * n_numerator;\n    let product_denominator:\
    \ i32 = x_denominator * n_denominator;\n    let gcd: i32 = gcd(product_numerator,\
    \ product_denominator);\n    let simplified_numerator: i32 = product_numerator\
    \ / gcd;\n    let simplified_denominator: i32 = product_denominator / gcd;\n \
    \   simplified_numerator % simplified_denominator == 0", "    let mut x_numerator:\
    \ i32 = 0;\n    let mut x_denominator: i32 = 0;\n    let mut n_numerator: i32\
    \ = 0;\n    let mut n_denominator: i32 = 0;\n    let mut x_numerator_str = String::new();\n\
    \    let mut x_denominator_str = String::new();\n    let mut n_numerator_str =\
    \ String::new();\n    let mut n_denominator_str = String::new();\n    let mut\
    \ x_numerator_str_chars = x.chars();\n    let mut n_numerator_str_chars = n.chars();\n\
    \    let mut x_denominator_str_chars = x.chars();\n    let mut n_denominator_str_chars\
    \ = n.chars();\n    let mut x_numerator_str_chars_iter = x_numerator_str_chars.by_ref();\n\
    \    let mut n_numerator_str_chars_iter = n_numerator_str_chars.by_ref();\n  \
    \  let mut x_denominator_str_chars_iter = x_denominator_str_chars.by_ref();\n\
    \    let mut n_denominator_str_chars_iter = n_denominator_str_chars.by_ref();\n\
    \    let mut x_numerator_str_chars_iter_next = x_numerator_str_chars_iter.next();\n\
    \    let mut n_numerator_str_chars_iter_next = n_numerator_str_chars_iter.next();\n\
    \    let mut x_denominator_str_chars_iter_next = x_denominator_str_chars_iter.next();\n\
    \    let mut n_denominator_str_chars_iter_next = n_denominator_str_chars_iter.next();\n\
    \    while x_numerator_str_chars_iter_next != Some('/') {\n        x_numerator_str.push(x_numerator_str_ch",
  "    let x_num: i32 = x.split(\"/\").collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let x_den: i32 = x.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let n_num: i32 = n.split(\"/\").collect::<Vec<&str>>()[0].parse().unwrap();\n\
    \    let n_den: i32 = n.split(\"/\").collect::<Vec<&str>>()[1].parse().unwrap();\n\
    \    let result = x_num * n_num;\n    let result_den = x_den * n_den;\n    result\
    \ % result_den == 0", "    let x_num: u64 = x.split('/').next().unwrap().parse().unwrap();\n\
    \    let x_den: u64 = x.split('/').last().unwrap().parse().unwrap();\n    let\
    \ n_num: u64 = n.split('/').next().unwrap().parse().unwrap();\n    let n_den:\
    \ u64 = n.split('/').last().unwrap().parse().unwrap();\n    let result = x_num\
    \ * n_num;\n    let result_den = x_den * n_den;\n    result % result_den == 0",
  "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n\
    \    let (num, den) = (x_num * n_num, x_den * n_den);\n    let (num, den) = reduce_fraction(num,\
    \ den);\n    num % den == 0", "    let (x_num, x_den) = parse_fraction(x);\n \
    \   let (n_num, n_den) = parse_fraction(n);\n    let num = x_num * n_num;\n  \
    \  let den = x_den * n_den;\n    num % den == 0", "    let (x_numerator, x_denominator)\
    \ = parse_fraction(&x);\n    let (n_numerator, n_denominator) = parse_fraction(&n);\n\
    \    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator\
    \ * n_denominator;\n    numerator % denominator == 0", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num,\
    \ n_den) = parse_fraction(n);\n    let num = x_num * n_num;\n    let den = x_den\
    \ * n_den;\n    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let\
    \ x_numerator = x.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n    let\
    \ x_denominator = x.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n  \
    \  let n_numerator = n.split(\"/\").next().unwrap().parse::<i32>().unwrap();\n\
    \    let n_denominator = n.split(\"/\").last().unwrap().parse::<i32>().unwrap();\n\
    \    let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    result % 1 == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n\
    \    let (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator\
    \ = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\
    \    let gcd = gcd(numerator, denominator);\n    numerator / gcd == denominator\
    \ / gcd", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_num, x_den) = parse_fraction(x);\n    let (n_num, n_den)\
    \ = parse_fraction(n);\n    let (num, den) = (x_num * n_num, x_den * n_den);\n\
    \    let gcd = gcd(num, den);\n    num / gcd == den / gcd", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(&x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(&n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(&x);\n    let\
    \ (n_numerator, n_denominator) = parse_fraction(&n);\n    let numerator = x_numerator\
    \ * n_numerator;\n    let denominator = x_denominator * n_denominator;\n    numerator\
    \ % denominator == 0", "    let x_numerator: i32 = x.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let n_denominator: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let result = x_numerator * n_numerator;\n    let result_denominator = x_denominator\
    \ * n_denominator;\n    result % result_denominator == 0", "    let (x_numerator,\
    \ x_denominator) = parse_fraction(x);\n    let (n_numerator, n_denominator) =\
    \ parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n    let\
    \ denominator = x_denominator * n_denominator;\n    numerator % denominator ==\
    \ 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let (x_numerator, x_denominator) = parse_fraction(x);\n    let (n_numerator,\
    \ n_denominator) = parse_fraction(n);\n    let numerator = x_numerator * n_numerator;\n\
    \    let denominator = x_denominator * n_denominator;\n    numerator % denominator\
    \ == 0", "    let x_numerator: i32 = x.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let x_denominator: i32 = x.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let n_numerator: i32 = n.split(\"/\").next().unwrap().parse().unwrap();\n\
    \    let n_denominator: i32 = n.split(\"/\").last().unwrap().parse().unwrap();\n\
    \    let result_numerator = x_numerator * n_numerator;\n    let result_denominator\
    \ = x_denominator * n_denominator;\n    let gcd = gcd(result_numerator, result_denominator);\n\
    \    result_numerator / gcd == result_denominator / gcd", "    let mut x_numerator:\
    \ i32 = 0;\n    let mut x_denominator: i32 = 0;\n    let mut n_numerator: i32\
    \ = 0;\n    let mut n_denominator: i32 = 0;\n    let mut result: bool = false;\n\
    \n    for (i, c) in x.chars().enumerate() {\n        if c == '/' {\n         \
    \   x_numerator = x[0..i].parse::<i32>().unwrap();\n            x_denominator\
    \ = x[i + 1..].parse::<i32>().unwrap();\n        }\n    }\n\n    for (i, c) in\
    \ n.chars().enumerate() {\n        if c == '/' {\n            n_numerator = n[0..i].parse::<i32>().unwrap();\n\
    \            n_denominator = n[i + 1..].parse::<i32>().unwrap();\n        }\n\
    \    }\n\n    let mut x_numerator_temp = x_numerator;\n    let mut x_denominator_temp\
    \ = x_denominator;\n    let mut n_numerator_temp = n_numerator;\n    let mut n_denominator_temp\
    \ = n_denominator;\n\n    while x_numerator_temp != n_numerator_temp || x_denominator_temp\
    \ != n_denominator_temp {\n        if x_numerator_temp > n_numerator_temp {\n\
    \            x_numerator_temp -= n_numerator_temp;\n        } else {\n       \
    \     n_numerator_temp -= x_numerator_temp;\n        }\n\n        if x_denominator_temp\
    \ > n_denominator_temp {\n            x_denominator_temp -= n_denominator_temp;\n\
    \        } else {\n            n_denominator_temp -= x_denominator_temp;\n   \
    \     }\n    }\n\n    if x_numerator_temp == n_numerator_temp && x_denominator_temp\
    \ == n_denominator_temp {\n        result = true;\n", "    let (x_num, x_den)\
    \ = parse_fraction(x);\n    let (n_num, n_den) = parse_fraction(n);\n    let (num,\
    \ den) = (x_num * n_num, x_den * n_den);\n    let gcd = gcd(num, den);\n    num\
    \ / gcd == den / gcd", "    let mut x_numerator: i32 = 0;\n    let mut x_denominator:\
    \ i32 = 0;\n    let mut n_numerator: i32 = 0;\n    let mut n_denominator: i32\
    \ = 0;\n    for (i, c) in x.chars().enumerate() {\n        if c == '/' {\n   \
    \         x_numerator = x[..i].parse::<i32>().unwrap();\n            x_denominator\
    \ = x[i + 1..].parse::<i32>().unwrap();\n        }\n    }\n    for (i, c) in n.chars().enumerate()\
    \ {\n        if c == '/' {\n            n_numerator = n[..i].parse::<i32>().unwrap();\n\
    \            n_denominator = n[i + 1..].parse::<i32>().unwrap();\n        }\n\
    \    }\n    let numerator = x_numerator * n_numerator;\n    let denominator =\
    \ x_denominator * n_denominator;\n    if numerator % denominator == 0 {\n    \
    \    return true;\n    }\n    false"]
stop_tokens:
- "\n}"
