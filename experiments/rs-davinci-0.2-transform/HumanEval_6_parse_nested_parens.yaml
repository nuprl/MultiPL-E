name: HumanEval_6_parse_nested_parens
language: rs
prompt: "/// Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n/// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"(()()) ((()))\
  \ () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"\
  (()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"\
  () (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"\
  (()(())((())))\")), vec![4]);\n}\n"
completions: ["    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack:\
    \ Vec<char> = Vec::new();\n    let mut max_depth: isize = 0;\n    let mut curr_depth:\
    \ isize = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n   \
    \         paren_stack.push(c);\n            curr_depth += 1;\n            if curr_depth\
    \ > max_depth {\n                max_depth = curr_depth;\n            }\n    \
    \    } else if c == ')' {\n            paren_stack.pop();\n            curr_depth\
    \ -= 1;\n        } else if c == ' ' {\n            paren_vec.push(max_depth);\n\
    \            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n \
    \   paren_vec.push(max_depth);\n    paren_vec", "    let mut max_depth = 0;\n\
    \    let mut depth = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut paren_groups: Vec<String> = paren_string.split(\" \").map(|s| s.to_string()).collect();\n\
    \    let mut max_nesting: Vec<isize> = Vec::new();\n    while !paren_groups.is_empty()\
    \ {\n        let mut paren_group = paren_groups.pop().unwrap();\n        let mut\
    \ paren_stack: Vec<char> = Vec::new();\n        let mut max_nesting_level = 0;\n\
    \        let mut nesting_level = 0;\n        for c in paren_group.chars() {\n\
    \            if c == '(' {\n                nesting_level += 1;\n            \
    \    if nesting_level > max_nesting_level {\n                    max_nesting_level\
    \ = nesting_level;\n                }\n                paren_stack.push(c);\n\
    \            } else if c == ')' {\n                nesting_level -= 1;\n     \
    \           paren_stack.pop();\n            }\n        }\n        max_nesting.push(max_nesting_level);\n\
    \    }\n    max_nesting", "    let mut paren_vec: Vec<isize> = Vec::new();\n \
    \   let mut paren_stack: Vec<char> = Vec::new();\n    let mut max_nesting: isize\
    \ = 0;\n    let mut curr_nesting: isize = 0;\n    let mut paren_string = paren_string.chars();\n\
    \    while let Some(paren) = paren_string.next() {\n        match paren {\n  \
    \          '(' => {\n                paren_stack.push(paren);\n              \
    \  curr_nesting += 1;\n                if curr_nesting > max_nesting {\n     \
    \               max_nesting = curr_nesting;\n                }\n            }\n\
    \            ')' => {\n                paren_stack.pop();\n                curr_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                paren_vec.push(max_nesting);\n\
    \                max_nesting = 0;\n                curr_nesting = 0;\n       \
    \     }\n            _ => panic!(\"Invalid character in input string\"),\n   \
    \     }\n    }\n    paren_vec.push(max_nesting);\n    paren_vec", "    let mut\
    \ max_depth = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    let mut max_nesting: isize = 0;\n    let mut current_nesting: isize = 0;\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ depths = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                depths.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut\
    \ result = Vec::new();\n    let mut max_depth = 0;\n    let mut depth = 0;\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut max_depth = 0;\n    let\
    \ mut depth = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut result: Vec<isize> = Vec::new();\n\
    \    let mut paren_stack: Vec<char> = Vec::new();\n    let mut max_depth: isize\
    \ = 0;\n    let mut current_depth: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            paren_stack.push(c);\n            current_depth\
    \ += 1;\n            if current_depth > max_depth {\n                max_depth\
    \ = current_depth;\n            }\n        } else if c == ')' {\n            paren_stack.pop();\n\
    \            current_depth -= 1;\n        } else if c == ' ' {\n            result.push(max_depth);\n\
    \            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut paren_groups: Vec<&str> = paren_string.split_whitespace().collect();\n\
    \    let mut depth_vec: Vec<isize> = Vec::new();\n    for group in paren_groups\
    \ {\n        let mut depth: isize = 0;\n        let mut max_depth: isize = 0;\n\
    \        for c in group.chars() {\n            if c == '(' {\n               \
    \ depth += 1;\n            } else if c == ')' {\n                depth -= 1;\n\
    \            }\n            if depth > max_depth {\n                max_depth\
    \ = depth;\n            }\n        }\n        depth_vec.push(max_depth);\n   \
    \ }\n    depth_vec", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting += 1;\n\
    \                if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut paren_vec:\
    \ Vec<isize> = Vec::new();\n    let mut paren_stack: Vec<isize> = Vec::new();\n\
    \    let mut max_nesting: isize = 0;\n    for c in paren_string.chars() {\n  \
    \      if c == '(' {\n            paren_stack.push(1);\n            max_nesting\
    \ += 1;\n        } else if c == ')' {\n            paren_stack.pop();\n      \
    \      max_nesting -= 1;\n        } else if c == ' ' {\n            paren_vec.push(max_nesting);\n\
    \            max_nesting = 0;\n        }\n    }\n    paren_vec.push(max_nesting);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n\
    \    let mut depths = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_depth += 1;\n   \
    \             if current_depth > max_depth {\n                    max_depth =\
    \ current_depth;\n                }\n            }\n            ')' => {\n   \
    \             current_depth -= 1;\n            }\n            ' ' => {\n     \
    \           depths.push(max_depth);\n                max_depth = 0;\n        \
    \        current_depth = 0;\n            }\n            _ => {}\n        }\n \
    \   }\n    depths.push(max_depth);\n    depths", "    let mut max_nesting = 0;\n\
    \    let mut nesting_level = 0;\n    let mut max_nesting_vec = Vec::new();\n \
    \   for c in paren_string.chars() {\n        if c == '(' {\n            nesting_level\
    \ += 1;\n            if nesting_level > max_nesting {\n                max_nesting\
    \ = nesting_level;\n            }\n        } else if c == ')' {\n            nesting_level\
    \ -= 1;\n        } else if c == ' ' {\n            max_nesting_vec.push(max_nesting);\n\
    \            max_nesting = 0;\n            nesting_level = 0;\n        }\n   \
    \ }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec", "    let mut\
    \ max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    for group in paren_string.split_whitespace()\
    \ {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for paren\
    \ in group.chars() {\n            if paren == '(' {\n                depth +=\
    \ 1;\n            } else if paren == ')' {\n                depth -= 1;\n    \
    \        }\n            if depth > max_depth {\n                max_depth = depth;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    result",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => (),\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                current_nesting\
    \ += 1;\n                if current_nesting > max_nesting {\n                \
    \    max_nesting = current_nesting;\n                }\n            }\n      \
    \      ')' => {\n                current_nesting -= 1;\n            }\n      \
    \      ' ' => {\n                max_nesting_vec.push(max_nesting);\n        \
    \        max_nesting = 0;\n                current_nesting = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting += 1;\n\
    \                if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      result.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n  \
    \  let mut depths = Vec::new();\n    for c in paren_string.chars() {\n       \
    \ match c {\n            '(' => {\n                current_depth += 1;\n     \
    \           if current_depth > max_depth {\n                    max_depth = current_depth;\n\
    \                }\n            }\n            ')' => {\n                current_depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n   \
    \ let mut depths = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                current_depth += 1;\n           \
    \     if current_depth > max_depth {\n                    max_depth = current_depth;\n\
    \                }\n            }\n            ')' => {\n                current_depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n   \
    \ let mut depths = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                current_depth += 1;\n           \
    \     if current_depth > max_depth {\n                    max_depth = current_depth;\n\
    \                }\n            }\n            ')' => {\n                current_depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut max_level = 0;\n    let mut curr_level = 0;\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                curr_level += 1;\n\
    \                if curr_level > max_level {\n                    max_level =\
    \ curr_level;\n                }\n                paren_stack.push(c);\n     \
    \       }\n            ')' => {\n                curr_level -= 1;\n          \
    \      paren_stack.pop();\n            }\n            ' ' => {\n             \
    \   if paren_stack.is_empty() {\n                    result.push(max_level);\n\
    \                    max_level = 0;\n                    curr_level = 0;\n   \
    \             }\n            }\n            _ => {}\n        }\n    }\n    result",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut results = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                results.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    results.push(max_nesting);\n\
    \    results", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ result = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let mut\
    \ max_nesting_levels = Vec::new();\n    let mut current_nesting_level = 0;\n \
    \   let mut max_nesting_level = 0;\n    for c in paren_string.chars() {\n    \
    \    if c == '(' {\n            current_nesting_level += 1;\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        } else if c == ')' {\n            if current_nesting_level\
    \ == 0 {\n                panic!(\"Unbalanced parentheses\");\n            }\n\
    \            current_nesting_level -= 1;\n        } else if c == ' ' {\n     \
    \       max_nesting_levels.push(max_nesting_level);\n            max_nesting_level\
    \ = 0;\n            current_nesting_level = 0;\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut result = Vec::new();\n    let mut stack\
    \ = Vec::new();\n    let mut max_depth = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            stack.push(c);\n            max_depth\
    \ = max_depth.max(stack.len() as isize);\n        } else if c == ')' {\n     \
    \       stack.pop();\n        } else if c == ' ' {\n            result.push(max_depth);\n\
    \            max_depth = 0;\n        }\n    }\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                current_nesting\
    \ += 1;\n                if current_nesting > max_nesting {\n                \
    \    max_nesting = current_nesting;\n                }\n            }\n      \
    \      ')' => {\n                current_nesting -= 1;\n            }\n      \
    \      ' ' => {\n                max_nesting_vec.push(max_nesting);\n        \
    \        max_nesting = 0;\n                current_nesting = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut max_nesting = 0;\n    let mut nesting_level\
    \ = 0;\n    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            nesting_level += 1;\n            if nesting_level\
    \ > max_nesting {\n                max_nesting = nesting_level;\n            }\n\
    \        } else if c == ')' {\n            nesting_level -= 1;\n        } else\
    \ if c == ' ' {\n            max_nesting_vec.push(max_nesting);\n            max_nesting\
    \ = 0;\n            nesting_level = 0;\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut max_depth: isize = 0;\n    let mut current_depth: isize = 0;\n    for c\
    \ in paren_string.chars() {\n        match c {\n            '(' => {\n       \
    \         current_depth += 1;\n                if current_depth > max_depth {\n\
    \                    max_depth = current_depth;\n                }\n         \
    \   }\n            ')' => {\n                current_depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                current_depth = 0;\n            }\n  \
    \          _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut max_nesting_vec\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        if c == '(' {\n\
    \            nesting_level += 1;\n            if nesting_level > max_nesting {\n\
    \                max_nesting = nesting_level;\n            }\n        } else if\
    \ c == ')' {\n            nesting_level -= 1;\n        } else if c == ' ' {\n\
    \            max_nesting_vec.push(max_nesting);\n            max_nesting = 0;\n\
    \            nesting_level = 0;\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut stack: Vec<char> = Vec::new();\n    let mut max_nesting: isize = 0;\n  \
    \  let mut current_nesting: isize = 0;\n    for c in paren_string.chars() {\n\
    \        if c == '(' {\n            stack.push(c);\n            current_nesting\
    \ += 1;\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting;\n            }\n        } else if c == ')' {\n          \
    \  if stack.len() > 0 {\n                stack.pop();\n                current_nesting\
    \ -= 1;\n            } else {\n                panic!(\"Unbalanced parentheses\"\
    );\n            }\n        } else if c == ' ' {\n            if stack.len() ==\
    \ 0 {\n                result.push(max_nesting);\n                max_nesting\
    \ = 0;\n                current_nesting = 0;\n            }\n        }\n    }\n\
    \    if stack.len() > 0 {\n        panic!(\"Unbalanced parentheses\");\n    }\n\
    \    result.push(max_nesting);\n    result", "    let mut max_nesting = 0;\n \
    \   let mut curr_nesting = 0;\n    let mut paren_vec = Vec::new();\n    for c\
    \ in paren_string.chars() {\n        match c {\n            '(' => {\n       \
    \         curr_nesting += 1;\n                if curr_nesting > max_nesting {\n\
    \                    max_nesting = curr_nesting;\n                }\n        \
    \    }\n            ')' => {\n                curr_nesting -= 1;\n           \
    \ }\n            ' ' => {\n                paren_vec.push(max_nesting);\n    \
    \            max_nesting = 0;\n                curr_nesting = 0;\n           \
    \ }\n            _ => {}\n        }\n    }\n    paren_vec.push(max_nesting);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let\
    \ mut result = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut max_nesting_vec\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        if c == '(' {\n\
    \            nesting_level += 1;\n            if nesting_level > max_nesting {\n\
    \                max_nesting = nesting_level;\n            }\n        } else if\
    \ c == ')' {\n            nesting_level -= 1;\n        } else if c == ' ' {\n\
    \            max_nesting_vec.push(max_nesting);\n            max_nesting = 0;\n\
    \            nesting_level = 0;\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n \
    \   let mut depths = Vec::new();\n    for c in paren_string.chars() {\n      \
    \  match c {\n            '(' => {\n                depth += 1;\n            \
    \    if depth > max_depth {\n                    max_depth = depth;\n        \
    \        }\n            }\n            ')' => {\n                depth -= 1;\n\
    \            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths",
  "    let mut result = Vec::new();\n    let mut stack = Vec::new();\n    let mut\
    \ max_depth = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n\
    \            stack.push(c);\n            max_depth = max_depth.max(stack.len()\
    \ as isize);\n        } else if c == ')' {\n            stack.pop();\n       \
    \ } else if c == ' ' {\n            result.push(max_depth);\n            max_depth\
    \ = 0;\n        }\n    }\n    result", "    let mut max_depth = 0;\n    let mut\
    \ depth = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut paren_vec: Vec<isize>\
    \ = Vec::new();\n    let mut paren_stack: Vec<char> = Vec::new();\n    let mut\
    \ max_depth: isize = 0;\n    let mut curr_depth: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            paren_stack.push(c);\n            curr_depth\
    \ += 1;\n            if curr_depth > max_depth {\n                max_depth =\
    \ curr_depth;\n            }\n        } else if c == ')' {\n            paren_stack.pop();\n\
    \            curr_depth -= 1;\n        } else if c == ' ' {\n            paren_vec.push(max_depth);\n\
    \            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n \
    \   paren_vec.push(max_depth);\n    paren_vec", "    let mut max_depth = 0;\n\
    \    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n  \
    \  let mut result = Vec::new();\n    for c in paren_string.chars() {\n       \
    \ match c {\n            '(' => {\n                current_depth += 1;\n     \
    \           max_depth = max(max_depth, current_depth);\n            }\n      \
    \      ')' => {\n                current_depth -= 1;\n            }\n        \
    \    ' ' => {\n                result.push(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n            _ => {}\n\
    \        }\n    }\n    result.push(max_depth);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      result.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut result\
    \ = Vec::new();\n    for paren_group in paren_string.split(\" \") {\n        let\
    \ mut max_depth = 0;\n        let mut depth = 0;\n        for c in paren_group.chars()\
    \ {\n            if c == '(' {\n                depth += 1;\n            } else\
    \ if c == ')' {\n                depth -= 1;\n            }\n            if depth\
    \ > max_depth {\n                max_depth = depth;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    result", "    let mut max_depth =\
    \ 0;\n    let mut depth = 0;\n    let mut max_depths = Vec::new();\n    for c\
    \ in paren_string.chars() {\n        match c {\n            '(' => {\n       \
    \         depth += 1;\n                if depth > max_depth {\n              \
    \      max_depth = depth;\n                }\n            }\n            ')' =>\
    \ {\n                depth -= 1;\n            }\n            ' ' => {\n      \
    \          max_depths.push(max_depth);\n                max_depth = 0;\n     \
    \           depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    max_depths.push(max_depth);\n    max_depths", "    let mut result = Vec::new();\n\
    \    let mut stack = Vec::new();\n    let mut max_depth = 0;\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                stack.push(c);\n\
    \                max_depth += 1;\n            }\n            ')' => {\n      \
    \          stack.pop();\n                max_depth -= 1;\n            }\n    \
    \        ' ' => {\n                result.push(max_depth);\n                max_depth\
    \ = 0;\n            }\n            _ => {}\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut max_depth = 0;\n    for c in paren_string.chars() {\n        if c\
    \ == '(' {\n            paren_stack.push(c);\n            max_depth += 1;\n  \
    \      } else if c == ')' {\n            paren_stack.pop();\n            max_depth\
    \ -= 1;\n        } else if c == ' ' {\n            result.push(max_depth);\n \
    \           max_depth = 0;\n        }\n    }\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_level = 0;\n    let mut level = 0;\n    let mut\
    \ levels = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                level += 1;\n                if level >\
    \ max_level {\n                    max_level = level;\n                }\n   \
    \         }\n            ')' => {\n                level -= 1;\n            }\n\
    \            ' ' => {\n                levels.push(max_level);\n             \
    \   max_level = 0;\n                level = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    levels.push(max_level);\n    levels", "    let mut\
    \ max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut max_nesting = 0;\n    for c in paren_string.chars() {\n        if\
    \ c == '(' {\n            paren_stack.push(c);\n            max_nesting += 1;\n\
    \        } else if c == ')' {\n            paren_stack.pop();\n            if\
    \ paren_stack.is_empty() {\n                result.push(max_nesting);\n      \
    \          max_nesting = 0;\n            }\n        }\n    }\n    result", " \
    \   let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                curr_nesting += 1;\n                if curr_nesting\
    \ > max_nesting {\n                    max_nesting = curr_nesting;\n         \
    \       }\n            }\n            ')' => {\n                curr_nesting -=\
    \ 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                curr_nesting = 0;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack:\
    \ Vec<char> = Vec::new();\n    let mut max_depth: isize = 0;\n    let mut current_depth:\
    \ isize = 0;\n    for c in paren_string.chars() {\n        match c {\n       \
    \     '(' => {\n                paren_stack.push(c);\n                current_depth\
    \ += 1;\n                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth;\n                }\n            }\n            ')' => {\n \
    \               paren_stack.pop();\n                current_depth -= 1;\n    \
    \        }\n            ' ' => {\n                paren_vec.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    paren_vec.push(max_depth);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let\
    \ mut result = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_depth = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut output = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                output.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    output.push(max_nesting);\n    output", "    let mut max_nesting\
    \ = 0;\n    let mut nesting_level = 0;\n    let mut result = Vec::new();\n   \
    \ for c in paren_string.chars() {\n        match c {\n            '(' => {\n \
    \               nesting_level += 1;\n                if nesting_level > max_nesting\
    \ {\n                    max_nesting = nesting_level;\n                }\n   \
    \         }\n            ')' => {\n                nesting_level -= 1;\n     \
    \       }\n            ' ' => {\n                result.push(max_nesting);\n \
    \               max_nesting = 0;\n                nesting_level = 0;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    for c in paren_string.chars() {\n        if c == '(' {\n            paren_stack.push(c);\n\
    \        } else if c == ')' {\n            paren_stack.pop();\n        } else\
    \ if c == ' ' {\n            result.push(paren_stack.len() as isize);\n      \
    \  }\n    }\n    result", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting += 1;\n\
    \                if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack:\
    \ Vec<char> = Vec::new();\n    let mut max_depth: isize = 0;\n    let mut depth:\
    \ isize = 0;\n    let mut paren_string = paren_string.chars();\n    while let\
    \ Some(c) = paren_string.next() {\n        match c {\n            '(' => {\n \
    \               paren_stack.push(c);\n                depth += 1;\n          \
    \      if depth > max_depth {\n                    max_depth = depth;\n      \
    \          }\n            }\n            ')' => {\n                paren_stack.pop();\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      paren_vec.push(max_depth);\n                max_depth = 0;\n          \
    \      depth = 0;\n            }\n            _ => {}\n        }\n    }\n    paren_vec.push(max_depth);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let\
    \ mut depths = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                depths.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let\
    \ mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut max_depth = 0;\n    let\
    \ mut depth = 0;\n    let mut depths = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max_depth = 0;\n    let mut current_depth = 0;\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_depth += 1;\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       }\n            ')' => {\n                current_depth -= 1;\n       \
    \     }\n            ' ' => {\n                result.push(max_depth);\n     \
    \           max_depth = 0;\n                current_depth = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut max_depth = 0;\n    let mut current_depth = 0;\n    let mut depths\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_depth += 1;\n                if current_depth\
    \ > max_depth {\n                    max_depth = current_depth;\n            \
    \    }\n            }\n            ')' => {\n                current_depth -=\
    \ 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut max_nesting_levels = Vec::new();\n    let mut current_nesting_level\
    \ = 0;\n    let mut max_nesting_level = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            current_nesting_level += 1;\n        \
    \    if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level;\n            }\n        } else if c == ')' {\n    \
    \        current_nesting_level -= 1;\n        } else if c == ' ' {\n         \
    \   max_nesting_levels.push(max_nesting_level);\n            max_nesting_level\
    \ = 0;\n            current_nesting_level = 0;\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut max_nesting = 0;\n    let mut nesting_level\
    \ = 0;\n    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            nesting_level += 1;\n            if nesting_level\
    \ > max_nesting {\n                max_nesting = nesting_level;\n            }\n\
    \        } else if c == ')' {\n            nesting_level -= 1;\n        } else\
    \ if c == ' ' {\n            max_nesting_vec.push(max_nesting);\n            max_nesting\
    \ = 0;\n            nesting_level = 0;\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut result = Vec::new();\n    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result =\
    \ Vec::new();\n    for c in paren_string.chars() {\n        match c {\n      \
    \      '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => panic!(\"Invalid character in input string\"),\n\
    \        }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n \
    \   let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                curr_nesting += 1;\n\
    \                if curr_nesting > max_nesting {\n                    max_nesting\
    \ = curr_nesting;\n                }\n            }\n            ')' => {\n  \
    \              curr_nesting -= 1;\n            }\n            ' ' => {\n     \
    \           max_nesting_vec.push(max_nesting);\n                max_nesting =\
    \ 0;\n                curr_nesting = 0;\n            }\n            _ => (),\n\
    \        }\n    }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut paren_vec: Vec<isize>\
    \ = Vec::new();\n    let mut paren_stack: Vec<isize> = Vec::new();\n    let mut\
    \ max_depth: isize = 0;\n    let mut curr_depth: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            paren_stack.push(1);\n            curr_depth\
    \ += 1;\n            if curr_depth > max_depth {\n                max_depth =\
    \ curr_depth;\n            }\n        } else if c == ')' {\n            paren_stack.pop();\n\
    \            curr_depth -= 1;\n        } else if c == ' ' {\n            paren_vec.push(max_depth);\n\
    \            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n \
    \   paren_vec.push(max_depth);\n    paren_vec", "    let mut max_nesting = 0;\n\
    \    let mut curr_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      curr_nesting += 1;\n                if curr_nesting > max_nesting {\n \
    \                   max_nesting = curr_nesting;\n                }\n         \
    \   }\n            ')' => {\n                curr_nesting -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_nesting);\n           \
    \     max_nesting = 0;\n                curr_nesting = 0;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(max_nesting);\n    result",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut output = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                output.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    output.push(max_nesting);\n    output", "    let mut result\
    \ = Vec::new();\n    let mut max_nesting = 0;\n    let mut nesting = 0;\n    for\
    \ c in paren_string.chars() {\n        match c {\n            '(' => {\n     \
    \           nesting += 1;\n                if nesting > max_nesting {\n      \
    \              max_nesting = nesting;\n                }\n            }\n    \
    \        ')' => {\n                nesting -= 1;\n            }\n            '\
    \ ' => {\n                result.push(max_nesting);\n                max_nesting\
    \ = 0;\n                nesting = 0;\n            }\n            _ => {}\n   \
    \     }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ max_depths = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                max_depths.push(max_depth);\n     \
    \           max_depth = 0;\n                depth = 0;\n            }\n      \
    \      _ => {}\n        }\n    }\n    max_depths.push(max_depth);\n    max_depths",
  "    let mut result: Vec<isize> = Vec::new();\n    let mut max_depth: isize = 0;\n\
    \    let mut current_depth: isize = 0;\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_depth += 1;\n\
    \                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth;\n                }\n            }\n            ')' => {\n \
    \               current_depth -= 1;\n            }\n            ' ' => {\n   \
    \             result.push(max_depth);\n                max_depth = 0;\n      \
    \          current_depth = 0;\n            }\n            _ => {}\n        }\n\
    \    }\n    result.push(max_depth);\n    result", "    let mut max_nesting_levels\
    \ = Vec::new();\n    let mut max_nesting_level = 0;\n    let mut nesting_level\
    \ = 0;\n    for c in paren_string.chars() {\n        match c {\n            '('\
    \ => {\n                nesting_level += 1;\n                if nesting_level\
    \ > max_nesting_level {\n                    max_nesting_level = nesting_level;\n\
    \                }\n            }\n            ')' => {\n                nesting_level\
    \ -= 1;\n            }\n            ' ' => {\n                max_nesting_levels.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                nesting_level = 0;\n\
    \            }\n            _ => {}\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut max_nesting = 0;\n    let mut nesting_level\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                nesting_level += 1;\n\
    \                if nesting_level > max_nesting {\n                    max_nesting\
    \ = nesting_level;\n                }\n            }\n            ')' => {\n \
    \               nesting_level -= 1;\n            }\n            ' ' => {\n   \
    \             result.push(max_nesting);\n                max_nesting = 0;\n  \
    \              nesting_level = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => panic!(\"Unexpected character\"\
    ),\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ depths = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                depths.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut\
    \ max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      result.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut result: Vec<isize> = Vec::new();\n    let mut max_depth:\
    \ isize = 0;\n    let mut depth: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    result.push(max_depth);\n    result",
  "    let mut result = Vec::new();\n    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    for c in paren_string.chars() {\n        match c {\n            '('\
    \ => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                current_nesting\
    \ += 1;\n                if current_nesting > max_nesting {\n                \
    \    max_nesting = current_nesting;\n                }\n            }\n      \
    \      ')' => {\n                current_nesting -= 1;\n            }\n      \
    \      ' ' => {\n                max_nesting_vec.push(max_nesting);\n        \
    \        max_nesting = 0;\n                current_nesting = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting += 1;\n\
    \                if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    let mut stack: Vec<char> = Vec::new();\n    let\
    \ mut max_level: isize = 0;\n    let mut current_level: isize = 0;\n    for c\
    \ in paren_string.chars() {\n        if c == '(' {\n            stack.push(c);\n\
    \            current_level += 1;\n            if current_level > max_level {\n\
    \                max_level = current_level;\n            }\n        } else if\
    \ c == ')' {\n            if stack.pop().is_none() {\n                panic!(\"\
    Invalid input string\");\n            }\n            current_level -= 1;\n   \
    \     } else if c == ' ' {\n            result.push(max_level);\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    result.push(max_level);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ depths = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                depths.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut\
    \ max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack:\
    \ Vec<isize> = Vec::new();\n    let mut max_depth: isize = 0;\n    let mut current_depth:\
    \ isize = 0;\n    let mut paren_string = paren_string.chars();\n    while let\
    \ Some(c) = paren_string.next() {\n        match c {\n            '(' => {\n \
    \               paren_stack.push(1);\n                current_depth += 1;\n  \
    \              if current_depth > max_depth {\n                    max_depth =\
    \ current_depth;\n                }\n            }\n            ')' => {\n   \
    \             paren_stack.pop();\n                current_depth -= 1;\n      \
    \      }\n            ' ' => {\n                paren_vec.push(max_depth);\n \
    \               max_depth = 0;\n                current_depth = 0;\n         \
    \   }\n            _ => {}\n        }\n    }\n    paren_vec.push(max_depth);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let\
    \ mut result = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut paren_vec\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                nesting_level += 1;\n                if nesting_level\
    \ > max_nesting {\n                    max_nesting = nesting_level;\n        \
    \        }\n            }\n            ')' => {\n                nesting_level\
    \ -= 1;\n            }\n            ' ' => {\n                paren_vec.push(max_nesting);\n\
    \                max_nesting = 0;\n                nesting_level = 0;\n      \
    \      }\n            _ => {}\n        }\n    }\n    paren_vec.push(max_nesting);\n\
    \    paren_vec", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let\
    \ mut result = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_nesting = 0;\n    let mut curr_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                curr_nesting += 1;\n                if curr_nesting > max_nesting\
    \ {\n                    max_nesting = curr_nesting;\n                }\n    \
    \        }\n            ')' => {\n                curr_nesting -= 1;\n       \
    \     }\n            ' ' => {\n                result.push(max_nesting);\n   \
    \             max_nesting = 0;\n                curr_nesting = 0;\n          \
    \  }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n \
    \   result", "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n  \
    \  let mut result = Vec::new();\n    for c in paren_string.chars() {\n       \
    \ match c {\n            '(' => {\n                curr_nesting += 1;\n      \
    \          if curr_nesting > max_nesting {\n                    max_nesting =\
    \ curr_nesting;\n                }\n            }\n            ')' => {\n    \
    \            curr_nesting -= 1;\n            }\n            ' ' => {\n       \
    \         result.push(max_nesting);\n                max_nesting = 0;\n      \
    \          curr_nesting = 0;\n            }\n            _ => (),\n        }\n\
    \    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting =\
    \ 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n   \
    \ for c in paren_string.chars() {\n        match c {\n            '(' => {\n \
    \               current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut max_depth = 0;\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                paren_stack.push(c);\n          \
    \      max_depth += 1;\n            }\n            ')' => {\n                paren_stack.pop();\n\
    \                max_depth -= 1;\n            }\n            ' ' => {\n      \
    \          result.push(max_depth);\n                max_depth = 0;\n         \
    \   }\n            _ => panic!(\"Invalid character in input string\"),\n     \
    \   }\n    }\n    result.push(max_depth);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                if current_nesting > 0 {\n\
    \                    current_nesting -= 1;\n                }\n            }\n\
    \            ' ' => {\n                result.push(max_nesting);\n           \
    \     max_nesting = 0;\n                current_nesting = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    result.push(max_nesting);\n    result",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ result = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let mut\
    \ max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                nesting_level += 1;\n                if nesting_level > max_nesting\
    \ {\n                    max_nesting = nesting_level;\n                }\n   \
    \         }\n            ')' => {\n                nesting_level -= 1;\n     \
    \       }\n            ' ' => {\n                result.push(max_nesting);\n \
    \               max_nesting = 0;\n                nesting_level = 0;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting_levels = Vec::new();\n    let mut current_nesting_level\
    \ = 0;\n    let mut max_nesting_level = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            current_nesting_level += 1;\n        \
    \    if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level;\n            }\n        } else if c == ')' {\n    \
    \        current_nesting_level -= 1;\n        } else if c == ' ' {\n         \
    \   max_nesting_levels.push(max_nesting_level);\n            max_nesting_level\
    \ = 0;\n            current_nesting_level = 0;\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting += 1;\n\
    \                if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting_levels\
    \ = Vec::new();\n    let mut max_nesting_level = 0;\n    let mut current_nesting_level\
    \ = 0;\n    for c in paren_string.chars() {\n        match c {\n            '('\
    \ => {\n                current_nesting_level += 1;\n                if current_nesting_level\
    \ > max_nesting_level {\n                    max_nesting_level = current_nesting_level;\n\
    \                }\n            }\n            ')' => {\n                current_nesting_level\
    \ -= 1;\n            }\n            ' ' => {\n                max_nesting_levels.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                current_nesting_level\
    \ = 0;\n            }\n            _ => {}\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut max_nesting = 0;\n    let mut current_nesting\
    \ = 0;\n    let mut result: Vec<isize> = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                current_nesting\
    \ += 1;\n                if current_nesting > max_nesting {\n                \
    \    max_nesting = current_nesting;\n                }\n            }\n      \
    \      ')' => {\n                current_nesting -= 1;\n            }\n      \
    \      ' ' => {\n                result.push(max_nesting);\n                max_nesting\
    \ = 0;\n                current_nesting = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_nesting);\n    result", "    let mut\
    \ paren_stack: Vec<char> = Vec::new();\n    let mut max_depth: isize = 0;\n  \
    \  let mut depths: Vec<isize> = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            paren_stack.push(c);\n            max_depth\
    \ += 1;\n        } else if c == ')' {\n            paren_stack.pop();\n      \
    \      max_depth -= 1;\n        } else if c == ' ' {\n            depths.push(max_depth);\n\
    \            max_depth = 0;\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut max_depth = 0;\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                paren_stack.push(c);\n          \
    \      max_depth += 1;\n            }\n            ')' => {\n                paren_stack.pop();\n\
    \                max_depth -= 1;\n            }\n            ' ' => {\n      \
    \          result.push(max_depth);\n                max_depth = 0;\n         \
    \   }\n            _ => panic!(\"Invalid character in input string\"),\n     \
    \   }\n    }\n    result.push(max_depth);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => (),\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n \
    \   let mut result = Vec::new();\n    for c in paren_string.chars() {\n      \
    \  match c {\n            '(' => {\n                curr_nesting += 1;\n     \
    \           if curr_nesting > max_nesting {\n                    max_nesting =\
    \ curr_nesting;\n                }\n            }\n            ')' => {\n    \
    \            curr_nesting -= 1;\n            }\n            ' ' => {\n       \
    \         result.push(max_nesting);\n                max_nesting = 0;\n      \
    \          curr_nesting = 0;\n            }\n            _ => {}\n        }\n\
    \    }\n    result.push(max_nesting);\n    result", "    let mut max_depth = 0;\n\
    \    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths",
  "    let mut max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                nesting_level += 1;\n                if nesting_level\
    \ > max_nesting {\n                    max_nesting = nesting_level;\n        \
    \        }\n            }\n            ')' => {\n                nesting_level\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                nesting_level = 0;\n      \
    \      }\n            _ => (),\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ result = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let mut\
    \ result = Vec::new();\n    let mut max_depth = 0;\n    let mut curr_depth = 0;\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                curr_depth += 1;\n                if curr_depth > max_depth {\n\
    \                    max_depth = curr_depth;\n                }\n            }\n\
    \            ')' => {\n                curr_depth -= 1;\n            }\n     \
    \       ' ' => {\n                result.push(max_depth);\n                max_depth\
    \ = 0;\n                curr_depth = 0;\n            }\n            _ => {}\n\
    \        }\n    }\n    result.push(max_depth);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n \
    \   let mut result = Vec::new();\n    for c in paren_string.chars() {\n      \
    \  match c {\n            '(' => {\n                curr_nesting += 1;\n     \
    \           if curr_nesting > max_nesting {\n                    max_nesting =\
    \ curr_nesting;\n                }\n            }\n            ')' => {\n    \
    \            curr_nesting -= 1;\n            }\n            ' ' => {\n       \
    \         result.push(max_nesting);\n                max_nesting = 0;\n      \
    \          curr_nesting = 0;\n            }\n            _ => {}\n        }\n\
    \    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting =\
    \ 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n   \
    \ for c in paren_string.chars() {\n        match c {\n            '(' => {\n \
    \               current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    let mut current_level = 0;\n\
    \    let mut max_level = 0;\n    for c in paren_string.chars() {\n        if c\
    \ == '(' {\n            current_level += 1;\n            if current_level > max_level\
    \ {\n                max_level = current_level;\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1;\n        } else if c == ' ' {\n\
    \            result.push(max_level);\n            max_level = 0;\n           \
    \ current_level = 0;\n        }\n    }\n    result.push(max_level);\n    result",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut max_depth = 0;\n    let\
    \ mut depth = 0;\n    let mut depths = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                depth += 1;\n  \
    \              if depth > max_depth {\n                    max_depth = depth;\n\
    \                }\n            }\n            ')' => {\n                depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \           _ => {}\n        }\n    }\n    depths.push(max_depth);\n    depths",
  "    let mut result = Vec::new();\n    let mut current_level = 0;\n    let mut max_level\
    \ = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n         \
    \   current_level += 1;\n            if current_level > max_level {\n        \
    \        max_level = current_level;\n            }\n        } else if c == ')'\
    \ {\n            current_level -= 1;\n        } else if c == ' ' {\n         \
    \   result.push(max_level);\n            max_level = 0;\n            current_level\
    \ = 0;\n        }\n    }\n    result.push(max_level);\n    result", "    let mut\
    \ max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut result = Vec::new();\n    let mut max_depth = 0;\n\
    \    let mut depth = 0;\n    for c in paren_string.chars() {\n        match c\
    \ {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => panic!(\"Unexpected character {}\", c),\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut curr_nesting = 0;\n    let mut result = Vec::new();\n    for\
    \ c in paren_string.chars() {\n        match c {\n            '(' => {\n     \
    \           curr_nesting += 1;\n                if curr_nesting > max_nesting\
    \ {\n                    max_nesting = curr_nesting;\n                }\n    \
    \        }\n            ')' => {\n                curr_nesting -= 1;\n       \
    \     }\n            ' ' => {\n                result.push(max_nesting);\n   \
    \             max_nesting = 0;\n                curr_nesting = 0;\n          \
    \  }\n            _ => {\n                panic!(\"Invalid character in input\
    \ string\");\n            }\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting_level = 0;\n    let mut current_nesting_level\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_nesting_level\
    \ += 1;\n                if current_nesting_level > max_nesting_level {\n    \
    \                max_nesting_level = current_nesting_level;\n                }\n\
    \            }\n            ')' => {\n                current_nesting_level -=\
    \ 1;\n            }\n            ' ' => {\n                result.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                current_nesting_level\
    \ = 0;\n            }\n            _ => {}\n        }\n    }\n    result.push(max_nesting_level);\n\
    \    result", "    let mut max_nesting_level = 0;\n    let mut nesting_level =\
    \ 0;\n    let mut max_nesting_levels = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                nesting_level +=\
    \ 1;\n                if nesting_level > max_nesting_level {\n               \
    \     max_nesting_level = nesting_level;\n                }\n            }\n \
    \           ')' => {\n                nesting_level -= 1;\n            }\n   \
    \         ' ' => {\n                max_nesting_levels.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                nesting_level = 0;\n\
    \            }\n            _ => {}\n        }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \    max_nesting_levels", "    let mut max_nesting = 0;\n    let mut curr_nesting\
    \ = 0;\n    let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                curr_nesting +=\
    \ 1;\n                if curr_nesting > max_nesting {\n                    max_nesting\
    \ = curr_nesting;\n                }\n            }\n            ')' => {\n  \
    \              curr_nesting -= 1;\n            }\n            ' ' => {\n     \
    \           max_nesting_vec.push(max_nesting);\n                max_nesting =\
    \ 0;\n                curr_nesting = 0;\n            }\n            _ => {}\n\
    \        }\n    }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec",
  "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                curr_nesting += 1;\n                if curr_nesting\
    \ > max_nesting {\n                    max_nesting = curr_nesting;\n         \
    \       }\n            }\n            ')' => {\n                curr_nesting -=\
    \ 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                curr_nesting = 0;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ result = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let mut\
    \ max_depth = 0;\n    let mut depth = 0;\n    let mut result = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(max_depth);\n    result", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ depths = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                depths.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut\
    \ max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n \
    \   for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut max_nesting = 0;\n   \
    \ let mut current_nesting = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_depth = 0;\n    let mut current_depth = 0;\n  \
    \  let mut depths = Vec::new();\n    for c in paren_string.chars() {\n       \
    \ match c {\n            '(' => {\n                current_depth += 1;\n     \
    \           if current_depth > max_depth {\n                    max_depth = current_depth;\n\
    \                }\n            }\n            ')' => {\n                current_depth\
    \ -= 1;\n            }\n            ' ' => {\n                depths.push(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n \
    \   depths", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ max_depths = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                max_depths.push(max_depth);\n     \
    \           max_depth = 0;\n                depth = 0;\n            }\n      \
    \      _ => {}\n        }\n    }\n    max_depths.push(max_depth);\n    max_depths",
  "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                curr_nesting += 1;\n                if curr_nesting\
    \ > max_nesting {\n                    max_nesting = curr_nesting;\n         \
    \       }\n            }\n            ')' => {\n                curr_nesting -=\
    \ 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                curr_nesting = 0;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut nesting_level = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                nesting_level += 1;\n   \
    \             if nesting_level > max_nesting {\n                    max_nesting\
    \ = nesting_level;\n                }\n            }\n            ')' => {\n \
    \               nesting_level -= 1;\n            }\n            ' ' => {\n   \
    \             result.push(max_nesting);\n                max_nesting = 0;\n  \
    \              nesting_level = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_nesting = 0;\n    let mut nesting_level = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                nesting_level += 1;\n   \
    \             if nesting_level > max_nesting {\n                    max_nesting\
    \ = nesting_level;\n                }\n            }\n            ')' => {\n \
    \               nesting_level -= 1;\n            }\n            ' ' => {\n   \
    \             result.push(max_nesting);\n                max_nesting = 0;\n  \
    \              nesting_level = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result.push(max_nesting);\n    result", "    paren_string\n \
    \       .split_whitespace()\n        .map(|s| {\n            let mut max_depth\
    \ = 0;\n            let mut depth = 0;\n            for c in s.chars() {\n   \
    \             if c == '(' {\n                    depth += 1;\n               \
    \     if depth > max_depth {\n                        max_depth = depth;\n   \
    \                 }\n                } else if c == ')' {\n                  \
    \  depth -= 1;\n                }\n            }\n            max_depth\n    \
    \    })\n        .collect()", "    let mut paren_vec: Vec<isize> = Vec::new();\n\
    \    let mut paren_stack: Vec<isize> = Vec::new();\n    let mut max_nesting: isize\
    \ = 0;\n    let mut current_nesting: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            current_nesting += 1;\n            paren_stack.push(current_nesting);\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting;\n            }\n        } else if c == ')' {\n            paren_stack.pop();\n\
    \            current_nesting -= 1;\n        } else if c == ' ' {\n           \
    \ paren_vec.push(max_nesting);\n            max_nesting = 0;\n            current_nesting\
    \ = 0;\n        }\n    }\n    paren_vec.push(max_nesting);\n    paren_vec", " \
    \   let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack: Vec<char>\
    \ = Vec::new();\n    let mut max_depth: isize = 0;\n    let mut curr_depth: isize\
    \ = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n         \
    \   paren_stack.push(c);\n            curr_depth += 1;\n            if curr_depth\
    \ > max_depth {\n                max_depth = curr_depth;\n            }\n    \
    \    } else if c == ')' {\n            paren_stack.pop();\n            curr_depth\
    \ -= 1;\n        } else if c == ' ' {\n            paren_vec.push(max_depth);\n\
    \            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n \
    \   paren_vec.push(max_depth);\n    paren_vec", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut stack: Vec<char> = Vec::new();\n    let mut max_depth:\
    \ isize = 0;\n    let mut depth: isize = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            stack.push(c);\n            depth += 1;\n\
    \            if depth > max_depth {\n                max_depth = depth;\n    \
    \        }\n        } else if c == ')' {\n            stack.pop();\n         \
    \   depth -= 1;\n        } else if c == ' ' {\n            result.push(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n\
    \    result", "    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_groups:\
    \ Vec<&str> = paren_string.split_whitespace().collect();\n    for paren_group\
    \ in paren_groups {\n        let mut paren_stack: Vec<char> = Vec::new();\n  \
    \      let mut max_nesting: isize = 0;\n        let mut curr_nesting: isize =\
    \ 0;\n        for paren in paren_group.chars() {\n            if paren == '('\
    \ {\n                paren_stack.push(paren);\n                curr_nesting +=\
    \ 1;\n                if curr_nesting > max_nesting {\n                    max_nesting\
    \ = curr_nesting;\n                }\n            } else if paren == ')' {\n \
    \               if paren_stack.pop() != Some('(') {\n                    panic!(\"\
    Invalid parentheses string!\");\n                }\n                curr_nesting\
    \ -= 1;\n            }\n        }\n        if !paren_stack.is_empty() {\n    \
    \        panic!(\"Invalid parentheses string!\");\n        }\n        paren_vec.push(max_nesting);\n\
    \    }\n    paren_vec", "    let mut result = Vec::new();\n    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut result = Vec::new();\n\
    \    let mut max_nesting_level = 0;\n    let mut nesting_level = 0;\n    for c\
    \ in paren_string.chars() {\n        match c {\n            '(' => {\n       \
    \         nesting_level += 1;\n                if nesting_level > max_nesting_level\
    \ {\n                    max_nesting_level = nesting_level;\n                }\n\
    \            }\n            ')' => {\n                nesting_level -= 1;\n  \
    \          }\n            ' ' => {\n                result.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                nesting_level = 0;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(max_nesting_level);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n\
    \    let mut result = Vec::new();\n    for c in paren_string.chars() {\n     \
    \   match c {\n            '(' => {\n                current_nesting += 1;\n \
    \               if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_nesting\
    \ = 0;\n    let mut current_nesting = 0;\n    let mut max_nesting_vec = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                current_nesting += 1;\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           }\n            ')' => {\n                current_nesting -= 1;\n \
    \           }\n            ' ' => {\n                max_nesting_vec.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut max_nesting = 0;\n    let mut nesting_level\
    \ = 0;\n    let mut result = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                nesting_level += 1;\n\
    \                if nesting_level > max_nesting {\n                    max_nesting\
    \ = nesting_level;\n                }\n            }\n            ')' => {\n \
    \               nesting_level -= 1;\n            }\n            ' ' => {\n   \
    \             result.push(max_nesting);\n                max_nesting = 0;\n  \
    \              nesting_level = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result.push(max_nesting);\n    result", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths: Vec<isize> = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n                if depth == 0 {\n \
    \                   depths.push(max_depth);\n                    max_depth = 0;\n\
    \                }\n            }\n            _ => (),\n        }\n    }\n  \
    \  depths", "    let mut result = Vec::new();\n    let mut max_depth = 0;\n  \
    \  let mut depth = 0;\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                result.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let mut\
    \ max_nesting = 0;\n    let mut curr_nesting = 0;\n    let mut result = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                curr_nesting += 1;\n                if curr_nesting > max_nesting\
    \ {\n                    max_nesting = curr_nesting;\n                }\n    \
    \        }\n            ')' => {\n                curr_nesting -= 1;\n       \
    \     }\n            ' ' => {\n                result.push(max_nesting);\n   \
    \             max_nesting = 0;\n                curr_nesting = 0;\n          \
    \  }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n \
    \   result", "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut\
    \ depths = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n\
    \            '(' => {\n                depth += 1;\n                if depth >\
    \ max_depth {\n                    max_depth = depth;\n                }\n   \
    \         }\n            ')' => {\n                depth -= 1;\n            }\n\
    \            ' ' => {\n                depths.push(max_depth);\n             \
    \   max_depth = 0;\n                depth = 0;\n            }\n            _ =>\
    \ {}\n        }\n    }\n    depths.push(max_depth);\n    depths", "    let mut\
    \ max_nesting = 0;\n    let mut nesting_level = 0;\n    let mut max_nesting_vec\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        if c == '(' {\n\
    \            nesting_level += 1;\n            if nesting_level > max_nesting {\n\
    \                max_nesting = nesting_level;\n            }\n        } else if\
    \ c == ')' {\n            nesting_level -= 1;\n        } else if c == ' ' {\n\
    \            max_nesting_vec.push(max_nesting);\n            max_nesting = 0;\n\
    \            nesting_level = 0;\n        }\n    }\n    max_nesting_vec.push(max_nesting);\n\
    \    max_nesting_vec", "    let mut paren_stack: Vec<char> = Vec::new();\n   \
    \ let mut max_nesting: isize = 0;\n    let mut max_nesting_vec: Vec<isize> = Vec::new();\n\
    \    for c in paren_string.chars() {\n        if c == ' ' {\n            max_nesting_vec.push(max_nesting);\n\
    \            max_nesting = 0;\n            continue;\n        }\n        if c\
    \ == '(' {\n            paren_stack.push(c);\n            max_nesting += 1;\n\
    \        } else if c == ')' {\n            paren_stack.pop();\n        }\n   \
    \ }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec", "    let mut\
    \ paren_vec: Vec<isize> = Vec::new();\n    let mut max_depth: isize = 0;\n   \
    \ let mut curr_depth: isize = 0;\n    for c in paren_string.chars() {\n      \
    \  if c == '(' {\n            curr_depth += 1;\n            if curr_depth > max_depth\
    \ {\n                max_depth = curr_depth;\n            }\n        } else if\
    \ c == ')' {\n            curr_depth -= 1;\n        } else if c == ' ' {\n   \
    \         paren_vec.push(max_depth);\n            max_depth = 0;\n           \
    \ curr_depth = 0;\n        }\n    }\n    paren_vec.push(max_depth);\n    paren_vec",
  "    let mut paren_groups: Vec<String> = paren_string.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    let mut result: Vec<isize> = Vec::new();\n  \
    \  for paren_group in paren_groups {\n        let mut max_nesting: isize = 0;\n\
    \        let mut current_nesting: isize = 0;\n        for c in paren_group.chars()\
    \ {\n            if c == '(' {\n                current_nesting += 1;\n      \
    \      } else if c == ')' {\n                current_nesting -= 1;\n         \
    \   }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    result", "    let mut max_depth = 0;\n    let mut depth = 0;\n   \
    \ let mut result = Vec::new();\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                depth += 1;\n                if depth\
    \ > max_depth {\n                    max_depth = depth;\n                }\n \
    \           }\n            ')' => {\n                depth -= 1;\n           \
    \ }\n            ' ' => {\n                result.push(max_depth);\n         \
    \       max_depth = 0;\n                depth = 0;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result.push(max_depth);\n    result", "    let\
    \ mut paren_vec: Vec<isize> = Vec::new();\n    let mut max_depth: isize = 0;\n\
    \    let mut current_depth: isize = 0;\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                current_depth += 1;\n\
    \                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth;\n                }\n            }\n            ')' => {\n \
    \               current_depth -= 1;\n            }\n            ' ' => {\n   \
    \             paren_vec.push(max_depth);\n                max_depth = 0;\n   \
    \             current_depth = 0;\n            }\n            _ => {}\n       \
    \ }\n    }\n    paren_vec.push(max_depth);\n    paren_vec", "    let mut max_depth\
    \ = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      depth += 1;\n                if depth > max_depth {\n                 \
    \   max_depth = depth;\n                }\n            }\n            ')' => {\n\
    \                depth -= 1;\n            }\n            ' ' => {\n          \
    \      depths.push(max_depth);\n                max_depth = 0;\n             \
    \   depth = 0;\n            }\n            _ => {}\n        }\n    }\n    depths.push(max_depth);\n\
    \    depths", "    let mut result = Vec::new();\n    let mut max_nesting = 0;\n\
    \    let mut nesting = 0;\n    for c in paren_string.chars() {\n        match\
    \ c {\n            '(' => {\n                nesting += 1;\n                if\
    \ nesting > max_nesting {\n                    max_nesting = nesting;\n      \
    \          }\n            }\n            ')' => {\n                nesting -=\
    \ 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                nesting = 0;\n            }\n\
    \            _ => {}\n        }\n    }\n    result.push(max_nesting);\n    result",
  "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n    let mut result\
    \ = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n    \
    \        '(' => {\n                current_nesting += 1;\n                if current_nesting\
    \ > max_nesting {\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            ')' => {\n                current_nesting\
    \ -= 1;\n            }\n            ' ' => {\n                result.push(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result.push(max_nesting);\n\
    \    result", "    let mut max_nesting = 0;\n    let mut curr_nesting = 0;\n \
    \   let mut max_nesting_vec = Vec::new();\n    for c in paren_string.chars() {\n\
    \        match c {\n            '(' => {\n                curr_nesting += 1;\n\
    \                if curr_nesting > max_nesting {\n                    max_nesting\
    \ = curr_nesting;\n                }\n            }\n            ')' => {\n  \
    \              curr_nesting -= 1;\n            }\n            ' ' => {\n     \
    \           max_nesting_vec.push(max_nesting);\n                max_nesting =\
    \ 0;\n                curr_nesting = 0;\n            }\n            _ => {}\n\
    \        }\n    }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec",
  "    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n\
    \    for c in paren_string.chars() {\n        match c {\n            '(' => {\n\
    \                depth += 1;\n                if depth > max_depth {\n       \
    \             max_depth = depth;\n                }\n            }\n         \
    \   ')' => {\n                depth -= 1;\n            }\n            ' ' => {\n\
    \                depths.push(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    depths.push(max_depth);\n    depths", "    let mut max_nesting = 0;\n   \
    \ let mut nesting_level = 0;\n    let mut max_nesting_vec = Vec::new();\n    for\
    \ c in paren_string.chars() {\n        if c == '(' {\n            nesting_level\
    \ += 1;\n            if nesting_level > max_nesting {\n                max_nesting\
    \ = nesting_level;\n            }\n        } else if c == ')' {\n            nesting_level\
    \ -= 1;\n        } else if c == ' ' {\n            max_nesting_vec.push(max_nesting);\n\
    \            max_nesting = 0;\n            nesting_level = 0;\n        }\n   \
    \ }\n    max_nesting_vec.push(max_nesting);\n    max_nesting_vec", "    let mut\
    \ result = Vec::new();\n    let mut stack = Vec::new();\n    let mut max_depth\
    \ = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n         \
    \   stack.push(c);\n            max_depth = std::cmp::max(max_depth, stack.len()\
    \ as isize);\n        } else if c == ')' {\n            stack.pop();\n       \
    \ } else if c == ' ' {\n            result.push(max_depth);\n            max_depth\
    \ = 0;\n        }\n    }\n    result", "    let mut max_nesting_level = 0;\n \
    \   let mut nesting_level = 0;\n    let mut result = Vec::new();\n    for c in\
    \ paren_string.chars() {\n        match c {\n            '(' => {\n          \
    \      nesting_level += 1;\n                if nesting_level > max_nesting_level\
    \ {\n                    max_nesting_level = nesting_level;\n                }\n\
    \            }\n            ')' => {\n                nesting_level -= 1;\n  \
    \          }\n            ' ' => {\n                result.push(max_nesting_level);\n\
    \                max_nesting_level = 0;\n                nesting_level = 0;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(max_nesting_level);\n\
    \    result", "    let mut result = Vec::new();\n    let mut paren_stack = Vec::new();\n\
    \    let mut current_max = 0;\n    let mut current_count = 0;\n    for c in paren_string.chars()\
    \ {\n        match c {\n            '(' => {\n                current_count +=\
    \ 1;\n                if current_count > current_max {\n                    current_max\
    \ = current_count;\n                }\n                paren_stack.push(c);\n\
    \            }\n            ')' => {\n                current_count -= 1;\n  \
    \              paren_stack.pop();\n            }\n            ' ' => {\n     \
    \           if paren_stack.is_empty() {\n                    result.push(current_max);\n\
    \                    current_max = 0;\n                    current_count = 0;\n\
    \                }\n            }\n            _ => {}\n        }\n    }\n   \
    \ result", "    let mut max_nesting = 0;\n    let mut current_nesting = 0;\n \
    \   let mut result = Vec::new();\n    for c in paren_string.chars() {\n      \
    \  match c {\n            '(' => {\n                current_nesting += 1;\n  \
    \              if current_nesting > max_nesting {\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            ')' => {\n\
    \                current_nesting -= 1;\n            }\n            ' ' => {\n\
    \                result.push(max_nesting);\n                max_nesting = 0;\n\
    \                current_nesting = 0;\n            }\n            _ => {}\n  \
    \      }\n    }\n    result.push(max_nesting);\n    result"]
stop_tokens:
- "\n}"
