name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o|\
  \ .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = Vec::new();\n    let mut current_beat = 0;\n \
    \   for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                result.push(current_beat);\n                current_beat = 4;\n\
    \            }\n            '|' => {\n                current_beat /= 2;\n   \
    \         }\n            '.' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result", "    let mut result = Vec::new();\n    let mut iter\
    \ = music_string.split_whitespace();\n    while let Some(note) = iter.next() {\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid note\"),\n        }\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut chars = music_string.chars();\n    while let Some(c)\
    \ = chars.next() {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                if let Some('|') = chars.next() {\n                    result.push(2);\n\
    \                }\n            }\n            '.' => {\n                result.push(1);\n\
    \                if let Some('|') = chars.next() {\n                    result.push(2);\n\
    \                }\n            }\n            _ => (),\n        }\n    }\n  \
    \  result", "    let mut result: Vec<isize> = Vec::new();\n    let mut current_beat:\
    \ isize = 0;\n    for c in music_string.chars() {\n        match c {\n       \
    \     'o' => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n            }\n            '|' => {\n                current_beat += 1;\n\
    \            }\n            ' ' => {}\n            _ => panic!(\"Unknown character\
    \ {}\", c),\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut current_note = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == ' ' {\n            result.push(note_to_beats(&current_note));\n\
    \            current_note = String::new();\n        } else {\n            current_note.push(c);\n\
    \        }\n    }\n    result.push(note_to_beats(&current_note));\n    result",
  "    let mut result: Vec<isize> = Vec::new();\n    let mut current_note: String\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == ' ' {\n\
    \            result.push(get_note_value(&current_note));\n            current_note\
    \ = String::new();\n        } else {\n            current_note.push(c);\n    \
    \    }\n    }\n    result.push(get_note_value(&current_note));\n    result", " \
    \   music_string.split_whitespace().map(|s| match s {\n        \"o\" => 4,\n \
    \       \"o|\" => 2,\n        \".|\" => 1,\n        _ => 0,\n    }).collect()",
  "    let mut result: Vec<isize> = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            '|' =>\
    \ result.push(2),\n            '.' => result.push(1),\n            _ => {}\n \
    \       }\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ current_note = String::new();\n    for c in music_string.chars() {\n       \
    \ if c == ' ' {\n            result.push(get_note_length(&current_note));\n  \
    \          current_note.clear();\n        } else {\n            current_note.push(c);\n\
    \        }\n    }\n    result.push(get_note_length(&current_note));\n    result",
  "    let mut result = Vec::new();\n    let mut count = 0;\n    let mut last_char\
    \ = ' ';\n    for c in music_string.chars() {\n        if c == ' ' {\n       \
    \     if last_char == 'o' {\n                result.push(4);\n            } else\
    \ if last_char == '|' {\n                result.push(count);\n            }\n\
    \            count = 0;\n        } else if c == 'o' {\n            count = 4;\n\
    \        } else if c == '|' {\n            count += 1;\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == ' ' {\n\
    \            result.push(get_note_length(&current_note));\n            current_note.clear();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result.push(get_note_length(&current_note));\n\
    \    result", "    let mut result: Vec<isize> = Vec::new();\n    let mut iter\
    \ = music_string.split_whitespace();\n    while let Some(note) = iter.next() {\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid music string\"),\n        }\n    }\n    result", "    let mut\
    \ result: Vec<isize> = Vec::new();\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        if c == ' ' {\n            if current_note\
    \ == \"o\" {\n                result.push(4);\n            } else if current_note\
    \ == \"o|\" {\n                result.push(2);\n            } else if current_note\
    \ == \".|\" {\n                result.push(1);\n            }\n            current_note\
    \ = String::new();\n        } else {\n            current_note.push(c);\n    \
    \    }\n    }\n    result", "    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == ' ' {\n\
    \            result.push(note_to_beat(&current_note));\n            current_note\
    \ = String::new();\n        } else {\n            current_note.push(c);\n    \
    \    }\n    }\n    result.push(note_to_beat(&current_note));\n    result", " \
    \   let mut result: Vec<isize> = Vec::new();\n    let mut count = 0;\n    for\
    \ c in music_string.chars() {\n        if c == 'o' {\n            count += 1;\n\
    \        } else if c == '|' {\n            result.push(count);\n            count\
    \ = 0;\n        }\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    let mut i = 0;\n    while i < music_string.len() {\n        let mut j = i;\n\
    \        while j < music_string.len() && music_string.chars().nth(j).unwrap()\
    \ != ' ' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        if note == \"o\" {\n            result.push(4);\n        } else if note\
    \ == \"o|\" {\n            result.push(2);\n        } else if note == \".|\" {\n\
    \            result.push(1);\n        }\n        i = j + 1;\n    }\n    result",
  "    let mut result: Vec<isize> = Vec::new();\n    let mut current_note = String::new();\n\
    \    for c in music_string.chars() {\n        if c == ' ' {\n            match\
    \ current_note.as_str() {\n                \"o\" => result.push(4),\n        \
    \        \"o|\" => result.push(2),\n                \".|\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    match\
    \ current_note.as_str() {\n        \"o\" => result.push(4),\n        \"o|\" =>\
    \ result.push(2),\n        \".|\" => result.push(1),\n        _ => (),\n    }\n\
    \    result", "    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut j = i;\n        while j <\
    \ music_string.len() && music_string.chars().nth(j).unwrap() != ' ' {\n      \
    \      j += 1;\n        }\n        let note = &music_string[i..j];\n        if\
    \ note == \"o\" {\n            result.push(4);\n        } else if note == \"o|\"\
    \ {\n            result.push(2);\n        } else if note == \".|\" {\n       \
    \     result.push(1);\n        }\n        i = j + 1;\n    }\n    result", "  \
    \  let mut result: Vec<isize> = Vec::new();\n    let mut current_beat: isize =\
    \ 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n           \
    \ result.push(4 - current_beat);\n            current_beat = 0;\n        } else\
    \ if c == '|' {\n            current_beat += 1;\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut iter = music_string.chars();\n  \
    \  while let Some(c) = iter.next() {\n        if c == 'o' {\n            let next\
    \ = iter.next();\n            if next == Some('|') {\n                result.push(2);\n\
    \            } else {\n                result.push(4);\n            }\n      \
    \  } else if c == '.' {\n            result.push(1);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
