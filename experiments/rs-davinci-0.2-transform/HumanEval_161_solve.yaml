name: HumanEval_161_solve
language: rs
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n///\
  \ String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"\
  AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = String::new();\n    let mut is_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if is_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut s = s.chars().collect::<Vec<char>>();\n    let mut has_letter\
    \ = false;\n    for i in 0..s.len() {\n        if s[i].is_alphabetic() {\n   \
    \         has_letter = true;\n            s[i] = if s[i].is_uppercase() {\n  \
    \              s[i].to_lowercase().next().unwrap()\n            } else {\n   \
    \             s[i].to_uppercase().next().unwrap()\n            };\n        }\n\
    \    }\n    if !has_letter {\n        s.reverse();\n    }\n    s.into_iter().collect()",
  "    let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut flag = false;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            flag = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if flag {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    let mut has_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            has_letter = true;\n        \
    \    result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if has_letter {\n        result\n    } else {\n       \
    \ result.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut chars = s.chars();\n    let mut result = String::new();\n    let mut\
    \ is_letter = false;\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut is_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            is_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if is_letter {\n        result\n \
    \   } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    result.chars().rev().collect()", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut flag = false;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            flag = true;\n            if c.is_lowercase()\
    \ {\n                res.push(c.to_uppercase().next().unwrap());\n           \
    \ } else {\n                res.push(c.to_lowercase().next().unwrap());\n    \
    \        }\n        } else {\n            res.push(c);\n        }\n    }\n   \
    \ if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }"]
stop_tokens:
- "\n}"
