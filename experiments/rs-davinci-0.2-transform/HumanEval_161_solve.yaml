name: HumanEval_161_solve
language: rs
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n///\
  \ String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"\
  AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
  AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
  )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
  ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
  ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
  \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
  \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n"
completions: ["    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        s.chars().rev().collect()\n    }",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut found_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            found_letter = true;\n      \
    \      result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if found_letter {\n        result\n    } else {\n     \
    \   result.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut s\
    \ = s.chars().collect::<Vec<char>>();\n    let mut is_letter = false;\n    for\
    \ i in 0..s.len() {\n        if s[i].is_alphabetic() {\n            is_letter\
    \ = true;\n            s[i] = s[i].to_ascii_uppercase();\n        }\n    }\n \
    \   if !is_letter {\n        s.reverse();\n    }\n    s.iter().collect()", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut flag = false;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            flag = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if flag {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut result = String::new();\n   \
    \ let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut flag = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if flag {\n        result\n    } else\
    \ {\n        result.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_ascii_alphabetic() {\n            has_letter = true;\n      \
    \      if c.is_ascii_lowercase() {\n                result.push(c.to_ascii_uppercase());\n\
    \            } else {\n                result.push(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut res = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            res.push(c.to_ascii_uppercase());\n    \
    \    } else {\n            res.push(c);\n        }\n    }\n    if has_letter {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut s\
    \ = s.chars().collect::<Vec<char>>();\n    let mut has_letter = false;\n    for\
    \ i in 0..s.len() {\n        if s[i].is_ascii_alphabetic() {\n            has_letter\
    \ = true;\n            if s[i].is_ascii_lowercase() {\n                s[i] =\
    \ s[i].to_ascii_uppercase();\n            } else {\n                s[i] = s[i].to_ascii_lowercase();\n\
    \            }\n        }\n    }\n    if !has_letter {\n        s.reverse();\n\
    \    }\n    s.iter().collect()", "    let mut result = String::new();\n    let\
    \ mut is_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut contains_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            contains_letter = true;\n   \
    \         if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !contains_letter {\n        result.chars().rev().collect()\n    }\
    \ else {\n        result\n    }", "    let mut res = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            if c.is_uppercase() {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut flag = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if flag {\n        result\n    } else\
    \ {\n        result.chars().rev().collect()\n    }", "    let mut res = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        result = s;\n    }\n    result.chars().rev().collect()", "    let\
    \ mut result = String::new();\n    let mut has_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            has_letter = true;\n        \
    \    result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if has_letter {\n        result\n    } else {\n       \
    \ result.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            if c.is_lowercase() {\n     \
    \           result.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                result.push(c.to_lowercase().next().unwrap());\n        \
    \    }\n        } else {\n            result.push(c);\n        }\n    }\n    if\
    \ !has_letter {\n        result.chars().rev().collect()\n    } else {\n      \
    \  result\n    }", "    let mut result = String::new();\n    let mut is_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     is_letter = true;\n            result.push(c.to_ascii_uppercase());\n  \
    \      } else {\n            result.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_ascii_alphabetic() {\n            has_letter = true;\n      \
    \      result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if !has_letter {\n        result.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut res = String::new();\n   \
    \ let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut flag = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    let mut is_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !is_letter {\n        result.chars().rev().collect()\n    } else {\n\
    \        result\n    }", "    let mut result = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            result.push(c.to_ascii_uppercase());\n \
    \       } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut flag = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if flag {\n        result\n    } else\
    \ {\n        result.chars().rev().collect()\n    }", '    s.chars().rev().collect()',
  "    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    let mut has_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            has_letter = true;\n        \
    \    result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if has_letter {\n        result\n    } else {\n       \
    \ result.chars().rev().collect()\n    }", "    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    let mut is_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            is_letter = true;\n\
    \            if c.is_uppercase() {\n                result.push(c.to_lowercase().to_string());\n\
    \            } else {\n                result.push(c.to_uppercase().to_string());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !is_letter {\n        result = result.chars().rev().collect();\n \
    \   }\n    result", "    let mut result = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            result.push(c.to_ascii_uppercase());\n \
    \       } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut flag = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    let mut flag = false;\n   \
    \ for c in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n\
    \            if c.is_uppercase() {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !flag {\n        result.chars().rev().collect()\n    } else {\n  \
    \      result\n    }", "    let mut res = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            res.push(c.to_ascii_uppercase());\n    \
    \    } else {\n            res.push(c);\n        }\n    }\n    if has_letter {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    let mut found_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            found_letter =\
    \ true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if found_letter {\n      \
    \  result\n    } else {\n        result.chars().rev().collect()\n    }", "   \
    \ let mut s = s.chars().collect::<Vec<char>>();\n    let mut has_letter = false;\n\
    \    for i in 0..s.len() {\n        if s[i].is_alphabetic() {\n            has_letter\
    \ = true;\n            if s[i].is_lowercase() {\n                s[i] = s[i].to_uppercase().next().unwrap();\n\
    \            } else {\n                s[i] = s[i].to_lowercase().next().unwrap();\n\
    \            }\n        }\n    }\n    if !has_letter {\n        s.reverse();\n\
    \    }\n    s.into_iter().collect()", "    let mut res = String::new();\n    let\
    \ mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut found_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            found_letter =\
    \ true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if found_letter {\n      \
    \  result.chars().rev().collect()\n    } else {\n        result\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut res =\
    \ String::new();\n    let mut flag = false;\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            flag = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if flag {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        result\
    \ = s;\n    }\n    result.chars().rev().collect()", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n       \
    \ } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut res = String::new();\n    let mut is_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     is_letter = true;\n            res.push(c.to_ascii_uppercase());\n     \
    \   } else {\n            res.push(c);\n        }\n    }\n    if is_letter {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n       \
    \ } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut flag = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n \
    \           res.push(c.to_ascii_uppercase());\n        } else {\n            res.push(c);\n\
    \        }\n    }\n    if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            if c.is_lowercase() {\n                res.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                res.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            res.push(c);\n        }\n    }\n\
    \    if !has_letter {\n        res.chars().rev().collect()\n    } else {\n   \
    \     res\n    }", "    let mut result = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            result.push(c.to_ascii_uppercase());\n \
    \       } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut res =\
    \ String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_ascii_alphabetic() {\n            has_letter\
    \ = true;\n            if c.is_ascii_lowercase() {\n                result.push(c.to_ascii_uppercase());\n\
    \            } else {\n                result.push(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(if c.is_lowercase() { c.to_uppercase().next().unwrap()\
    \ } else { c.to_lowercase().next().unwrap() });\n        } else {\n          \
    \  result.push(c);\n        }\n    }\n    if !has_letter {\n        result.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut flag = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            flag = true;\n \
    \           if c.is_lowercase() {\n                res.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                res.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            res.push(c);\n        }\n    }\n\
    \    if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    // Write your code here\n    let mut result = String::new();\n \
    \   let mut found_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            found_letter = true;\n            if c.is_lowercase() {\n   \
    \             result.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                result.push(c.to_lowercase().next().unwrap());\n        \
    \    }\n        } else {\n            result.push(c);\n        }\n    }\n    if\
    \ !found_letter {\n        result = result.chars().rev().collect();\n    }\n \
    \   result", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if res.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        res\n    }", "    let mut res = String::new();\n    let\
    \ mut is_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut found_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            found_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if found_letter {\n      \
    \  result\n    } else {\n        result.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    let mut has_letter = false;\n  \
    \  for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            res.push(c.to_ascii_uppercase());\n        } else {\n \
    \           res.push(c);\n        }\n    }\n    if has_letter {\n        res\n\
    \    } else {\n        res.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut res = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            res.push(c.to_ascii_uppercase());\n    \
    \    } else {\n            res.push(c);\n        }\n    }\n    if has_letter {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ s.chars().rev().map(|c| {\n        if c.is_alphabetic() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c\n        }\n    }).collect()", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ found_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            found_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if found_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut is_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if is_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut res = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            res.push(c.to_ascii_uppercase());\n    \
    \    } else {\n            res.push(c);\n        }\n    }\n    if has_letter {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut s = s.chars().collect::<Vec<char>>();\n    let mut has_letter = false;\n\
    \    for i in 0..s.len() {\n        if s[i].is_alphabetic() {\n            has_letter\
    \ = true;\n            s[i] = if s[i].is_lowercase() {\n                s[i].to_ascii_uppercase()\n\
    \            } else {\n                s[i].to_ascii_lowercase()\n           \
    \ };\n        }\n    }\n    if !has_letter {\n        s.reverse();\n    }\n  \
    \  s.iter().collect()", "    let mut result = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            result.push(c.to_ascii_uppercase());\n \
    \       } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut s = s.chars().collect::<Vec<char>>();\n    let mut has_letter\
    \ = false;\n    for i in 0..s.len() {\n        if s[i].is_alphabetic() {\n   \
    \         has_letter = true;\n            if s[i].is_lowercase() {\n         \
    \       s[i] = s[i].to_uppercase().next().unwrap();\n            } else {\n  \
    \              s[i] = s[i].to_lowercase().next().unwrap();\n            }\n  \
    \      }\n    }\n    if !has_letter {\n        s.reverse();\n    }\n    s.into_iter().collect()",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_lowercase().next().unwrap());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result.chars().rev().collect()\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            if c.is_lowercase() {\n     \
    \           result.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                result.push(c.to_lowercase().next().unwrap());\n        \
    \    }\n        } else {\n            result.push(c);\n        }\n    }\n    if\
    \ !has_letter {\n        result.chars().rev().collect()\n    } else {\n      \
    \  result\n    }", "    let mut result = String::new();\n    let mut has_letter\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     has_letter = true;\n            result.push(c.to_ascii_uppercase());\n \
    \       } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    s.chars().rev().map(|c|\
    \ if c.is_ascii_alphabetic() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut res = String::new();\n    let mut has_letter = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            res.push(c.to_ascii_uppercase());\n        } else {\n           \
    \ res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else\
    \ {\n        res.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(if c.is_lowercase() { c.to_uppercase().next().unwrap()\
    \ } else { c.to_lowercase().next().unwrap() });\n        } else {\n          \
    \  result.push(c);\n        }\n    }\n    if !has_letter {\n        result.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            res.push(c.to_ascii_uppercase());\n       \
    \ } else {\n            res.push(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        res\n    }", " \
    \   let mut result = String::new();\n    let mut is_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            is_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if is_letter {\n        result\n \
    \   } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut flag = false;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            flag = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if flag {\n\
    \        res\n    } else {\n        res.chars().rev().collect()\n    }", "   \
    \ let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            result.push(c.to_ascii_uppercase());\n        } else {\n    \
    \        result.push(c);\n        }\n    }\n    if result.is_empty() {\n     \
    \   s.chars().rev().collect()\n    } else {\n        result\n    }", "    let\
    \ mut result = String::new();\n    let mut has_letter = false;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            has_letter = true;\n        \
    \    result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    if has_letter {\n        result\n    } else {\n       \
    \ result.chars().rev().collect()\n    }", "    let mut result = String::new();\n\
    \    let mut contains_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            contains_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if !contains_letter\
    \ {\n        result = result.chars().rev().collect();\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut has_letter = false;\n    for\
    \ c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    for c in s.chars() {\n      \
    \  if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty()\
    \ {\n        s.chars().rev().collect()\n    } else {\n        result\n    }",
  "    let mut result = String::new();\n    let mut has_letter = false;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            has_letter = true;\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            if\
    \ c.is_uppercase() {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    if !has_letter {\n        result.chars().rev().collect()\n    } else\
    \ {\n        result\n    }", "    let mut result = String::new();\n    let mut\
    \ has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.chars().all(|c| !c.is_alphabetic())\
    \ {\n        result.chars().rev().collect()\n    } else {\n        result\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut s\
    \ = s.chars().collect::<Vec<char>>();\n    let mut has_letter = false;\n    for\
    \ i in 0..s.len() {\n        if s[i].is_ascii_alphabetic() {\n            has_letter\
    \ = true;\n            s[i] = if s[i].is_ascii_lowercase() {\n               \
    \ s[i].to_ascii_uppercase()\n            } else {\n                s[i].to_ascii_lowercase()\n\
    \            };\n        }\n    }\n    if !has_letter {\n        s.reverse();\n\
    \    }\n    s.iter().collect()", "    let mut res = String::new();\n    let mut\
    \ is_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            is_letter = true;\n            res.push(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    if is_letter\
    \ {\n        res\n    } else {\n        res.chars().rev().collect()\n    }", " \
    \   let mut result = String::new();\n    let mut letters = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            letters = true;\n \
    \           result.push(c.to_ascii_uppercase());\n        } else {\n         \
    \   result.push(c);\n        }\n    }\n    if letters {\n        result\n    }\
    \ else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    let mut has_letter = false;\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut res\
    \ = String::new();\n    let mut flag = false;\n    for c in s.chars() {\n    \
    \    if c.is_alphabetic() {\n            flag = true;\n            if c.is_lowercase()\
    \ {\n                res.push(c.to_uppercase().next().unwrap());\n           \
    \ } else {\n                res.push(c.to_lowercase().next().unwrap());\n    \
    \        }\n        } else {\n            res.push(c);\n        }\n    }\n   \
    \ if flag {\n        res\n    } else {\n        res.chars().rev().collect()\n\
    \    }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut result\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result.push(c.to_ascii_uppercase());\n        } else {\n        \
    \    result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n\
    \    } else {\n        result\n    }", "    let mut result = String::new();\n\
    \    let mut has_letter = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n            result.push(c.to_ascii_uppercase());\n\
    \        } else {\n            result.push(c);\n        }\n    }\n    if has_letter\
    \ {\n        result\n    } else {\n        result.chars().rev().collect()\n  \
    \  }", "    let mut result = String::new();\n    let mut has_letter = false;\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            has_letter\
    \ = true;\n            result.push(c.to_ascii_uppercase());\n        } else {\n\
    \            result.push(c);\n        }\n    }\n    if has_letter {\n        result\n\
    \    } else {\n        result.chars().rev().collect()\n    }", "    let mut s\
    \ = s.chars().collect::<Vec<char>>();\n    let mut has_letter = false;\n    for\
    \ i in 0..s.len() {\n        if s[i].is_alphabetic() {\n            has_letter\
    \ = true;\n            s[i] = if s[i].is_lowercase() {\n                s[i].to_ascii_uppercase()\n\
    \            } else {\n                s[i].to_ascii_lowercase()\n           \
    \ };\n        }\n    }\n    if !has_letter {\n        s.reverse();\n    }\n  \
    \  s.iter().collect()", "    let mut result = String::new();\n    let mut flag\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     flag = true;\n            result.push(c.to_ascii_uppercase());\n       \
    \ } else {\n            result.push(c);\n        }\n    }\n    if flag {\n   \
    \     result\n    } else {\n        result.chars().rev().collect()\n    }"]
stop_tokens:
- "\n}"
