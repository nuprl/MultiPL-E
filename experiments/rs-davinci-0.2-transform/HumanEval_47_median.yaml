name: HumanEval_47_median
language: rs
prompt: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1, 2,\
  \ 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
  \ Vec<isize>) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64 / 2.0\n    } else {\n   \
    \     l[n / 2] as f64\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as\
    \ f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }", "    let mut l =\
    \ l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n \
    \       (l[mid] + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n\
    \    }", "    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n %\
    \ 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64 / 2.0\n    } else {\n   \
    \     l[n / 2] as f64\n    }", "    let mut l = l;\n    l.sort();\n    let len\
    \ = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as\
    \ f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }", "    let mut l =\
    \ l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n /\
    \ 2] + l[n / 2 - 1]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n   \
    \ }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len %\
    \ 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n\
    \        l[len / 2] as f64\n    }", "    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n\
    \        (l[mid] + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n\
    \    }", "    let mut sorted = l.clone();\n    sorted.sort();\n    let n = sorted.len();\n\
    \    if n % 2 == 0 {\n        (sorted[n / 2] + sorted[n / 2 - 1]) as f64 / 2.0\n\
    \    } else {\n        sorted[n / 2] as f64\n    }", "    let mut l = l;\n   \
    \ l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2]\
    \ + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n  \
    \  }", "    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len\
    \ % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n\
    \        l[len / 2] as f64\n    }", "    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }", "    let mut l =\
    \ l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n \
    \       (l[mid] + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n\
    \    }", "    let mut sorted = l.clone();\n    sorted.sort();\n    let n = sorted.len();\n\
    \    if n % 2 == 0 {\n        (sorted[n / 2] + sorted[n / 2 - 1]) as f64 / 2.0\n\
    \    } else {\n        sorted[n / 2] as f64\n    }", "    let mut l = l;\n   \
    \ l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }", "   \
    \ let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n\
    \        (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n        l[len\
    \ / 2] as f64\n    }", "    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) as f64 / 2.0\n\
    \    } else {\n        l[mid] as f64\n    }", "    let mut l = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid\
    \ - 1]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }", "    let mut\
    \ l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n        l[len /\
    \ 2] as f64\n    }"]
stop_tokens:
- "\n}"
