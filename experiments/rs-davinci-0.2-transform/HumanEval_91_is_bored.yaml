name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
  Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
  \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if is_bored {\n            boredoms += 1;\n            is_bored\
    \ = false;\n        } else if c == 'I' {\n            is_bored = true;\n     \
    \   }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut words = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for word in words {\n        let\
    \ mut words = word.split_whitespace();\n        if words.next() == Some(\"I\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut\
    \ result = 0;\n    let mut sentence = String::new();\n    for c in S.chars() {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                result += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    result",
  "    let mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c\
    \ == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut sentence = String::new();\n    let mut sentence_start\
    \ = true;\n    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            if sentence_start && sentence.starts_with(\"I\") {\n        \
    \        boredoms += 1;\n            }\n            sentence_start = true;\n \
    \           sentence.clear();\n        } else {\n            sentence.push(c);\n\
    \            sentence_start = false;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut sentences = S.split(|c| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut words = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms = 0;\n    let mut words = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    for word in words {\n        let mut\
    \ chars = word.chars();\n        if chars.next() == Some('I') {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut count = 0;\n    let mut\
    \ is_bored = false;\n    for c in S.chars() {\n        if c == 'I' {\n       \
    \     is_bored = true;\n        }\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            if is_bored {\n                count += 1;\n            }\n \
    \           is_bored = false;\n        }\n    }\n    count", "    let mut boredoms\
    \ = 0;\n    let mut sentences = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        for word in words {\n            if word == \"I\" {\n               \
    \ boredoms += 1;\n                break;\n            }\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms = 0;\n    let mut words = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!');\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms\
    \ = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in words {\n        let mut words = word.split_whitespace();\n \
    \       if words.next() == Some(\"I\") {\n            boredoms += 1;\n       \
    \ }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut sentence =\
    \ String::new();\n    for c in S.chars() {\n        if c == '.' || c == '?' ||\
    \ c == '!' {\n            if sentence.starts_with(\"I\") {\n                boredoms\
    \ += 1;\n            }\n            sentence.clear();\n        } else {\n    \
    \        sentence.push(c);\n        }\n    }\n    boredoms", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", "    S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!')\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as\
    \ isize", "    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c\
    \ in S.chars() {\n        if c == 'I' {\n            is_bored = true;\n      \
    \  } else if c == '.' || c == '?' || c == '!' {\n            if is_bored {\n \
    \               boredoms += 1;\n            }\n            is_bored = false;\n\
    \        }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut words\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms = 0;\n    let mut prev_char\
    \ = ' ';\n    for c in S.chars() {\n        if prev_char == 'I' && c == ' ' {\n\
    \            boredoms += 1;\n        }\n        prev_char = c;\n    }\n    boredoms"]
stop_tokens:
- "\n}"
