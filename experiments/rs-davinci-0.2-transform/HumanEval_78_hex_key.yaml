name: HumanEval_78_hex_key
language: rs
prompt: "/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(String::from(\"AB\"))\n/// 1\n\
  /// >>> hex_key(String::from(\"1077E\"))\n/// 2\n/// >>> hex_key(String::from(\"\
  ABED1A33\"))\n/// 4\n/// >>> hex_key(String::from(\"123456789ABCDEF0\"))\n/// 6\n\
  /// >>> hex_key(String::from(\"2020\"))\n/// 2\nfn hex_key(num: String) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut count = 0;\n    let mut num = num.chars();\n    while let\
    \ Some(c) = num.next() {\n        match c {\n            '2' | '3' | '5' | '7'\
    \ | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count",
  "    let mut count = 0;\n    let mut primes = vec![2, 3, 5, 7, 11, 13];\n    let\
    \ mut hex_nums = vec![];\n    for c in num.chars() {\n        match c {\n    \
    \        '0' => hex_nums.push(0),\n            '1' => hex_nums.push(1),\n    \
    \        '2' => hex_nums.push(2),\n            '3' => hex_nums.push(3),\n    \
    \        '4' => hex_nums.push(4),\n            '5' => hex_nums.push(5),\n    \
    \        '6' => hex_nums.push(6),\n            '7' => hex_nums.push(7),\n    \
    \        '8' => hex_nums.push(8),\n            '9' => hex_nums.push(9),\n    \
    \        'A' => hex_nums.push(10),\n            'B' => hex_nums.push(11),\n  \
    \          'C' => hex_nums.push(12),\n            'D' => hex_nums.push(13),\n\
    \            'E' => hex_nums.push(14),\n            'F' => hex_nums.push(15),\n\
    \            _ => println!(\"Not a valid hex number\"),\n        }\n    }\n  \
    \  for num in hex_nums {\n        for prime in primes.iter() {\n            if\
    \ num == *prime {\n                count += 1;\n            }\n        }\n   \
    \ }\n    count", "    let mut count = 0;\n    let mut num_vec: Vec<char> = num.chars().collect();\n\
    \    num_vec.sort();\n    num_vec.dedup();\n    for i in num_vec {\n        if\
    \ i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D' {\n   \
    \         count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let mut hex_digits = vec!['2', '3', '5', '7', 'B', 'D'];\n    for c in num.chars()\
    \ {\n        if hex_digits.contains(&c) {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for c in num.chars() {\n    \
    \    match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n\
    \            _ => (),\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' |\
    \ '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    let mut hex_primes = vec![2, 3, 5, 7, 11,\
    \ 13];\n    for c in num.chars() {\n        let mut hex_num = match c.to_digit(16)\
    \ {\n            Some(num) => num as isize,\n            None => 0,\n        };\n\
    \        if hex_num == 0 {\n            continue;\n        }\n        if hex_primes.contains(&hex_num)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' |\
    \ '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    let primes = vec![2, 3, 5, 7, 11, 13];\n\
    \    for c in num.chars() {\n        let n = match c {\n            '0' => 0,\n\
    \            '1' => 1,\n            '2' => 2,\n            '3' => 3,\n       \
    \     '4' => 4,\n            '5' => 5,\n            '6' => 6,\n            '7'\
    \ => 7,\n            '8' => 8,\n            '9' => 9,\n            'A' => 10,\n\
    \            'B' => 11,\n            'C' => 12,\n            'D' => 13,\n    \
    \        'E' => 14,\n            'F' => 15,\n            _ => 0,\n        };\n\
    \        if primes.contains(&n) {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    let mut hex_nums = num.chars().collect::<Vec<char>>();\n\
    \    hex_nums.sort();\n    hex_nums.dedup();\n    for i in hex_nums {\n      \
    \  if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D' {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' |\
    \ '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    let mut hex_digits = vec![];\n    let mut\
    \ hex_primes = vec![2, 3, 5, 7, 11, 13];\n    for c in num.chars() {\n       \
    \ hex_digits.push(c);\n    }\n    for i in 0..hex_digits.len() {\n        let\
    \ mut digit = hex_digits[i];\n        if digit == 'A' {\n            digit = '1';\n\
    \        } else if digit == 'B' {\n            digit = '2';\n        } else if\
    \ digit == 'C' {\n            digit = '3';\n        } else if digit == 'D' {\n\
    \            digit = '4';\n        } else if digit == 'E' {\n            digit\
    \ = '5';\n        } else if digit == 'F' {\n            digit = '6';\n       \
    \ }\n        let digit_int = digit.to_digit(10).unwrap();\n        if hex_primes.contains(&digit_int)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        if c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D' {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for c in num.chars() {\n    \
    \    if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let mut num = num.chars();\n    let mut hex_num = String::new();\n    while\
    \ let Some(c) = num.next() {\n        if c.is_digit(16) {\n            hex_num.push(c);\n\
    \        }\n    }\n    let hex_num = hex_num.parse::<u32>().unwrap();\n    let\
    \ mut i = 2;\n    while i * i <= hex_num {\n        if hex_num % i == 0 {\n  \
    \          return count;\n        }\n        i += 1;\n    }\n    count += 1;\n\
    \    count", "    let mut count = 0;\n    for c in num.chars() {\n        if c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n \
    \   let primes = vec![2, 3, 5, 7, 11, 13];\n    for c in num.chars() {\n     \
    \   let mut n = match c.to_digit(16) {\n            Some(n) => n as isize,\n \
    \           None => match c {\n                'A' => 10,\n                'B'\
    \ => 11,\n                'C' => 12,\n                'D' => 13,\n           \
    \     'E' => 14,\n                'F' => 15,\n                _ => 0,\n      \
    \      }\n        };\n        if primes.contains(&n) {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for c in num.chars()\
    \ {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D' {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ count = 0;\n    let mut primes = vec![2, 3, 5, 7, 11, 13];\n    let mut hex_digits\
    \ = vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    let mut hex_digits_str\
    \ = vec![\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    for i in 0..num.len() {\n  \
    \      let mut digit = num.chars().nth(i).unwrap();\n        if digit == 'A' {\n\
    \            digit = '1';\n        } else if digit == 'B' {\n            digit\
    \ = '2';\n        } else if digit == 'C' {\n            digit = '3';\n       \
    \ } else if digit == 'D' {\n            digit = '4';\n        } else if digit\
    \ == 'E' {\n            digit = '5';\n        } else if digit == 'F' {\n     \
    \       digit = '6';\n        }\n        let digit_int = digit.to_digit(16).unwrap();\n\
    \        let mut index = 0;\n        for j in 0..hex_digits.len() {\n        \
    \    if digit_int == hex_digits[j] {\n                index = j;\n           \
    \     break;\n            }\n        }\n        if primes.contains(&hex_digits[index])\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' |\
    \ '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n\
    \    count"]
stop_tokens:
- "\n}"
