name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\"\
  )\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal:\
  \ isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut binary = String::from(\"db\");\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut num = decimal;\n    while\
    \ num > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  '    format!("db{:b}db", decimal)', "    let mut binary = String::from(\"db\");\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut num = decimal;\n    while\
    \ num > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut n = decimal;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()", "  \
    \  let mut binary = String::from(\"db\");\n    let mut num = decimal;\n    while\
    \ num > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut decimal = decimal;\n  \
    \  while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut number = decimal;\n   \
    \ while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n  \
    \      number /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut number = decimal;\n   \
    \ while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n  \
    \      number /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  '    format!("db{:b}db", decimal)', "    let mut binary = String::from(\"db\");\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()", "    let mut binary = String::from(\"\
    db\");\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()", "    let mut binary = String::from(\"db\"\
    );\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n %\
    \ 2).to_string());\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n   \
    \ binary.chars().rev().collect()", "    let mut binary = String::from(\"db\");\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push(if\
    \ decimal % 2 == 0 { '0' } else { '1' });\n        decimal /= 2;\n    }\n    binary.push('d');\n\
    \    binary.push('b');\n    binary", "    let mut binary = String::from(\"db\"\
    );\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()", "    let mut binary = String::from(\"db\"\
    );\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()"]
stop_tokens:
- "\n}"
