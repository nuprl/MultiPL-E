language: rs
name: HumanEval_62_derivative
results:
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i > 0 {\n            result.push(i as isize * x);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i] *\
    \ i as isize);\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i] *\
    \ i as isize);\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().enumerate().map(|(i,\
    \ x)| i as isize * x).skip(1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dxs = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if\
    \ i == 0 {\n            continue;\n        }\n        dxs.push(i as isize * x);\n\
    \    }\n    dxs\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().enumerate().map(|(i,\
    \ &x)| x * i as isize).skip(1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if\
    \ i == 0 {\n            continue;\n        }\n        ys.push(x * i as isize);\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ret = Vec::new();\n    for i in 1..xs.len() {\n        ret.push(xs[i] *\
    \ i as isize);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if\
    \ i == 0 {\n            continue;\n        }\n        ys.push(x * i as isize);\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n      \
    \  if i == 0 {\n            continue;\n        }\n        result.push(x * i as\
    \ isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().enumerate().map(|(i,\
    \ x)| i as isize * x).skip(1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
- exit_code: 0
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010586
