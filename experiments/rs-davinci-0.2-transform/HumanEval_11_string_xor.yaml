name: HumanEval_11_string_xor
language: rs
prompt: "/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform\
  \ binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(String::from(\"\
  010\"), String::from(\"110\"))\n/// String::from(\"100\")\nfn string_xor(a: String,\
  \ b: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = string_xor;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(if c1 == c2 { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        let c = if c1 == c2 { '0' } else { '1' };\n        result.push(c);\n\
    \    }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => '0',\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for i in 0..a.len() {\n        let a_char =\
    \ a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        let a_int = a_char.to_digit(10).unwrap();\n        let b_int = b_char.to_digit(10).unwrap();\n\
    \        let xor_int = a_int ^ b_int;\n        let xor_char = xor_int.to_string().chars().nth(0).unwrap();\n\
    \        result.push(xor_char);\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 ==\
    \ c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let a_bytes = a.into_bytes();\n    let b_bytes = b.into_bytes();\n    for\
    \ i in 0..a_bytes.len() {\n        result.push(match (a_bytes[i], b_bytes[i])\
    \ {\n            (48, 48) => '0',\n            (48, 49) => '1',\n            (49,\
    \ 48) => '1',\n            (49, 49) => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let a_bytes = a.as_bytes();\n    let b_bytes = b.as_bytes();\n    for i in\
    \ 0..a_bytes.len() {\n        if a_bytes[i] == b_bytes[i] {\n            result.push('0');\n\
    \        } else {\n            result.push('1');\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_iter = a.chars();\n    let mut\
    \ b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            _ => break,\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' }\
    \ else { '1' });\n    }\n    result", "    let mut result = String::new();\n \
    \   let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        let a_char = a_iter.next();\n        let b_char = b_iter.next();\n  \
    \      match (a_char, b_char) {\n            (Some(a), Some(b)) => {\n       \
    \         let a_int = a.to_digit(10).unwrap();\n                let b_int = b.to_digit(10).unwrap();\n\
    \                let result_int = a_int ^ b_int;\n                result.push_str(&result_int.to_string());\n\
    \            }\n            (Some(_), None) => panic!(\"a is longer than b\"),\n\
    \            (None, Some(_)) => panic!(\"b is longer than a\"),\n            (None,\
    \ None) => break,\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n        \
    \    ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0')\
    \ => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid input\"\
    ),\n        });\n    }\n    result", "    let mut result = String::new();\n  \
    \  for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => ' ',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n       \
    \ let b_char = b.chars().nth(i).unwrap();\n        if a_char == b_char {\n   \
    \         result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    a.chars()\n        .zip(b.chars())\n    \
    \    .map(|(a, b)| (a == b) as u8)\n        .map(|b| b.to_string())\n        .collect::<String>()",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let a_bytes = a.into_bytes();\n    let b_bytes = b.into_bytes();\n    let mut\
    \ result = Vec::new();\n    for i in 0..a_bytes.len() {\n        result.push(a_bytes[i]\
    \ ^ b_bytes[i]);\n    }\n    String::from_utf8(result).unwrap()", "    let mut\
    \ result = String::new();\n    let mut a_iter = a.chars();\n    let mut b_iter\
    \ = b.chars();\n    loop {\n        let a_char = a_iter.next();\n        let b_char\
    \ = b_iter.next();\n        if a_char.is_none() || b_char.is_none() {\n      \
    \      break;\n        }\n        let a_char = a_char.unwrap();\n        let b_char\
    \ = b_char.unwrap();\n        if a_char == b_char {\n            result.push('0');\n\
    \        } else {\n            result.push('1');\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_chars = a.chars();\n    let\
    \ mut b_chars = b.chars();\n    loop {\n        match (a_chars.next(), b_chars.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            _ => break,\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            _ => break,\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(if i == j { '0' } else { '1' });\n    }\n    result", " \
    \   let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_chars = a.chars();\n    let\
    \ mut b_chars = b.chars();\n    loop {\n        match (a_chars.next(), b_chars.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(char_xor(a_char,\
    \ b_char));\n            }\n            (Some(_), None) => {\n               \
    \ panic!(\"String b is shorter than string a\");\n            }\n            (None,\
    \ Some(_)) => {\n                panic!(\"String a is shorter than string b\"\
    );\n            }\n            (None, None) => {\n                break;\n   \
    \         }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut chars_a = a.chars();\n    let mut chars_b = b.chars();\n    while\
    \ let (Some(c_a), Some(c_b)) = (chars_a.next(), chars_b.next()) {\n        let\
    \ c_a = c_a.to_digit(10).unwrap();\n        let c_b = c_b.to_digit(10).unwrap();\n\
    \        result.push_str(&(c_a ^ c_b).to_string());\n    }\n    result", "   \
    \ let a_bytes = a.into_bytes();\n    let b_bytes = b.into_bytes();\n    let mut\
    \ result = Vec::new();\n    for (a, b) in a_bytes.iter().zip(b_bytes.iter()) {\n\
    \        result.push(a ^ b);\n    }\n    String::from_utf8(result).unwrap()",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        let x = i.to_digit(10).unwrap() ^ j.to_digit(10).unwrap();\n    \
    \    result.push_str(&x.to_string());\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut iter_a = a.chars();\n    let mut iter_b = b.chars();\n    loop {\n\
    \        match (iter_a.next(), iter_b.next()) {\n            (Some(x), Some(y))\
    \ => {\n                result.push(if x == y { '0' } else { '1' });\n       \
    \     }\n            (Some(x), None) => {\n                result.push(x);\n \
    \           }\n            (None, Some(y)) => {\n                result.push(y);\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            _ => break,\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (i, j) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_chars =\
    \ a.chars();\n    let mut b_chars = b.chars();\n    loop {\n        let a_char\
    \ = a_chars.next();\n        let b_char = b_chars.next();\n        if a_char.is_none()\
    \ || b_char.is_none() {\n            break;\n        }\n        let a_char = a_char.unwrap();\n\
    \        let b_char = b_char.unwrap();\n        if a_char == b_char {\n      \
    \      result.push('0');\n        } else {\n            result.push('1');\n  \
    \      }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n        match\
    \ (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char)) =>\
    \ {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            _ => break,\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (a, b) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            _ => break,\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n     \
    \   let a_char = a_iter.next();\n        let b_char = b_iter.next();\n       \
    \ if a_char.is_none() || b_char.is_none() {\n            break;\n        }\n \
    \       let a_char = a_char.unwrap();\n        let b_char = b_char.unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(if i == j { '0' } else { '1' });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (i, j) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => unreachable!(),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_iter = a.chars();\n    let mut\
    \ b_iter = b.chars();\n    loop {\n        let a_char = a_iter.next();\n     \
    \   let b_char = b_iter.next();\n        if a_char.is_none() || b_char.is_none()\
    \ {\n            break;\n        }\n        let a_char = a_char.unwrap();\n  \
    \      let b_char = b_char.unwrap();\n        let a_int = a_char.to_digit(10).unwrap();\n\
    \        let b_int = b_char.to_digit(10).unwrap();\n        let result_int = a_int\
    \ ^ b_int;\n        result.push_str(&result_int.to_string());\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    loop\
    \ {\n        match (a_chars.next(), b_chars.next()) {\n            (Some(a_char),\
    \ Some(b_char)) => {\n                result.push(if a_char == b_char { '0' }\
    \ else { '1' });\n            }\n            _ => break,\n        }\n    }\n \
    \   result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => '0',\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(if i == j { '0' } else { '1' });\n    }\n    result", " \
    \   let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n\
    \    loop {\n        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char),\
    \ Some(b_char)) => {\n                result.push(if a_char == b_char { '0' }\
    \ else { '1' });\n            }\n            _ => break,\n        }\n    }\n \
    \   result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                if a_char\
    \ == b_char {\n                    result.push('0');\n                } else {\n\
    \                    result.push('1');\n                }\n            }\n   \
    \         _ => break,\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    loop\
    \ {\n        let a_char = a_chars.next();\n        let b_char = b_chars.next();\n\
    \        if a_char.is_none() || b_char.is_none() {\n            break;\n     \
    \   }\n        let a_char = a_char.unwrap();\n        let b_char = b_char.unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n\
    \        let b_char = b.chars().nth(i).unwrap();\n        if a_char == b_char\
    \ {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' }\
    \ else { '1' });\n    }\n    result", "    let mut result = String::new();\n \
    \   for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n      \
    \  });\n    }\n    result", "    let mut result = String::new();\n    for (i,\
    \ j) in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else\
    \ { '1' });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' }\
    \ else { '1' });\n    }\n    result", "    let mut result = String::new();\n \
    \   for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        let xor = c1 == c2;\n\
    \        result.push(if xor { '0' } else { '1' });\n    }\n    result", "    let\
    \ mut result = String::new();\n    let a_bytes = a.as_bytes();\n    let b_bytes\
    \ = b.as_bytes();\n    for i in 0..a_bytes.len() {\n        let a_byte = a_bytes[i];\n\
    \        let b_byte = b_bytes[i];\n        let xor_byte = a_byte ^ b_byte;\n \
    \       result.push(char::from(xor_byte));\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        if i\
    \ == j {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 ==\
    \ c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let a_bytes = a.into_bytes();\n\
    \    let b_bytes = b.into_bytes();\n    let mut result = Vec::new();\n    for\
    \ (a, b) in a_bytes.iter().zip(b_bytes.iter()) {\n        result.push(a ^ b);\n\
    \    }\n    String::from_utf8(result).unwrap()", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                if a_char == b_char {\n                    result.push('0');\n\
    \                } else {\n                    result.push('1');\n           \
    \     }\n            }\n            _ => break,\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => '0',\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (c1, c2) {\n            ('0', '0') => '0',\n      \
    \      ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Unexpected input\"),\n        });\n    }\n\
    \    result", "    let mut result = String::new();\n    let a_bytes = a.as_bytes();\n\
    \    let b_bytes = b.as_bytes();\n    for i in 0..a_bytes.len() {\n        if\
    \ a_bytes[i] == b_bytes[i] {\n            result.push('0');\n        } else {\n\
    \            result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else {\
    \ '1' });\n    }\n    result", "    let mut result = String::new();\n    for (a,\
    \ b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n     \
    \       ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let a_chars: Vec<char> = a.chars().collect();\n    let b_chars: Vec<char>\
    \ = b.chars().collect();\n    for i in 0..a_chars.len() {\n        if a_chars[i]\
    \ == b_chars[i] {\n            result.push('0');\n        } else {\n         \
    \   result.push('1');\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 ==\
    \ c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                if a_char == b_char {\n                    result.push('0');\n\
    \                } else {\n                    result.push('1');\n           \
    \     }\n            }\n            _ => break,\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (i, j) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => ' ',\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else {\
    \ '1' });\n    }\n    result", "    let mut result = String::new();\n    for (a,\
    \ b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n     \
    \       ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    loop\
    \ {\n        match (a_chars.next(), b_chars.next()) {\n            (Some(x), Some(y))\
    \ => {\n                result.push(if x == y { '0' } else { '1' });\n       \
    \     }\n            (Some(x), None) => {\n                result.push(x);\n \
    \           }\n            (None, Some(y)) => {\n                result.push(y);\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 == c2 { '0'\
    \ } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                let a_num = a_char.to_digit(10).unwrap();\n          \
    \      let b_num = b_char.to_digit(10).unwrap();\n                let result_num\
    \ = a_num ^ b_num;\n                result.push_str(&result_num.to_string());\n\
    \            }\n            (Some(_), None) => break,\n            (None, Some(_))\
    \ => break,\n            (None, None) => break,\n        }\n    }\n    result",
  "    let a_bytes = a.into_bytes();\n    let b_bytes = b.into_bytes();\n    let mut\
    \ result = Vec::new();\n    for (a, b) in a_bytes.iter().zip(b_bytes.iter()) {\n\
    \        result.push(a ^ b);\n    }\n    String::from_utf8(result).unwrap()",
  "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (c1, c2) {\n            ('0', '0') => '0',\n  \
    \          ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            _ => break,\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 ==\
    \ c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if c1 ==\
    \ c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            _ => break,\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (a, b) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        let a = a.to_digit(10).unwrap();\n        let b = b.to_digit(10).unwrap();\n\
    \        result.push_str(&(a ^ b).to_string());\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars()) {\n\
    \        result.push(if c1 == c2 { '0' } else { '1' });\n    }\n    result", " \
    \   let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(if c1 == c2 { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (c1, c2) {\n            ('0', '0') => '0',\n  \
    \          ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_iter = a.chars();\n    let mut\
    \ b_iter = b.chars();\n    loop {\n        let a_char = a_iter.next();\n     \
    \   let b_char = b_iter.next();\n        if a_char.is_none() || b_char.is_none()\
    \ {\n            break;\n        }\n        let a_char = a_char.unwrap();\n  \
    \      let b_char = b_char.unwrap();\n        if a_char == b_char {\n        \
    \    result.push('0');\n        } else {\n            result.push('1');\n    \
    \    }\n    }\n    result", "    let mut result = String::new();\n    for (a,\
    \ b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' } else\
    \ { '1' });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (x, y) in a.chars().zip(b.chars()) {\n        result.push(if x == y { '0' }\
    \ else { '1' });\n    }\n    result", "    let mut result = String::new();\n \
    \   for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    let mut a_iter\
    \ = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(),\
    \ b_iter.next()) {\n            (Some(a_char), Some(b_char)) => {\n          \
    \      let a_bit = a_char.to_digit(10).unwrap();\n                let b_bit =\
    \ b_char.to_digit(10).unwrap();\n                result.push_str(&(a_bit ^ b_bit).to_string());\n\
    \            }\n            (Some(_), None) => {\n                panic!(\"a is\
    \ longer than b\");\n            }\n            (None, Some(_)) => {\n       \
    \         panic!(\"b is longer than a\");\n            }\n            (None, None)\
    \ => {\n                break;\n            }\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(if c1 == c2 { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars())\
    \ {\n        result.push(if c1 == c2 { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result"]
stop_tokens:
- "\n}"
