language: rs
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n   \
    \         'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpko9tysvf.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpi05wv2j0.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpko9tysvf.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().to_string());\n\
    \        } else {\n            flipped.push(c.to_uppercase().to_string());\n \
    \       }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdxy_c7f4.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_lowercase().to_string());\n  |               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdxy_c7f4.rs:10:26\n   |\n10 |\
    \             flipped.push(c.to_uppercase().to_string());\n   |              \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpi05wv2j0.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            flipped_string.push(c.to_ascii_uppercase());\n        } else\
    \ if c.is_ascii_uppercase() {\n            flipped_string.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase().next().unwrap(),\n\
    \        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    flipped.push(c.to_ascii_lowercase());\n        } else {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    flipped.push(c.to_ascii_lowercase());\n        } else {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase().next().unwrap(),\n\
    \        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase().next().unwrap(),\n\
    \        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpko9tysvf.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            flipped_string.push(c.to_ascii_uppercase());\n        } else\
    \ if c.is_ascii_uppercase() {\n            flipped_string.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped_string\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n    \
    \    } else if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c);\n        }\n    }\n   \
    \ flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4ngerc2z.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n        'A'..='Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut flipped = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpko9tysvf.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010151
