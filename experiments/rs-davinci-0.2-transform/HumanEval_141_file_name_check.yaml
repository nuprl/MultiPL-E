name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"\
  example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"\
  1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"\
  example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"\
  1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"\
  No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n\
  }\n"
completions: ["    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_file_name = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   let mut file_name_chars = file_name.chars();\n    let mut first_char = file_name_chars.next();\n\
    \    while let Some(c) = first_char {\n        if c.is_alphabetic() {\n      \
    \      valid_name = true;\n            name.push(c);\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        }\n        first_char = file_name_chars.next();\n\
    \    }\n    if dot_count == 1 && digits_count <= 3 && valid_name {\n        let\
    \ mut extension_chars = file_name_chars;\n        while let Some(c) = extension_chars.next()\
    \ {\n            extension.push(c);\n        }\n        for ext in valid_extensions\
    \ {\n            if extension == ext {\n                valid_extension = true;\n\
    \            }\n        }\n    }\n    if valid_extension && valid_name {\n   \
    \     valid_file_name = true;\n    }\n    if valid_file_name {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut dot_count\
    \ = 0;\n    let mut digit_count = 0;\n    let mut valid_extension = false;\n \
    \   let mut valid_prefix = false;\n    let mut extension_start = 0;\n    let mut\
    \ prefix_start = 0;\n    let mut prefix_end = 0;\n    let mut extension_end =\
    \ 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            extension_start = i + 1;\n        }\
    \ else if c.is_ascii_digit() {\n            digit_count += 1;\n        } else\
    \ if c.is_ascii_alphabetic() {\n            if dot_count == 0 {\n            \
    \    prefix_start = i;\n            } else {\n                extension_end =\
    \ i;\n            }\n        }\n    }\n    if dot_count == 1 && digit_count <=\
    \ 3 {\n        prefix_end = extension_start - 1;\n        let prefix = &file_name[prefix_start..prefix_end];\n\
    \        let extension = &file_name[extension_start..extension_end];\n       \
    \ if prefix.len() > 0 && prefix.chars().next().unwrap().is_ascii_alphabetic()\
    \ {\n            valid_prefix = true;\n        }\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if valid_prefix && valid_extension {\n      \
    \  String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut i = 0;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            prefix_end = i;\n            extension_start\
    \ = i + 1;\n        }\n        if i == extension_start {\n            if c ==\
    \ 't' {\n                valid_extension = true;\n                extension_end\
    \ = i + 2;\n            }\n            if c == 'e' {\n                valid_extension\
    \ = true;\n                extension_end = i + 2;\n            }\n           \
    \ if c == 'd' {\n                valid_extension = true;\n                extension_end\
    \ = i + 3;\n            }\n        }\n        if i == prefix_start {\n       \
    \     if c.is_alphabetic() {\n                valid_prefix = true;\n         \
    \   }\n        }\n        i += 1;\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !valid_extension || !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    let prefix = &file_name[prefix_start..prefix_end];\n    let\
    \ extension = &file_name[extension_start..extension_end];\n    if prefix.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    if extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n    let\
    \ mut is_ext = false;\n    let mut is_empty = true;\n    let mut is_first_letter\
    \ = false;\n    let mut is_first_digit = false;\n    let mut is_first_dot = false;\n\
    \    let mut is_first_ext = false;\n    let mut is_second_letter = false;\n  \
    \  let mut is_second_digit = false;\n    let mut is_second_dot = false;\n    let\
    \ mut is_second_ext = false;\n    let mut is_third_letter = false;\n    let mut\
    \ is_third_digit = false;\n    let mut is_third_dot = false;\n    let mut is_third_ext\
    \ = false;\n    let mut is_fourth_letter = false;\n    let mut is_fourth_digit\
    \ = false;\n    let mut is_fourth_dot = false;\n    let mut is_fourth_ext = false;\n\
    \    let mut is_fifth_letter = false;\n    let mut is_fifth_digit = false;\n \
    \   let mut is_fifth_dot = false;\n    let mut is_fifth_ext = false;\n    let\
    \ mut is_sixth_letter = false;\n    let mut is_sixth_digit = false;\n    let mut\
    \ is_sixth_dot = false;\n    let mut is_sixth_ext = false;\n    let mut is_seventh_letter\
    \ = false;\n    let mut is_seventh_digit = false;\n    let mut is_seventh_dot\
    \ = false;\n    let mut is_seventh_ext = false;\n    let mut is_eighth_letter\
    \ = false;\n    let mut is_eighth_digit = false;\n    let mut is_eighth_dot =\
    \ false;\n    let mut is_eighth_ext = false;\n    let mut is_ninth_letter = false;\n\
    \    let mut is_ninth_digit = false;\n    let mut is_ninth_dot = false", "   \
    \ let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension = file_name[i+1..].to_string();\n\
    \        }\n        if i == 0 {\n            is_first_char_valid = c.is_alphabetic();\n\
    \        }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension_valid = true;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 || !is_first_char_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension_count = 0;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_valid\
    \ = false;\n    let mut extension_valid_count = 0;\n    let mut extension_valid_start\
    \ = 0;\n    let mut extension_valid_end = 0;\n    let mut extension_valid_length\
    \ = 0;\n    let mut extension_valid_length_count = 0;\n    let mut extension_valid_length_start\
    \ = 0;\n    let mut extension_valid_length_end = 0;\n    let mut extension_valid_length_valid\
    \ = false;\n    let mut extension_valid_length_valid_count = 0;\n    let mut extension_valid_length_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_end = 0;\n    let mut extension_valid_length_valid_valid\
    \ = false;\n    let mut extension_valid_length_valid_valid_count = 0;\n    let\
    \ mut extension_valid_length_valid_valid_start = 0;\n    let mut extension_valid_length_valid_valid_end\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid = false;\n    let\
    \ mut extension_valid_length_valid_valid_valid_count = 0;\n    let mut extension_valid_length_valid_valid_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid = false;\n    let mut extension_valid_length_valid_valid_valid_valid_count\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_valid_start = 0;\n\
    \    let mut extension_valid_length_valid_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid_valid = false;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_count = 0;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_", "    let mut digits\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot_count\
    \ += 1;\n            has_dot = true;\n        } else if c.is_alphabetic() {\n\
    \            has_letter = true;\n        }\n        if has_dot {\n           \
    \ extension.push(c);\n        }\n    }\n    if digits > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if !has_letter {\n        return String::from(\"No\");\n    }\n  \
    \  if extension == String::from(\".txt\") || extension == String::from(\".exe\"\
    ) || extension == String::from(\".dll\") {\n        has_extension = true;\n  \
    \  }\n    if has_extension {\n        return String::from(\"Yes\");\n    }\n \
    \   return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut extension_index = 0;\n\
    \    let mut extension = String::new();\n    let mut valid_extension = false;\n\
    \    let mut valid_name = false;\n    let mut valid_extension_length = false;\n\
    \    let mut valid_name_length = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_name_end = false;\n    let mut valid_name_end_index = 0;\n\
    \    let mut valid_name_start_index = 0;\n    let mut valid_name_start_char =\
    \ ' ';\n    let mut valid_name_end_char = ' ';\n    let mut valid_name_end_char_index\
    \ = 0;\n    let mut valid_name_start_char_index = 0;\n    let mut valid_name_end_char_index_2\
    \ = 0;\n    let mut valid_name_start_char_index_2 = 0;\n    let mut valid_name_end_char_2\
    \ = ' ';\n    let mut valid_name_start_char_2 = ' ';\n    let mut valid_name_end_char_index_3\
    \ = 0;\n    let mut valid_name_start_char_index_3 = 0;\n    let mut valid_name_end_char_3\
    \ = ' ';\n    let mut valid_name_start_char_3 = ' ';\n    let mut valid_name_end_char_index_4\
    \ = 0;\n    let mut valid_name_start_char_index_4 = 0;\n    let mut valid_name_end_char_4\
    \ = ' ';\n    let mut valid_name_start_char_4 = ' ';\n    let mut valid_name_end_char_index_5\
    \ = 0;\n    let mut valid_name_start_char_index_5 = 0;\n    let mut valid_name_end_char_5\
    \ = ' ';\n    let mut valid_name_start_char_5 = ' ';\n    let mut valid_name_end_char_index_6\
    \ = 0;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count =\
    \ 0;\n    let mut is_valid = true;\n    let mut is_valid_before_dot = false;\n\
    \    let mut is_valid_after_dot = false;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_first_char = false;\n    let mut is_valid_last_char = false;\n\
    \    let mut is_valid_middle_chars = false;\n    let mut is_valid_middle_chars_count\
    \ = 0;\n    let mut is_valid_extension_count = 0;\n    let mut is_valid_extension_char\
    \ = false;\n    let mut is_valid_extension_char_count = 0;\n    let mut is_valid_extension_char_count_2\
    \ = 0;\n    let mut is_valid_extension_char_count_3 = 0;\n    let mut is_valid_extension_char_count_4\
    \ = 0;\n    let mut is_valid_extension_char_count_5 = 0;\n    let mut is_valid_extension_char_count_6\
    \ = 0;\n    let mut is_valid_extension_char_count_7 = 0;\n    let mut is_valid_extension_char_count_8\
    \ = 0;\n    let mut is_valid_extension_char_count_9 = 0;\n    let mut is_valid_extension_char_count_10\
    \ = 0;\n    let mut is_valid_extension_char_count_11 = 0;\n    let mut is_valid_extension_char_count_12\
    \ = 0;\n    let mut is_valid_extension_char_count_13 = 0;\n    let mut is_valid_extension_char_count_14\
    \ = 0;\n    let mut is_valid_extension_char_count_15 = 0;\n    let mut is_valid_extension_char_count_16\
    \ = 0;\n    let mut is_valid_extension_char_count_17 = 0;\n    let mut is_valid_extension_char_count_18\
    \ = 0;\n    let mut is_valid_extension_", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty =\
    \ true;\n    let mut is_start_with_letter = false;\n    let mut is_end_with_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_empty = false;\n            is_start_with_letter = true;\n\
    \        }\n    }\n    if dot_count == 1 {\n        let mut dot_index = 0;\n \
    \       for (i, c) in file_name.chars().enumerate() {\n            if c == '.'\
    \ {\n                dot_index = i;\n                break;\n            }\n \
    \       }\n        extension = file_name[dot_index + 1..].to_string();\n     \
    \   if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            is_end_with_valid_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || is_empty || !is_start_with_letter || !is_end_with_valid_extension\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut extension = String::new();\n    let mut file_name_chars = file_name.chars();\n\
    \    while let Some(c) = file_name_chars.next() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n        }\n        if c.is_alphabetic() {\n            is_letter\
    \ = true;\n        }\n        if c != '.' {\n            is_empty = false;\n \
    \       }\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty || !is_letter\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        let mut file_name_chars\
    \ = file_name.chars();\n        while let Some(c) = file_name_chars.next() {\n\
    \            if c == '.' {\n                break;\n            }\n        }\n\
    \        while let Some(c) = file_name_chars.next() {\n            extension.push(c);\n\
    \        }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension = true;\n        }\n    }\n    if is_valid\
    \ && is_extension {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_prefix = false;\n    let mut is_valid_prefix_start = false;\n \
    \   let mut is_valid_prefix_end = false;\n    let mut is_valid_extension_start\
    \ = false;\n    let mut is_valid_extension_end = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut is_valid_prefix_length = false;\n    let mut is_valid_prefix_length_start\
    \ = false;\n    let mut is_valid_prefix_length_end = false;\n    let mut is_valid_extension_length_start\
    \ = false;\n    let mut is_valid_extension_length_end = false;\n    let mut is_valid_extension_length_end_start\
    \ = false;\n    let mut is_valid_extension_length_end_end = false;\n    let mut\
    \ is_valid_prefix_length_end_start = false;\n    let mut is_valid_prefix_length_end_end\
    \ = false;\n    let mut is_valid_extension_length_end_start_start = false;\n \
    \   let mut is_valid_extension_length_end_start_end = false;\n    let mut is_valid_prefix_length_end_start_start\
    \ = false;\n    let mut is_valid_prefix_length_end_start_end = false;\n    let\
    \ mut is_valid_extension_length_end_start_start_start = false;\n    let mut is_valid_extension_length_end_start_start_end\
    \ = false;\n    let mut is_valid_prefix_length_end_start_start_start = false;\n\
    \    let mut is_valid_prefix_length_end_start_start_end = false;\n    let mut\
    \ is_valid_extension_length_end_start_start_start_start = false;\n    let mut\
    \ is_valid_extension_length_end_start_start_start_end = false;\n    let mut is_valid_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix = String::new();\n\
    \    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            continue;\n\
    \        }\n        if c.is_digit(10) {\n            digits_count += 1;\n    \
    \    }\n        if dot_count == 0 {\n            if i == 0 && !c.is_alphabetic()\
    \ {\n                return String::from(\"No\");\n            }\n           \
    \ prefix.push(c);\n        } else {\n            extension.push(c);\n        }\n\
    \    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if\
    \ prefix.is_empty() {\n        return String::from(\"No\");\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c == '.' && !is_substring_before_dot_valid\
    \ {\n            is_substring_before_dot_valid = true;\n        }\n        if\
    \ c != '.' && is_substring_before_dot_valid {\n            substring_after_dot.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_substring_before_dot_valid\
    \ {\n        is_substring_after_dot_valid = true;\n    }\n    if is_substring_after_dot_valid\
    \ {\n        if substring_after_dot == \"txt\" || substring_after_dot == \"exe\"\
    \ || substring_after_dot == \"dll\" {\n            is_substring_after_dot_valid\
    \ = true;\n        } else {\n            is_substring_after_dot_valid = false;\n\
    \        }\n    }\n    if is_valid && is_substring_before_dot_valid && is_substring_after_dot_valid\
    \ {\n        return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut name_start\
    \ = 0;\n    let mut name_end = 0;\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n\
    \    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n\
    \    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll\
    \ = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let\
    \ mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n\
    \    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww\
    \ = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let\
    \ mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n\
    \    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_str = String::new();\n    let mut extension_vec\
    \ = vec![];\n    let mut extension_vec_count = 0;\n    let mut extension_vec_start\
    \ = 0;\n    let mut extension_vec_end = 0;\n    let mut extension_vec_str = String::new();\n\
    \    let mut extension_vec_str_count = 0;\n    let mut extension_vec_str_start\
    \ = 0;\n    let mut extension_vec_str_end = 0;\n    let mut extension_vec_str_substr\
    \ = String::new();\n    let mut extension_vec_str_substr_count = 0;\n    let mut\
    \ extension_vec_str_substr_start = 0;\n    let mut extension_vec_str_substr_end\
    \ = 0;\n    let mut extension_vec_str_substr_char = ' ';\n    let mut extension_vec_str_substr_char_count\
    \ = 0;\n    let mut extension_vec_str_substr_char_start = 0;\n    let mut extension_vec_str_substr_char_end\
    \ = 0;\n    let mut extension_vec_str_substr_char_ascii = 0;\n    let mut extension_vec_str_substr_char_ascii_count\
    \ = 0;\n    let mut extension_vec_str_substr_char_ascii_start = 0;\n    let mut\
    \ extension_vec_str_substr_char_ascii_end = 0;\n    let mut extension_vec_str_substr_char_ascii_range\
    \ = 0;\n    let mut extension_vec_str_substr_char_ascii_range_count = 0;\n   \
    \ let mut extension_vec_str_substr_char_ascii_range_start = 0;\n    let mut extension_vec_str_substr_char_ascii_range_end\
    \ = 0;\n    let mut extension_vec_str_substr_char_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_after_dot_valid_count = 0;\n    let mut is_after_dot_valid_txt\
    \ = false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n        }\n        if is_before_dot {\n            if c.is_ascii_digit()\
    \ {\n                digits_count += 1;\n            }\n            if is_first_letter\
    \ {\n                if c.is_ascii_alphabetic() {\n                    is_first_letter_valid\
    \ = true;\n                    is_first_letter = false;\n                }\n \
    \           }\n        }\n        if is_after_dot {\n            if is_after_dot_valid_count\
    \ == 0 {\n                if c == 't' {\n                    is_after_dot_valid_txt\
    \ = true;\n                    is_after_dot_valid_count += 1;\n              \
    \  }\n            }\n            if is_after_dot_valid_count == 1 {\n        \
    \        if c == 'x' {\n                    is_after_dot_valid_exe = true;\n \
    \                   is_after_dot_valid_count += 1;\n                }\n      \
    \      }\n            if is_after_dot_valid_count == 2 {\n                if c\
    \ == 'e' {\n                    is_after_dot_valid_dll = true;\n             \
    \       is_after_dot_valid_count += 1;\n                }\n            }\n   \
    \     }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n   \
    \ let mut dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    for (index, c) in file_name.chars().enumerate() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            dot_index = index;\n       \
    \ }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    let prefix = &file_name[..dot_index];\n    if prefix.len() == 0 {\n     \
    \   return String::from(\"No\");\n    }\n    for c in prefix.chars() {\n     \
    \   if c.is_alphabetic() {\n            valid_prefix = true;\n            break;\n\
    \        }\n    }\n    if !valid_prefix {\n        return String::from(\"No\"\
    );\n    }\n    let extension = &file_name[dot_index + 1..];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut parts\
    \ = file_name.split('.');\n    let first_part = parts.next().unwrap();\n    let\
    \ second_part = parts.next().unwrap();\n    if first_part.len() == 0 || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut extension = String::new();\n    let mut valid_extension = false;\n\
    \    let mut valid_name = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        } else if c == '.'\
    \ {\n            dot_count += 1;\n        } else if c.is_alphabetic() {\n    \
    \        valid_name = true;\n        }\n    }\n    if dot_count == 1 {\n     \
    \   let mut split = file_name.split('.');\n        let name = split.next().unwrap();\n\
    \        extension = split.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if digits_count <= 3 && valid_extension && valid_name\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut letter_count\
    \ = 0;\n    let mut extension_count = 0;\n    let mut extension_start_index =\
    \ 0;\n    let mut extension_end_index = 0;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut extension_start_index_found\
    \ = false;\n    let mut extension_end_index_found = false;\n    let mut extension_start_index_found_once\
    \ = false;\n    let mut extension_end_index_found_once = false;\n    let mut extension_start_index_found_twice\
    \ = false;\n    let mut extension_end_index_found_twice = false;\n    let mut\
    \ extension_start_index_found_thrice = false;\n    let mut extension_end_index_found_thrice\
    \ = false;\n    let mut extension_start_index_found_four_times = false;\n    let\
    \ mut extension_end_index_found_four_times = false;\n    let mut extension_start_index_found_five_times\
    \ = false;\n    let mut extension_end_index_found_five_times = false;\n    let\
    \ mut extension_start_index_found_six_times = false;\n    let mut extension_end_index_found_six_times\
    \ = false;\n    let mut extension_start_index_found_seven_times = false;\n   \
    \ let mut extension_end_index_found_seven_times = false;\n    let mut extension_start_index_found_eight_times\
    \ = false;\n    let mut extension_end_index_found_eight_times = false;\n    let\
    \ mut extension_start_index_found_nine_times = false;\n    let mut extension_end_index_found_nine_times\
    \ = false;\n    let mut extension_start_index_found_ten_times = false;\n    let\
    \ mut extension_end_index_found_ten_times = false;\n    let mut extension_start_index_found_eleven_times\
    \ = false;\n    let mut extension_end_index_found_eleven_times = false;\n    let\
    \ mut extension_", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_letter_valid = false;\n    let mut is_last_part_valid = false;\n  \
    \  let mut last_part = String::new();\n    for c in file_name.chars() {\n    \
    \    if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n            is_first_letter = false;\n\
    \        }\n        if is_first_letter {\n            if c.is_ascii_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n            }\n        } else\
    \ {\n            last_part.push(c);\n        }\n    }\n    if digits_count > 3\
    \ {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if !is_first_letter_valid {\n        is_valid = false;\n\
    \    }\n    if last_part == \"txt\" || last_part == \"exe\" || last_part == \"\
    dll\" {\n        is_last_part_valid = true;\n    }\n    if !is_last_part_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            if i == 0 {\n      \
    \          return String::from(\"No\");\n            }\n            let extension\
    \ = &file_name[i+1..];\n            if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n                valid_extension = true;\n   \
    \         }\n        } else if c.is_alphabetic() {\n            valid_name = true;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !valid_extension\
    \ || !valid_name {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter =\
    \ false;\n    let mut is_extension = false;\n    let mut is_extension_valid =\
    \ false;\n    let mut extension = String::new();\n    let mut extension_valid\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    for c in file_name.chars() {\n     \
    \   if c == '.' {\n            dot_count += 1;\n            is_letter = false;\n\
    \            is_empty = true;\n        } else if c.is_digit(10) {\n          \
    \  digits_count += 1;\n        } else if c.is_alphabetic() {\n            is_letter\
    \ = true;\n            is_empty = false;\n            if !is_extension {\n   \
    \             extension.push(c);\n            }\n        }\n        if digits_count\
    \ > 3 {\n            is_valid = false;\n            break;\n        }\n      \
    \  if dot_count > 1 {\n            is_valid = false;\n            break;\n   \
    \     }\n        if is_empty {\n            is_valid = false;\n            break;\n\
    \        }\n        if !is_letter {\n            is_extension = true;\n      \
    \  }\n        if is_extension {\n            for e in extension_valid.iter() {\n\
    \                if extension == *e {\n                    is_extension_valid\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if !is_extension_valid {\n                is_valid = false;\n       \
    \         break;\n            }\n        }\n    }\n    if is_valid {\n       \
    \ String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension = file_name[i+1..].to_string();\n\
    \            name = file_name[..i].to_string();\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic() {\n   \
    \     valid_name = true;\n    }\n    if valid_extension && valid_name {\n    \
    \    return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_last_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut is_first_part_valid\
    \ = false;\n    let mut is_last_part_valid = false;\n    let mut first_part =\
    \ String::new();\n    let mut last_part = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if dot_count == 0 {\n                is_first_char_valid = true;\n\
    \                first_part.push(c);\n            } else {\n                is_last_char_valid\
    \ = true;\n                last_part.push(c);\n            }\n        }\n    }\n\
    \    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if is_first_char_valid {\n   \
    \     is_first_part_valid = true;\n    }\n    if is_last_char_valid {\n      \
    \  is_last_part_valid = true;\n    }\n    if last_part == \"txt\" || last_part\
    \ == \"exe\" || last_part == \"dll\" {\n        is_extension_valid = true;\n \
    \   }\n    if is_valid && is_first_part_valid && is_last_part_valid && is_extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_valid = false;\n    let mut extension_valid_list\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_valid_list_iter =\
    \ extension_valid_list.iter();\n    let mut extension_valid_list_iter_mut = extension_valid_list.iter_mut();\n\
    \    let mut extension_valid_list_iter_mut_next = extension_valid_list_iter_mut.next();\n\
    \    let mut extension_valid_list_iter_mut_next_mut = extension_valid_list_iter_mut_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone = extension_valid_list_iter_mut_next_mut.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars = extension_valid_list_iter_mut_next_mut_clone.chars();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next = extension_valid_list_iter_mut_next_mut_clone_chars.next();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone = extension_valid_list_iter_mut_next_mut_clone_chars_next.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone\
    \ = extension_valid_list_iter_mut_next_mut_clone_chars_next_clone.clone();\n \
    \   let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_mut_clone_chars_next_clone_clone_", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ extension_vec = vec![\"txt\", \"exe\", \"dll\"];\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n        if c == '.' {\n       \
    \     is_empty = false;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_letter {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        let mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                dot_index = i;\n            }\n\
    \        }\n        extension = file_name[dot_index + 1..].to_string();\n    \
    \    for ext in extension_vec {\n            if extension == ext {\n         \
    \       is_extension = true;\n            }\n        }\n    }\n    if is_valid\
    \ && is_extension {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty\
    \ = true;\n    let mut is_before_dot_start_with_letter = false;\n    let mut is_after_dot_end_with_txt\
    \ = false;\n    let mut is_after_dot_end_with_exe = false;\n    let mut is_after_dot_end_with_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if is_before_dot {\n            is_before_dot_empty = false;\n\
    \            if c.is_alphabetic() {\n                is_before_dot_start_with_letter\
    \ = true;\n            }\n        } else if is_after_dot {\n            is_after_dot_empty\
    \ = false;\n            if c == 't' {\n                is_after_dot_end_with_txt\
    \ = true;\n            } else if c == 'e' {\n                is_after_dot_end_with_exe\
    \ = true;\n            } else if c == 'd' {\n                is_after_dot_end_with_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_before_dot_empty || !is_before_dot_start_with_letter || is_after_dot_empty\
    \ || !(is_after_dot_end_with_txt || is_after_dot_end_with_exe || is_after_dot_end_with_dll)\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_dot = true;\n    let mut is_first_after_dot\
    \ = true;\n    let mut is_first_after_dot_letter = true;\n    let mut is_first_after_dot_digit\
    \ = true;\n    let mut is_first_after_dot_letter_valid = true;\n    let mut is_first_after_dot_digit_valid\
    \ = true;\n    let mut is_first_after_dot_letter_valid_count = 0;\n    let mut\
    \ is_first_after_dot_digit_valid_count = 0;\n    let mut is_first_after_dot_letter_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_digit_valid_count_valid = true;\n  \
    \  let mut is_first_after_dot_letter_valid_count_valid_count = 0;\n    let mut\
    \ is_first_after_dot_digit_valid_count_valid_count = 0;\n    let mut is_first_after_dot_letter_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_digit_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_letter_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_digit_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_letter_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_digit_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_letter_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_digit_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if\
    \ digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n   \
    \ if is_valid {\n        let mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                dot_index = i;\n             \
    \   break;\n            }\n        }\n        let prefix = &file_name[..dot_index];\n\
    \        let suffix = &file_name[dot_index + 1..];\n        if prefix.is_empty()\
    \ || !prefix.chars().next().unwrap().is_alphabetic() {\n            is_valid =\
    \ false;\n        }\n        if suffix != \"txt\" && suffix != \"exe\" && suffix\
    \ != \"dll\" {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = true;\n            continue;\n        }\n\
    \        if dot_count == 0 {\n            if c.is_digit(10) {\n              \
    \  digits_count += 1;\n            }\n            if digits_count > 3 {\n    \
    \            is_valid = false;\n                break;\n            }\n      \
    \      if is_first_letter {\n                if !c.is_alphabetic() {\n       \
    \             is_valid = false;\n                    break;\n                }\n\
    \                is_first_letter = false;\n            }\n            is_empty\
    \ = false;\n        } else {\n            extension.push(c);\n        }\n    }\n\
    \    if is_empty {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n\
    \        is_valid = false;\n    }\n    if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n    }\n\
    \    if is_valid && is_extension_valid {\n        String::from(\"Yes\")\n    }\
    \ else {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut has_extension\
    \ = false;\n    let mut has_empty_substring = false;\n    let mut has_invalid_extension\
    \ = false;\n    let mut has_invalid_substring = false;\n    let mut has_invalid_char\
    \ = false;\n    let mut has_invalid_digit = false;\n    let mut has_invalid_dot\
    \ = false;\n    let mut has_invalid_letter = false;\n    let mut has_invalid_substring_len\
    \ = false;\n    let mut has_invalid_substring_start = false;\n    let mut has_invalid_substring_end\
    \ = false;\n    let mut has_invalid_substring_start_char = false;\n    let mut\
    \ has_invalid_substring_end_char = false;\n    let mut has_invalid_substring_start_digit\
    \ = false;\n    let mut has_invalid_substring_end_digit = false;\n    let mut\
    \ has_invalid_substring_start_dot = false;\n    let mut has_invalid_substring_end_dot\
    \ = false;\n    let mut has_invalid_substring_start_letter = false;\n    let mut\
    \ has_invalid_substring_end_letter = false;\n    let mut has_invalid_substring_start_extension\
    \ = false;\n    let mut has_invalid_substring_end_extension = false;\n    let\
    \ mut has_invalid_substring_start_empty = false;\n    let mut has_invalid_substring_end_empty\
    \ = false;\n    let mut has_invalid_substring_start_len = false;\n    let mut\
    \ has_invalid_substring_end_len = false;\n    let mut has_invalid_substring_start_char_count\
    \ = false;\n    let mut has_invalid_substring_end_char_count = false;\n    let\
    \ mut has_invalid_substring_start_digit_count = false;\n    let mut has_invalid_substring_end_digit_",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    let mut split = file_name.split('.');\n    prefix = split.next().unwrap().to_string();\n\
    \    extension = split.next().unwrap().to_string();\n    if prefix.is_empty()\
    \ {\n        is_valid = false;\n    }\n    for c in prefix.chars() {\n       \
    \ if c.is_alphabetic() {\n            is_valid_prefix = true;\n            break;\n\
    \        }\n    }\n    if !is_valid_prefix {\n        is_valid = false;\n    }\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_valid_extension = true;\n    }\n    if !is_valid_extension {\n   \
    \     is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_name = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    for (i, c)\
    \ in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n            name_end = i;\n   \
    \     } else if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            name_start = i;\n        }\n    }\n    if\
    \ dot_count == 1 && digits_count <= 3 {\n        valid_name = true;\n    }\n \
    \   extension_end = file_name.len();\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_before_dot = true;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_after_dot\
    \ = true;\n            is_before_dot = false;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           if is_after_dot {\n                extension.push(c);\n          \
    \  } else if is_first_letter {\n                is_first_letter = false;\n   \
    \         }\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_before_dot\
    \ && !is_first_letter {\n        is_valid = false;\n    }\n    if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut i = 0;\n    while i < file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            prefix_end = i;\n\
    \            extension_start = i + 1;\n        }\n        if i == file_name.len()\
    \ - 1 {\n            extension_end = i + 1;\n        }\n        i += 1;\n    }\n\
    \    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if\
    \ dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if prefix_end\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if extension_end ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    let prefix = &file_name[prefix_start..prefix_end];\n\
    \    let extension = &file_name[extension_start..extension_end];\n    if prefix.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_prefix && valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if c == '.' {\n            extension\
    \ = String::from(&file_name[(file_name.find('.').unwrap() + 1)..]);\n        \
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \                is_extension_valid = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut is_extension_empty\
    \ = true;\n    let mut is_extension_valid_list = vec![\"txt\", \"exe\", \"dll\"\
    ];\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n        if is_first_letter\
    \ {\n            if c.is_alphabetic() {\n                is_first_letter_valid\
    \ = true;\n                is_first_letter = false;\n            } else {\n  \
    \              is_valid = false;\n                break;\n            }\n    \
    \    }\n    }\n    if is_valid {\n        if digits_count > 3 {\n            is_valid\
    \ = false;\n        }\n        if dot_count != 1 {\n            is_valid = false;\n\
    \        }\n        if dot_index == 0 {\n            is_valid = false;\n     \
    \   }\n        if is_valid {\n            let extension = &file_name[dot_index\
    \ + 1..];\n            for ext in is_extension_valid_list.iter() {\n         \
    \       if extension == *ext {\n                    is_extension_valid = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ !is_extension_valid {\n                is_valid = false;\n            }\n  \
    \      }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            for (j, c) in\
    \ file_name.chars().enumerate() {\n                if j > i {\n              \
    \      extension.push(c);\n                }\n            }\n        }\n     \
    \   if i < file_name.len() - 4 {\n            prefix.push(c);\n        }\n   \
    \ }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if prefix.len() == 0 {\n     \
    \   is_valid = false;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_prefix {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_before_dot = true;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_digit = false;\n\
    \    let mut is_letter = false;\n    let mut is_dot = false;\n    let mut is_valid_after_dot\
    \ = false;\n    let mut is_valid_before_dot = false;\n    let mut is_valid_digit\
    \ = false;\n    let mut is_valid_letter = false;\n    let mut is_valid_dot = false;\n\
    \    let mut is_valid_file_name = false;\n    let mut is_valid_file_name_after_dot\
    \ = false;\n    let mut is_valid_file_name_before_dot = false;\n    let mut is_valid_file_name_digit\
    \ = false;\n    let mut is_valid_file_name_letter = false;\n    let mut is_valid_file_name_dot\
    \ = false;\n    let mut is_valid_file_name_count = false;\n    let mut is_valid_file_name_count_after_dot\
    \ = false;\n    let mut is_valid_file_name_count_before_dot = false;\n    let\
    \ mut is_valid_file_name_count_digit = false;\n    let mut is_valid_file_name_count_letter\
    \ = false;\n    let mut is_valid_file_name_count_dot = false;\n    let mut is_valid_file_name_count_valid\
    \ = false;\n    let mut is_valid_file_name_count_valid_after_dot = false;\n  \
    \  let mut is_valid_file_name_count_valid_before_dot = false;\n    let mut is_valid_file_name_count_valid_digit\
    \ = false;\n    let mut is_valid_file_name_count_valid_letter = false;\n   ",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut prefix_is_valid\
    \ = false;\n    let mut suffix_is_valid = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut suffix_start = 0;\n    let mut suffix_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            prefix_end = i;\n            suffix_start\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            prefix_is_valid\
    \ = true;\n            prefix_start = i;\n        }\n        if c == 't' {\n \
    \           suffix_is_valid = true;\n            suffix_end = i + 1;\n       \
    \ }\n    }\n    if digits_count > 3 || dot_count != 1 || !prefix_is_valid || !suffix_is_valid\
    \ {\n        return String::from(\"No\");\n    }\n    let prefix = &file_name[prefix_start..prefix_end];\n\
    \    let suffix = &file_name[suffix_start..suffix_end];\n    if prefix.is_empty()\
    \ || suffix != \"txt\" {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    let prefix = &file_name[..dot_index];\n\
    \    if prefix.is_empty() {\n        return String::from(\"No\");\n    }\n   \
    \ for c in prefix.chars() {\n        if c.is_alphabetic() {\n            valid_prefix\
    \ = true;\n            break;\n        }\n    }\n    if !valid_prefix {\n    \
    \    return String::from(\"No\");\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    if valid_extension {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_first_after_dot = true;\n    let mut is_first_after_dot_valid\
    \ = false;\n    let mut is_second_after_dot_valid = false;\n    let mut is_third_after_dot_valid\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n            if digits_count > 3 {\n           \
    \     is_valid = false;\n                break;\n            }\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            if dot_count > 1 {\n\
    \                is_valid = false;\n                break;\n            }\n  \
    \          is_first_letter = false;\n            is_first_after_dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if is_first_letter {\n   \
    \             is_first_letter = false;\n            } else if is_first_after_dot\
    \ {\n                is_first_after_dot = false;\n                if c == 't'\
    \ {\n                    is_first_after_dot_valid = true;\n                } else\
    \ {\n                    is_valid = false;\n                    break;\n     \
    \           }\n            } else if is_first_after_dot_valid {\n            \
    \    if c == 'x' {\n                    is_second_after_dot_valid = true;\n  \
    \              } else {\n                    is_valid = false;\n             \
    \       break;\n                }\n            } else if is_second_after_dot_valid\
    \ {\n                if c == 'e' {\n                    is_third_after_dot_valid\
    \ = true;\n                } else {\n                    is_valid = false;\n \
    \                   break;\n                }\n            } else if is_third_after_dot_valid\
    \ {\n                is_valid = false;\n                break;\n            }\n\
    \        } else {\n            is_valid = false;\n            break;\n       \
    \ }\n    }\n    if is_valid", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension_start_index =\
    \ 0;\n    let mut extension_end_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut is_extension_empty = true;\n    let mut is_substring_before_dot_empty\
    \ = true;\n    let mut is_substring_after_dot_empty = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut substring_before_dot_start_index\
    \ = 0;\n    let mut substring_before_dot_end_index = 0;\n    let mut substring_after_dot_start_index\
    \ = 0;\n    let mut substring_after_dot_end_index = 0;\n    let mut substring_before_dot_length\
    \ = 0;\n    let mut substring_after_dot_length = 0;\n    let mut is_substring_before_dot_valid_length\
    \ = false;\n    let mut is_substring_after_dot_valid_length = false;\n    let\
    \ mut is_substring_before_dot_valid_first_char = false;\n    let mut is_substring_after_dot_valid_first_char\
    \ = false;\n    let mut is_substring_before_dot_valid_last_char = false;\n   \
    \ let mut is_substring_after_dot_valid_last_char = false;\n    let mut is_substring_before_dot_valid_char\
    \ = false;\n    let mut is_substring_after_dot_valid_char = false;\n    let mut\
    \ is_substring_before_dot_valid_char_count = false;\n    let mut is_substring_after_dot_valid_char_count\
    \ = false;\n    let mut is_substring_before_dot_valid_char_count_digits = false;\n\
    \    let mut is_substring_after_dot_valid_char", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if c.is_alphabetic() {\n            is_letter = true;\n       \
    \ }\n        if c == '.' && !is_empty {\n            is_extension = true;\n  \
    \      }\n        if is_extension {\n            extension.push(c);\n        }\
    \ else {\n            name.push(c);\n        }\n        is_empty = false;\n  \
    \  }\n    if digits_count > 3 || dot_count != 1 || !is_letter {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        if extension != \".txt\" && extension\
    \ != \".exe\" && extension != \".dll\" {\n            is_valid = false;\n    \
    \    }\n    }\n    if is_valid {\n        return String::from(\"Yes\");\n    }\
    \ else {\n        return String::from(\"No\");\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut prefix = String::new();\n    let\
    \ mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            prefix = file_name[..i].to_string();\n\
    \            extension = file_name[i+1..].to_string();\n        }\n    }\n   \
    \ if digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count\
    \ != 1 {\n        return String::from(\"No\");\n    }\n    if prefix.len() ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_prefix && valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_part_empty = true;\n    let mut\
    \ first_part_valid = false;\n    let mut second_part_valid = false;\n    let mut\
    \ second_part_start = false;\n    let mut second_part_end = false;\n    let mut\
    \ second_part_valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut\
    \ second_part_extension = String::new();\n    for c in file_name.chars() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        }\n     \
    \   if digits_count > 3 {\n            return String::from(\"No\");\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            first_part_empty\
    \ = false;\n            second_part_start = true;\n        }\n        if first_part_empty\
    \ {\n            if c.is_alphabetic() {\n                first_part_valid = true;\n\
    \            }\n        }\n        if second_part_start {\n            if second_part_end\
    \ {\n                if second_part_extension == second_part_valid_extensions[0]\
    \ ||\n                    second_part_extension == second_part_valid_extensions[1]\
    \ ||\n                    second_part_extension == second_part_valid_extensions[2]\
    \ {\n                    second_part_valid = true;\n                }\n      \
    \      } else {\n                second_part_extension.push(c);\n            }\n\
    \        }\n    }\n    if dot_count != 1 || !first_part_valid || !second_part_valid\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut extension_valid = vec![\"txt\",\
    \ \"exe\", \"dll\"];\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c.is_alphabetic() {\n          \
    \  is_letter = true;\n        }\n        if c == '.' {\n            is_extension\
    \ = true;\n        }\n        if is_extension {\n            extension.push(c);\n\
    \        }\n    }\n    for i in extension_valid {\n        if extension == i {\n\
    \            is_extension_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_empty {\n        is_valid = false;\n    }\n    if\
    \ !is_letter {\n        is_valid = false;\n    }\n    if !is_extension_valid {\n\
    \        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_dot = true;\n    let mut is_first_letter_after_dot\
    \ = true;\n    let mut is_first_letter_after_dot_valid = false;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_first_letter_after_dot_valid_count = 0;\n    let mut\
    \ is_first_letter_valid_count = 0;\n    let mut is_first_letter_after_dot_valid_count_valid\
    \ = false;\n    let mut is_first_letter_valid_count_valid = false;\n    let mut\
    \ is_first_letter_after_dot_valid_count_valid_count = 0;\n    let mut is_first_letter_valid_count_valid_count\
    \ = 0;\n    let mut is_first_letter_after_dot_valid_count_valid_count_valid =\
    \ false;\n    let mut is_first_letter_valid_count_valid_count_valid = false;\n\
    \    let mut is_first_letter_after_dot_valid_count_valid_count_valid_count = 0;\n\
    \    let mut is_first_letter_valid_count_valid_count_valid_count = 0;\n    let\
    \ mut is_first_letter_after_dot_valid_count_valid_count_valid_count_valid = false;\n\
    \    let mut is_first_letter_valid_count_valid_count_valid_count_valid = false;\n\
    \    let mut is_first_letter_after_dot_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_letter_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_letter_after_dot_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_first_letter_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_first_letter_", "    let mut digits = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits > 3\
    \ || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut split = file_name.split('.');\n\
    \    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n\
    \    if first.is_empty() || !first.chars().next().unwrap().is_alphabetic() {\n\
    \        is_valid = false;\n    }\n    if second != \"txt\" && second != \"exe\"\
    \ && second != \"dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut first_letter = true;\n    let mut first_letter_index = 0;\n\
    \    let mut last_letter_index = 0;\n    let mut extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_ascii_digit()\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n        if c.is_ascii_alphabetic()\
    \ {\n            if first_letter {\n                first_letter = false;\n  \
    \              first_letter_index = i;\n            }\n            last_letter_index\
    \ = i;\n        }\n    }\n    if digits > 3 || dot_count != 1 || first_letter_index\
    \ == dot_index - 1 {\n        return String::from(\"No\");\n    }\n    for c in\
    \ file_name.chars().skip(dot_index + 1) {\n        extension.push(c);\n    }\n\
    \    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut prefix_length = 0;\n    let mut extension_start_found = false;\n\
    \    let mut prefix_end_found = false;\n    let mut extension_end_found = false;\n\
    \    let mut prefix_start_found = false;\n    let mut is_valid_prefix_length =\
    \ false;\n    let mut is_valid_extension_length = false;\n    let mut is_valid_prefix_start\
    \ = false;\n    let mut is_valid_extension_start = false;\n    let mut is_valid_prefix_end\
    \ = false;\n    let mut is_valid_extension_end = false;\n    let mut is_valid_dot_count\
    \ = false;\n    let mut is_valid_digits_count = false;\n    let mut is_valid_prefix_content\
    \ = false;\n    let mut is_valid_extension_content = false;\n    let mut is_valid_prefix_content_length\
    \ = false;\n    let mut is_valid_extension_content_length = false;\n    let mut\
    \ is_valid_prefix_content_start = false;\n    let mut is_valid_extension_content_start\
    \ = false;\n    let mut is_valid_prefix_content_end = false;\n    let mut is_valid_extension_content_end\
    \ = false;\n    let mut is_valid_prefix_content_content = false;\n    let mut\
    \ is_valid_extension_content_content = false;\n    let mut is_valid_prefix_content_content_length\
    \ = false;\n    let mut is_valid_extension_content_content_length = false;\n \
    \   let mut is_valid_prefix_content_content_start = false;\n    let mut is_valid_extension_content_content_start\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ first_part = String::new();\n    let mut second_part = String::new();\n    let\
    \ mut first_part_started = false;\n    let mut second_part_started = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       first_part_started = false;\n            second_part_started = true;\n\
    \        }\n        if first_part_started {\n            first_part.push(c);\n\
    \        }\n        if second_part_started {\n            second_part.push(c);\n\
    \        }\n        if c.is_alphabetic() {\n            first_part_started = true;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || first_part.is_empty()\
    \ || !first_part.chars().next().unwrap().is_alphabetic() || !(second_part == \"\
    txt\" || second_part == \"exe\" || second_part == \"dll\") {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut is_substring_before_dot_empty\
    \ = true;\n    let mut is_substring_after_dot_empty = true;\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_after_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            is_substring_before_dot_empty = false;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           is_substring_before_dot_valid = true;\n        }\n        if dot_count\
    \ == 1 {\n            if !is_substring_before_dot_empty {\n                substring_after_dot.push(c);\n\
    \            }\n        } else {\n            substring_before_dot.push(c);\n\
    \        }\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if digits_count > 3 {\n        is_valid = false;\n    }\n    if !is_substring_before_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if substring_after_dot == \"txt\" ||\
    \ substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n       \
    \ is_substring_after_dot_valid = true;\n    }\n    if !is_substring_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut first_char = true;\n\
    \    let mut first_char_is_letter = false;\n    let mut first_char_is_digit =\
    \ false;\n    let mut extension_is_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut extension_is_empty = true;\n    let mut extension_is_txt = false;\n\
    \    let mut extension_is_exe = false;\n    let mut extension_is_dll = false;\n\
    \    let mut extension_is_not_txt_exe_dll = false;\n    let mut extension_is_not_txt_exe_dll_and_empty\
    \ = false;\n    let mut extension_is_not_txt_exe_dll_and_not_empty = false;\n\
    \    let mut extension_is_txt_exe_dll_and_not_empty = false;\n    let mut extension_is_txt_exe_dll_and_empty\
    \ = false;\n    let mut extension_is_empty_and_first_char_is_digit = false;\n\
    \    let mut extension_is_not_empty_and_first_char_is_digit = false;\n    let\
    \ mut extension_is_empty_and_first_char_is_letter = false;\n    let mut extension_is_not_empty_and_first_char_is_letter\
    \ = false;\n    let mut extension_is_empty_and_first_char_is_not_letter = false;\n\
    \    let mut extension_is_not_empty_and_first_char_is_not_letter = false;\n  \
    \  let mut extension_is_empty_and_digit_count_is_more_than_three = false;\n  \
    \  let mut extension_is_not_empty_and_digit_count_is_more_than_three = false;\n\
    \    let mut extension_is_empty_and_digit_count_is_not_more_than_three = false;\n\
    \    let mut extension_is_not_empty_and_digit_count_is_not_more_than_three = false;",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut name_start = 0;\n    let mut name_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start = i + 1;\n        } else if c.is_alphabetic()\
    \ {\n            if !valid_name {\n                name_start = i;\n         \
    \       valid_name = true;\n            }\n            name_end = i + 1;\n   \
    \     }\n    }\n    if dot_count == 1 {\n        extension_end = file_name.len();\n\
    \        let extension = &file_name[extension_start..extension_end];\n       \
    \ if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            valid_extension = true;\n        }\n    }\n    if digits_count <=\
    \ 3 && valid_extension && valid_name {\n        return String::from(\"Yes\");\n\
    \    }\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter =\
    \ true;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = false;\n        }\n        if is_first_letter && !c.is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if !is_first_letter &&\
    \ !c.is_alphanumeric() {\n            is_valid = false;\n        }\n        if\
    \ !is_first_letter && c.is_alphabetic() {\n            extension.push(c);\n  \
    \      }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut count_digits =\
    \ 0;\n    let mut count_dots = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_first_letter = false;\n    let mut is_last_letter =\
    \ false;\n    let mut is_last_three_letters = false;\n    let mut is_last_three_letters_txt\
    \ = false;\n    let mut is_last_three_letters_exe = false;\n    let mut is_last_three_letters_dll\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll = false;\n    let mut\
    \ is_last_three_letters_txt_exe_dll_lowercase = false;\n    let mut is_last_three_letters_txt_exe_dll_uppercase\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_last_three_letters_txt_exe_dll_lowercase_uppercase_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut is_extension_empty = true;\n    let mut is_extension_started\
    \ = false;\n    let mut is_extension_finished = false;\n    let mut extension_index\
    \ = 0;\n    let mut extension_length = 0;\n    let mut extension_start_index =\
    \ 0;\n    let mut extension_end_index = 0;\n    let mut extension_start_index_valid\
    \ = false;\n    let mut extension_end_index_valid = false;\n    let mut extension_start_index_set\
    \ = false;\n    let mut extension_end_index_set = false;\n    let mut extension_start_index_set_valid\
    \ = false;\n    let mut extension_end_index_set_valid = false;\n    let mut extension_start_index_set_invalid\
    \ = false;\n    let mut extension_end_index_set_invalid = false;\n    let mut\
    \ extension_start_index_set_invalid_count = 0;\n    let mut extension_end_index_set_invalid_count\
    \ = 0;\n    let mut extension_start_index_set_invalid_count_valid = false;\n \
    \   let mut extension_end_index_set_invalid_count_valid = false;\n    let mut\
    \ extension_start_index_set_invalid_count_valid_count = 0;\n    let mut extension_end_index_set_invalid_count_valid_count\
    \ = 0;\n    let mut extension_start_index_set_invalid_count_valid_count_valid\
    \ = false;\n    let mut extension_end_index_set_invalid_count_valid_count_valid\
    \ = false;\n    let mut extension_start_index_set_invalid_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_end_index_set_invalid_count_valid_count_valid_count\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut extension_start\
    \ = 0;\n    let mut prefix_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            prefix_end\
    \ = i;\n        }\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if extension_start == file_name.len() {\n        return String::from(\"\
    No\");\n    }\n    if extension_start - prefix_end == 1 {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if file_name[..prefix_end].chars().all(|c| c.is_alphabetic())\
    \ {\n        valid_prefix = true;\n    }\n    if valid_extension && valid_prefix\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot_pos = 0;\n    let mut dot_found\
    \ = false;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut valid_file_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_pos = i;\n            dot_found = true;\n  \
    \      }\n    }\n    if digits <= 3 && dot_found {\n        valid_file_name =\
    \ true;\n    }\n    if valid_file_name {\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if i < dot_pos {\n                name.push(c);\n           \
    \ }\n            if i > dot_pos {\n                extension.push(c);\n      \
    \      }\n        }\n        if name.len() > 0 && name.chars().next().unwrap().is_alphabetic()\
    \ {\n            valid_name = true;\n        }\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if valid_file_name && valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ first_letter = false;\n    let mut extension = false;\n    let mut extension_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if !first_letter && c.is_alphabetic()\
    \ {\n            first_letter = true;\n        }\n        if dot_count == 1 &&\
    \ !extension {\n            extension = true;\n        }\n        if extension\
    \ {\n            extension_str.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !first_letter ||\n        !(extension_str == \"txt\"\
    \ || extension_str == \"exe\" || extension_str == \"dll\") {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n\
    \    let mut last_three_chars = String::from(\"\");\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !first_char_is_letter\
    \ && c.is_alphabetic() {\n            first_char_is_letter = true;\n        }\n\
    \        last_three_chars.push(c);\n        if last_three_chars.len() > 3 {\n\
    \            last_three_chars.remove(0);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !first_char_is_letter ||\n        !(last_three_chars\
    \ == \"txt\" || last_three_chars == \"exe\" || last_three_chars == \"dll\") {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut valid_file_name = true;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid_file_name = false;\n\
    \    }\n    if dot_count != 1 {\n        valid_file_name = false;\n    }\n   \
    \ if valid_file_name {\n        extension = file_name.chars().skip(dot_index +\
    \ 1).collect();\n        name = file_name.chars().take(dot_index).collect();\n\
    \        if name.is_empty() {\n            valid_file_name = false;\n        }\n\
    \        if name.chars().next().unwrap().is_alphabetic() {\n            valid_name\
    \ = true;\n        }\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            valid_extension = true;\n        }\n\
    \        if !valid_name || !valid_extension {\n            valid_file_name = false;\n\
    \        }\n    }\n    if valid_file_name {\n        String::from(\"Yes\")\n \
    \   } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_extension_start_letter = true;\n    let mut is_valid_extension_end_letter\
    \ = true;\n    let mut is_valid_prefix_start_letter = true;\n    let mut is_valid_prefix_end_letter\
    \ = true;\n    let mut is_valid_extension_start_digit = true;\n    let mut is_valid_extension_end_digit\
    \ = true;\n    let mut is_valid_prefix_start_digit = true;\n    let mut is_valid_prefix_end_digit\
    \ = true;\n    let mut is_valid_extension_start_symbol = true;\n    let mut is_valid_extension_end_symbol\
    \ = true;\n    let mut is_valid_prefix_start_symbol = true;\n    let mut is_valid_prefix_end_symbol\
    \ = true;\n    let mut is_valid_extension_start_lowercase = true;\n    let mut\
    \ is_valid_extension_end_lowercase = true;\n    let mut is_valid_prefix_start_lowercase\
    \ = true;\n    let mut is_valid_prefix_end_lowercase = true;\n    let mut is_valid_extension_start_uppercase\
    \ = true;\n    let mut is_valid_extension_end_uppercase = true;\n    let mut is_valid_prefix_start_uppercase\
    \ = true;\n    let mut is_valid", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_ext = false;\n\
    \    let mut is_valid_name = false;\n    let mut is_valid_name_start = false;\n\
    \    let mut is_valid_name_end = false;\n    let mut is_valid_ext_start = false;\n\
    \    let mut is_valid_ext_end = false;\n    let mut is_valid_ext_content = false;\n\
    \    let mut is_valid_name_content = false;\n    let mut is_valid_name_content_start\
    \ = false;\n    let mut is_valid_name_content_end = false;\n    let mut is_valid_ext_content_start\
    \ = false;\n    let mut is_valid_ext_content_end = false;\n    let mut is_valid_ext_content_content\
    \ = false;\n    let mut is_valid_name_content_content = false;\n    let mut is_valid_name_content_content_start\
    \ = false;\n    let mut is_valid_name_content_content_end = false;\n    let mut\
    \ is_valid_ext_content_content_start = false;\n    let mut is_valid_ext_content_content_end\
    \ = false;\n    let mut is_valid_ext_content_content_content = false;\n    let\
    \ mut is_valid_name_content_content_content = false;\n    let mut is_valid_name_content_content_content_start\
    \ = false;\n    let mut is_valid_name_content_content_content_end = false;\n \
    \   let mut is_valid_ext_content_content_content_start = false;\n    let mut is_valid_ext_content_content_content_end\
    \ = false;\n    let mut is_valid_ext_content_content_content_content = false;\n\
    \    let mut is_valid_name_content_content_content_content = false;\n    let mut\
    \ is_valid_name_content_content_content_content_start = false;\n    let mut is_valid_name_content_content_content_content_end\
    \ = false;\n    let mut is_", "    let mut counter = 0;\n    let mut dot_counter\
    \ = 0;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            counter\
    \ += 1;\n        }\n        if c == '.' {\n            dot_counter += 1;\n   \
    \     }\n    }\n    if counter > 3 || dot_counter != 1 {\n        return String::from(\"\
    No\");\n    }\n    let mut iter = file_name.split('.');\n    name = iter.next().unwrap().to_string();\n\
    \    extension = iter.next().unwrap().to_string();\n    if name.len() == 0 ||\
    \ !name.chars().next().unwrap().is_alphabetic() {\n        return String::from(\"\
    No\");\n    }\n    if extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\" {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_first_after_dot = true;\n    let mut is_first_before_dot\
    \ = true;\n    let mut is_first_after_dot_valid = false;\n    let mut is_first_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_valid_count = 0;\n    let mut is_before_dot_valid_count\
    \ = 0;\n    let mut is_after_dot_empty_count = 0;\n    let mut is_before_dot_empty_count\
    \ = 0;\n    let mut is_after_dot_valid_count_max = 0;\n    let mut is_before_dot_valid_count_max\
    \ = 0;\n    let mut is_after_dot_empty_count_max = 0;\n    let mut is_before_dot_empty_count_max\
    \ = 0;\n    let mut is_after_dot_valid_count_min = 0;\n    let mut is_before_dot_valid_count_min\
    \ = 0;\n    let mut is_after_dot_empty_count_min = 0;\n    let mut is_before_dot_empty_count_min\
    \ = 0;\n    let mut is_after_dot_valid_count_avg = 0;\n    let mut is_before_dot_valid_count_avg\
    \ = 0;\n    let mut is_after_dot_empty_count_avg = 0;\n    let mut is_before_dot_empty_count_avg\
    \ = 0;\n    let mut is_after_dot_valid_count_med = 0;\n    let mut is_before_dot_valid_count_med\
    \ = 0;\n    let mut is_after_dot_empty_count_med = 0;\n    let mut", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_prefix = false;\n    let mut is_valid_digits = true;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n        if digits_count > 3 {\n\
    \            is_valid_digits = false;\n        }\n    }\n    if dot_count != 1\
    \ {\n        is_valid = false;\n    }\n    if dot_index == 0 {\n        is_valid\
    \ = false;\n    }\n    if dot_index == file_name.len() - 1 {\n        is_valid\
    \ = false;\n    }\n    if !is_valid_digits {\n        is_valid = false;\n    }\n\
    \    let extension = &file_name[dot_index + 1..];\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    }\n    if is_valid_extension {\n        let prefix = &file_name[..dot_index];\n\
    \        if prefix.len() > 0 {\n            for c in prefix.chars() {\n      \
    \          if c.is_alphabetic() {\n                    is_valid_prefix = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    if is_valid && is_valid_extension && is_valid_prefix {\n        return\
    \ String::from(\"Yes\");\n    }\n    String::from(\"No\")", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut prefix_started = false;\n    let\
    \ mut extension_started = false;\n    let mut prefix = String::new();\n    let\
    \ mut extension = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        } else if c == '.'\
    \ {\n            dot_count += 1;\n            prefix_started = false;\n      \
    \      extension_started = true;\n        } else if c.is_alphabetic() {\n    \
    \        if !prefix_started {\n                prefix_started = true;\n      \
    \          extension_started = false;\n            }\n            if prefix_started\
    \ {\n                prefix.push(c);\n            }\n            if extension_started\
    \ {\n                extension.push(c);\n            }\n        }\n    }\n   \
    \ if digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count\
    \ != 1 {\n        return String::from(\"No\");\n    }\n    if prefix.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_prefix && valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n    let\
    \ mut last_three_chars_are_valid = false;\n    let mut last_three_chars = String::from(\"\
    \");\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n        \
    \    digits_count += 1;\n        } else if c == '.' {\n            dot_count +=\
    \ 1;\n        } else if c.is_alphabetic() {\n            first_char_is_letter\
    \ = true;\n        }\n        last_three_chars.push(c);\n        if last_three_chars.len()\
    \ > 3 {\n            last_three_chars.remove(0);\n        }\n        if last_three_chars\
    \ == \"txt\" || last_three_chars == \"exe\" || last_three_chars == \"dll\" {\n\
    \            last_three_chars_are_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !first_char_is_letter || !last_three_chars_are_valid\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension_index = 0;\n    let mut extension_length = 0;\n    let\
    \ mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extensions_length\
    \ = vec![3, 3, 3];\n    let mut valid_extensions_index = 0;\n    for (index, c)\
    \ in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        } else if c.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if c.is_alphabetic() {\n     \
    \       if is_first_letter {\n                is_first_letter = false;\n     \
    \           is_first_letter_valid = c.is_ascii_alphabetic();\n            }\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid\
    \ {\n        is_valid = false;\n    } else {\n        extension_index = dot_index\
    \ + 1;\n        extension_length = file_name.len() - extension_index;\n      \
    \  for (index, ext) in valid_extensions.iter().enumerate() {\n            if extension_length\
    \ == valid_extensions_length[index] {\n                if &file_name[extension_index..]\
    \ == ext {\n                    is_extension_valid = true;\n                 \
    \   valid_extensions_index = index;\n                    break;\n            \
    \    }\n            }\n        }\n        if !is_extension_valid {\n         \
    \   is_valid = false;\n        }\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let mut dot_index = 0;\n        for (i, c)\
    \ in file_name.chars().enumerate() {\n            if c == '.' {\n            \
    \    dot_index = i;\n                break;\n            }\n        }\n      \
    \  let (before_dot, after_dot) = file_name.split_at(dot_index);\n        if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        }\n        if after_dot != \".txt\" && after_dot != \".exe\"\
    \ && after_dot != \".dll\" {\n            is_valid = false;\n        }\n    }\n\
    \    if is_valid {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_extension_start_letter = true;\n    let mut is_valid_extension_end_letter\
    \ = true;\n    let mut is_valid_prefix_start_letter = true;\n    let mut is_valid_prefix_end_letter\
    \ = true;\n    let mut is_valid_extension_start_digit = true;\n    let mut is_valid_extension_end_digit\
    \ = true;\n    let mut is_valid_prefix_start_digit = true;\n    let mut is_valid_prefix_end_digit\
    \ = true;\n    let mut is_valid_extension_start_underscore = true;\n    let mut\
    \ is_valid_extension_end_underscore = true;\n    let mut is_valid_prefix_start_underscore\
    \ = true;\n    let mut is_valid_prefix_end_underscore = true;\n    let mut is_valid_extension_start_hyphen\
    \ = true;\n    let mut is_valid_extension_end_hyphen = true;\n    let mut is_valid_prefix_start_hyphen\
    \ = true;\n    let mut is_valid_prefix_end_hyphen = true;\n    let mut is_valid_extension_start_space\
    \ = true;\n    let mut is_valid_extension_end_space = true;\n    let mut is_valid_prefix_start_space\
    \ = true;\n    let mut is_valid_prefix_end_space = true;\n    let mut is_valid",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = true;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           if is_first_letter {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            }\n        } else {\n \
    \           is_valid = false;\n            break;\n        }\n        if dot_count\
    \ == 1 {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if !is_first_letter_valid {\n        is_valid = false;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        is_extension_valid = true;\n    }\n    if !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_prefix_start = false;\n    let mut is_valid_prefix_end = false;\n \
    \   let mut is_valid_extension_start = false;\n    let mut is_valid_extension_end\
    \ = false;\n    let mut is_valid_extension_content = false;\n    let mut is_valid_prefix_content\
    \ = false;\n    let mut is_valid_prefix_content_start = false;\n    let mut is_valid_prefix_content_end\
    \ = false;\n    let mut is_valid_extension_content_start = false;\n    let mut\
    \ is_valid_extension_content_end = false;\n    let mut is_valid_extension_content_content\
    \ = false;\n    let mut is_valid_prefix_content_content = false;\n    let mut\
    \ is_valid_prefix_content_content_start = false;\n    let mut is_valid_prefix_content_content_end\
    \ = false;\n    let mut is_valid_extension_content_content_start = false;\n  \
    \  let mut is_valid_extension_content_content_end = false;\n    let mut is_valid_extension_content_content_content\
    \ = false;\n    let mut is_valid_prefix_content_content_content = false;\n   \
    \ let mut is_valid_prefix_content_content_content_start = false;\n    let mut\
    \ is_valid_prefix_content_content_content_end = false;\n    let mut is_valid_extension_content_content_content_start\
    \ = false;\n    let mut is_valid_extension_content_content_content_end = false;\n\
    \    let mut is_valid_extension_content_content_content_content = false;\n   \
    \ let mut is_valid_prefix_content_content_content_content = false;\n    let mut\
    \ is_valid_prefix_content_content_content_content_start = false;\n    let mut\
    \ is_valid_prefix_content_content_content", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_extension_valid =\
    \ false;\n    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_digit_valid = false;\n    let mut is_dot_valid = false;\n\
    \    let mut is_first_char_valid = false;\n    let mut is_last_char_valid = false;\n\
    \    let mut is_extension_valid_count = 0;\n    let mut is_before_dot_valid_count\
    \ = 0;\n    let mut is_after_dot_valid_count = 0;\n    let mut is_digit_valid_count\
    \ = 0;\n    let mut is_dot_valid_count = 0;\n    let mut is_first_char_valid_count\
    \ = 0;\n    let mut is_last_char_valid_count = 0;\n    let mut is_extension_valid_count_max\
    \ = 0;\n    let mut is_before_dot_valid_count_max = 0;\n    let mut is_after_dot_valid_count_max\
    \ = 0;\n    let mut is_digit_valid_count_max = 0;\n    let mut is_dot_valid_count_max\
    \ = 0;\n    let mut is_first_char_valid_count_max = 0;\n    let mut is_last_char_valid_count_max\
    \ = 0;\n    let mut is_extension_valid_count_min = 0;\n    let mut is_before_dot_valid_count_min\
    \ = 0;\n    let mut is_after_dot_valid_count_min = 0;\n    let mut is_digit_valid_count_min\
    \ = 0;\n    let mut is_dot_valid_count_min = 0;\n    let mut is_first_char_valid_count_min\
    \ = 0;\n    let mut is_last_char_valid_count_min = 0;\n    let mut is_extension_valid_count_avg\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_after_dot_txt = false;\n    let mut is_after_dot_exe\
    \ = false;\n    let mut is_after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        }\n        if is_before_dot\
    \ {\n            if c.is_alphabetic() {\n                is_before_dot_valid =\
    \ true;\n            }\n        }\n        if is_after_dot {\n            if c\
    \ == 't' {\n                is_after_dot_txt = true;\n            }\n        \
    \    if c == 'e' {\n                is_after_dot_exe = true;\n            }\n\
    \            if c == 'd' {\n                is_after_dot_dll = true;\n       \
    \     }\n            if c == 'x' {\n                if is_after_dot_txt {\n  \
    \                  is_after_dot_valid = true;\n                }\n           \
    \     if is_after_dot_exe {\n                    is_after_dot_valid = true;\n\
    \                }\n            }\n            if c == 'l' {\n               \
    \ if is_after_dot_dll {\n                    is_after_dot_valid = true;\n    \
    \            }\n            }\n        }\n    }\n    if digits_count > 3 {\n \
    \       is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid =\
    \ false;\n    }\n    if !is_before_dot_valid {\n        is_valid = false;\n  \
    \  }\n    if !is_after_dot_valid {\n        is_valid = false;\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_found = false;\n    let mut dot_index\
    \ = 0;\n    let mut valid_substring_after_dot = false;\n    let mut valid_substring_before_dot\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_found = true;\n            dot_index = i;\n        }\n    }\n    if\
    \ digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if !dot_found\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_index == 0 {\n  \
    \      return String::from(\"No\");\n    }\n    if dot_index == file_name.len()\
    \ - 1 {\n        return String::from(\"No\");\n    }\n    let substring_after_dot\
    \ = &file_name[dot_index + 1..];\n    let substring_before_dot = &file_name[..dot_index];\n\
    \    if substring_after_dot == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot\
    \ == \"dll\" {\n        valid_substring_after_dot = true;\n    }\n    if substring_before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_substring_before_dot = true;\n    }\n    if valid_substring_after_dot\
    \ && valid_substring_before_dot {\n        return String::from(\"Yes\");\n   \
    \ }\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n            extension = file_name[i+1..].to_string();\n  \
    \          name = file_name[..i].to_string();\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if name.chars().next().unwrap().is_alphabetic() {\n        valid_name = true;\n\
    \    }\n    if valid_extension && valid_name {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let (prefix, suffix) = file_name.split_at(dot_index);\n        if prefix.is_empty()\
    \ || !prefix.chars().next().unwrap().is_alphabetic() {\n            is_valid =\
    \ false;\n        }\n        if suffix != \".txt\" && suffix != \".exe\" && suffix\
    \ != \".dll\" {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if is_first_letter {\n   \
    \         if c.is_alphabetic() {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            }\n        }\n        if\
    \ c == '.' {\n            extension = String::from(\"\");\n        } else if c\
    \ != '.' {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if !is_first_letter_valid {\n        is_valid = false;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        is_extension_valid = true;\n    }\n    if !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_empty = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            is_digit = true;\n            is_letter\
    \ = false;\n            is_dot = false;\n            is_empty = false;\n     \
    \       if is_before_dot {\n                digits_count += 1;\n            }\n\
    \        } else if c.is_alphabetic() {\n            is_digit = false;\n      \
    \      is_letter = true;\n            is_dot = false;\n            is_empty =\
    \ false;\n        } else if c == '.' {\n            is_digit = false;\n      \
    \      is_letter = false;\n            is_dot = true;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n            dot_count += 1;\n  \
    \      } else {\n            is_valid = false;\n            break;\n        }\n\
    \        if is_before_dot && is_letter {\n            is_before_dot_valid = true;\n\
    \        }\n        if is_after_dot && is_letter {\n            is_after_dot_valid\
    \ = true;\n            extension.push(c);\n        }\n    }\n    if is_after_dot_valid\
    \ && extension == \"txt\" {\n        is_valid_extension = true;\n    } else if\
    \ is_after_dot_valid && extension == \"exe\" {\n        is_valid_extension = true;\n\
    \    } else if is_after_dot_valid && extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    }\n    if is_", "    let mut digits = 0;\n    let mut dot_count\
    \ = 0;\n    let mut has_letter = false;\n    let mut has_dot = false;\n    let\
    \ mut has_extension = false;\n    let mut extension_is_valid = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_len\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            has_dot = true;\n \
    \           extension_start = i + 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            has_letter = true;\n        }\n    }\n    if has_dot {\n    \
    \    extension_end = file_name.len();\n        extension_len = extension_end -\
    \ extension_start;\n        extension = file_name[extension_start..extension_end].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            extension_is_valid = true;\n        }\n    }\n    if digits <=\
    \ 3 && dot_count == 1 && has_letter && extension_is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut first_part = String::new();\n  \
    \  let mut second_part = String::new();\n    let mut first_part_started = false;\n\
    \    let mut second_part_started = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            first_part_started\
    \ = false;\n            second_part_started = true;\n        }\n        if first_part_started\
    \ {\n            first_part.push(c);\n        }\n        if second_part_started\
    \ {\n            second_part.push(c);\n        }\n        if c.is_alphabetic()\
    \ {\n            first_part_started = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ || !(second_part == \".txt\" || second_part == \".exe\" || second_part == \"\
    .dll\") {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_prefix = false;\n    let mut\
    \ extension_start = 0;\n    let mut extension_end = 0;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut i = 0;\n    while i < file_name.len()\
    \ {\n        let c = file_name.chars().nth(i).unwrap();\n        if c == '.' {\n\
    \            dot_count += 1;\n            extension_start = i + 1;\n         \
    \   extension_end = file_name.len();\n        } else if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        } else if c.is_alphabetic() {\n        \
    \    prefix_start = i;\n            prefix_end = i + 1;\n            while prefix_end\
    \ < file_name.len() && file_name.chars().nth(prefix_end).unwrap().is_alphabetic()\
    \ {\n                prefix_end += 1;\n            }\n            valid_prefix\
    \ = true;\n        }\n        i += 1;\n    }\n    if digits_count > 3 {\n    \
    \    return String::from(\"No\");\n    }\n    if dot_count != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if valid_extension {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut is_valid_digit = true;\n    let mut is_valid_dot = true;\n    let\
    \ mut is_valid_length = true;\n    let mut is_valid_prefix_length = true;\n  \
    \  let mut is_valid_extension_length = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_prefix_char = true;\n    let mut is_valid_dot_position\
    \ = true;\n    let mut is_valid_extension_position = true;\n    let mut is_valid_prefix_position\
    \ = true;\n    let mut is_valid_extension_position_2 = true;\n    let mut is_valid_prefix_position_2\
    \ = true;\n    let mut is_valid_extension_position_3 = true;\n    let mut is_valid_prefix_position_3\
    \ = true;\n    let mut is_valid_extension_position_4 = true;\n    let mut is_valid_prefix_position_4\
    \ = true;\n    let mut is_valid_extension_position_5 = true;\n    let mut is_valid_prefix_position_5\
    \ = true;\n    let mut is_valid_extension_position_6 = true;\n    let mut is_valid_prefix_position_6\
    \ = true;\n    let mut is_valid_extension_position_7 = true;\n    let mut is_valid_prefix_position_7\
    \ = true;\n    let mut is_valid_extension_position_8 = true;\n    let mut is_valid_prefix_position_8\
    \ = true;\n    let mut is_valid_extension_position_9 = true;\n    let mut is_valid_prefix_position_9\
    \ = true;\n    let mut is_valid_extension_position_10 = true;\n    let mut is_valid_prefix_position_10\
    \ = true;\n    let mut is_valid_extension_position_11 = true;\n    let mut is_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_file_name = true;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   let mut name_chars = file_name.chars();\n    let mut extension_chars = file_name.chars();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n        if c.is_digit(10) {\n            digits_count += 1;\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid_file_name = false;\n\
    \    }\n    if dot_count != 1 {\n        valid_file_name = false;\n    }\n   \
    \ if valid_file_name {\n        for c in name_chars {\n            if c == '.'\
    \ {\n                break;\n            }\n            name.push(c);\n      \
    \  }\n        for c in extension_chars.rev() {\n            if c == '.' {\n  \
    \              break;\n            }\n            extension.push(c);\n       \
    \ }\n        extension = extension.chars().rev().collect();\n        if name.len()\
    \ == 0 {\n            valid_file_name = false;\n        }\n        if name.chars().next().unwrap().is_alphabetic()\
    \ {\n            valid_name = true;\n        }\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n        if !valid_name || !valid_extension {\n         \
    \   valid_file_name = false;\n        }\n    }\n    if valid_file_name {\n   \
    \     return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension\
    \ = String::new();\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if dot_count\
    \ == 1 {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || extension != \".txt\" && extension != \".exe\" && extension\
    \ != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n       \
    \ String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension = String::new();\n\
    \    let mut file_name_chars = file_name.chars();\n    let mut current_char =\
    \ file_name_chars.next();\n    while let Some(c) = current_char {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n            if digits_count\
    \ > 3 {\n                is_valid = false;\n                break;\n         \
    \   }\n        } else if c == '.' {\n            dot_count += 1;\n           \
    \ if dot_count > 1 {\n                is_valid = false;\n                break;\n\
    \            }\n            extension_start_index = file_name.find(c).unwrap()\
    \ + 1;\n            extension_end_index = file_name.len();\n            extension\
    \ = file_name[extension_start_index..extension_end_index].to_string();\n     \
    \       is_first_letter = false;\n        } else if c.is_alphabetic() {\n    \
    \        if is_first_letter {\n                is_first_letter_valid = true;\n\
    \            }\n        } else {\n            is_valid = false;\n            break;\n\
    \        }\n        current_char = file_name_chars.next();\n    }\n    if is_valid\
    \ {\n        if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n            is_extension_valid = true;\n        }\n    }\n    if is_valid\
    \ && is_first_letter_valid && is_extension_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_part = String::new();\n\
    \    let mut second_part = String::new();\n    let mut first_part_started = false;\n\
    \    let mut second_part_started = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            first_part_started\
    \ = false;\n            second_part_started = true;\n        }\n        if first_part_started\
    \ {\n            first_part.push(c);\n        }\n        if second_part_started\
    \ {\n            second_part.push(c);\n        }\n        if c.is_alphabetic()\
    \ {\n            first_part_started = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ || !(second_part == \"txt\" || second_part == \"exe\" || second_part == \"dll\"\
    ) {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut is_digit = false;\n    let mut is_dot\
    \ = false;\n    let mut is_first_char = true;\n    let mut is_second_char = false;\n\
    \    let mut is_third_char = false;\n    let mut is_fourth_char = false;\n   \
    \ let mut is_fifth_char = false;\n    let mut is_sixth_char = false;\n    let\
    \ mut is_seventh_char = false;\n    let mut is_eighth_char = false;\n    let mut\
    \ is_ninth_char = false;\n    let mut is_tenth_char = false;\n    let mut is_eleventh_char\
    \ = false;\n    let mut is_twelfth_char = false;\n    let mut is_thirteenth_char\
    \ = false;\n    let mut is_fourteenth_char = false;\n    let mut is_fifteenth_char\
    \ = false;\n    let mut is_sixteenth_char = false;\n    let mut is_seventeenth_char\
    \ = false;\n    let mut is_eighteenth_char = false;\n    let mut is_nineteenth_char\
    \ = false;\n    let mut is_twentieth_char = false;\n    let mut is_twenty_first_char\
    \ = false;\n    let mut is_twenty_second_char = false;\n    let mut is_twenty_third_char\
    \ = false;\n    let mut is_twenty_fourth_char = false;\n    let mut is_twenty_fifth_char\
    \ = false;\n    let mut is_twenty_sixth_char = false;\n    let mut is_twenty_seventh_char\
    \ = false;\n    let mut is_twenty_eighth_char = false;\n    let mut is_twenty_ninth_char\
    \ = false;\n    let mut is_thirtieth_char = false;\n    let mut is_thirty_first_char\
    \ = false;\n    let mut is", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    for (index,\
    \ ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10) {\n     \
    \       digits_count += 1;\n        }\n        if ch == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (before_dot, after_dot) = file_name.split_at(dot_index);\n        if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        } else if after_dot != \".txt\" && after_dot != \".exe\" &&\
    \ after_dot != \".dll\" {\n            is_valid = false;\n        }\n    }\n \
    \   if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_prefix = false;\n    let mut extension = String::new();\n    let\
    \ mut prefix = String::new();\n    let mut chars = file_name.chars();\n    let\
    \ mut char_iter = file_name.chars();\n    let mut char_iter_2 = file_name.chars();\n\
    \    let mut char_iter_3 = file_name.chars();\n    let mut char_iter_4 = file_name.chars();\n\
    \    let mut char_iter_5 = file_name.chars();\n    let mut char_iter_6 = file_name.chars();\n\
    \    let mut char_iter_7 = file_name.chars();\n    let mut char_iter_8 = file_name.chars();\n\
    \    let mut char_iter_9 = file_name.chars();\n    let mut char_iter_10 = file_name.chars();\n\
    \    let mut char_iter_11 = file_name.chars();\n    let mut char_iter_12 = file_name.chars();\n\
    \    let mut char_iter_13 = file_name.chars();\n    let mut char_iter_14 = file_name.chars();\n\
    \    let mut char_iter_15 = file_name.chars();\n    let mut char_iter_16 = file_name.chars();\n\
    \    let mut char_iter_17 = file_name.chars();\n    let mut char_iter_18 = file_name.chars();\n\
    \    let mut char_iter_19 = file_name.chars();\n    let mut char_iter_20 = file_name.chars();\n\
    \    let mut char_iter_21 = file_name.chars();\n    let mut char_iter_22 = file_name.chars();\n\
    \    let mut char_iter_23 = file_name.chars();\n    let mut char_iter_24 = file_name.chars();\n\
    \    let mut char_iter_25 = file_name.chars();\n", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut letter_count = 0;\n    let mut extension_count\
    \ = 0;\n    let mut extension_is_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut extension_start_is_valid\
    \ = false;\n    let mut extension_end_is_valid = false;\n    let mut extension_is_valid_count\
    \ = 0;\n    let mut extension_is_valid_count_max = 0;\n    let mut extension_is_valid_count_max_index\
    \ = 0;\n    let mut extension_is_valid_count_max_index_start = 0;\n    let mut\
    \ extension_is_valid_count_max_index_end = 0;\n    let mut extension_is_valid_count_max_index_start_found\
    \ = false;\n    let mut extension_is_valid_count_max_index_end_found = false;\n\
    \    let mut extension_is_valid_count_max_index_start_is_valid = false;\n    let\
    \ mut extension_is_valid_count_max_index_end_is_valid = false;\n    let mut extension_is_valid_count_max_index_start_is_valid_count\
    \ = 0;\n    let mut extension_is_valid_count_max_index_end_is_valid_count = 0;\n\
    \    let mut extension_is_valid_count_max_index_start_is_valid_count_max = 0;\n\
    \    let mut extension_is_valid_count_max_index_end_is_valid_count_max = 0;\n\
    \    let mut extension_is_valid_count_max_index_start_is_valid_count_max_index\
    \ = 0;\n    let mut extension_is_valid_count_max_index_end_is_valid_count_max_index\
    \ = 0;\n    let mut extension_is_valid_count_max_index_start_is_valid_count_max_index_start\
    \ = 0;\n    let mut", "    let mut count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut letter_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            letter_count += 1;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 || letter_count == 0 {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        let mut file_name_parts = file_name.split('.');\n        let file_name_part\
    \ = file_name_parts.next().unwrap();\n        let file_extension = file_name_parts.next().unwrap();\n\
    \        if file_name_part.is_empty() || !(file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut extension = String::new();\n    let mut\
    \ valid_extension = false;\n    let mut valid_name = false;\n    let mut valid_file_name\
    \ = true;\n    let mut valid_digits_count = true;\n    let mut valid_dot_count\
    \ = true;\n    let mut valid_extension_count = true;\n    let mut valid_name_count\
    \ = true;\n    let mut valid_name_start = true;\n    let mut valid_name_end =\
    \ true;\n    let mut valid_extension_start = true;\n    let mut valid_extension_end\
    \ = true;\n    let mut valid_name_start_count = true;\n    let mut valid_name_end_count\
    \ = true;\n    let mut valid_extension_start_count = true;\n    let mut valid_extension_end_count\
    \ = true;\n    let mut valid_name_start_char = true;\n    let mut valid_name_end_char\
    \ = true;\n    let mut valid_extension_start_char = true;\n    let mut valid_extension_end_char\
    \ = true;\n    let mut valid_name_start_char_count = true;\n    let mut valid_name_end_char_count\
    \ = true;\n    let mut valid_extension_start_char_count = true;\n    let mut valid_extension_end_char_count\
    \ = true;\n    let mut valid_name_start_char_count_2 = true;\n    let mut valid_name_end_char_count_2\
    \ = true;\n    let mut valid_extension_start_char_count_2 = true;\n    let mut\
    \ valid_extension_end_char_count_2 = true;\n    let mut valid_name_start_char_count_3\
    \ = true;\n    let mut valid_name_end_char_count_3 = true;\n    let mut valid_extension_start_char_count_3\
    \ = true;\n    let mut valid_extension_end_char_count_3 = true;\n    let mut valid_name_start_char_count_4\
    \ = true;\n", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n   \
    \ let mut is_first_letter = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_valid_after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            is_after_dot = true;\n     \
    \       continue;\n        }\n        if is_after_dot {\n            if c == 't'\
    \ {\n                is_valid_after_dot = true;\n            } else if c == 'x'\
    \ && is_valid_after_dot {\n                is_valid_after_dot = true;\n      \
    \      } else if c == 'e' && is_valid_after_dot {\n                is_valid_after_dot\
    \ = true;\n            } else if c == 'd' && is_valid_after_dot {\n          \
    \      is_valid_after_dot = true;\n            } else if c == 'l' && is_valid_after_dot\
    \ {\n                is_valid_after_dot = true;\n            } else {\n      \
    \          is_valid_after_dot = false;\n            }\n        }\n        if is_first_letter\
    \ {\n            if !c.is_alphabetic() {\n                return String::from(\"\
    No\");\n            }\n            is_first_letter = false;\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_valid_after_dot {\n        return\
    \ String::from(\"No\");\n    }\n    return String::from(\"Yes\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let mut dot_index = 0;\n        for (i, c)\
    \ in file_name.chars().enumerate() {\n            if c == '.' {\n            \
    \    dot_index = i;\n                break;\n            }\n        }\n      \
    \  let substring_before_dot = &file_name[..dot_index];\n        let substring_after_dot\
    \ = &file_name[dot_index + 1..];\n        if substring_before_dot.is_empty() ||\
    \ !substring_before_dot.chars().next().unwrap().is_alphabetic() {\n          \
    \  is_valid = false;\n        }\n        if !(substring_after_dot == \"txt\" ||\
    \ substring_after_dot == \"exe\" || substring_after_dot == \"dll\") {\n      \
    \      is_valid = false;\n        }\n    }\n    if is_valid {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension_count =\
    \ 0;\n    let mut extension_valid = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut extension_valid_list = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    let mut extension_valid_list_iter = extension_valid_list.iter();\n\
    \    let mut extension_valid_list_iter_next = extension_valid_list_iter.next();\n\
    \    let mut extension_valid_list_iter_next_clone = extension_valid_list_iter_next.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone = extension_valid_list_iter_next_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone = extension_valid_list_iter_next_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone_clone = extension_valid_list_iter_next_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone_clone_clone = extension_valid_list_iter_next_clone_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_next_clone_clone_clone_clone_clone.clone();\n  \
    \  let mut extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_next_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_next_clone_clone_clone_clone_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_letter_index\
    \ = 0;\n    let mut last_letter_index = 0;\n    let mut first_letter_found = false;\n\
    \    let mut last_letter_found = false;\n    let mut extension_found = false;\n\
    \    let mut extension_index = 0;\n    let mut extension_length = 0;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_length_found\
    \ = false;\n    let mut extension_index_found = false;\n    let mut extension_found_found\
    \ = false;\n    let mut dot_index_found = false;\n    let mut first_letter_index_found\
    \ = false;\n    let mut last_letter_index_found = false;\n    let mut first_letter_found_found\
    \ = false;\n    let mut last_letter_found_found = false;\n    let mut dot_count_found\
    \ = false;\n    let mut digits_count_found = false;\n    let mut file_name_length\
    \ = file_name.len();\n    let mut file_name_length_found = false;\n    let mut\
    \ file_name_length_found_found = false;\n    let mut file_name_length_found_found_found\
    \ = false;\n    let mut file_name_length_found_found_found_found = false;\n  \
    \  let mut file_name_length_found_found_found_found_found = false;\n    let mut\
    \ file_name_length_found_found_found_found_found_found = false;\n    let mut file_name_length_found_found_found_found_found_found_found\
    \ = false;\n    let mut file_name_length_found_found_found_found_found_found_found_found\
    \ = false;\n    let mut file_name_length_found_found_found_found_found_found_found_found_found\
    \ = false;\n    let mut file_name_length_found_found_found_found_", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_name_end = false;\n    let mut valid_extension_start = false;\n\
    \    let mut valid_extension_end = false;\n    let mut valid_extension_content\
    \ = false;\n    let mut valid_name_content = false;\n    let mut valid_name_content_start\
    \ = false;\n    let mut valid_name_content_end = false;\n    let mut valid_extension_content_start\
    \ = false;\n    let mut valid_extension_content_end = false;\n    let mut valid_extension_content_content\
    \ = false;\n    let mut valid_name_content_content = false;\n    let mut valid_name_content_content_start\
    \ = false;\n    let mut valid_name_content_content_end = false;\n    let mut valid_extension_content_content_start\
    \ = false;\n    let mut valid_extension_content_content_end = false;\n    let\
    \ mut valid_extension_content_content_content = false;\n    let mut valid_name_content_content_content\
    \ = false;\n    let mut valid_name_content_content_content_start = false;\n  \
    \  let mut valid_name_content_content_content_end = false;\n    let mut valid_extension_content_content_content_start\
    \ = false;\n    let mut valid_extension_content_content_content_end = false;\n\
    \    let mut valid_extension_content_content_content_content = false;\n    let\
    \ mut valid_name_content_content_content_content = false;\n    let mut valid_name_content_content_content_content_start\
    \ = false;\n    let mut valid_name_content_content_content_content_end = false;\n\
    \    let mut valid_extension_content_content_content_content_start = false;\n\
    \    let mut valid_extension_content_content_content_content_end = false;\n  \
    \  let mut valid_extension_content_content_content_content_", "    let mut digits_counter\
    \ = 0;\n    let mut dot_counter = 0;\n    let mut before_dot = String::new();\n\
    \    let mut after_dot = String::new();\n    let mut is_before_dot = true;\n \
    \   for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_counter\
    \ += 1;\n        }\n        if c == '.' {\n            dot_counter += 1;\n   \
    \         is_before_dot = false;\n        }\n        if is_before_dot {\n    \
    \        before_dot.push(c);\n        } else {\n            after_dot.push(c);\n\
    \        }\n    }\n    if digits_counter > 3 || dot_counter != 1 || before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() || !(after_dot == \"\
    txt\" || after_dot == \"exe\" || after_dot == \"dll\") {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut first_letter = false;\n    let mut\
    \ last_three_letters = String::new();\n    for c in file_name.chars() {\n    \
    \    if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            first_letter = true;\n        }\n        if c.is_alphabetic()\
    \ || c.is_digit(10) {\n            last_three_letters.push(c);\n        }\n  \
    \  }\n    if digits_count > 3 || dot_count != 1 || !first_letter || \n       \
    \ !(last_three_letters == \"txt\" || last_three_letters == \"exe\" || last_three_letters\
    \ == \"dll\") {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    let name = &file_name[..dot_index];\n\
    \    if name.len() > 0 && name.chars().nth(0).unwrap().is_alphabetic() {\n   \
    \     valid_name = true;\n    }\n    if valid_extension && valid_name {\n    \
    \    return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter\
    \ = false;\n    let mut last_char_is_letter = false;\n    let mut last_char_is_digit\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut after_dot_is_valid\
    \ = false;\n    let mut before_dot_is_valid = false;\n    let mut after_dot_is_empty\
    \ = false;\n    let mut before_dot_is_empty = false;\n    let mut after_dot_is_txt\
    \ = false;\n    let mut after_dot_is_exe = false;\n    let mut after_dot_is_dll\
    \ = false;\n    let mut after_dot_is_not_txt = false;\n    let mut after_dot_is_not_exe\
    \ = false;\n    let mut after_dot_is_not_dll = false;\n    let mut after_dot_is_not_empty\
    \ = false;\n    let mut before_dot_is_not_empty = false;\n    let mut before_dot_is_not_letter\
    \ = false;\n    let mut after_dot_is_not_letter = false;\n    let mut after_dot_is_not_digit\
    \ = false;\n    let mut after_dot_is_digit = false;\n    let mut after_dot_is_letter\
    \ = false;\n    let mut before_dot_is_digit = false;\n    let mut before_dot_is_letter\
    \ = false;\n    let mut before_dot_is_not_digit = false;\n    let mut before_dot_is_not_letter\
    \ = false;\n    let mut after_dot_is_not_digit_or_letter = false;\n    let mut\
    \ after_dot_is_digit_or_letter = false;\n    let mut before_dot_is_not_digit_or_letter\
    \ = false;\n    let mut before_dot_is_digit_or_letter = false;\n    let mut after_dot_is_not_digit_or_letter_or_empty\
    \ = false;\n    let mut after_dot_is_digit_or_letter_or_empty = false;", "   \
    \ let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut is_valid_name = false;\n\
    \    let mut name_start_index = 0;\n    let mut name_end_index = 0;\n    let mut\
    \ is_valid_name_start = false;\n    let mut is_valid_name_end = false;\n    let\
    \ mut is_valid_extension_start = false;\n    let mut is_valid_extension_end =\
    \ false;\n    let mut is_valid_name_start_char = false;\n    let mut is_valid_name_end_char\
    \ = false;\n    let mut is_valid_extension_start_char = false;\n    let mut is_valid_extension_end_char\
    \ = false;\n    let mut is_valid_extension_start_char_2 = false;\n    let mut\
    \ is_valid_extension_end_char_2 = false;\n    let mut is_valid_extension_start_char_3\
    \ = false;\n    let mut is_valid_extension_end_char_3 = false;\n    let mut is_valid_extension_start_char_4\
    \ = false;\n    let mut is_valid_extension_end_char_4 = false;\n    let mut is_valid_extension_start_char_5\
    \ = false;\n    let mut is_valid_extension_end_char_5 = false;\n    let mut is_valid_extension_start_char_6\
    \ = false;\n    let mut is_valid_extension_end_char_6 = false;\n    let mut is_valid_extension_start_char_7\
    \ = false;\n    let mut is_valid_extension_end_char_7 = false;\n    let mut is_valid_extension_start_char_8\
    \ = false;\n    let mut is_valid_extension_end_char_8 = false;\n    let mut is_valid_extension_start_char_9\
    \ = false;", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut extension_valid = false;\n    let mut extension_start = 0;\n    let mut\
    \ extension_end = 0;\n    let mut name_valid = false;\n    let mut name_start\
    \ = 0;\n    let mut name_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if !name_valid {\n       \
    \         name_valid = true;\n                name_start = i;\n            }\n\
    \            name_end = i + 1;\n        }\n    }\n    if dot_count == 1 {\n  \
    \      extension_end = file_name.len();\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            extension_valid = true;\n        }\n    }\n    if digits_count\
    \ <= 3 && extension_valid && name_valid && name_start < extension_start {\n  \
    \      return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut extension_valid = String::from(\"\
    txt\");\n    let mut extension_valid2 = String::from(\"exe\");\n    let mut extension_valid3\
    \ = String::from(\"dll\");\n    let mut extension_valid_vec = vec![extension_valid,\
    \ extension_valid2, extension_valid3];\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_empty = false;\n\
    \        }\n        if c.is_alphabetic() {\n            is_letter = true;\n  \
    \      }\n        if c == '.' && is_letter {\n            is_extension = true;\n\
    \        }\n        if is_extension {\n            extension.push(c);\n      \
    \  }\n        if i == file_name.len() - 1 {\n            if is_extension {\n \
    \               for ext in extension_valid_vec {\n                    if extension\
    \ == ext {\n                        is_extension_valid = true;\n             \
    \       }\n                }\n            }\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || is_empty || !is_extension_valid {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut prefix = String::new();\n    let mut extension = String::new();\n\
    \    let mut chars = file_name.chars();\n    while let Some(c) = chars.next()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            valid_prefix = true;\n            prefix.push(c);\n        }\n\
    \    }\n    if let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n\
    \            valid_prefix = true;\n            prefix.push(c);\n        }\n  \
    \  }\n    if let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n  \
    \          valid_prefix = true;\n            prefix.push(c);\n        }\n    }\n\
    \    if let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n       \
    \     valid_prefix = true;\n            prefix.push(c);\n        }\n    }\n  \
    \  if let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n         \
    \   valid_prefix = true;\n            prefix.push(c);\n        }\n    }\n    if\
    \ let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n            valid_prefix\
    \ = true;\n            prefix.push(c);\n        }\n    }\n    if let Some(c) =\
    \ chars.next() {\n        if c.is_alphabetic() {\n            valid_prefix = true;\n\
    \            prefix.push(c);\n        }\n    }\n    if let Some(c) = chars.next()\
    \ {\n        if c.is_alphabetic() {\n            valid_prefix = true;\n      \
    \      prefix.push(c);\n        }\n    }\n    if let Some(c) = chars.next() {\n\
    \        if c.is_alph", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut valid_file_name = true;\n    let mut extension_start_index = 0;\n\
    \    let mut extension_end_index = 0;\n    let mut name_start_index = 0;\n   \
    \ let mut name_end_index = 0;\n    let mut extension_start_found = false;\n  \
    \  let mut name_start_found = false;\n    let mut name_end_found = false;\n  \
    \  let mut extension_end_found = false;\n    let mut extension_start_found_first\
    \ = false;\n    let mut name_start_found_first = false;\n    let mut extension_end_found_first\
    \ = false;\n    let mut name_end_found_first = false;\n    let mut extension_start_found_second\
    \ = false;\n    let mut name_start_found_second = false;\n    let mut extension_end_found_second\
    \ = false;\n    let mut name_end_found_second = false;\n    let mut extension_start_found_third\
    \ = false;\n    let mut name_start_found_third = false;\n    let mut extension_end_found_third\
    \ = false;\n    let mut name_end_found_third = false;\n    let mut extension_start_found_fourth\
    \ = false;\n    let mut name_start_found_fourth = false;\n    let mut extension_end_found_fourth\
    \ = false;\n    let mut name_end_found_fourth = false;\n    let mut extension_start_found_fifth\
    \ = false;\n    let mut name_start_found_fifth = false;\n    let mut extension_end_found_fifth\
    \ = false;\n    let mut name_end_found_fifth = false;\n    let mut extension_start_found_sixth\
    \ = false;\n    let mut name_start_found_sixth = false;\n    let mut extension_end_found_sixth\
    \ = false;\n    let mut name_end_found_sixth = false;\n    let mut extension_start_found_seventh\
    \ = false;\n    let mut name_start_", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extensions\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extension = false;\n \
    \   let mut valid_name = false;\n    let mut valid_file_name = false;\n\n    for\
    \ (index, character) in file_name.chars().enumerate() {\n        if character.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if character == '.' {\n\
    \            dot_count += 1;\n            dot_index = index;\n        }\n    }\n\
    \n    if digits_count <= 3 {\n        valid_file_name = true;\n    }\n\n    if\
    \ dot_count == 1 {\n        valid_file_name = true;\n    }\n\n    if file_name.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n\n    if valid_extensions.contains(&file_name.split(\"\
    .\").nth(1).unwrap()) {\n        valid_extension = true;\n    }\n\n    if valid_file_name\
    \ && valid_name && valid_extension {\n        return String::from(\"Yes\");\n\
    \    }\n\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start_index = i + 1;\n        }\n\
    \        if !is_first_char_valid && c.is_alphabetic() {\n            is_first_char_valid\
    \ = true;\n        }\n        if i == file_name.len() - 1 {\n            extension_end_index\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid\
    \ {\n        is_valid = false;\n    }\n    if extension_end_index > extension_start_index\
    \ {\n        extension = file_name[extension_start_index..extension_end_index].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if is_valid\
    \ && is_extension_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n\
    \    let mut valid_prefix = false;\n    let mut valid_name = true;\n    let mut\
    \ index = 0;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = index;\n        }\n        index +=\
    \ 1;\n    }\n    if digits_count > 3 {\n        valid_name = false;\n    }\n \
    \   if dot_count != 1 {\n        valid_name = false;\n    }\n    if dot_index\
    \ == 0 {\n        valid_name = false;\n    }\n    if file_name.chars().nth(dot_index\
    \ + 1).unwrap() == 't' {\n        if file_name.chars().nth(dot_index + 2).unwrap()\
    \ == 'x' {\n            if file_name.chars().nth(dot_index + 3).unwrap() == 't'\
    \ {\n                valid_extension = true;\n            }\n        }\n    }\n\
    \    if file_name.chars().nth(dot_index + 1).unwrap() == 'e' {\n        if file_name.chars().nth(dot_index\
    \ + 2).unwrap() == 'x' {\n            if file_name.chars().nth(dot_index + 3).unwrap()\
    \ == 'e' {\n                valid_extension = true;\n            }\n        }\n\
    \    }\n    if file_name.chars().nth(dot_index + 1).unwrap() == 'd' {\n      \
    \  if file_name.chars().nth(dot_index + 2).unwrap() == 'l' {\n            if file_name.chars().nth(dot_index\
    \ + 3).unwrap() == 'l' {\n                valid_extension = true;\n          \
    \  }\n        }\n    }\n    if file_name.chars().nth(0", "    let mut digits =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n     \
    \       dot_count += 1;\n            extension_start = i + 1;\n        } else\
    \ if c.is_digit(10) {\n            digits += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if !valid_prefix {\n                prefix_start = i;\n     \
    \           valid_prefix = true;\n            }\n            prefix_end = i +\
    \ 1;\n        }\n    }\n    if dot_count != 1 {\n        return String::from(\"\
    No\");\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n   \
    \ }\n    if !valid_prefix {\n        return String::from(\"No\");\n    }\n   \
    \ extension_end = file_name.len();\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if !valid_extension {\n        return\
    \ String::from(\"No\");\n    }\n    let prefix = &file_name[prefix_start..prefix_end];\n\
    \    if prefix.len() == 0 {\n        return String::from(\"No\");\n    }\n   \
    \ return String::from(\"Yes\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n \
    \   for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (sub_str_1,\
    \ sub_str_2) = file_name.split_at(dot_index);\n    if sub_str_1.is_empty() ||\
    \ !sub_str_1.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if sub_str_2 != \".txt\" && sub_str_2 != \".exe\" && sub_str_2 !=\
    \ \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n \
    \   let mut name = String::new();\n    let mut is_name_valid = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut is_valid = false;\n    let mut\
    \ is_dot_found = false;\n    let mut is_name_started = false;\n    let mut is_extension_started\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_dot_found = true;\n        }\n        if c.is_alphabetic()\
    \ && !is_dot_found {\n            is_name_started = true;\n            name.push(c);\n\
    \        }\n        if c.is_alphabetic() && is_dot_found {\n            is_extension_started\
    \ = true;\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ <= 3 && dot_count == 1 && is_name_started && is_extension_started {\n      \
    \  is_name_valid = true;\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n    }\n \
    \   if is_name_valid && is_extension_valid {\n        is_valid = true;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut has_letter = false;\n    let mut has_dot = false;\n    let mut has_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    let mut file_name_chars = file_name.chars();\n    let\
    \ mut current_char = file_name_chars.next();\n    while current_char != None {\n\
    \        if current_char.unwrap().is_digit(10) {\n            digits_count +=\
    \ 1;\n        } else if current_char.unwrap() == '.' {\n            dot_count\
    \ += 1;\n            has_dot = true;\n        } else if current_char.unwrap().is_alphabetic()\
    \ {\n            has_letter = true;\n        }\n        if has_dot {\n       \
    \     extension.push(current_char.unwrap());\n        } else {\n            file_name_without_extension.push(current_char.unwrap());\n\
    \        }\n        current_char = file_name_chars.next();\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        has_extension\
    \ = true;\n    }\n    if digits_count > 3 || dot_count != 1 || !has_letter ||\
    \ !has_extension {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_char_valid = false;\n    let mut\
    \ is_extension_valid = false;\n    let mut extension = String::new();\n    let\
    \ mut file_name_without_extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !is_first_char_valid\
    \ && c.is_alphabetic() {\n            is_first_char_valid = true;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid {\n\
    \        is_valid = false;\n    }\n    let mut dot_index = 0;\n    for (i, c)\
    \ in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_index\
    \ = i;\n            break;\n        }\n    }\n    for i in 0..dot_index {\n  \
    \      file_name_without_extension.push(file_name.chars().nth(i).unwrap());\n\
    \    }\n    for i in dot_index+1..file_name.len() {\n        extension.push(file_name.chars().nth(i).unwrap());\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        is_extension_valid = true;\n    }\n    if is_valid && is_extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ file_name = file_name.chars();\n    while let Some(c) = file_name.next() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_empty = true;\n\
    \            is_letter = false;\n        } else if c.is_digit(10) {\n        \
    \    digits_count += 1;\n            is_empty = false;\n            is_letter\
    \ = false;\n        } else if c.is_alphabetic() {\n            is_empty = false;\n\
    \            is_letter = true;\n        } else {\n            is_valid = false;\n\
    \            break;\n        }\n        if dot_count == 1 {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_empty {\n\
    \        is_valid = false;\n    }\n    if !is_letter {\n        is_valid = false;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        is_extension = true;\n    }\n    if !is_extension {\n       \
    \ is_valid = false;\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut extension_length = 0;\n    let mut prefix_length = 0;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_start_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    let file_name_parts: Vec<&str> = file_name.split('.').collect();\n\
    \    if file_name_parts[0].len() == 0 || !file_name_parts[0].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if file_name_parts[1] != \"txt\" &&\
    \ file_name_parts[1] != \"exe\" && file_name_parts[1] != \"dll\" {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut ext_count = 0;\n    let mut ext_valid =\
    \ false;\n    let mut ext_valid_list = vec![\"txt\", \"exe\", \"dll\"];\n    let\
    \ mut ext_valid_list_iter = ext_valid_list.iter();\n    let mut ext_valid_list_iter_mut\
    \ = ext_valid_list.iter_mut();\n    let mut ext_valid_list_iter_mut_next = ext_valid_list_iter_mut.next();\n\
    \    let mut ext_valid_list_iter_mut_next_mut = ext_valid_list_iter_mut_next.as_mut();\n\
    \    let mut ext_valid_list_iter_mut_next_mut_as_str = ext_valid_list_iter_mut_next_mut.as_mut().unwrap().as_str();\n\
    \    let mut ext_valid_list_iter_mut_next_mut_as_str_as_bytes = ext_valid_list_iter_mut_next_mut_as_str.as_bytes();\n\
    \    let mut ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter = ext_valid_list_iter_mut_next_mut_as_str_as_bytes.iter();\n\
    \    let mut ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter_next = ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter.next();\n\
    \    let mut ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter_next_as_u8\
    \ = ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter_next.unwrap();\n   \
    \ let mut ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter_next_as_u8_as_char\
    \ = ext_valid_list_iter_mut_next_mut_as_str_as_bytes_iter_next_as_u8.clone() as\
    \ char;\n   ", "    let mut digits = 0;\n    let mut dot_found = false;\n    let\
    \ mut extension_found = false;\n    let mut extension = String::new();\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_index\
    \ = 0;\n    let mut extension_len = 0;\n    let mut extension_valid = false;\n\
    \    let mut extension_valid_list = vec![\"txt\", \"exe\", \"dll\"];\n    let\
    \ mut extension_valid_list_len = extension_valid_list.len();\n    let mut file_name_len\
    \ = file_name.len();\n    let mut file_name_chars = file_name.chars();\n    let\
    \ mut file_name_chars_len = file_name_chars.len();\n    let mut file_name_chars_index\
    \ = 0;\n    let mut file_name_chars_next = file_name_chars.next();\n    let mut\
    \ file_name_chars_next_unwrap = file_name_chars_next.unwrap();\n    let mut file_name_chars_next_unwrap_is_digit\
    \ = file_name_chars_next_unwrap.is_digit(10);\n    let mut file_name_chars_next_unwrap_is_alphabetic\
    \ = file_name_chars_next_unwrap.is_alphabetic();\n    let mut file_name_chars_next_unwrap_is_alphanumeric\
    \ = file_name_chars_next_unwrap.is_alphanumeric();\n    let mut file_name_chars_next_unwrap_is_lowercase\
    \ = file_name_chars_next_unwrap.is_lowercase();\n    let mut file_name_chars_next_unwrap_is_uppercase\
    \ = file_name_chars_next_unwrap.is_uppercase();\n    let mut file_name_chars_next_unwrap_is_whitespace\
    \ = file_name_chars_next_unwrap.is_whitespace();\n    let mut file_name_chars_next_unwrap_is_ascii\
    \ = file_name_ch", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter\
    \ = false;\n    let mut is_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c\
    \ == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n        if c == '.' {\n       \
    \     is_empty = false;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !is_letter || is_empty {\n        is_valid = false;\n    }\n    let\
    \ mut index = 0;\n    for c in file_name.chars() {\n        if c == '.' {\n  \
    \          break;\n        }\n        index += 1;\n    }\n    name = file_name[0..index].to_string();\n\
    \    extension = file_name[index+1..].to_string();\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        is_extension = true;\n\
    \    }\n    if is_valid && is_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_last_dot = false;\n\
    \    let mut is_last_letter = false;\n    let mut is_last_digit = false;\n   \
    \ let mut is_last_extension = false;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_first_letter = false;\n    let mut is_valid_last_letter\
    \ = false;\n    let mut is_valid_last_digit = false;\n    let mut is_valid_last_extension\
    \ = false;\n    let mut is_valid_first_dot = false;\n    let mut is_valid_last_dot\
    \ = false;\n    let mut is_valid_digits_count = false;\n    let mut is_valid_dot_count\
    \ = false;\n    let mut is_valid_first_letter_count = false;\n    let mut is_valid_last_letter_count\
    \ = false;\n    let mut is_valid_last_digit_count = false;\n    let mut is_valid_last_extension_count\
    \ = false;\n    let mut is_valid_first_dot_count = false;\n    let mut is_valid_last_dot_count\
    \ = false;\n    let mut is_valid_digits_count_count = false;\n    let mut is_valid_dot_count_count\
    \ = false;\n    let mut is_valid_first_letter_count_count = false;\n    let mut\
    \ is_valid_last_letter_count_count = false;\n    let mut is_valid_last_digit_count_count\
    \ = false;\n    let mut is_valid_last_extension_count_count = false;\n    let\
    \ mut is_valid_first_dot_count_count = false;\n    let mut is_valid_last_dot_count_count\
    \ = false;\n    let mut is_valid_digits_count_count_count = false;\n    let mut\
    \ is_valid_dot_count_count_count = false;\n    let mut is_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n \
    \   let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_file_name = true;\n    let mut valid_name_start = false;\n    let\
    \ mut valid_name_end = false;\n    let mut valid_extension_start = false;\n  \
    \  let mut valid_extension_end = false;\n    let mut valid_extension_length =\
    \ false;\n    let mut valid_name_length = false;\n    let mut valid_name_length_after_dot\
    \ = false;\n    let mut valid_extension_length_after_dot = false;\n    let mut\
    \ valid_name_length_before_dot = false;\n    let mut valid_extension_length_before_dot\
    \ = false;\n    let mut valid_name_length_after_dot_count = 0;\n    let mut valid_extension_length_after_dot_count\
    \ = 0;\n    let mut valid_name_length_before_dot_count = 0;\n    let mut valid_extension_length_before_dot_count\
    \ = 0;\n    let mut valid_name_length_after_dot_count_end = false;\n    let mut\
    \ valid_extension_length_after_dot_count_end = false;\n    let mut valid_name_length_before_dot_count_end\
    \ = false;\n    let mut valid_extension_length_before_dot_count_end = false;\n\
    \    let mut valid_name_length_after_dot_count_start = false;\n    let mut valid_extension_length_after_dot_count_start\
    \ = false;\n    let mut valid_name_length_before_dot_count_start = false;\n  \
    \  let mut valid_extension_length_before_dot_count_start = false;\n    let mut\
    \ valid_name_length_after_dot_count_start_end = false;\n    let mut valid_extension_length_after_dot_count_start_end\
    \ = false;\n    let mut valid_name_length_before_dot_count_start_end = false;\n\
    \    let", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_digit = false;\n    let mut is_letter = false;\n   \
    \ let mut is_dot = false;\n    let mut is_ext = false;\n    let mut is_empty =\
    \ true;\n    let mut is_valid_ext = false;\n    let mut ext = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            is_digit = true;\n            count += 1;\n\
    \        }\n        if c.is_alphabetic() {\n            is_letter = true;\n  \
    \      }\n        if c == '.' {\n            is_dot = true;\n            dot_count\
    \ += 1;\n        }\n        if c == '.' && is_letter {\n            is_ext = true;\n\
    \        }\n        if c != '.' && !is_ext {\n            name.push(c);\n    \
    \    }\n        if c != '.' && is_ext {\n            ext.push(c);\n        }\n\
    \        if c != '.' {\n            is_empty = false;\n        }\n        if ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n            is_valid_ext =\
    \ true;\n        }\n    }\n    if count > 3 || dot_count != 1 || is_empty || !is_valid_ext\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_part = String::new();\n\
    \    let mut second_part = String::new();\n    let mut first_part_started = false;\n\
    \    let mut second_part_started = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            first_part_started\
    \ = false;\n            second_part_started = true;\n        }\n        if first_part_started\
    \ {\n            first_part.push(c);\n        }\n        if second_part_started\
    \ {\n            second_part.push(c);\n        }\n        if c.is_alphabetic()\
    \ {\n            first_part_started = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ || !(second_part == \".txt\" || second_part == \".exe\" || second_part == \"\
    .dll\") {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut name_start_index = 0;\n\
    \    let mut name_end_index = 0;\n    let mut i = 0;\n    while i < file_name.len()\
    \ {\n        if file_name.chars().nth(i).unwrap().is_digit(10) {\n           \
    \ digits_count += 1;\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_start_index = i\
    \ + 1;\n        }\n        if file_name.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n            name_end_index = i;\n            if name_start_index == 0 {\n\
    \                name_start_index = i;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    extension_end_index = file_name.len();\n    if digits_count <=\
    \ 3 && dot_count == 1 && name_start_index != 0 && name_end_index != 0 {\n    \
    \    valid_name = true;\n    }\n    if file_name.chars().nth(extension_start_index).unwrap()\
    \ == 't' &&\n        file_name.chars().nth(extension_start_index + 1).unwrap()\
    \ == 'x' &&\n        file_name.chars().nth(extension_start_index + 2).unwrap()\
    \ == 't' &&\n        extension_end_index - extension_start_index == 3 {\n    \
    \    valid_extension = true;\n    }\n    if file_name.chars().nth(extension_start_index).unwrap()\
    \ == 'e' &&\n        file_name.chars().nth(extension_start_index + 1).unwrap()\
    \ == 'x' &&\n        file_name.chars().nth(extension_start_index + 2).unwrap()\
    \ ==", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix\
    \ = String::new();\n    let mut extension = String::new();\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n         \
    \   prefix = file_name[..i].to_string();\n            extension = file_name[i+1..].to_string();\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if prefix.len() == 0 {\n        return String::from(\"No\");\n    }\n\
    \    if prefix.chars().next().unwrap().is_ascii_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if valid_prefix &&\
    \ valid_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut letter_count = 0;\n    let mut valid_extension = false;\n\
    \    let mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n\
    \    let mut extension_length = 0;\n    let mut extension_start_found = false;\n\
    \    let mut extension_end_found = false;\n    let mut extension_start_found_first\
    \ = false;\n    let mut extension_end_found_first = false;\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n         \
    \   extension_start_found = true;\n            extension_start_index = i + 1;\n\
    \            if !extension_start_found_first {\n                extension_start_found_first\
    \ = true;\n            }\n        } else if c.is_alphabetic() {\n            letter_count\
    \ += 1;\n            if extension_start_found && !extension_end_found {\n    \
    \            extension_end_index = i;\n                extension_end_found = true;\n\
    \                if !extension_end_found_first {\n                    extension_end_found_first\
    \ = true;\n                }\n            }\n        }\n    }\n    if extension_start_found_first\
    \ && extension_end_found_first {\n        extension_length = extension_end_index\
    \ - extension_start_index;\n        if extension_length == 3 {\n            let\
    \ extension = &file_name[extension_start_index..extension_end_index];\n      \
    \      if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n                valid_extension = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || letter_count == 0 || !valid_extension\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut extension\
    \ = String::new();\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_file_name = false;\n    let mut valid_digits = false;\n\
    \    let mut valid_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        }\n        if c == '.' {\n\
    \            dot_count += 1;\n        }\n    }\n    if digits <= 3 {\n       \
    \ valid_digits = true;\n    }\n    if dot_count == 1 {\n        valid_dot = true;\n\
    \    }\n    if valid_digits && valid_dot {\n        let mut name = String::new();\n\
    \        let mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                dot_index = i;\n             \
    \   break;\n            }\n        }\n        for c in file_name.chars().take(dot_index)\
    \ {\n            name.push(c);\n        }\n        if name.len() > 0 {\n     \
    \       if name.chars().next().unwrap().is_alphabetic() {\n                valid_name\
    \ = true;\n            }\n        }\n        for c in file_name.chars().skip(dot_index\
    \ + 1) {\n            extension.push(c);\n        }\n        if extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if valid_name && valid_extension {\n        valid_file_name\
    \ = true;\n    }\n    if valid_file_name {\n        String::from(\"Yes\")\n  \
    \  } else {\n        String::from(\"No\")\n    }", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_letter_index\
    \ = 0;\n    let mut last_letter_index = 0;\n    let mut first_letter_found = false;\n\
    \    let mut last_letter_found = false;\n    let mut is_valid = true;\n    let\
    \ mut file_name_chars = file_name.chars();\n    let mut index = 0;\n    while\
    \ let Some(c) = file_name_chars.next() {\n        if c.is_digit(10) {\n      \
    \      digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        }\n        if !first_letter_found\
    \ && c.is_alphabetic() {\n            first_letter_index = index;\n          \
    \  first_letter_found = true;\n        }\n        if c.is_alphabetic() {\n   \
    \         last_letter_index = index;\n            last_letter_found = true;\n\
    \        }\n        index += 1;\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 || first_letter_index == dot_index || \n        !last_letter_found || first_letter_index\
    \ == last_letter_index {\n        is_valid = false;\n    }\n    let file_extension\
    \ = &file_name[dot_index + 1..];\n    if file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\" {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_dot = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot\
    \ = true;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_before_dot = false;\n        }\n\
    \        if is_after_dot && is_first_dot {\n            extension.push(c);\n \
    \           is_first_dot = false;\n        }\n        if is_after_dot && !is_first_dot\
    \ {\n            extension.push(c);\n        }\n        if c.is_alphabetic() {\n\
    \            if is_first_letter {\n                is_first_letter = false;\n\
    \                if !c.is_ascii_alphabetic() {\n                    is_valid =\
    \ false;\n                }\n            }\n            if is_after_dot {\n  \
    \              is_valid = false;\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_before_dot && is_first_letter {\n        is_valid\
    \ = false;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        is_extension_valid = true;\n    }\n    if is_valid &&\
    \ is_extension_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_after_dot_valid = false;\n    let\
    \ mut is_before_dot_valid = false;\n    let mut is_before_dot_empty = true;\n\
    \    let mut is_after_dot_empty = true;\n    let mut is_before_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_letter = false;\n    let mut is_after_dot_end_with_letter\
    \ = false;\n    let mut is_before_dot_end_with_letter = false;\n    let mut is_after_dot_end_with_digit\
    \ = false;\n    let mut is_before_dot_end_with_digit = false;\n    let mut is_after_dot_start_with_digit\
    \ = false;\n    let mut is_before_dot_start_with_digit = false;\n    let mut is_after_dot_end_with_dot\
    \ = false;\n    let mut is_before_dot_end_with_dot = false;\n    let mut is_after_dot_start_with_dot\
    \ = false;\n    let mut is_before_dot_start_with_dot = false;\n    let mut is_after_dot_end_with_space\
    \ = false;\n    let mut is_before_dot_end_with_space = false;\n    let mut is_after_dot_start_with_space\
    \ = false;\n    let mut is_before_dot_start_with_space = false;\n    let mut is_after_dot_end_with_underscore\
    \ = false;\n    let mut is_before_dot_end_with_underscore = false;\n    let mut\
    \ is_after_dot_start_with_underscore = false;\n    let mut is_before_dot_start_with_underscore\
    \ = false;\n    let mut is_after_dot_end_with_dash = false;\n    let mut is_before_dot_end_with_dash\
    \ = false;\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            if i == 0 {\n                return String::from(\"No\");\n\
    \            }\n            if i + 1 < file_name.len() {\n                let\
    \ extension = &file_name[i + 1..];\n                if extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\" {\n                    valid_extension\
    \ = true;\n                }\n            }\n        }\n        if c.is_alphabetic()\
    \ {\n            valid_name = true;\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || !valid_extension || !valid_name {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (prefix,\
    \ suffix) = file_name.split_at(dot_index);\n    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if suffix != \".txt\" && suffix !=\
    \ \".exe\" && suffix != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut num_digits = 0;\n    let mut dot_found = false;\n    let\
    \ mut first_letter_found = false;\n    let mut extension_found = false;\n    let\
    \ mut extension = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            num_digits += 1;\n        } else if c == '.' {\n\
    \            dot_found = true;\n        } else if c.is_alphabetic() {\n      \
    \      if !first_letter_found {\n                first_letter_found = true;\n\
    \            } else {\n                extension.push(c);\n            }\n   \
    \     }\n    }\n    if num_digits > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if !dot_found {\n        return String::from(\"No\");\n    }\n   \
    \ if !first_letter_found {\n        return String::from(\"No\");\n    }\n    if\
    \ extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n   \
    \     return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension_count\
    \ = 0;\n    let mut extension_check = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut extension = String::new();\n    let\
    \ mut extension_list = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_list_length\
    \ = extension_list.len();\n    let mut extension_list_index = 0;\n    let mut\
    \ extension_list_check = false;\n    let mut extension_list_check_count = 0;\n\
    \    let mut extension_list_check_index = 0;\n    let mut extension_list_check_length\
    \ = 0;\n    let mut extension_list_check_char = ' ';\n    let mut extension_list_check_char_index\
    \ = 0;\n    let mut extension_list_check_char_length = 0;\n    let mut extension_list_check_char_count\
    \ = 0;\n    let mut extension_list_check_char_count_index = 0;\n    let mut extension_list_check_char_count_length\
    \ = 0;\n    let mut extension_list_check_char_count_char = ' ';\n    let mut extension_list_check_char_count_char_index\
    \ = 0;\n    let mut extension_list_check_char_count_char_length = 0;\n    let\
    \ mut extension_list_check_char_count_char_count = 0;\n    let mut extension_list_check_char_count_char_count_index\
    \ = 0;\n    let mut extension_list_check_char_count_char_count_length = 0;\n \
    \   let mut extension_list_check_char_count_char_count_char = ' ';\n    let mut\
    \ extension_list_check_char_count_char_count_char_index = 0;\n    let mut extension_list_check_char_count_char_count_char_length\
    \ = 0;\n    let mut extension_list_check_char_count_char_count_char_count = 0;\n\
    \    let mut extension_list_check_char_count_char_count_char_count_index", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_last_letter = false;\n\
    \    let mut is_last_digit = false;\n    let mut is_last_dot = false;\n    let\
    \ mut is_last_extension = false;\n    let mut extension = String::new();\n   \
    \ let mut extension_count = 0;\n    let mut extension_valid = false;\n    let\
    \ mut is_last_letter_valid = false;\n    let mut is_last_digit_valid = false;\n\
    \    let mut is_last_dot_valid = false;\n    let mut is_last_extension_valid =\
    \ false;\n    let mut is_last_extension_valid_count = 0;\n    let mut is_last_extension_valid_count_valid\
    \ = false;\n    let mut is_last_extension_valid_count_valid_count = 0;\n    let\
    \ mut is_last_extension_valid_count_valid_count_valid = false;\n    let mut is_last_extension_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_last_extension_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ =", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_char = true;\n    let\
    \ mut is_first_char_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut is_extension_empty = true;\n    let mut is_extension_started = false;\n\
    \    let mut is_extension_finished = false;\n    let mut is_extension_txt = false;\n\
    \    let mut is_extension_exe = false;\n    let mut is_extension_dll = false;\n\
    \    let mut is_extension_txt_started = false;\n    let mut is_extension_exe_started\
    \ = false;\n    let mut is_extension_dll_started = false;\n    let mut is_extension_txt_finished\
    \ = false;\n    let mut is_extension_exe_finished = false;\n    let mut is_extension_dll_finished\
    \ = false;\n    let mut is_extension_txt_valid = false;\n    let mut is_extension_exe_valid\
    \ = false;\n    let mut is_extension_dll_valid = false;\n    let mut is_extension_txt_empty\
    \ = true;\n    let mut is_extension_exe_empty = true;\n    let mut is_extension_dll_empty\
    \ = true;\n    let mut is_extension_txt_started_valid = false;\n    let mut is_extension_exe_started_valid\
    \ = false;\n    let mut is_extension_dll_started_valid = false;\n    let mut is_extension_txt_finished_valid\
    \ = false;\n    let mut is_extension_exe_finished_valid = false;\n    let mut\
    \ is_extension_dll_finished_valid = false;\n    let mut is_extension_txt_valid_valid\
    \ = false;\n    let mut is_extension_exe_valid_valid = false;\n    let mut is_extension_dll_valid_valid\
    \ = false;\n    let mut is_extension_txt_empty_valid = false;\n    let mut is_ext",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut i = 0;\n    while i < file_name.len()\
    \ {\n        if file_name.chars().nth(i).unwrap().is_digit(10) {\n           \
    \ digits_count += 1;\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            i += 1;\n            while\
    \ i < file_name.len() {\n                extension.push(file_name.chars().nth(i).unwrap());\n\
    \                i += 1;\n            }\n            if extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\" {\n                valid_extension\
    \ = true;\n            }\n        }\n        if dot_count == 0 {\n           \
    \ name.push(file_name.chars().nth(i).unwrap());\n        }\n        i += 1;\n\
    \    }\n    if name.len() > 0 && name.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    if digits_count <= 3 && dot_count\
    \ == 1 && valid_extension && valid_name {\n        String::from(\"Yes\")\n   \
    \ } else {\n        String::from(\"No\")\n    }", "    // TODO: Implement this\
    \ function\n    String::from(\"No\")", "    // TODO: Implement the function here\n\
    \    String::from(\"Yes\")", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_prefix_end = true;\n    let mut is_valid_extension_content\
    \ = true;\n    let mut is_valid_prefix_content = true;\n    let mut is_valid_extension_content_start\
    \ = true;\n    let mut is_valid_prefix_content_start = true;\n    let mut is_valid_extension_content_end\
    \ = true;\n    let mut is_valid_prefix_content_end = true;\n    let mut is_valid_extension_content_middle\
    \ = true;\n    let mut is_valid_prefix_content_middle = true;\n    let mut is_valid_extension_content_middle_start\
    \ = true;\n    let mut is_valid_prefix_content_middle_start = true;\n    let mut\
    \ is_valid_extension_content_middle_end = true;\n    let mut is_valid_prefix_content_middle_end\
    \ = true;\n    let mut is_valid_extension_content_middle_middle = true;\n    let\
    \ mut is_valid_prefix_content_middle_middle = true;\n    let mut is_valid_extension_content_middle_middle_start\
    \ = true;\n    let mut is_valid_prefix_content_middle_middle_start = true;\n \
    \   let mut is_valid_extension_content_middle_middle_end = true;\n    let mut\
    \ is_valid_prefix_content_middle_middle_end = true;\n    let mut is_valid_extension_content_middle",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if is_first_letter {\n            if c.is_alphabetic() {\n\
    \                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n    }\n    if is_valid {\n        if\
    \ digits_count > 3 {\n            is_valid = false;\n        }\n        if dot_count\
    \ != 1 {\n            is_valid = false;\n        }\n        if is_first_letter_valid\
    \ {\n            extension = file_name[dot_index+1..].to_string();\n         \
    \   if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \                is_extension_valid = true;\n            }\n        }\n      \
    \  if !is_extension_valid {\n            is_valid = false;\n        }\n    }\n\
    \    if is_valid {\n        return String::from(\"Yes\");\n    } else {\n    \
    \    return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid =\
    \ false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_started\
    \ = false;\n    let mut is_after_dot_started = false;\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n            is_after_dot_started\
    \ = true;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if is_before_dot {\n     \
    \           is_before_dot_started = true;\n            } else if is_after_dot\
    \ {\n                is_after_dot_started = true;\n            }\n        }\n\
    \    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if is_before_dot_started {\n \
    \       is_before_dot_valid = true;\n    }\n    if is_after_dot_started {\n  \
    \      if file_name.ends_with(\"txt\") {\n            is_after_dot_valid = true;\n\
    \        } else if file_name.ends_with(\"exe\") {\n            is_after_dot_valid\
    \ = true;\n        } else if file_name.ends_with(\"dll\") {\n            is_after_dot_valid\
    \ = true;\n        }\n    }\n    if is_before_dot_valid && is_after_dot_valid\
    \ {\n        is_valid = true;\n    } else {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        return String::from(\"Yes\");\n    } else {\n    \
    \    return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_str = String::new();\n\
    \    let mut extension_str_ref = &extension_str;\n    let mut extension_str_ref_mut\
    \ = &mut extension_str;\n    let mut extension_str_ref_mut_ref = &mut extension_str_ref_mut;\n\
    \    let mut extension_str_ref_mut_ref_ref = &mut extension_str_ref_mut_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref = &mut extension_str_ref_mut_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref = &mut extension_str_ref_mut_ref_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref_ref = &mut extension_str_ref_mut_ref_ref_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref = &mut extension_str_ref_mut_ref_ref_ref_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref = &mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref_ref = &mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref;\n\
    \    let mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref_ref_ref = &mut\
    \ extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref_ref;\n    let mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref\
    \ = &mut extension_str_ref_mut_ref_ref_ref_ref_ref_ref_ref_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut is_valid_before_dot\
    \ = false;\n    let mut is_valid_after_dot = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        }\n        if is_before_dot\
    \ && !c.is_digit(10) && !c.is_alphabetic() {\n            is_valid = false;\n\
    \        }\n        if is_after_dot && !c.is_alphabetic() {\n            is_valid\
    \ = false;\n        }\n        if is_after_dot {\n            extension.push(c);\n\
    \        }\n        if is_before_dot && c.is_alphabetic() {\n            is_valid_before_dot\
    \ = true;\n        }\n        if is_after_dot && c.is_alphabetic() {\n       \
    \     is_valid_after_dot = true;\n        }\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    }\n    if digits_count > 3 || dot_count != 1 || !is_valid_before_dot\
    \ || !is_valid_after_dot || !is_valid_extension {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digit =\
    \ true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut extension_length\
    \ = 0;\n    let mut prefix_length = 0;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    let mut extension_index = 0;\n    let\
    \ mut prefix_index = 0;\n    let mut valid_extensions = vec![\"txt\", \"exe\"\
    , \"dll\"];\n    let mut valid_prefix_chars = vec!['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n   \
    \ let mut valid_extension_chars = vec!['t', 'x', 'e', 'd', 'l'];\n    let mut\
    \ valid_digit_chars = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\
    \    for (index, c) in file_name.chars().enumerate() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            extension_index = index;\n        }\n\
    \        if valid_digit_chars.contains(&c) {\n            digits_count += 1;\n\
    \        }\n        if valid", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_dot = true;\n    let mut is_first_digit = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut extension = String::new();\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            if is_first_digit\
    \ {\n                is_first_digit = false;\n                is_first_letter\
    \ = false;\n            }\n            digits_count += 1;\n        } else if c\
    \ == '.' {\n            if is_first_dot {\n                is_first_dot = false;\n\
    \                is_first_letter = false;\n            }\n            dot_count\
    \ += 1;\n        } else if c.is_alphabetic() {\n            if is_first_letter\
    \ {\n                is_first_letter = false;\n                is_first_digit\
    \ = false;\n            }\n        } else {\n            is_valid = false;\n \
    \           break;\n        }\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        let mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                dot_index = i;\n             \
    \   break;\n            }\n        }\n        extension = file_name[dot_index\
    \ + 1..].to_string();\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            is_valid_extension = true;\n        }\n\
    \    }\n    if is_valid && is_valid_extension {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut file_name_chars = file_name.chars();\n\
    \    let mut first_char = file_name_chars.next();\n    let mut second_char = file_name_chars.next();\n\
    \    let mut third_char = file_name_chars.next();\n    let mut fourth_char = file_name_chars.next();\n\
    \    let mut fifth_char = file_name_chars.next();\n    let mut sixth_char = file_name_chars.next();\n\
    \    let mut seventh_char = file_name_chars.next();\n    let mut eighth_char =\
    \ file_name_chars.next();\n    let mut ninth_char = file_name_chars.next();\n\
    \    let mut tenth_char = file_name_chars.next();\n    let mut eleventh_char =\
    \ file_name_chars.next();\n    let mut twelfth_char = file_name_chars.next();\n\
    \    let mut thirteenth_char = file_name_chars.next();\n    let mut fourteenth_char\
    \ = file_name_chars.next();\n    let mut fifteenth_char = file_name_chars.next();\n\
    \    let mut sixteenth_char = file_name_chars.next();\n    let mut seventeenth_char\
    \ = file_name_chars.next();\n    let mut eighteenth_char = file_name_chars.next();\n\
    \    let mut nineteenth_char = file_name_chars.next();\n    let mut twentieth_char\
    \ = file_name_chars.next();\n    let mut twenty_first_char = file_name_chars.next();\n\
    \    let mut twenty_second_char = file_name_chars.next();\n    let mut twenty_third_char\
    \ = file_name_chars.next();\n    let mut twenty_fourth_char = file_name_chars.next();\n\
    \    let mut twenty_fifth_char = file_name_chars.next();\n    let mut twenty_sixth_char\
    \ = file_name_chars.next();\n    let mut twenty_seventh_char =", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n \
    \   let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut\
    \ l = 0;\n    for (index, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = index + 1;\n        }\n\
    \        if c.is_alphabetic() {\n            prefix_start = index;\n         \
    \   valid_prefix = true;\n        }\n        if c == '.' {\n            prefix_end\
    \ = index;\n        }\n        if c == '.' {\n            extension_end = index;\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if prefix_start == 0 {\n        return String::from(\"No\");\n    }\n\
    \    if prefix_end == 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ extension_start == 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ extension_end == 0 {\n        return String::from(\"No\");\n    }\n    let prefix\
    \ = &file_name[prefix_start..prefix_end];\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if prefix.len() == 0 {\n        return String::from(\"No\");\n    }\n   \
    \ if extension.len() == 0 {\n        return String::from(\"No\");\n    }\n   \
    \ for (index, c) in prefix.chars().enumerate() {\n        if c.is_alphabetic()\
    \ {\n            i += 1;\n        }\n    }\n    for (index", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut prefix = String::new();\n    let\
    \ mut extension = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c ==\
    \ '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count >\
    \ 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ mut dot_index = 0;\n    for (i, c) in file_name.chars().enumerate() {\n    \
    \    if c == '.' {\n            dot_index = i;\n            break;\n        }\n\
    \    }\n    for c in file_name.chars().take(dot_index) {\n        if c.is_alphabetic()\
    \ {\n            valid_prefix = true;\n            prefix.push(c);\n        }\n\
    \    }\n    for c in file_name.chars().skip(dot_index + 1) {\n        extension.push(c);\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        valid_extension = true;\n    }\n    if valid_prefix && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    if file_name[..dot_index].len()\
    \ > 0 {\n        let first_char = file_name.chars().nth(0).unwrap();\n       \
    \ if first_char.is_alphabetic() {\n            valid_name = true;\n        }\n\
    \    }\n    if valid_extension && valid_name {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_name = false;\n    let mut extension = String::new();\n    let mut\
    \ name = String::new();\n    for (i, c) in file_name.chars().enumerate() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        }\n     \
    \   if c == '.' {\n            dot_count += 1;\n            extension = file_name[i+1..].to_string();\n\
    \            name = file_name[..i].to_string();\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic() {\n   \
    \     valid_name = true;\n    }\n    if valid_extension && valid_name {\n    \
    \    return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n\
    \    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut\
    \ valid_extension = false;\n    let mut valid_name = false;\n    let mut valid_dot\
    \ = false;\n    let mut valid_digits = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits\
    \ > 3 {\n        valid_digits = false;\n    } else {\n        valid_digits = true;\n\
    \    }\n    if dot_count == 1 {\n        valid_dot = true;\n    } else {\n   \
    \     valid_dot = false;\n    }\n    let mut name = file_name.split('.').collect::<Vec<&str>>();\n\
    \    if name[0].len() > 0 && name[0].chars().next().unwrap().is_alphabetic() {\n\
    \        valid_name = true;\n    } else {\n        valid_name = false;\n    }\n\
    \    extension = name[1].to_string();\n    for ext in valid_extensions.iter()\
    \ {\n        if extension == *ext {\n            valid_extension = true;\n   \
    \     }\n    }\n    if valid_digits && valid_dot && valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           is_empty = false;\n            if is_after_dot {\n               \
    \ extension.push(c);\n            }\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || is_empty {\n        is_valid = false;\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    }\n    if is_valid && is_valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (index, character) in file_name.chars().enumerate() {\n   \
    \     if character.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if character == '.' {\n            dot_count += 1;\n            dot_index\
    \ = index;\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if dot_index\
    \ == 0 {\n        is_valid = false;\n    }\n    let sub_string_before_dot = &file_name[..dot_index];\n\
    \    if sub_string_before_dot.is_empty() {\n        is_valid = false;\n    }\n\
    \    if !sub_string_before_dot.chars().next().unwrap().is_alphabetic() {\n   \
    \     is_valid = false;\n    }\n    let sub_string_after_dot = &file_name[dot_index\
    \ + 1..];\n    if sub_string_after_dot != \"txt\" && sub_string_after_dot != \"\
    exe\" && sub_string_after_dot != \"dll\" {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if after_dot != \".txt\"\
    \ && after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let valid_extensions =\
    \ vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_index = 0;\n    let\
    \ mut extension_length = 0;\n\n    for (index, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = index;\n\
    \        }\n    }\n\n    if digits_count > 3 {\n        is_valid = false;\n  \
    \  }\n\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\n    if is_valid\
    \ {\n        let (file_name, extension) = file_name.split_at(dot_index);\n   \
    \     extension_length = extension.len();\n        for (index, valid_extension)\
    \ in valid_extensions.iter().enumerate() {\n            if extension == *valid_extension\
    \ {\n                is_valid_extension = true;\n                extension_index\
    \ = index;\n                break;\n            }\n        }\n        if !is_valid_extension\
    \ {\n            is_valid = false;\n        }\n    }\n\n    if is_valid {\n  \
    \      if file_name.len() == 0 {\n            is_valid = false;\n        } else\
    \ {\n            let first_char = file_name.chars().nth(0).unwrap();\n       \
    \     if !first_char.is_alphabetic() {\n                is_valid = false;\n  \
    \          }\n        }\n    }\n\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    let mut chars = file_name.chars();\n    while let Some(c)\
    \ = chars.next() {\n        if c.is_digit(10) {\n            digits_count += 1;\n\
    \        }\n        if c == '.' {\n            dot_count += 1;\n        }\n  \
    \      if dot_count == 1 {\n            if c.is_alphabetic() {\n             \
    \   is_substring_before_dot_valid = true;\n            }\n        }\n        if\
    \ dot_count == 1 && !c.is_alphabetic() {\n            is_substring_before_dot_valid\
    \ = false;\n        }\n        if dot_count == 1 {\n            substring_before_dot.push(c);\n\
    \        }\n        if dot_count == 1 && c.is_alphabetic() {\n            substring_after_dot.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_substring_before_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if substring_after_dot == \"txt\" ||\
    \ substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n       \
    \ is_substring_after_dot_valid = true;\n    }\n    if !is_substring_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut valid_file_name = true;\n    let mut\
    \ extension_start = 0;\n    let mut prefix_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n            prefix_end = i;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        valid_file_name = false;\n    }\n    if dot_count != 1 {\n  \
    \      valid_file_name = false;\n    }\n    if extension_start == file_name.len()\
    \ {\n        valid_file_name = false;\n    }\n    if prefix_end == 0 {\n     \
    \   valid_file_name = false;\n    }\n    let extension = &file_name[extension_start..];\n\
    \    let prefix = &file_name[..prefix_end];\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if valid_file_name && valid_extension && valid_prefix {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut letter_count\
    \ = 0;\n    let mut extension_count = 0;\n    let mut extension = String::new();\n\
    \    let mut letter = false;\n    let mut extension_valid = false;\n    for c\
    \ in file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot_count += 1;\n        } else if\
    \ c.is_alphabetic() {\n            letter_count += 1;\n            if !letter\
    \ {\n                letter = true;\n            } else {\n                extension.push(c);\n\
    \                extension_count += 1;\n            }\n        }\n    }\n    if\
    \ extension_count == 3 {\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            extension_valid = true;\n        }\n\
    \    }\n    if digits > 3 || dot_count != 1 || letter_count == 0 || !extension_valid\
    \ {\n        String::from(\"No\")\n    } else {\n        String::from(\"Yes\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot = true;\n\
    \    let mut is_valid_after_dot = false;\n    let mut is_valid_before_dot = false;\n\
    \    let mut is_valid_extension = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_before_dot = false;\n        }\n\
    \        if is_after_dot {\n            extension.push(c);\n        }\n      \
    \  if is_first_letter {\n            if c.is_alphabetic() {\n                is_valid_before_dot\
    \ = true;\n                is_first_letter = false;\n            } else {\n  \
    \              is_valid = false;\n                break;\n            }\n    \
    \    }\n        if is_first_dot {\n            if c == '.' {\n               \
    \ is_first_dot = false;\n            } else {\n                is_valid = false;\n\
    \                break;\n            }\n        }\n        if is_after_dot {\n\
    \            if c.is_alphabetic() {\n                is_valid_after_dot = true;\n\
    \            } else {\n                is_valid = false;\n                break;\n\
    \            }\n        }\n    }\n    if is_valid_before_dot && is_valid_after_dot\
    \ && digits_count <= 3 && dot_count == 1 {\n        is_valid = true;\n    } else\
    \ {\n        is_valid = false;\n    }\n    if extension == \".txt\" || extension\
    \ == \".exe\" || extension == \".dll\" {\n        is_valid_extension = true;\n\
    \    }\n    if is_valid && is_valid_extension {\n        return String::from(\"\
    Yes\");\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut extension = String::new();\n    let mut is_valid = true;\n    for (index,\
    \ ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10) {\n     \
    \       digits_count += 1;\n        }\n        if ch == '.' {\n            dot_count\
    \ += 1;\n            extension = file_name[index + 1..].to_string();\n       \
    \ }\n    }\n    if digits_count > 3 || dot_count != 1 || extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\" {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut extension = String::new();\n\
    \    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    extension\
    \ = file_name[dot_index + 1..].to_string();\n    valid_extensions.retain(|&x|\
    \ x != extension);\n    if valid_extensions.len() == 3 {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_file_name = true;\n\
    \    let mut i = 0;\n    while i < file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        i += 1;\n    }\n    if digits_count > 3 {\n        valid_file_name\
    \ = false;\n    }\n    if dot_count != 1 {\n        valid_file_name = false;\n\
    \    }\n    if dot_index == 0 {\n        valid_file_name = false;\n    }\n   \
    \ if dot_index == file_name.len() - 1 {\n        valid_file_name = false;\n  \
    \  }\n    if valid_file_name {\n        let extension = file_name.chars().skip(dot_index\
    \ + 1).collect::<String>();\n        if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n            valid_extension = true;\n       \
    \ }\n        let name = file_name.chars().take(dot_index).collect::<String>();\n\
    \        if name.len() > 0 {\n            let first_char = name.chars().nth(0).unwrap();\n\
    \            if first_char.is_alphabetic() {\n                valid_name = true;\n\
    \            }\n        }\n    }\n    if valid_file_name && valid_extension &&\
    \ valid_name {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_empty = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if c.is_alphabetic() {\n \
    \           is_empty = false;\n            if is_first_letter {\n            \
    \    is_first_letter = false;\n                is_extension_valid = true;\n  \
    \          }\n        }\n        if !is_first_letter {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        match extension.as_str()\
    \ {\n            \"txt\" | \"exe\" | \"dll\" => return String::from(\"Yes\"),\n\
    \            _ => return String::from(\"No\"),\n        }\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut prefix_start = 0;\n    let\
    \ mut prefix_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n \
    \       let c = file_name.chars().nth(i).unwrap();\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start = i + 1;\n        } else if c.is_alphabetic()\
    \ {\n            prefix_end = i;\n            if !valid_prefix {\n           \
    \     valid_prefix = true;\n                prefix_start = i;\n            }\n\
    \        }\n        i += 1;\n    }\n    if dot_count == 1 {\n        extension_end\
    \ = file_name.len();\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if digits_count\
    \ <= 3 && valid_extension && valid_prefix {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension = String::new();\n\
    \    let mut is_extension_empty = true;\n    let mut is_name_empty = true;\n \
    \   let mut name_start_index = 0;\n    let mut name_end_index = 0;\n    let mut\
    \ name = String::new();\n    for (i, c) in file_name.chars().enumerate() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        }\n     \
    \   if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            is_first_char_valid\
    \ = true;\n            name_start_index = i;\n            is_name_empty = false;\n\
    \        }\n        if i == file_name.len() - 1 {\n            name_end_index\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_first_char_valid\
    \ {\n        is_valid = false;\n    }\n    if !is_name_empty {\n        name =\
    \ file_name[name_start_index..name_end_index].to_string();\n    }\n    if !is_name_empty\
    \ {\n        extension = file_name[extension_start_index..].to_string();\n   \
    \ }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        is_extension_valid = true;\n    }\n    if is_extension_valid && is_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut extension = String::new();\n    let mut file_name_length = file_name.len();\n\
    \    let mut file_name_chars = file_name.chars();\n    for (i, c) in file_name_chars.enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n            extension_length = file_name_length - extension_start_index;\n\
    \            extension_end_index = extension_start_index + extension_length;\n\
    \            extension = file_name[extension_start_index..extension_end_index].to_string();\n\
    \        }\n        if c.is_digit(10) {\n            digits_count += 1;\n    \
    \    }\n        if c.is_alphabetic() {\n            if is_first_letter {\n   \
    \             is_first_letter = false;\n                if c.is_ascii_lowercase()\
    \ || c.is_ascii_uppercase() {\n                    is_first_letter_valid = true;\n\
    \                }\n            }\n        }\n    }\n    if digits_count > 3 {\n\
    \        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid =\
    \ false;\n    }\n    if !is_first_letter_valid {\n        is_valid = false;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        is_extension_valid = true;\n    }\n    if !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_prefix = false;\n    let mut extension_start = 0;\n    let mut prefix_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start = i + 1;\n        } else if c.is_alphabetic()\
    \ {\n            prefix_end = i;\n        }\n    }\n    if digits_count > 3 {\n\
    \        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n      \
    \  return String::from(\"No\");\n    }\n    if extension_start == file_name.len()\
    \ {\n        return String::from(\"No\");\n    }\n    if prefix_end == 0 {\n \
    \       return String::from(\"No\");\n    }\n    let extension = &file_name[extension_start..];\n\
    \    let prefix = &file_name[..prefix_end];\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if valid_extension && valid_prefix {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        }\n        if c == '.'\
    \ && i != 0 {\n            prefix_end = i;\n        }\n        if c == '.' &&\
    \ i == 0 {\n            prefix_start = i + 1;\n        }\n        if c == '.'\
    \ && i == file_name.len() - 1 {\n            extension_end = i;\n        }\n \
    \   }\n    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().nth(prefix_start).unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if file_name.chars().nth(extension_start).unwrap().is_alphabetic()\
    \ {\n        valid_extension = true;\n    }\n    if valid_prefix && valid_extension\
    \ {\n        let extension = &file_name[extension_start..extension_end];\n   \
    \     let prefix = &file_name[prefix_start..prefix_end];\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    String::from(\"No\")", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_file_name = true;\n    let mut extension_found = false;\n    let mut\
    \ name_found = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_found = true;\n        }\n     \
    \   if extension_found {\n            extension.push(c);\n        }\n        if\
    \ c.is_alphabetic() {\n            name_found = true;\n        }\n    }\n    if\
    \ digits_count > 3 {\n        valid_file_name = false;\n    }\n    if dot_count\
    \ != 1 {\n        valid_file_name = false;\n    }\n    if name_found {\n     \
    \   valid_name = true;\n    }\n    if extension == \".txt\" || extension == \"\
    .exe\" || extension == \".dll\" {\n        valid_extension = true;\n    }\n  \
    \  if valid_file_name && valid_name && valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut is_first_char = true;\n    let mut is_last_char = false;\n    let\
    \ mut is_last_dot = false;\n    let mut is_last_digit = false;\n    let mut is_last_letter\
    \ = false;\n    let mut is_last_letter_upper = false;\n    let mut is_last_letter_lower\
    \ = false;\n    let mut is_last_letter_dot = false;\n    let mut is_last_letter_digit\
    \ = false;\n    let mut is_last_digit_dot = false;\n    let mut is_last_digit_letter\
    \ = false;\n    let mut is_last_digit_digit = false;\n    let mut is_last_dot_letter\
    \ = false;\n    let mut is_last_dot_digit = false;\n    let mut is_last_dot_dot\
    \ = false;\n    let mut is_last_char_letter = false;\n    let mut is_last_char_digit\
    \ = false;\n    let mut is_last_char_dot = false;\n    let mut is_last_char_empty\
    \ = false;\n    let mut is_last_char_valid = false;\n    let mut is_last_char_invalid\
    \ = false;\n    let mut is_last_char_upper = false;\n    let mut is_last_char_lower\
    \ = false;\n    let mut is_last_char_upper_dot = false;\n    let mut is_last_char_lower_dot\
    \ = false;\n    let mut is_last_char_upper_digit = false;\n    let mut is_last_char_lower_digit\
    \ = false;\n    let mut is_last_char_upper_letter = false;\n    let mut is_last_char_lower_letter\
    \ = false;\n    let mut is_last_char_upper_empty = false;\n    let mut is_last_char_lower_empty\
    \ = false;\n    let mut is_last_char_", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_first_after_dot =\
    \ true;\n    let mut is_first_after_dot_letter = true;\n    let mut is_first_after_dot_digit\
    \ = true;\n    let mut is_first_after_dot_letter_valid = true;\n    let mut is_first_after_dot_digit_valid\
    \ = true;\n    let mut is_first_after_dot_valid = true;\n    let mut is_first_after_dot_letter_valid_count\
    \ = 0;\n    let mut is_first_after_dot_digit_valid_count = 0;\n    let mut is_first_after_dot_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid = true;\n    let mut\
    \ is_first_after_dot_valid_count_valid_count = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_before_dot_valid = false;\n    let mut is_dot_valid = false;\n\
    \    let mut is_digit_valid = false;\n    let mut is_letter_valid = false;\n \
    \   let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty = true;\n\
    \    let mut is_after_dot_txt = false;\n    let mut is_after_dot_exe = false;\n\
    \    let mut is_after_dot_dll = false;\n    let mut is_after_dot_txt_valid = false;\n\
    \    let mut is_after_dot_exe_valid = false;\n    let mut is_after_dot_dll_valid\
    \ = false;\n    let mut is_after_dot_txt_empty = true;\n    let mut is_after_dot_exe_empty\
    \ = true;\n    let mut is_after_dot_dll_empty = true;\n    let mut is_after_dot_txt_valid_empty\
    \ = false;\n    let mut is_after_dot_exe_valid_empty = false;\n    let mut is_after_dot_dll_valid_empty\
    \ = false;\n    let mut is_after_dot_txt_valid_not_empty = false;\n    let mut\
    \ is_after_dot_exe_valid_not_empty = false;\n    let mut is_after_dot_dll_valid_not_empty\
    \ = false;\n    let mut is_after_dot_txt_valid_not_empty_valid = false;\n    let\
    \ mut is_after_dot_exe_valid_not_empty_valid = false;\n    let mut is_after_dot_dll_valid_not_empty_valid\
    \ = false;\n    let mut is_after_dot_txt_valid_not_empty_valid_valid = false;",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_pre_dot_valid = false;\n    let mut is_post_dot_valid\
    \ = false;\n    let mut is_pre_dot_empty = true;\n    let mut is_post_dot_empty\
    \ = true;\n    let mut pre_dot_chars = Vec::new();\n    let mut post_dot_chars\
    \ = Vec::new();\n    for c in file_name.chars() {\n        if c == '.' {\n   \
    \         dot_count += 1;\n            is_pre_dot_empty = false;\n        } else\
    \ if c.is_digit(10) {\n            digits_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if dot_count == 0 {\n                is_pre_dot_empty = false;\n\
    \                pre_dot_chars.push(c);\n            } else {\n              \
    \  is_post_dot_empty = false;\n                post_dot_chars.push(c);\n     \
    \       }\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_pre_dot_empty\
    \ {\n        is_valid = false;\n    }\n    if is_post_dot_empty {\n        is_valid\
    \ = false;\n    }\n    if !pre_dot_chars.is_empty() {\n        if pre_dot_chars[0].is_alphabetic()\
    \ {\n            is_pre_dot_valid = true;\n        }\n    }\n    if !post_dot_chars.is_empty()\
    \ {\n        let post_dot_str: String = post_dot_chars.into_iter().collect();\n\
    \        if post_dot_str == \"txt\" || post_dot_str == \"exe\" || post_dot_str\
    \ == \"dll\" {\n            is_post_dot_valid = true;\n        }\n    }\n    if\
    \ is_valid && is_pre_dot_valid && is_post_dot", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_first_letter = true;\n    let mut\
    \ is_after_dot = false;\n    let mut is_valid_extension = false;\n    let mut\
    \ extension = String::new();\n    for ch in file_name.chars() {\n        if ch.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if ch == '.' {\n     \
    \       dot_count += 1;\n            is_after_dot = true;\n        }\n       \
    \ if is_after_dot {\n            extension.push(ch);\n        }\n        if ch.is_alphabetic()\
    \ {\n            if is_first_letter {\n                is_first_letter = false;\n\
    \            }\n        }\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if is_first_letter {\n        return String::from(\"No\");\n    }\n\
    \    if extension == String::from(\".txt\") || extension == String::from(\".exe\"\
    ) || extension == String::from(\".dll\") {\n        is_valid_extension = true;\n\
    \    }\n    if is_valid_extension {\n        return String::from(\"Yes\");\n \
    \   }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_index = 0;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c == '.' {\n            dot_index = i;\n            break;\n     \
    \   }\n    }\n    name = file_name[0..dot_index].to_string();\n    extension =\
    \ file_name[dot_index + 1..].to_string();\n    if name.len() == 0 {\n        return\
    \ String::from(\"No\");\n    }\n    for c in name.chars() {\n        if c.is_alphabetic()\
    \ {\n            valid_name = true;\n            break;\n        }\n    }\n  \
    \  if !valid_name {\n        return String::from(\"No\");\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_char = true;\n    let mut first_dot\
    \ = true;\n    let mut first_char_after_dot = true;\n    let mut first_char_after_dot_is_letter\
    \ = false;\n    let mut last_char_is_letter = false;\n    let mut last_char_is_digit\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut last_char_is_valid\
    \ = false;\n    let mut last_char_is_invalid = false;\n    let mut last_char_is_valid_after_dot\
    \ = false;\n    let mut last_char_is_invalid_after_dot = false;\n    let mut last_char_is_valid_before_dot\
    \ = false;\n    let mut last_char_is_invalid_before_dot = false;\n    let mut\
    \ last_char_is_valid_after_dot_is_letter = false;\n    let mut last_char_is_invalid_after_dot_is_letter\
    \ = false;\n    let mut last_char_is_valid_before_dot_is_letter = false;\n   \
    \ let mut last_char_is_invalid_before_dot_is_letter = false;\n    let mut last_char_is_valid_after_dot_is_digit\
    \ = false;\n    let mut last_char_is_invalid_after_dot_is_digit = false;\n   \
    \ let mut last_char_is_valid_before_dot_is_digit = false;\n    let mut last_char_is_invalid_before_dot_is_digit\
    \ = false;\n    let mut last_char_is_valid_after_dot_is_dot = false;\n    let\
    \ mut last_char_is_invalid_after_dot_is_dot = false;\n    let mut last_char_is_valid_before_dot_is_dot\
    \ = false;\n    let mut last_char_is_invalid_before_dot_is_dot = false;\n    let\
    \ mut last_char_is_valid_after_dot_is_valid = false;\n    let", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_dot = true;\n    let mut is_first_digit\
    \ = true;\n    let mut is_first_letter_after_dot = true;\n    let mut is_first_digit_after_dot\
    \ = true;\n    let mut is_first_letter_before_dot = true;\n    let mut is_first_digit_before_dot\
    \ = true;\n    let mut is_first_letter_after_dot_valid = false;\n    let mut is_first_digit_after_dot_valid\
    \ = false;\n    let mut is_first_letter_before_dot_valid = false;\n    let mut\
    \ is_first_digit_before_dot_valid = false;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_first_digit_valid = false;\n    let mut is_first_dot_valid\
    \ = false;\n    let mut is_first_letter_after_dot_invalid = false;\n    let mut\
    \ is_first_digit_after_dot_invalid = false;\n    let mut is_first_letter_before_dot_invalid\
    \ = false;\n    let mut is_first_digit_before_dot_invalid = false;\n    let mut\
    \ is_first_letter_invalid = false;\n    let mut is_first_digit_invalid = false;\n\
    \    let mut is_first_dot_invalid = false;\n    let mut is_first_letter_after_dot_valid_txt\
    \ = false;\n    let mut is_first_letter_after_dot_valid_exe = false;\n    let\
    \ mut is_first_letter_after_dot_valid_dll = false;\n    let mut is_first_letter_after_dot_invalid_txt\
    \ = false;\n    let mut is_first_letter_after_dot_invalid_exe = false;\n    let\
    \ mut is_first_letter_after_dot_invalid_dll = false;\n    let mut is_first_letter_after_dot_valid_txt_valid\
    \ = false;\n   ", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_letter\
    \ = false;\n    let mut is_extension = false;\n    let mut is_empty = true;\n\
    \    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if c.is_alphabetic() {\n            is_letter = true;\n  \
    \      }\n        if c != '.' {\n            is_empty = false;\n        }\n  \
    \  }\n    if dot_count == 1 && digits_count <= 3 && is_letter && !is_empty {\n\
    \        extension = file_name[dot_index+1..].to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if !is_extension {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        return String::from(\"Yes\");\n    } else {\n\
    \        return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut has_dot\
    \ = false;\n    let mut has_extension = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       has_dot = true;\n        }\n        if c.is_alphabetic() {\n         \
    \   has_letter = true;\n        }\n        if has_dot && !c.is_alphabetic() &&\
    \ !c.is_digit(10) {\n            has_extension = true;\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !has_letter ||\
    \ !has_extension || \n        extension != \".txt\" && extension != \".exe\" &&\
    \ extension != \".dll\" {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_substring_before_dot_empty = true;\n    let mut is_substring_before_dot_starts_with_letter\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut is_substring_after_dot_empty\
    \ = true;\n    let mut is_substring_after_dot_starts_with_letter = false;\n  \
    \  let mut is_substring_after_dot_ends_with_letter = false;\n    let mut is_substring_after_dot_ends_with_digit\
    \ = false;\n    let mut is_substring_after_dot_ends_with_dot = false;\n    let\
    \ mut is_substring_after_dot_ends_with_underscore = false;\n    let mut is_substring_after_dot_ends_with_hyphen\
    \ = false;\n    let mut is_substring_after_dot_ends_with_space = false;\n    let\
    \ mut is_substring_after_dot_ends_with_tab = false;\n    let mut is_substring_after_dot_ends_with_newline\
    \ = false;\n    let mut is_substring_after_dot_ends_with_carriage_return = false;\n\
    \    let mut is_substring_after_dot_ends_with_form_feed = false;\n    let mut\
    \ is_substring_after_dot_ends_with_vertical_tab = false;\n    let mut is_substring_after_dot_ends_with_backspace\
    \ = false;\n    let mut is_substring_after_dot_ends_with_escape = false;\n   \
    \ let mut is_substring_after_dot_ends_with_null = false;\n    let mut is_substring_after_dot_ends_with_single_quote\
    \ = false;\n    let mut is_substring_after_dot_ends_with_double_quote = false;\n\
    \    let mut is_substring_after_dot_ends_with_backslash = false;\n    let mut\
    \ is_substring_after_dot_ends_with_question_mark = false", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n \
    \   let mut name = String::new();\n    let mut valid_extensions = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if dot_count == 1 {\n            extension.push(c);\n\
    \        }\n        if dot_count == 0 {\n            name.push(c);\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || name.is_empty() || !name.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if !valid_extensions.contains(&extension.as_str())\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digit_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_file_name = true;\n\
    \    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut\
    \ name_start = 0;\n    let mut name_end = 0;\n    let mut extension_length = 0;\n\
    \    let mut name_length = 0;\n    let mut i = 0;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digit_count += 1;\n        }\n \
    \       if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            name_start\
    \ = i;\n        }\n        i += 1;\n    }\n    if dot_count == 1 && digit_count\
    \ <= 3 {\n        extension_end = i;\n        name_end = extension_start - 1;\n\
    \        extension_length = extension_end - extension_start;\n        name_length\
    \ = name_end - name_start;\n        if extension_length == 3 && name_length >\
    \ 0 {\n            let extension = &file_name[extension_start..extension_end];\n\
    \            let name = &file_name[name_start..name_end];\n            if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n             \
    \   valid_extension = true;\n            }\n            if name.chars().next().unwrap().is_alphabetic()\
    \ {\n                valid_name = true;\n            }\n        }\n    }\n   \
    \ if valid_extension && valid_name {\n        return String::from(\"Yes\");\n\
    \    }\n    return String::from(\"No\");", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n \
    \   for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if !is_valid {\n        return\
    \ String::from(\"No\");\n    }\n    let (sub_str_1, sub_str_2) = file_name.split_at(dot_index);\n\
    \    if sub_str_1.is_empty() || !sub_str_1.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if !is_valid {\n        return String::from(\"\
    No\");\n    }\n    let sub_str_2 = &sub_str_2[1..];\n    if sub_str_2 != \"txt\"\
    \ && sub_str_2 != \"exe\" && sub_str_2 != \"dll\" {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_substring_before_dot_valid = false;\n    let\
    \ mut is_substring_after_dot_valid = false;\n    let mut is_substring_before_dot_empty\
    \ = true;\n    let mut is_substring_after_dot_empty = true;\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_after_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            is_substring_before_dot_empty = false;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           is_substring_before_dot_valid = true;\n        }\n        if dot_count\
    \ == 1 {\n            if is_substring_before_dot_empty {\n                is_valid\
    \ = false;\n                break;\n            }\n            is_substring_after_dot_empty\
    \ = false;\n            substring_after_dot.push(c);\n        } else {\n     \
    \       substring_before_dot.push(c);\n        }\n    }\n    if is_substring_before_dot_valid\
    \ && !is_substring_after_dot_empty {\n        if substring_after_dot == \"txt\"\
    \ || substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n    \
    \        is_substring_after_dot_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !is_substring_before_dot_valid || !is_substring_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot_count\
    \ += 1;\n            has_dot = true;\n        } else if c.is_alphabetic() {\n\
    \            has_letter = true;\n        }\n        if has_dot {\n           \
    \ extension.push(c);\n        }\n    }\n    if digits > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if !has_letter {\n        return String::from(\"No\");\n    }\n  \
    \  if extension == String::from(\".txt\") || extension == String::from(\".exe\"\
    ) || extension == String::from(\".dll\") {\n        has_extension = true;\n  \
    \  }\n    if has_extension {\n        return String::from(\"Yes\");\n    }\n \
    \   return String::from(\"No\");", "    let mut count_digits = 0;\n    let mut\
    \ count_dots = 0;\n    let mut is_valid = true;\n    let mut is_substring_valid\
    \ = false;\n    let mut is_substring_empty = true;\n    let mut is_substring_start_with_letter\
    \ = false;\n    let mut is_substring_end_with_valid_extension = false;\n    let\
    \ mut is_substring_end_with_valid_extension_count = 0;\n    let mut is_substring_end_with_valid_extension_index\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count = 0;\n \
    \   let mut is_substring_end_with_valid_extension_index_count_count = 0;\n   \
    \ let mut is_substring_end_with_valid_extension_index_count_count_count = 0;\n\
    \    let mut is_substring_end_with_valid_extension_index_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n  \
    \      }\n    }\n    if digits > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    } else {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if after_dot != \".txt\" &&\
    \ after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n    let\
    \ mut last_three_chars = String::from(\"\");\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            first_char_is_letter = true;\n        }\n        last_three_chars.push(c);\n\
    \        if last_three_chars.len() > 3 {\n            last_three_chars.remove(0);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !first_char_is_letter\
    \ ||\n        !(last_three_chars == \"txt\" || last_three_chars == \"exe\" ||\
    \ last_three_chars == \"dll\") {\n        return String::from(\"No\");\n    }\n\
    \    return String::from(\"Yes\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n \
    \   let mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension_index = 0;\n \
    \   let mut extension_length = 0;\n    for (index, ch) in file_name.chars().enumerate()\
    \ {\n        if ch.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if ch == '.' {\n            dot_count += 1;\n            dot_index =\
    \ index;\n        }\n        if is_first_letter {\n            if ch.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n        if index > dot_index {\n  \
    \          extension_length += 1;\n            if extension_length == 4 {\n  \
    \              extension_index = index - 3;\n                if file_name[extension_index..index]\
    \ == \"txt\" ||\n                   file_name[extension_index..index] == \"exe\"\
    \ ||\n                   file_name[extension_index..index] == \"dll\" {\n    \
    \                is_extension_valid = true;\n                } else {\n      \
    \              is_valid = false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 || !is_first_letter_valid || !is_extension_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = true;\n            is_first_letter_valid\
    \ = false;\n            continue;\n        }\n        if is_first_letter {\n \
    \           is_first_letter = false;\n            if c.is_alphabetic() {\n   \
    \             is_first_letter_valid = true;\n            }\n        }\n      \
    \  if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ is_first_letter_valid && c.is_alphabetic() {\n            is_empty = false;\n\
    \        }\n        if dot_count == 1 {\n            extension.push(c);\n    \
    \    }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n \
    \   if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_empty {\n\
    \        is_valid = false;\n    }\n    if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n    }\n\
    \    if !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_prefix = false;\n    let mut\
    \ prefix_started = false;\n    let mut extension_started = false;\n    let mut\
    \ prefix = String::new();\n    let mut extension = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        \
    \    prefix_started = false;\n            extension_started = true;\n        }\n\
    \        if c.is_alphabetic() {\n            if prefix_started {\n           \
    \     prefix.push(c);\n            }\n            if extension_started {\n   \
    \             extension.push(c);\n            }\n        }\n        if c.is_alphabetic()\
    \ && !prefix_started {\n            prefix_started = true;\n        }\n    }\n\
    \    if digits_count <= 3 && dot_count == 1 && !prefix.is_empty() && prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_prefix && valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n    let\
    \ mut last_three_chars = String::from(\"\");\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n        if !first_char_is_letter\
    \ && c.is_alphabetic() {\n            first_char_is_letter = true;\n        }\n\
    \        last_three_chars.push(c);\n        if last_three_chars.len() > 3 {\n\
    \            last_three_chars.remove(0);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !first_char_is_letter ||\n        last_three_chars\
    \ != \"txt\" && last_three_chars != \"exe\" && last_three_chars != \"dll\" {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );"]
stop_tokens:
- "\n}"
