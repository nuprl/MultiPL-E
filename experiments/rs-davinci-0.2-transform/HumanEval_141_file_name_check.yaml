name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"\
  example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"\
  1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut first_letter = false;\n    let mut last_three_letters = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            if !first_letter {\n              \
    \  first_letter = true;\n            }\n            last_three_letters.push(c);\n\
    \            if last_three_letters.len() > 3 {\n                last_three_letters.remove(0);\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ !first_letter || \n        last_three_letters != \"txt\" && last_three_letters\
    \ != \"exe\" && last_three_letters != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n\
    \    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    let mut i\
    \ = 0;\n    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        } else if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c.is_alphabetic() {\n       \
    \     if !valid_name {\n                name_start = i;\n                valid_name\
    \ = true;\n            }\n            name_end = i;\n        }\n        i += 1;\n\
    \    }\n    if dot_count == 1 {\n        extension_end = i - 1;\n        let extension\
    \ = &file_name[extension_start..extension_end];\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if digits <= 3 && valid_extension && valid_name\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ file_name_chars = file_name.chars();\n    for c in file_name_chars {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n        if c != '.' {\n       \
    \     is_empty = false;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_letter {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        let mut file_name_chars = file_name.chars();\n        for c in file_name_chars\
    \ {\n            if c == '.' {\n                break;\n            }\n      \
    \  }\n        for c in file_name_chars {\n            extension.push(c);\n   \
    \     }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension = true;\n        }\n    }\n    if is_valid\
    \ && is_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut valid_name = false;\n\
    \    let mut name_start_index = 0;\n    let mut name_end_index = 0;\n    let mut\
    \ valid_file_name = true;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if !valid_name {\n       \
    \         name_start_index = i;\n                name_end_index = i + 1;\n   \
    \             valid_name = true;\n            } else {\n                name_end_index\
    \ += 1;\n            }\n        }\n    }\n    if dot_count == 1 {\n        let\
    \ extension = &file_name[extension_start_index..];\n        if extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n            extension_end_index = extension_start_index + extension.len();\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid_file_name = false;\n\
    \    }\n    if !valid_extension {\n        valid_file_name = false;\n    }\n \
    \   if !valid_name {\n        valid_file_name = false;\n    }\n    if valid_file_name\
    \ {\n        let name = &file_name[name_start_index..name_end_index];\n      \
    \  let extension = &file_name[extension_start_index..extension_end_index];\n \
    \       let mut new_file_name = String::new();\n        new_file_name.push_str(name);\n\
    \        new_file_name.push('.');\n        new_file_name.push_str(extension);\n\
    \        if new_file_name ==", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    let mut is_valid_substring_before_dot\
    \ = false;\n    let mut is_valid_substring_after_dot = false;\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_after_dot = String::new();\n    let\
    \ mut is_valid_substring_before_dot_first_char = false;\n    let mut is_valid_substring_after_dot_first_char\
    \ = false;\n    let mut is_valid_substring_before_dot_second_char = false;\n \
    \   let mut is_valid_substring_after_dot_second_char = false;\n    let mut is_valid_substring_before_dot_third_char\
    \ = false;\n    let mut is_valid_substring_after_dot_third_char = false;\n   \
    \ let mut is_valid_substring_before_dot_fourth_char = false;\n    let mut is_valid_substring_after_dot_fourth_char\
    \ = false;\n    let mut is_valid_substring_before_dot_fifth_char = false;\n  \
    \  let mut is_valid_substring_after_dot_fifth_char = false;\n    let mut is_valid_substring_before_dot_sixth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_sixth_char = false;\n   \
    \ let mut is_valid_substring_before_dot_seventh_char = false;\n    let mut is_valid_substring_after_dot_seventh_char\
    \ = false;\n    let mut is_valid_substring_before_dot_eighth_char = false;\n \
    \   let mut is_valid_substring_after_dot_eighth_char = false;\n    let mut is_valid_substring_before_dot_ninth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_ninth_char = false;\n   \
    \ let mut is_valid_sub", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_char_valid = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut extension_index = 0;\n\n    for\
    \ (index, ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if ch == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        } else if ch.is_alphabetic()\
    \ {\n            is_first_char_valid = true;\n        }\n    }\n\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n\n    if dot_count != 1 {\n       \
    \ is_valid = false;\n    }\n\n    if !is_first_char_valid {\n        is_valid\
    \ = false;\n    }\n\n    extension_index = dot_index + 1;\n    extension = file_name[extension_index..].to_string();\n\
    \n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        is_extension_valid = true;\n    }\n\n    if !is_extension_valid {\n\
    \        is_valid = false;\n    }\n\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut is_first_char_letter\
    \ = false;\n    let mut is_last_char_letter = false;\n    let mut is_last_char_dot\
    \ = false;\n    let mut is_last_char_digit = false;\n    let mut is_last_char_letter_or_digit\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore = false;\n    let mut\
    \ is_last_char_letter_or_digit_or_dot_or_underscore_or_dash = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_semicolon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_semicolon_or_question_mark\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_first_digit = true;\n    let mut is_first_letter_after_dot = true;\n\
    \    let mut is_first_digit_after_dot = true;\n    let mut is_first_letter_after_first_dot\
    \ = true;\n    let mut is_first_digit_after_first_dot = true;\n    let mut is_first_letter_before_dot\
    \ = true;\n    let mut is_first_digit_before_dot = true;\n    let mut is_first_letter_before_first_dot\
    \ = true;\n    let mut is_first_digit_before_first_dot = true;\n    let mut is_first_letter_after_second_dot\
    \ = true;\n    let mut is_first_digit_after_second_dot = true;\n    let mut is_first_letter_before_second_dot\
    \ = true;\n    let mut is_first_digit_before_second_dot = true;\n    let mut is_first_letter_after_third_dot\
    \ = true;\n    let mut is_first_digit_after_third_dot = true;\n    let mut is_first_letter_before_third_dot\
    \ = true;\n    let mut is_first_digit_before_third_dot = true;\n    let mut is_first_letter_after_fourth_dot\
    \ = true;\n    let mut is_first_digit_after_fourth_dot = true;\n    let mut is_first_letter_before_fourth_dot\
    \ = true;\n    let mut is_first_digit_before_fourth_dot = true;\n    let mut is_first_letter_after_fifth_dot\
    \ = true;\n    let mut is_first_digit_after_fifth_dot = true;\n    let mut is_first_letter_before_fifth_dot\
    \ = true;\n    let mut is_first_digit_before_fifth_dot = true;\n    let mut is_first_letter_after_sixth_dot\
    \ = true;\n    let", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut name_start\
    \ = 0;\n    let mut name_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n            name_end = i;\n        } else if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        } else if c.is_alphabetic() {\n       \
    \     if !valid_name {\n                name_start = i;\n                valid_name\
    \ = true;\n            }\n        }\n    }\n    if dot_count == 1 {\n        extension_end\
    \ = file_name.len();\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !valid_extension || !valid_name {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut parts\
    \ = file_name.split('.');\n    let first_part = parts.next().unwrap();\n    let\
    \ second_part = parts.next().unwrap();\n    if first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n\
    \        if file_name.chars().nth(i).unwrap().is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' {\n  \
    \          dot_count += 1;\n            extension_start = i + 1;\n        }\n\
    \        if file_name.chars().nth(i).unwrap().is_alphabetic() {\n            valid_prefix\
    \ = true;\n            prefix_start = i;\n            break;\n        }\n    \
    \    i += 1;\n    }\n    if digits_count > 3 || dot_count != 1 || !valid_prefix\
    \ {\n        return String::from(\"No\");\n    }\n    i = extension_start;\n \
    \   while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n            extension_end = i;\n        }\n        i += 1;\n    }\n    let\
    \ extension = &file_name[extension_start..extension_end + 1];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if after_dot != \".txt\" && after_dot != \".exe\" && after_dot !=\
    \ \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_part_is_valid = false;\n\
    \    let mut second_part_is_valid = false;\n    let mut first_part = String::new();\n\
    \    let mut second_part = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ mut parts = file_name.split('.');\n    first_part = parts.next().unwrap().to_string();\n\
    \    second_part = parts.next().unwrap().to_string();\n    if first_part.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    for c in first_part.chars()\
    \ {\n        if c.is_alphabetic() {\n            first_part_is_valid = true;\n\
    \            break;\n        }\n    }\n    if !first_part_is_valid {\n       \
    \ return String::from(\"No\");\n    }\n    if second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\" {\n        second_part_is_valid = true;\n\
    \    }\n    if !second_part_is_valid {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        } else if c.is_alphabetic() {\n            is_first_char_valid\
    \ = true;\n        }\n        if i == file_name.len() - 1 {\n            extension_end_index\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid\
    \ {\n        is_valid = false;\n    }\n    let extension = &file_name[extension_start_index..extension_end_index];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_extension_valid = true;\n    }\n    if is_valid && is_extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension_start_flag = false;\n    let mut extension_end_flag\
    \ = false;\n    let mut extension_start_flag_2 = false;\n    let mut extension_end_flag_2\
    \ = false;\n    let mut extension_start_flag_3 = false;\n    let mut extension_end_flag_3\
    \ = false;\n    let mut extension_start_flag_4 = false;\n    let mut extension_end_flag_4\
    \ = false;\n    let mut extension_start_flag_5 = false;\n    let mut extension_end_flag_5\
    \ = false;\n    let mut extension_start_flag_6 = false;\n    let mut extension_end_flag_6\
    \ = false;\n    let mut extension_start_flag_7 = false;\n    let mut extension_end_flag_7\
    \ = false;\n    let mut extension_start_flag_8 = false;\n    let mut extension_end_flag_8\
    \ = false;\n    let mut extension_start_flag_9 = false;\n    let mut extension_end_flag_9\
    \ = false;\n    let mut extension_start_flag_10 = false;\n    let mut extension_end_flag_10\
    \ = false;\n    let mut extension_start_flag_11 = false;\n    let mut extension_end_flag_11\
    \ = false;\n    let mut extension_start_flag_12 = false;\n    let mut extension_end_flag_12\
    \ = false;\n    let mut extension_start_flag_13 = false;\n    let mut extension_end_flag_13\
    \ = false;\n    let mut extension_start_flag_14 = false;\n    let mut extension_end_flag_14\
    \ = false;\n    let mut extension_start_flag_15 = false;\n    let mut extension_end_flag_15\
    \ = false;\n    let mut extension_start_flag_16 = false;\n    let mut extension_end_flag_16\
    \ = false;\n    let mut extension_start_flag_17 = false;", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (prefix,\
    \ suffix) = file_name.split_at(dot_index);\n    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if suffix != \".txt\" && suffix !=\
    \ \".exe\" && suffix != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_first_letter = true;\n        }\n\
    \        if is_after_dot {\n            if c.is_alphabetic() {\n             \
    \   if is_first_letter {\n                    extension.push(c);\n           \
    \         is_first_letter = false;\n                }\n            } else {\n\
    \                extension.push(c);\n            }\n        }\n        if is_after_dot\
    \ && c == '.' {\n            if extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\" {\n                is_extension_valid = true;\n       \
    \     }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    for (index, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = index;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    let (first_part, second_part) = file_name.split_at(dot_index);\n\
    \    if first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \".txt\" && second_part\
    \ != \".exe\" && second_part != \".dll\" {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_dot = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_digit = false;\n    let mut is_letter = false;\n  \
    \  let mut is_dot = false;\n    let mut is_other = false;\n    let mut is_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_digit = false;\n    let mut is_before_dot_digit\
    \ = false;\n    let mut is_after_dot_letter = false;\n    let mut is_before_dot_letter\
    \ = false;\n    let mut is_after_dot_dot = false;\n    let mut is_before_dot_dot\
    \ = false;\n    let mut is_after_dot_other = false;\n    let mut is_before_dot_other\
    \ = false;\n    let mut is_after_dot_first_letter = true;\n    let mut is_before_dot_first_letter\
    \ = true;\n    let mut is_after_dot_first_dot = true;\n    let mut is_before_dot_first_dot\
    \ = true;\n    let mut is_after_dot_first_digit = true;\n    let mut is_before_dot_first_digit\
    \ = true;\n    let mut is_after_dot_first_other = true;\n    let mut is_before_dot_first_other\
    \ = true;\n    let mut is_after_dot_first_letter_valid = false;\n    let mut is_before_dot_first_letter_valid\
    \ = false;\n    let mut is_after_dot_first_digit_valid = false;\n    let mut is_before_dot_first_digit_valid\
    \ = false;\n    let mut is_after_dot_first_other_valid =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_extension = false;\n    let mut extension = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        } else if c == '.' {\n            dot_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            has_letter = true;\n        }\n    }\n \
    \   if dot_count == 1 {\n        let mut parts = file_name.split('.');\n     \
    \   let first_part = parts.next().unwrap();\n        extension = parts.next().unwrap().to_string();\n\
    \        if first_part.chars().next().unwrap().is_alphabetic() {\n           \
    \ has_extension = true;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !has_letter || !has_extension {\n        return String::from(\"No\"\
    );\n    }\n    match extension.as_str() {\n        \"txt\" | \"exe\" | \"dll\"\
    \ => String::from(\"Yes\"),\n        _ => String::from(\"No\"),\n    }", "   \
    \ let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_digit = false;\n    let\
    \ mut is_letter = false;\n    let mut is_dot = false;\n    let mut is_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut extension_count\
    \ = 0;\n    let mut extension_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut\
    \ extension_iter = 0;\n    let mut extension_iter_start = 0;\n    let mut extension_iter_end\
    \ = 0;\n    let mut extension_iter_index = 0;\n    let mut extension_iter_length\
    \ = 0;\n    let mut extension_iter_count = 0;\n    let mut extension_iter_valid\
    \ = false;\n    let mut extension_iter_valid_count = 0;\n    let mut extension_iter_valid_index\
    \ = 0;\n    let mut extension_iter_valid_length = 0;\n    let mut extension_iter_valid_start\
    \ = 0;\n    let mut extension_iter_valid_end = 0;\n    let mut extension_iter_valid_iter\
    \ = 0;\n    let mut extension_iter_valid_iter_start = 0;\n    let mut extension_iter_valid_iter_end\
    \ = 0;\n    let mut extension_iter_valid_iter_index = 0;\n    let mut extension_iter_valid_iter_length\
    \ = 0;\n    let mut extension_iter_valid_iter_count = 0;\n    let mut extension_iter_valid_iter_valid\
    \ = false;\n    let mut extension_iter_valid_iter_valid_count = 0;\n    let mut\
    \ extension_iter_valid_iter_valid_index = 0;\n    let mut extension_iter_valid_iter_valid_length\
    \ = 0;\n    let mut extension_iter_valid_iter_valid_start = 0;\n    let mut extension_iter_valid_iter_valid_end\
    \ = 0;\n    let mut extension_iter_valid_iter_valid_iter = 0;\n", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut is_substring_before_dot_empty = true;\n    let mut is_substring_after_dot_empty\
    \ = true;\n    let mut is_substring_before_dot_started = false;\n    let mut is_substring_after_dot_started\
    \ = false;\n    let mut is_substring_before_dot_started_with_letter = false;\n\
    \    let mut is_substring_after_dot_started_with_letter = false;\n    let mut\
    \ is_substring_before_dot_started_with_digit = false;\n    let mut is_substring_after_dot_started_with_digit\
    \ = false;\n    let mut is_substring_before_dot_started_with_dot = false;\n  \
    \  let mut is_substring_after_dot_started_with_dot = false;\n    let mut is_substring_before_dot_started_with_underscore\
    \ = false;\n    let mut is_substring_after_dot_started_with_underscore = false;\n\
    \    let mut is_substring_before_dot_started_with_hyphen = false;\n    let mut\
    \ is_substring_after_dot_started_with_hyphen = false;\n    let mut is_substring_before_dot_started_with_space\
    \ = false;\n    let mut is_substring_after_dot_started_with_space = false;\n \
    \   let mut is_substring_before_dot_started_with_other_char = false;\n    let\
    \ mut is_substring_after_dot_started_with_other_char = false;\n    let mut is_substring_before_dot_ended_with_letter\
    \ = false;\n    let mut is_substring_after_dot_ended_with_letter = false;\n  \
    \  let mut is_substring_before_dot_ended_with_digit = false;\n    let mut is_substring_after_dot_ended_",
  "    let mut count_digits = 0;\n    let mut count_dots = 0;\n    let mut count_letters\
    \ = 0;\n    let mut count_letters_after_dot = 0;\n    let mut count_letters_before_dot\
    \ = 0;\n    let mut is_dot_found = false;\n    let mut is_letter_found = false;\n\
    \    let mut is_letter_found_after_dot = false;\n    let mut is_letter_found_before_dot\
    \ = false;\n    let mut is_valid_extension = false;\n    let mut is_valid_name\
    \ = false;\n    let mut is_valid_substring_before_dot = false;\n    let mut is_valid_substring_after_dot\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_before_dot_iter = 0;\n    let mut substring_after_dot_iter\
    \ = 0;\n    let mut file_name_iter = 0;\n    let mut file_name_len = file_name.len();\n\
    \    let mut file_name_chars = file_name.chars();\n    let mut file_name_chars_vec:\
    \ Vec<char> = Vec::new();\n    let mut file_name_chars_iter = file_name_chars.clone();\n\
    \    let mut file_name_chars_iter_vec: Vec<char> = Vec::new();\n    let mut file_name_chars_iter_vec_iter\
    \ = 0;\n    let mut file_name_chars_iter_vec_len = 0;\n    let mut file_name_chars_iter_vec_len_iter\
    \ = 0;\n    let mut file_name_chars_iter_vec_len_iter_vec: Vec<char> = Vec::new();\n\
    \    let mut file_name_chars_iter_vec_len_iter_vec_iter = 0;\n    let mut file_name_chars_iter_vec_len_iter_vec_iter_vec:\
    \ Vec<char> = Vec::new();\n    let mut file_name_chars_iter_vec_", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n \
    \   let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_length = 0;\n    let mut prefix_length = 0;\n  \
    \  let mut extension_start_found = false;\n    let mut prefix_end_found = false;\n\
    \    let mut extension_end_found = false;\n    let mut prefix_start_found = false;\n\
    \    let mut extension_start_found = false;\n    let mut extension_end_found =\
    \ false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let", "    let mut digits_count = 0;\n    let mut dot_count =\
    \ 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_prefix = false;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut iter\
    \ = file_name.split('.');\n    prefix = iter.next().unwrap().to_string();\n  \
    \  extension = iter.next().unwrap().to_string();\n    if prefix.len() == 0 {\n\
    \        is_valid = false;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_prefix {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ dot_count = 0;\n    let mut digit_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_prefix = false;\n    let mut extension_start = 0;\n\
    \    let mut extension_end = 0;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if c == '.'\
    \ {\n            dot_count += 1;\n            extension_start = i + 1;\n     \
    \   } else if c.is_numeric() {\n            digit_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            if dot_count == 0 {\n                prefix_start\
    \ = i;\n            }\n        }\n    }\n    if dot_count == 1 && digit_count\
    \ <= 3 {\n        extension_end = file_name.len();\n        prefix_end = extension_start\
    \ - 1;\n        let extension = &file_name[extension_start..extension_end];\n\
    \        let prefix = &file_name[prefix_start..prefix_end];\n        if prefix.len()\
    \ > 0 {\n            valid_prefix = true;\n        }\n        if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if valid_extension && valid_prefix {\n      \
    \  return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_part_is_valid\
    \ = false;\n    let mut second_part_is_valid = false;\n    let mut first_part\
    \ = String::new();\n    let mut second_part = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if dot_count == 0\
    \ {\n            first_part.push(c);\n        } else if dot_count == 1 {\n   \
    \         second_part.push(c);\n        }\n    }\n    if digits_count <= 3 &&\
    \ dot_count == 1 && !first_part.is_empty() {\n        first_part_is_valid = first_part.chars().next().unwrap().is_alphabetic();\n\
    \    }\n    if second_part == \"txt\" || second_part == \"exe\" || second_part\
    \ == \"dll\" {\n        second_part_is_valid = true;\n    }\n    if first_part_is_valid\
    \ && second_part_is_valid {\n        return String::from(\"Yes\");\n    }\n  \
    \  return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_extension_valid = false;\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n            is_empty = true;\n        } else if c.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if c.is_alphabetic() {\n     \
    \       if is_first_letter {\n                is_first_letter = false;\n     \
    \           is_empty = false;\n            }\n        } else {\n            is_valid\
    \ = false;\n            break;\n        }\n        if is_first_letter {\n    \
    \        extension.push(c);\n        }\n    }\n    if is_empty {\n        is_valid\
    \ = false;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        is_extension_valid = true;\n    }\n    if is_valid &&\
    \ digits_count <= 3 && dot_count == 1 && is_extension_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (prefix, suffix) = file_name.split_at(dot_index);\n        if prefix.is_empty()\
    \ || !prefix.chars().next().unwrap().is_alphabetic() {\n            is_valid =\
    \ false;\n        } else if suffix != \".txt\" && suffix != \".exe\" && suffix\
    \ != \".dll\" {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut name_start_index = 0;\n\
    \    let mut name_end_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        } else if c.is_ascii_digit() {\n            digits_count +=\
    \ 1;\n        } else if c.is_ascii_alphabetic() {\n            name_start_index\
    \ = i;\n            name_end_index = i + 1;\n            valid_name = true;\n\
    \        }\n    }\n    if dot_count == 1 {\n        extension_end_index = file_name.len();\n\
    \        let extension = &file_name[extension_start_index..extension_end_index];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !valid_extension || !valid_name {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let\
    \ mut valid_prefix = false;\n    let mut prefix = String::new();\n    let mut\
    \ extension = String::new();\n    let mut extension_index = 0;\n    for (i, c)\
    \ in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_index = i;\n        } else if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n    }\n    if dot_count == 1 && digits_count\
    \ <= 3 {\n        prefix = file_name[..extension_index].to_string();\n       \
    \ extension = file_name[extension_index + 1..].to_string();\n        valid_extension\
    \ = extension == \"txt\" || extension == \"exe\" || extension == \"dll\";\n  \
    \      valid_prefix = prefix.chars().next().unwrap().is_alphabetic();\n    }\n\
    \    if valid_extension && valid_prefix {\n        String::from(\"Yes\")\n   \
    \ } else {\n        String::from(\"No\")\n    }", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if after_dot != \".txt\" && after_dot != \".exe\" && after_dot !=\
    \ \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extensions = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_name_start = false;\n    let mut valid_name_end\
    \ = false;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    let mut\
    \ name_length = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_length = 0;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut extension_valid = false;\n   \
    \ let mut name_valid = false;\n    let mut name_start_valid = false;\n    let\
    \ mut name_end_valid = false;\n    let mut extension_start_valid = false;\n  \
    \  let mut extension_end_valid = false;\n    let mut extension_length_valid =\
    \ false;\n    let mut name_length_valid = false;\n    let mut dot_count_valid\
    \ = false;\n    let mut digits_count_valid = false;\n    let mut valid_file_name\
    \ = false;\n    let mut valid_file_name_string = String::from(\"No\");\n    let\
    \ mut file_name_length = file_name.len();\n    let mut file_name_chars = file_name.chars();\n\
    \    let mut file_name_chars_vec: Vec<char> = Vec::new();\n    for c in file_name_chars\
    \ {\n        file_name_chars_vec.push(c);\n    }\n    for i in 0..file_name_length\
    \ {\n        if file_name_chars_vec[i].is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name_chars_vec[i] == '.' {\n            dot_count\
    \ += 1;\n        }\n        if file_name_chars_vec[i].is_alphabetic() {\n    \
    \        name_start = i;\n            name_start_valid = true;\n           ",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension_len = 0;\n    let mut extension_str = String::new();\n\
    \    let mut is_extension_empty = true;\n    let mut is_extension_too_long = false;\n\
    \    let mut is_extension_too_short = false;\n    let mut is_extension_too_long_or_short\
    \ = false;\n    let mut is_extension_too_long_and_short = false;\n    let mut\
    \ is_extension_too_long_or_short_and_empty = false;\n    let mut is_extension_too_long_and_short_and_empty\
    \ = false;\n    let mut is_extension_too_long_or_short_and_not_empty = false;\n\
    \    let mut is_extension_too_long_and_short_and_not_empty = false;\n    let mut\
    \ is_extension_too_long_or_short_and_not_empty_and_valid = false;\n    let mut\
    \ is_extension_too_long_and_short_and_not_empty_and_valid = false;\n    let mut\
    \ is_extension_too_long_or_short_and_not_empty_and_invalid = false;\n    let mut\
    \ is_extension_too_long_and_short_and_not_empty_and_invalid = false;\n    let\
    \ mut is_extension_too_long_or_short_and_empty_and_valid = false;\n    let mut\
    \ is_extension_too_long_and_short_and_empty_and_valid = false;\n    let mut is_extension_too_long_or_short_and_empty_and_invalid\
    \ = false;\n    let mut is_extension_too_long_and_short_and_empty_and_invalid\
    \ = false;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_prefix = false;\n    let mut is_valid_digits = true;\n \
    \   let mut is_valid_dot = true;\n    let mut extension = String::new();\n   \
    \ let mut prefix = String::new();\n    let mut extension_index = 0;\n    let mut\
    \ prefix_index = 0;\n    let valid_extensions = vec![\"txt\", \"exe\", \"dll\"\
    ];\n    let mut i = 0;\n    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_index = i + 1;\n\
    \        } else if file_name.chars().nth(i).unwrap().is_alphabetic() {\n     \
    \       prefix_index = i;\n        }\n        i += 1;\n    }\n    if digits_count\
    \ > 3 {\n        is_valid_digits = false;\n    }\n    if dot_count != 1 {\n  \
    \      is_valid_dot = false;\n    }\n    if prefix_index == 0 {\n        is_valid_prefix\
    \ = false;\n    }\n    if extension_index == 0 {\n        is_valid_extension =\
    \ false;\n    }\n    if is_valid_extension {\n        extension = file_name[extension_index..].to_string();\n\
    \    }\n    if is_valid_prefix {\n        prefix = file_name[..prefix_index].to_string();\n\
    \    }\n    if !valid_extensions.contains(&extension.as_str()) {\n        is_valid_extension\
    \ = false;\n    }\n    if !is_valid_extension || !is_valid_prefix || !is_valid_digits\
    \ || !is_valid_dot {\n        is_valid = false;\n    }\n    if", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n    let\
    \ mut is_first_after_dot = true;\n    let mut is_first_after_dot_letter = true;\n\
    \    let mut is_first_after_dot_digit = true;\n    let mut is_first_after_dot_letter_valid\
    \ = true;\n    let mut is_first_after_dot_digit_valid = true;\n    let mut is_first_after_dot_letter_valid_txt\
    \ = true;\n    let mut is_first_after_dot_digit_valid_txt = true;\n    let mut\
    \ is_first_after_dot_letter_valid_exe = true;\n    let mut is_first_after_dot_digit_valid_exe\
    \ = true;\n    let mut is_first_after_dot_letter_valid_dll = true;\n    let mut\
    \ is_first_after_dot_digit_valid_dll = true;\n    let mut is_first_after_dot_letter_valid_txt_exe\
    \ = true;\n    let mut is_first_after_dot_digit_valid_txt_exe = true;\n    let\
    \ mut is_first_after_dot_letter_valid_txt_dll = true;\n    let mut is_first_after_dot_digit_valid_txt_dll\
    \ = true;\n    let mut is_first_after_dot_letter_valid_exe_dll = true;\n    let\
    \ mut is_first_after_dot_digit_valid_exe_dll = true;\n    let mut is_first_after_dot_letter_valid_txt_exe_dll\
    \ = true;\n    let mut is_first_after_dot_digit_valid_txt_exe_dll = true;\n  \
    \  let mut is_first_after_dot_letter_valid_txt_exe_dll_valid = true;\n    let\
    \ mut is_first_after_dot_digit_valid_txt_exe_dll_valid = true;\n    let mut is_first_after_dot_letter_valid_txt_exe_dll_valid_",
  "    // TODO: Implement the function here\n    String::from(\"No\")", "    let mut\
    \ count_digits = 0;\n    let mut count_dots = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut is_valid_prefix_length = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            count_digits\
    \ += 1;\n        }\n        if c == '.' {\n            count_dots += 1;\n    \
    \    }\n    }\n    if count_digits > 3 {\n        is_valid = false;\n    }\n \
    \   if count_dots != 1 {\n        is_valid = false;\n    }\n    let mut iter =\
    \ file_name.split('.');\n    prefix = iter.next().unwrap().to_string();\n    extension\
    \ = iter.next().unwrap().to_string();\n    if prefix.len() > 0 {\n        is_valid_prefix_length\
    \ = true;\n    }\n    if extension.len() > 0 {\n        is_valid_extension_length\
    \ = true;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic() {\n  \
    \      is_valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_prefix && is_valid_prefix_length\
    \ && is_valid_extension_length {\n        return String::from(\"Yes\");\n    }\n\
    \    return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut prefix_started = false;\n    let mut prefix_ended = false;\n\
    \    let mut extension_started = false;\n    let mut extension_ended = false;\n\
    \    let mut extension_started_at = 0;\n    let mut prefix_started_at = 0;\n \
    \   let mut prefix_ended_at = 0;\n    let mut extension_ended_at = 0;\n    let\
    \ mut i = 0;\n    for c in file_name.chars() {\n        if c == '.' {\n      \
    \      dot_count += 1;\n            prefix_ended = true;\n            prefix_ended_at\
    \ = i;\n            extension_started = true;\n            extension_started_at\
    \ = i;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n \
    \       } else if c.is_alphabetic() {\n            if !prefix_started {\n    \
    \            prefix_started = true;\n                prefix_started_at = i;\n\
    \            }\n            if extension_started {\n                extension_ended\
    \ = true;\n                extension_ended_at = i;\n            }\n        }\n\
    \        i += 1;\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if prefix_started_at == prefix_ended_at {\n        return String::from(\"\
    No\");\n    }\n    if !prefix_ended {\n        return String::from(\"No\");\n\
    \    }\n    if !extension_ended {\n        return String::from(\"No\");\n    }\n\
    \    let prefix = &file_name[prefix_started_at..prefix_ended_at];\n    let extension\
    \ = &file_name[extension_started_at..extension_ended_at];\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\"", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt\
    \ = false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        }\n        if is_before_dot {\n            if c.is_alphabetic() {\n \
    \               is_before_dot_valid = true;\n            }\n        }\n      \
    \  if is_after_dot {\n            if c == 't' {\n                is_after_dot_valid_txt\
    \ = true;\n            }\n            if c == 'e' {\n                is_after_dot_valid_exe\
    \ = true;\n            }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt || is_after_dot_valid_exe || is_after_dot_valid_dll {\n\
    \        is_after_dot_valid = true;\n    }\n    if !is_after_dot_valid {\n   \
    \     is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot_found = false;\n    let mut extension = String::new();\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot_found = true;\n        } else if\
    \ c.is_alphabetic() {\n            valid_name = true;\n        }\n    }\n    if\
    \ dot_found {\n        let mut dot_index = 0;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                dot_index = i;\n             \
    \   break;\n            }\n        }\n        extension = file_name[dot_index\
    \ + 1..].to_string();\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            valid_extension = true;\n        }\n\
    \    }\n    if digits > 3 || !dot_found || !valid_name || !valid_extension {\n\
    \        String::from(\"No\")\n    } else {\n        String::from(\"Yes\")\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut file_name = file_name.chars();\n    while let Some(c) = file_name.next()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_empty\
    \ = true;\n            is_letter = false;\n        } else if c.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if c.is_alphabetic() {\n     \
    \       is_empty = false;\n            is_letter = true;\n            extension.push(c);\n\
    \        } else {\n            is_valid = false;\n            break;\n       \
    \ }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_empty || !is_letter\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        match extension.as_str()\
    \ {\n            \"txt\" | \"exe\" | \"dll\" => is_extension = true,\n       \
    \     _ => is_extension = false,\n        }\n    }\n    if is_valid && is_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_first_letter = true;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if c.is_alphabetic() {\n \
    \           is_empty = false;\n            if is_first_letter {\n            \
    \    is_first_letter = false;\n            }\n        }\n        if dot_count\
    \ == 1 {\n            extension.push(c);\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_empty {\n        is_valid = false;\n    }\n    if\
    \ extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n   \
    \     is_extension_valid = true;\n    }\n    if is_valid && is_extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digit_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_valid = false;\n    let mut extension_valid_count\
    \ = 0;\n    let mut extension_valid_start = 0;\n    let mut extension_valid_end\
    \ = 0;\n    let mut name_valid = false;\n    let mut name_valid_count = 0;\n \
    \   let mut name_valid_start = 0;\n    let mut name_valid_end = 0;\n    let mut\
    \ name_valid_letter = false;\n    let mut name_valid_letter_count = 0;\n    let\
    \ mut name_valid_letter_start = 0;\n    let mut name_valid_letter_end = 0;\n \
    \   let mut name_valid_letter_valid = false;\n    let mut name_valid_letter_valid_count\
    \ = 0;\n    let mut name_valid_letter_valid_start = 0;\n    let mut name_valid_letter_valid_end\
    \ = 0;\n    let mut name_valid_letter_valid_letter = false;\n    let mut name_valid_letter_valid_letter_count\
    \ = 0;\n    let mut name_valid_letter_valid_letter_start = 0;\n    let mut name_valid_letter_valid_letter_end\
    \ = 0;\n    let mut name_valid_letter_valid_letter_valid = false;\n    let mut\
    \ name_valid_letter_valid_letter_valid_count = 0;\n    let mut name_valid_letter_valid_letter_valid_start\
    \ = 0;\n    let mut name_valid_letter_valid_letter_valid_end = 0;\n    let mut\
    \ name_valid_letter_valid_letter_valid_letter = false;\n    let mut name_valid_letter_valid_letter_valid_letter_count\
    \ = 0;\n    let mut name_valid_letter_valid_letter_valid_letter_start = 0;\n \
    \   let mut name_valid_letter_valid_letter_valid_letter_end = 0;\n    let mut\
    \ name_valid_letter_valid_letter_valid_letter_valid =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_dot = true;\n    let mut is_first_after_dot\
    \ = true;\n    let mut is_first_after_dot_letter = true;\n    let mut is_first_after_dot_digit\
    \ = true;\n    let mut is_first_after_dot_letter_valid = true;\n    let mut is_first_after_dot_digit_valid\
    \ = true;\n    let mut is_first_after_dot_valid = true;\n    let mut is_first_after_dot_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid = true;\n    let mut\
    \ is_first_after_dot_valid_count_valid_count = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut is_first_after_dot_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = true;\n    let mut is_first_after_dot_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    let mut substring_before_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            continue;\n        }\n        if dot_count == 0 {\n            substring_before_dot.push(c);\n\
    \        } else {\n            substring_after_dot.push(c);\n        }\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n    }\n  \
    \  if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count !=\
    \ 1 {\n        is_valid = false;\n    }\n    if !substring_before_dot.is_empty()\
    \ && substring_before_dot.chars().next().unwrap().is_alphabetic() {\n        is_substring_before_dot_valid\
    \ = true;\n    }\n    if substring_after_dot == \"txt\" || substring_after_dot\
    \ == \"exe\" || substring_after_dot == \"dll\" {\n        is_substring_after_dot_valid\
    \ = true;\n    }\n    if is_substring_before_dot_valid && is_substring_after_dot_valid\
    \ {\n        is_valid = true;\n    } else {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension = String::new();\n    let mut file_name_str = String::new();\n   \
    \ let mut extension_valid = false;\n    let mut file_name_valid = false;\n   \
    \ for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if dot_count == 1 {\n            extension.push(c);\n        }\n\
    \        if dot_count == 0 {\n            file_name_str.push(c);\n        }\n\
    \    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n   \
    \ if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if extension\
    \ == \".txt\" || extension == \".exe\" || extension == \".dll\" {\n        extension_valid\
    \ = true;\n    }\n    if file_name_str.chars().next().unwrap().is_alphabetic()\
    \ {\n        file_name_valid = true;\n    }\n    if extension_valid && file_name_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_letter = false;\n    let mut is_extension =\
    \ false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for ch in file_name.chars() {\n        if ch.is_digit(10) {\n           \
    \ digits_count += 1;\n        } else if ch == '.' {\n            dot_count +=\
    \ 1;\n            is_letter = false;\n        } else if ch.is_alphabetic() {\n\
    \            if !is_letter {\n                is_letter = true;\n            }\n\
    \        }\n        if digits_count > 3 {\n            is_valid = false;\n   \
    \         break;\n        }\n        if dot_count > 1 {\n            is_valid\
    \ = false;\n            break;\n        }\n        if !is_letter {\n         \
    \   extension.push(ch);\n        } else {\n            name.push(ch);\n      \
    \  }\n    }\n    if is_valid {\n        if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n            is_extension = true;\n      \
    \  }\n    }\n    if is_valid && is_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut extension_index\
    \ = 0;\n    let mut extension = String::new();\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut valid_extension_length\
    \ = false;\n    let mut valid_name_length = false;\n    let mut valid_name_start\
    \ = false;\n    let mut valid_name_end = false;\n    let mut valid_extension_start\
    \ = false;\n    let mut valid_extension_end = false;\n    let mut valid_extension_char\
    \ = false;\n    let mut valid_name_char = false;\n    let mut valid_name_char_count\
    \ = 0;\n    let mut valid_extension_char_count = 0;\n    let mut valid_name_char_index\
    \ = 0;\n    let mut valid_extension_char_index = 0;\n    let mut valid_name_char_start\
    \ = false;\n    let mut valid_extension_char_start = false;\n    let mut valid_name_char_end\
    \ = false;\n    let mut valid_extension_char_end = false;\n    let mut valid_name_char_start_index\
    \ = 0;\n    let mut valid_extension_char_start_index = 0;\n    let mut valid_name_char_end_index\
    \ = 0;\n    let mut valid_extension_char_end_index = 0;\n    let mut valid_name_char_start_char\
    \ = '\\0';\n    let mut valid_extension_char_start_char = '\\0';\n    let mut\
    \ valid_name_char_end_char = '\\0';\n    let mut valid_extension_char_end_char\
    \ = '\\0';\n    let mut valid_name_char_start_char_index = 0;\n    let mut valid_extension_char_start_char_index\
    \ = 0;\n    let mut valid_name_char_end_char_index = 0;\n    let mut valid_extension_char_end_char_index\
    \ = 0;\n    let mut valid_name_char_start", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let (prefix, suffix) = file_name.split_at(dot_index);\n        if prefix.is_empty()\
    \ || !prefix.chars().next().unwrap().is_alphabetic() {\n            is_valid =\
    \ false;\n        }\n        if suffix != \".txt\" && suffix != \".exe\" && suffix\
    \ != \".dll\" {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut has_letter\
    \ = false;\n    let mut has_dot = false;\n    let mut has_extension = false;\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot_count += 1;\n            has_dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            has_letter = true;\n        }\n        if\
    \ has_dot {\n            extension.push(c);\n        }\n    }\n    if digits >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if !has_letter {\n        return\
    \ String::from(\"No\");\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        has_extension = true;\n    }\n    if\
    \ has_extension {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start_index\
    \ = 0;\n    let mut prefix_end_index = 0;\n    let mut extension_start_index =\
    \ 0;\n    let mut extension_end_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut prefix_length = 0;\n    let mut extension_start_found = false;\n\
    \    let mut prefix_end_found = false;\n    let mut extension_end_found = false;\n\
    \    let mut prefix_start_found = false;\n    let mut extension_start_found =\
    \ false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end_found = false;\n    let mut extension_start_found\
    \ = false;\n    let mut extension_end_found = false;\n    let mut prefix_end_found\
    \ = false;\n    let mut extension_start_found = false;\n    let mut extension_end_found\
    \ = false;\n    let mut prefix_end", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if is_first_letter {\n   \
    \         if c.is_alphabetic() {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            }\n        }\n        if\
    \ c == '.' {\n            is_empty = false;\n        }\n        if c != '.' {\n\
    \            extension.push(c);\n        }\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid\
    \ || !is_extension_valid || is_empty {\n        is_valid = false;\n    }\n   \
    \ if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    for (index, ch) in file_name.chars().enumerate() {\n        if\
    \ ch.is_digit(10) {\n            digits_count += 1;\n        }\n        if ch\
    \ == '.' {\n            dot_count += 1;\n            dot_index = index;\n    \
    \    }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    let prefix = &file_name[..dot_index];\n    if prefix.len() == 0 {\n     \
    \   return String::from(\"No\");\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    let extension = &file_name[dot_index\
    \ + 1..];\n    if extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\" {\n        valid_extension = true;\n    }\n    if valid_prefix && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut extension_valid = false;\n    let mut extension_valid_count\
    \ = 0;\n    let mut extension_valid_start = 0;\n    let mut extension_valid_end\
    \ = 0;\n    let mut extension_valid_length = 0;\n    let mut extension_valid_length_count\
    \ = 0;\n    let mut extension_valid_length_start = 0;\n    let mut extension_valid_length_end\
    \ = 0;\n    let mut extension_valid_length_valid = false;\n    let mut extension_valid_length_valid_count\
    \ = 0;\n    let mut extension_valid_length_valid_start = 0;\n    let mut extension_valid_length_valid_end\
    \ = 0;\n    let mut extension_valid_length_valid_valid = false;\n    let mut extension_valid_length_valid_valid_count\
    \ = 0;\n    let mut extension_valid_length_valid_valid_start = 0;\n    let mut\
    \ extension_valid_length_valid_valid_end = 0;\n    let mut extension_valid_length_valid_valid_valid\
    \ = false;\n    let mut extension_valid_length_valid_valid_valid_count = 0;\n\
    \    let mut extension_valid_length_valid_valid_valid_start = 0;\n    let mut\
    \ extension_valid_length_valid_valid_valid_end = 0;\n    let mut extension_valid_length_valid_valid_valid_valid\
    \ = false;\n    let mut extension_valid_length_valid_valid_valid_valid_count =\
    \ 0;\n    let mut extension_valid_length_valid_valid_valid_valid_start = 0;\n\
    \    let mut extension_valid_length_valid_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid_valid = false;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_count = 0;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_empty = true;\n    let mut is_letter = false;\n    let mut is_extension =\
    \ false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut extension_valid = vec![\"txt\", \"exe\", \"dll\"];\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \        if c.is_alphabetic() {\n            is_letter = true;\n        }\n  \
    \      if c == '.' {\n            is_extension = true;\n        }\n        if\
    \ is_extension {\n            extension.push(c);\n        }\n        if c != '.'\
    \ {\n            is_empty = false;\n        }\n    }\n    for i in extension_valid\
    \ {\n        if i == &extension[1..] {\n            is_extension_valid = true;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty || !is_letter\
    \ || !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 {\n        is_valid = false;\n    }\n    let mut dot_index = 0;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_index\
    \ = i;\n            break;\n        }\n    }\n    let file_name_without_extension\
    \ = &file_name[..dot_index];\n    let file_extension = &file_name[dot_index +\
    \ 1..];\n    if file_name_without_extension.is_empty() || !file_name_without_extension.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\" {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut extension_index = 0;\n    let mut extension\
    \ = String::new();\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_file_name = false;\n    let mut valid_extension_length\
    \ = false;\n    let mut valid_name_length = false;\n    let mut valid_name_start\
    \ = false;\n    let mut valid_name_end = false;\n    let mut valid_extension_start\
    \ = false;\n    let mut valid_extension_end = false;\n    let mut valid_dot_count\
    \ = false;\n    let mut valid_digits_count = false;\n    let mut valid_dot_index\
    \ = false;\n    let mut valid_extension_index = false;\n    let mut valid_extension_start_index\
    \ = false;\n    let mut valid_name_start_index = false;\n    let mut valid_name_end_index\
    \ = false;\n    let mut valid_extension_end_index = false;\n    let mut valid_extension_start_char\
    \ = false;\n    let mut valid_name_start_char = false;\n    let mut valid_name_end_char\
    \ = false;\n    let mut valid_extension_end_char = false;\n    let mut valid_extension_start_char_index\
    \ = false;\n    let mut valid_name_start_char_index = false;\n    let mut valid_name_end_char_index\
    \ = false;\n    let mut valid_extension_end_char_index = false;\n    let mut valid_name_start_char_index_2\
    \ = false;\n    let mut valid_name_end_char_index_2 = false;\n    let mut valid_extension_end_char_index_2\
    \ = false;\n    let mut valid_extension_start_char_index_2 = false;\n    let mut\
    \ valid_extension_start_char_index_3 = false;\n    let mut valid_name_start_char_index_3\
    \ = false;\n    let mut valid_name_end_char", "    let mut digits = 0;\n    let\
    \ mut dot_count = 0;\n    let mut has_letter = false;\n    let mut has_dot = false;\n\
    \    let mut has_extension = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            has_dot = true;\n        } else if c.is_digit(10) {\n   \
    \         digits += 1;\n        } else if c.is_alphabetic() {\n            has_letter\
    \ = true;\n        } else if has_dot {\n            extension.push(c);\n     \
    \   }\n    }\n    if digits > 3 || dot_count != 1 || !has_letter || !has_dot {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        return String::from(\"Yes\");\n\
    \    }\n    return String::from(\"No\");", "    // TODO: Implement the function\
    \ here\n    unimplemented!()", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix = false;\n\
    \    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut i = 0;\n    while i < file_name.len()\
    \ {\n        if file_name.chars().nth(i).unwrap().is_ascii_digit() {\n       \
    \     digits_count += 1;\n        } else if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_start = i + 1;\n\
    \        } else if file_name.chars().nth(i).unwrap().is_ascii_alphabetic() {\n\
    \            if !valid_prefix {\n                prefix_start = i;\n         \
    \       valid_prefix = true;\n            }\n            prefix_end = i + 1;\n\
    \        }\n        i += 1;\n    }\n    if dot_count == 1 {\n        extension_end\
    \ = file_name.len();\n        if extension_end - extension_start == 3 {\n    \
    \        let extension = &file_name[extension_start..extension_end];\n       \
    \     if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n                valid_extension = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !valid_extension || !valid_prefix\
    \ || prefix_start == 0 || prefix_end == 0 {\n        return String::from(\"No\"\
    );\n    }\n    return String::from(\"Yes\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_empty = false;\n\
    \            if is_first_letter {\n                is_first_letter = false;\n\
    \                if c.is_lowercase() {\n                    is_extension_valid\
    \ = true;\n                }\n            }\n        }\n        if is_extension_valid\
    \ {\n            extension.push(c);\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || is_empty || !is_extension_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        match extension.as_str() {\n            \"\
    txt\" | \"exe\" | \"dll\" => return String::from(\"Yes\"),\n            _ => return\
    \ String::from(\"No\"),\n        }\n    }\n    return String::from(\"No\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_after_dot = false;\n    let mut is_after_first_letter = false;\n\
    \    let mut is_after_first_dot = false;\n    let mut is_after_second_dot = false;\n\
    \    let mut is_after_third_dot = false;\n    let mut is_after_fourth_dot = false;\n\
    \    let mut is_after_fifth_dot = false;\n    let mut is_after_sixth_dot = false;\n\
    \    let mut is_after_seventh_dot = false;\n    let mut is_after_eighth_dot =\
    \ false;\n    let mut is_after_ninth_dot = false;\n    let mut is_after_tenth_dot\
    \ = false;\n    let mut is_after_eleventh_dot = false;\n    let mut is_after_twelfth_dot\
    \ = false;\n    let mut is_after_thirteenth_dot = false;\n    let mut is_after_fourteenth_dot\
    \ = false;\n    let mut is_after_fifteenth_dot = false;\n    let mut is_after_sixteenth_dot\
    \ = false;\n    let mut is_after_seventeenth_dot = false;\n    let mut is_after_eighteenth_dot\
    \ = false;\n    let mut is_after_nineteenth_dot = false;\n    let mut is_after_twentieth_dot\
    \ = false;\n    let mut is_after_twenty_first_dot = false;\n    let mut is_after_twenty_second_dot\
    \ = false;\n    let mut is_after_twenty_third_dot = false;\n    let mut is_after_twenty_fourth_dot\
    \ = false;\n    let mut is_after_twenty_fifth_dot = false;\n    let mut is_after_twenty_sixth_dot\
    \ = false;\n    let mut is_after_twenty_seventh_dot = false;\n    let mut is_after_twenty_eighth",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut is_extension_empty = true;\n    let mut is_extension_started = false;\n\
    \    let mut is_extension_ended = false;\n    let mut extension_start_index =\
    \ 0;\n    let mut extension_end_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if is_first_letter {\n            if c.is_alphabetic() {\n\
    \                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n        if i > dot_index {\n      \
    \      is_extension_started = true;\n            if !is_extension_ended {\n  \
    \              extension_length += 1;\n            }\n            if c.is_alphabetic()\
    \ {\n                if is_extension_ended {\n                    is_valid = false;\n\
    \                    break;\n                }\n                is_extension_empty\
    \ = false;\n                extension_end_index = i;\n            } else {\n \
    \               if !is_extension_empty {\n                    is_extension_ended\
    \ = true;\n                }\n            }\n        }\n    }\n    if is_extension_started\
    \ && !is_extension_ended {\n        extension_end_index = file_name.len();\n \
    \   }\n    if extension_end_index - extension_start_index == 3 {\n        extension\
    \ = file_name[extension_start_index..extension_end_index].to_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     } else if c.is_alphabetic() {\n            is_first_char_valid = true;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid\
    \ {\n        is_valid = false;\n    } else {\n        extension = file_name[dot_index\
    \ + 1..].to_string();\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            is_extension_valid = true;\n        }\n\
    \        if !is_extension_valid {\n            is_valid = false;\n        }\n\
    \    }\n    if is_valid {\n        return String::from(\"Yes\");\n    } else {\n\
    \        return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut extension = String::new();\n    let mut\
    \ file_name_without_extension = String::new();\n    let mut extension_valid =\
    \ false;\n    let mut file_name_valid = false;\n    let mut extension_found =\
    \ false;\n    let mut file_name_without_extension_valid = false;\n    let mut\
    \ file_name_without_extension_found = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            extension_found =\
    \ true;\n        }\n        if extension_found && !c.is_digit(10) && c != '.'\
    \ {\n            extension.push(c);\n        }\n        if c != '.' && !extension_found\
    \ {\n            file_name_without_extension.push(c);\n            file_name_without_extension_found\
    \ = true;\n        }\n    }\n    if digits_count <= 3 && dot_count == 1 && file_name_without_extension_found\
    \ {\n        file_name_without_extension_valid = true;\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        extension_valid\
    \ = true;\n    }\n    if file_name_without_extension_valid && extension_valid\
    \ {\n        file_name_valid = true;\n    }\n    if file_name_valid {\n      \
    \  return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut extension = String::new();\n    let mut name = String::new();\n  \
    \  let mut name_start = false;\n    let mut extension_start = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       name_start = false;\n            extension_start = true;\n        }\n\
    \        if c.is_alphabetic() {\n            if name_start {\n               \
    \ name.push(c);\n            }\n            if extension_start {\n           \
    \     extension.push(c);\n            }\n        }\n        if c.is_alphabetic()\
    \ && !name_start {\n            name_start = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || name.len() == 0 || !name.chars().next().unwrap().is_alphabetic()\
    \ || extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_file_name\
    \ = true;\n    let mut valid_substring_before_dot = false;\n    let mut valid_substring_after_dot\
    \ = false;\n    let mut substring_before_dot = String::new();\n    let mut substring_after_dot\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            continue;\n        }\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c.is_alphabetic() {\n\
    \            valid_substring_before_dot = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        valid_file_name = false;\n    }\n    let mut\
    \ dot_index = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if\
    \ c == '.' {\n            dot_index = i;\n            break;\n        }\n    }\n\
    \    substring_before_dot = file_name[..dot_index].to_string();\n    substring_after_dot\
    \ = file_name[dot_index + 1..].to_string();\n    if substring_before_dot.is_empty()\
    \ || !substring_before_dot.chars().nth(0).unwrap().is_alphabetic() {\n       \
    \ valid_substring_before_dot = false;\n    }\n    if substring_after_dot == \"\
    txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n\
    \        valid_substring_after_dot = true;\n    }\n    if valid_file_name && valid_substring_before_dot\
    \ && valid_substring_after_dot {\n        return String::from(\"Yes\");\n    }\n\
    \    return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ (before_dot, after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n        return String::from(\"\
    No\");\n    }\n    for ext in vec![\"txt\", \"exe\", \"dll\"] {\n        if after_dot\
    \ == ext {\n            valid_extension = true;\n            break;\n        }\n\
    \    }\n    if valid_extension {\n        return String::from(\"Yes\");\n    }\n\
    \    String::from(\"No\")", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n   \
    \ for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let extension\
    \ = &file_name[dot_index + 1..];\n    if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_extension {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_extension_chars = true;\n    let mut is_valid_prefix_chars\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_extension_end = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_dot = true;\n    let mut is_valid_prefix_dot\
    \ = true;\n    let mut is_valid_extension_digits = true;\n    let mut is_valid_prefix_digits\
    \ = true;\n    let mut is_valid_extension_letters = true;\n    let mut is_valid_prefix_letters\
    \ = true;\n    let mut is_valid_extension_letter_count = true;\n    let mut is_valid_prefix_letter_count\
    \ = true;\n    let mut is_valid_extension_digit_count = true;\n    let mut is_valid_prefix_digit_count\
    \ = true;\n    let mut is_valid_extension_letter_start = true;\n    let mut is_valid_prefix_letter_start\
    \ = true;\n    let mut is_valid_extension_letter_end = true;\n    let mut is_valid_prefix_letter_end\
    \ = true;\n    let mut is_valid_extension_letter_dot = true;\n    let mut is_valid_prefix_letter_dot\
    \ = true;\n    let mut is_valid_extension_letter_digits = true;\n    let mut is_valid_prefix_letter_digits\
    \ = true;\n    let mut is_valid_extension_letter_letters = true;\n    let mut\
    \ is_valid_", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n   \
    \ let mut first_char_is_letter = false;\n    let mut last_three_chars = String::from(\"\
    \");\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n        \
    \    digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n        if !first_char_is_letter && c.is_alphabetic() {\n\
    \            first_char_is_letter = true;\n        }\n        if last_three_chars.len()\
    \ == 3 {\n            last_three_chars.remove(0);\n        }\n        last_three_chars.push(c);\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !first_char_is_letter ||\n\
    \        !(last_three_chars == \"txt\" || last_three_chars == \"exe\" || last_three_chars\
    \ == \"dll\") {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid_extension = false;\n    let mut valid_prefix = false;\n    let mut\
    \ extension_start = 0;\n    let mut prefix_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            prefix_end = i;\n        }\n\
    \    }\n    if digits_count <= 3 && dot_count == 1 {\n        let extension =\
    \ &file_name[extension_start..];\n        let prefix = &file_name[..prefix_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n        if !prefix.is_empty()\
    \ && prefix.chars().next().unwrap().is_alphabetic() {\n            valid_prefix\
    \ = true;\n        }\n    }\n    if valid_extension && valid_prefix {\n      \
    \  return String::from(\"Yes\");\n    }\n    String::from(\"No\")", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_after_dot_valid_txt = false;\n    let mut is_after_dot_valid_exe\
    \ = false;\n    let mut is_after_dot_valid_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if is_before_dot {\n     \
    \       if c.is_alphabetic() {\n                is_before_dot_valid = true;\n\
    \            }\n        } else if is_after_dot {\n            if c == 't' {\n\
    \                is_after_dot_valid_txt = true;\n            } else if c == 'e'\
    \ {\n                is_after_dot_valid_exe = true;\n            } else if c ==\
    \ 'd' {\n                is_after_dot_valid_dll = true;\n            }\n     \
    \   }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n  \
    \  if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_before_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_after_dot_valid_txt || is_after_dot_valid_exe\
    \ || is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n    }\n   \
    \ if !is_after_dot_valid {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut extension = String::new();\n    let mut name = String::new();\n    let mut\
    \ valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n        if c == '.'\
    \ && dot_count == 1 {\n            name = extension;\n            extension =\
    \ String::new();\n        } else if c != '.' {\n            extension.push(c);\n\
    \        }\n    }\n    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    for ext in valid_extensions {\n  \
    \      if extension == ext {\n            valid_extension = true;\n        }\n\
    \    }\n    if digits_count <= 3 && dot_count == 1 && valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut is_valid_prefix = false;\n    let mut is_valid_digit = true;\n  \
    \  let mut is_valid_dot = true;\n    let mut is_valid_length = true;\n    let\
    \ mut is_valid_prefix_length = true;\n    let mut is_valid_extension_length =\
    \ true;\n    let mut is_valid_extension_char = true;\n    let mut is_valid_prefix_char\
    \ = true;\n    let mut is_valid_digit_char = true;\n    let mut is_valid_dot_char\
    \ = true;\n    let mut is_valid_length_char = true;\n    let mut is_valid_prefix_length_char\
    \ = true;\n    let mut is_valid_extension_length_char = true;\n    let mut is_valid_extension_char_char\
    \ = true;\n    let mut is_valid_prefix_char_char = true;\n    let mut is_valid_digit_char_char\
    \ = true;\n    let mut is_valid_dot_char_char = true;\n    let mut is_valid_length_char_char\
    \ = true;\n    let mut is_valid_prefix_length_char_char = true;\n    let mut is_valid_extension_length_char_char\
    \ = true;\n    let mut is_valid_extension_char_char_char = true;\n    let mut\
    \ is_valid_prefix_char_char_char = true;\n    let mut is_valid_digit_char_char_char\
    \ = true;\n    let mut is_valid_dot_char_char_char = true;\n    let mut is_valid_length_char_char_char\
    \ = true;\n    let mut is_valid_prefix_length_char_char_char = true;\n    let\
    \ mut is_valid_extension_length_char_char_char = true;\n    let mut is_valid_extension_char_char_char_char\
    \ = true;\n    let mut is_valid_prefix", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n\
    \    for (index, ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if ch == '.' {\n     \
    \       dot_count += 1;\n            dot_index = index;\n        }\n    }\n  \
    \  if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        let substring_before_dot = &file_name[..dot_index];\n\
    \        let substring_after_dot = &file_name[dot_index + 1..];\n        if substring_before_dot.is_empty()\
    \ || !substring_before_dot.chars().next().unwrap().is_alphabetic() {\n       \
    \     is_valid = false;\n        }\n        if substring_after_dot != \"txt\"\
    \ && substring_after_dot != \"exe\" && substring_after_dot != \"dll\" {\n    \
    \        is_valid = false;\n        }\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_started\
    \ = false;\n    let mut is_after_dot_started = false;\n    let mut is_before_dot_started_with_letter\
    \ = false;\n    let mut is_after_dot_started_with_letter = false;\n    let mut\
    \ is_before_dot_started_with_digit = false;\n    let mut is_after_dot_started_with_digit\
    \ = false;\n    let mut is_before_dot_started_with_symbol = false;\n    let mut\
    \ is_after_dot_started_with_symbol = false;\n    let mut is_before_dot_started_with_underscore\
    \ = false;\n    let mut is_after_dot_started_with_underscore = false;\n    let\
    \ mut is_before_dot_started_with_space = false;\n    let mut is_after_dot_started_with_space\
    \ = false;\n    let mut is_before_dot_started_with_dot = false;\n    let mut is_after_dot_started_with_dot\
    \ = false;\n    let mut is_before_dot_started_with_dash = false;\n    let mut\
    \ is_after_dot_started_with_dash = false;\n    let mut is_before_dot_started_with_plus\
    \ = false;\n    let mut is_after_dot_started_with_plus = false;\n    let mut is_before_dot_started_with_slash\
    \ = false;\n    let mut is_after_dot_started_with_slash = false;\n    let mut\
    \ is_before_dot_started_with_backslash = false;\n    let mut is_after_dot_started_with_backslash\
    \ = false;\n    let mut is_before_dot_started_with_semicolon = false;\n    let\
    \ mut is_after_dot_started_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_first_char\
    \ = true;\n    let mut is_valid_extension_first_char = true;\n    let mut is_valid_extension_first_char_is_letter\
    \ = true;\n    let mut is_valid_prefix_first_char_is_letter = true;\n    let mut\
    \ is_valid_extension_first_char_is_digit = true;\n    let mut is_valid_prefix_first_char_is_digit\
    \ = true;\n    let mut is_valid_extension_first_char_is_dot = true;\n    let mut\
    \ is_valid_prefix_first_char_is_dot = true;\n    let mut is_valid_extension_first_char_is_underscore\
    \ = true;\n    let mut is_valid_prefix_first_char_is_underscore = true;\n    let\
    \ mut is_valid_extension_first_char_is_hyphen = true;\n    let mut is_valid_prefix_first_char_is_hyphen\
    \ = true;\n    let mut is_valid_extension_first_char_is_space = true;\n    let\
    \ mut is_valid_prefix_first_char_is_space = true;\n    let mut is_valid_extension_first_char_is_slash\
    \ = true;\n    let mut is_valid_prefix_first_char_is_slash = true;\n    let mut\
    \ is_valid_extension_first_char_is_backslash = true;\n    let mut is_valid_prefix_first_char_is_backslash\
    \ = true;\n    let mut is_valid_extension_first_char_is_vertical_bar =", "   \
    \ let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut extension_start = 0;\n\
    \    let mut prefix_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            extension_start = i\
    \ + 1;\n        } else if c.is_alphabetic() {\n            prefix_end = i;\n \
    \       }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if extension_start == file_name.len() {\n        return String::from(\"\
    No\");\n    }\n    if prefix_end == 0 {\n        return String::from(\"No\");\n\
    \    }\n    let extension = &file_name[extension_start..];\n    let prefix = &file_name[..prefix_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if valid_extension && valid_prefix\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ has_letter = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c.is_alphabetic() {\n          \
    \  has_letter = true;\n        }\n        if dot_count == 1 {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\"\
    );\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n   \
    \ }\n    if !has_letter {\n        return String::from(\"No\");\n    }\n    if\
    \ extension == \".txt\" || extension == \".exe\" || extension == \".dll\" {\n\
    \        has_extension = true;\n    }\n    if has_extension {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_extension_valid = false;\n    let mut is_substring_valid = false;\n\
    \    let mut is_substring_empty = true;\n    let mut is_substring_start_with_letter\
    \ = false;\n    let mut is_substring_start_with_digit = false;\n    let mut is_substring_start_with_special_char\
    \ = false;\n    let mut is_substring_end_with_special_char = false;\n    let mut\
    \ is_substring_end_with_digit = false;\n    let mut is_substring_end_with_letter\
    \ = false;\n    let mut is_substring_contain_special_char = false;\n    let mut\
    \ is_substring_contain_digit = false;\n    let mut is_substring_contain_letter\
    \ = false;\n    let mut is_substring_contain_dot = false;\n    let mut is_substring_contain_space\
    \ = false;\n    let mut is_substring_contain_underscore = false;\n    let mut\
    \ is_substring_contain_hyphen = false;\n    let mut is_substring_contain_at =\
    \ false;\n    let mut is_substring_contain_hash = false;\n    let mut is_substring_contain_dollar\
    \ = false;\n    let mut is_substring_contain_percent = false;\n    let mut is_substring_contain_ampersand\
    \ = false;\n    let mut is_substring_contain_asterisk = false;\n    let mut is_substring_contain_plus\
    \ = false;\n    let mut is_substring_contain_equal = false;\n    let mut is_substring_contain_tilde\
    \ = false;\n    let mut is_substring_contain_backslash = false;\n    let mut is_substring_contain_forward_slash\
    \ = false;\n    let mut is_substring_contain_colon = false;\n    let mut is_substring_contain_semicolon\
    \ = false;\n", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut split = file_name.split('.');\n\
    \    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n\
    \    if first.is_empty() || !first.chars().next().unwrap().is_alphabetic() ||\
    \ \n        !(second == \"txt\" || second == \"exe\" || second == \"dll\") {\n\
    \        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_prefix_length = false;\n    let mut is_valid_digits_count = false;\n\
    \    let mut is_valid_dot_count = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension = file_name.chars().skip(i + 1).collect();\n\
    \            prefix = file_name.chars().take(i).collect();\n        }\n    }\n\
    \    if digits_count > 3 {\n        is_valid_digits_count = false;\n    } else\
    \ {\n        is_valid_digits_count = true;\n    }\n    if dot_count != 1 {\n \
    \       is_valid_dot_count = false;\n    } else {\n        is_valid_dot_count\
    \ = true;\n    }\n    if extension.len() == 3 {\n        is_valid_extension_length\
    \ = true;\n    } else {\n        is_valid_extension_length = false;\n    }\n \
    \   if prefix.len() > 0 {\n        is_valid_prefix_length = true;\n    } else\
    \ {\n        is_valid_prefix_length = false;\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        is_valid_extension\
    \ = true;\n    } else {\n        is_valid_extension = false;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_prefix = true;\n    } else {\n        is_valid_prefix =\
    \ false;\n    }\n    if is_valid_digits", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_substring = false;\n    let mut is_valid_substring_before_dot\
    \ = false;\n    let mut is_valid_substring_after_dot = false;\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_after_dot = String::new();\n    let\
    \ mut is_valid_substring_before_dot_first_char = false;\n    let mut is_valid_substring_after_dot_first_char\
    \ = false;\n    let mut is_valid_substring_before_dot_second_char = false;\n \
    \   let mut is_valid_substring_after_dot_second_char = false;\n    let mut is_valid_substring_before_dot_third_char\
    \ = false;\n    let mut is_valid_substring_after_dot_third_char = false;\n   \
    \ let mut is_valid_substring_before_dot_fourth_char = false;\n    let mut is_valid_substring_after_dot_fourth_char\
    \ = false;\n    let mut is_valid_substring_before_dot_fifth_char = false;\n  \
    \  let mut is_valid_substring_after_dot_fifth_char = false;\n    let mut is_valid_substring_before_dot_sixth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_sixth_char = false;\n   \
    \ let mut is_valid_substring_before_dot_seventh_char = false;\n    let mut is_valid_substring_after_dot_seventh_char\
    \ = false;\n    let mut is_valid_substring_before_dot_eighth_char = false;\n \
    \   let mut is_valid_substring_after_dot_eighth_char = false;\n    let mut is_valid_substring_before_dot_ninth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_ninth_char = false;\n   \
    \ let mut is_", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut valid_extension = false;\n    let mut valid_prefix = false;\n    let\
    \ mut extension_start = 0;\n    let mut prefix_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            prefix_end\
    \ = i;\n        }\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if file_name[..prefix_end].is_empty() {\n        return String::from(\"\
    No\");\n    }\n    if file_name[extension_start..].len() > 3 {\n        return\
    \ String::from(\"No\");\n    }\n    for ext in [\"txt\", \"exe\", \"dll\"].iter()\
    \ {\n        if file_name[extension_start..].eq(ext) {\n            valid_extension\
    \ = true;\n        }\n    }\n    if !valid_extension {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")", "    let mut count_digits = 0;\n  \
    \  let mut count_dots = 0;\n    let mut is_valid = true;\n    let mut is_valid_substring_after_dot\
    \ = false;\n    let mut is_valid_substring_before_dot = false;\n    let mut is_valid_substring_before_dot_start_with_letter\
    \ = false;\n    let mut is_valid_substring_before_dot_contains_only_letters =\
    \ true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes_and_spaces\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes_and_spaces_and_apostrophes\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes_and_spaces_and_apostrophes_and_commas\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes_and_spaces_and_apostrophes_and_commas_and_periods\
    \ = true;\n    let mut is_valid_substring_before_dot_contains_only_letters_and_digits_and_underscores_and_dashes_and_spaces_and_apostrophes_and_commas_and_periods_and_question_marks\
    \ = true;\n    let mut is_valid_substring_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut ext_index\
    \ = 0;\n    let mut ext_len = 0;\n    let mut valid_ext = false;\n    let mut\
    \ valid_name = false;\n    let mut valid_ext_len = false;\n    let mut valid_ext_char\
    \ = false;\n    let mut valid_name_char = false;\n    let mut valid_name_len =\
    \ false;\n    let mut valid_name_start = false;\n    let mut valid_name_end =\
    \ false;\n    let mut valid_ext_start = false;\n    let mut valid_ext_end = false;\n\
    \    let mut valid_dot_count = false;\n    let mut valid_digits_count = false;\n\
    \    let mut valid_dot_index = false;\n    let mut valid_ext_index = false;\n\
    \    let mut valid_ext_len_index = false;\n    let mut valid_ext_len_index_end\
    \ = false;\n    let mut valid_name_len_index = false;\n    let mut valid_name_len_index_end\
    \ = false;\n    let mut valid_name_start_index = false;\n    let mut valid_name_end_index\
    \ = false;\n    let mut valid_ext_start_index = false;\n    let mut valid_ext_end_index\
    \ = false;\n    let mut valid_dot_index_index = false;\n    let mut valid_ext_index_index\
    \ = false;\n    let mut valid_ext_len_index_index = false;\n    let mut valid_name_len_index_index\
    \ = false;\n    let mut valid_name_start_index_index = false;\n    let mut valid_name_end_index_index\
    \ = false;\n    let mut valid_ext_start_index_index = false;\n    let mut valid_ext_end_index_index\
    \ = false;\n    let mut valid_dot_index_index_index = false;\n    let mut valid_ext_index_index_index\
    \ = false;\n    let mut valid_ext_len_index_index_index = false;\n    let mut\
    \ valid_name", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut is_first_letter = true;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n        if is_first_letter\
    \ {\n            if !c.is_alphabetic() {\n                is_valid = false;\n\
    \            }\n            is_first_letter = false;\n        }\n    }\n    if\
    \ digits_count > 3 || dot_count != 1 || is_valid == false {\n        return String::from(\"\
    No\");\n    }\n    let substring = &file_name[dot_index + 1..];\n    if substring\
    \ == \"txt\" || substring == \"exe\" || substring == \"dll\" {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_substring_valid = false;\n    let mut is_substring_empty = true;\n\
    \    let mut is_substring_start_with_letter = false;\n    let mut is_substring_end_with_valid_extension\
    \ = false;\n    let mut is_substring_end_with_valid_extension_count = 0;\n   \
    \ let mut is_substring_end_with_valid_extension_index = 0;\n    let mut is_substring_end_with_valid_extension_length\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_count = 0;\n\
    \    let mut is_substring_end_with_valid_extension_length_index = 0;\n    let\
    \ mut is_substring_end_with_valid_extension_length_length = 0;\n    let mut is_substring_end_with_valid_extension_length_length_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_index\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_index\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_length\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_length_count\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_length_index\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_length_length\
    \ = 0;\n    let mut is_substring_end_with_valid_extension_length_length_length_length_length_count",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_count = true;\n    let mut is_valid_prefix_count\
    \ = true;\n    let mut is_valid_digits_count = true;\n    let mut is_valid_dot_count\
    \ = true;\n    let mut is_valid_extension_empty = true;\n    let mut is_valid_prefix_empty\
    \ = true;\n    let mut is_valid_digits_empty = true;\n    let mut is_valid_dot_empty\
    \ = true;\n    let mut is_valid_extension_letter = true;\n    let mut is_valid_prefix_letter\
    \ = true;\n    let mut is_valid_digits_letter = true;\n    let mut is_valid_dot_letter\
    \ = true;\n    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_digits_length = true;\n    let mut is_valid_dot_length\
    \ = true;\n    let mut is_valid_extension_digit = true;\n    let mut is_valid_prefix_digit\
    \ = true;\n    let mut is_valid_digits_digit = true;\n    let mut is_valid_dot_digit\
    \ = true;\n    let mut is_valid_extension_dot = true;\n    let mut is_valid_prefix_dot\
    \ = true;\n    let mut is_valid_digits_dot = true;\n    let mut is_valid_dot_dot\
    \ = true;\n    let mut is_valid_extension_valid = true;\n    let mut is_valid_prefix_valid\
    \ = true;\n    let mut is_valid_digits_valid = true;\n    let mut is_valid_dot_valid\
    \ = true;\n    let mut is_valid_extension_valid_count = true;\n    let mut is_valid_prefix",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_extension_valid = false;\n    let mut is_prefix_valid\
    \ = false;\n    let mut is_prefix_empty = true;\n    let mut is_prefix_started\
    \ = false;\n    let mut is_prefix_finished = false;\n    let mut is_extension_started\
    \ = false;\n    let mut is_extension_finished = false;\n    let mut prefix = String::new();\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            digits_count += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            is_prefix_finished\
    \ = true;\n            is_extension_started = true;\n        }\n        if !is_prefix_finished\
    \ {\n            if c.is_alphabetic() {\n                is_prefix_started = true;\n\
    \                is_prefix_empty = false;\n            }\n            if is_prefix_started\
    \ {\n                prefix.push(c);\n            }\n        }\n        if is_extension_started\
    \ {\n            if c.is_alphabetic() {\n                is_extension_finished\
    \ = true;\n            }\n            if is_extension_finished {\n           \
    \     extension.push(c);\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_prefix_empty {\n        is_valid = false;\n    }\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_extension_valid = true;\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_prefix_valid = true;\n    }\n    if is_valid && is_extension_valid\
    \ && is_prefix_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut first_char = true;\n    let mut first_char_valid = false;\n\
    \    let mut after_dot_valid = false;\n    let mut after_dot_count = 0;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       first_char = true;\n        }\n        if first_char {\n            if\
    \ c.is_alphabetic() {\n                first_char_valid = true;\n            \
    \    first_char = false;\n            }\n        }\n        if dot_count == 1\
    \ {\n            if after_dot_count < 3 {\n                after_dot_count +=\
    \ 1;\n            }\n            if after_dot_count == 3 {\n                if\
    \ c == 't' || c == 'e' || c == 'd' {\n                    after_dot_valid = true;\n\
    \                }\n            }\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || !first_char_valid || !after_dot_valid {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    // TODO: Implement this\
    \ function\n    String::from(\"No\")", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut prefix = String::new();\n    let mut extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            prefix = file_name[..i].to_string();\n   \
    \         extension = file_name[i+1..].to_string();\n        }\n    }\n    if\
    \ digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count\
    \ != 1 {\n        return String::from(\"No\");\n    }\n    if prefix.len() ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    for c in prefix.chars()\
    \ {\n        if c.is_alphabetic() {\n            valid_prefix = true;\n      \
    \      break;\n        }\n    }\n    if !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_digit = false;\n    let mut is_letter = false;\n   \
    \ let mut is_dot = false;\n    let mut is_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    let mut extension_list\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            count += 1;\n            is_digit = true;\n\
    \        }\n        if c == '.' {\n            dot_count += 1;\n            is_dot\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_letter =\
    \ true;\n        }\n    }\n    if count > 3 || dot_count != 1 || !is_digit ||\
    \ !is_letter || !is_dot {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        for ext in extension_list.iter()\
    \ {\n            if ext == &extension {\n                is_extension = true;\n\
    \            }\n        }\n    }\n    if is_valid && is_extension {\n        return\
    \ String::from(\"Yes\");\n    } else {\n        return String::from(\"No\");\n\
    \    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_name_start = false;\n    let mut valid_name_end\
    \ = false;\n    let mut valid_extension_start = false;\n    let mut valid_extension_end\
    \ = false;\n    let mut valid_extension_length = false;\n    let mut valid_name_length\
    \ = false;\n    let mut valid_name_length_start = false;\n    let mut valid_name_length_end\
    \ = false;\n    let mut valid_extension_length_start = false;\n    let mut valid_extension_length_end\
    \ = false;\n    let mut valid_extension_length_end_start = false;\n    let mut\
    \ valid_extension_length_end_end = false;\n    let mut valid_name_length_end_start\
    \ = false;\n    let mut valid_name_length_end_end = false;\n    let mut valid_name_length_end_end_start\
    \ = false;\n    let mut valid_name_length_end_end_end = false;\n    let mut valid_name_length_end_end_end_start\
    \ = false;\n    let mut valid_name_length_end_end_end_end = false;\n    let mut\
    \ valid_name_length_end_end_end_end_start = false;\n    let mut valid_name_length_end_end_end_end_end\
    \ = false;\n    let mut valid_name_length_end_end_end_end_end_start = false;\n\
    \    let mut valid_name_length_end_end_end_end_end_end = false;\n    let mut valid_name_length_end_end_end_end_end_end_start\
    \ = false;\n    let mut valid_name_length_end_end_end_end_end_end_end = false;\n\
    \    let mut valid_name_length_end_end_end_end_end_end_end_start = false;\n  \
    \  let mut valid_name_length_end_end_", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut extension = String::new();\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_name\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_length = true;\n    let mut is_valid_name_length\
    \ = true;\n    let mut is_valid_name_start = true;\n    let mut name = String::new();\n\
    \    let mut name_length = 0;\n    let mut extension_length = 0;\n    let mut\
    \ extension_start = 0;\n    let mut name_start = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if c.is_alphabetic() {\n            name_start = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid_digits = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid_dot = false;\n    }\n    if\
    \ extension_start != 0 {\n        extension = file_name[extension_start..].to_string();\n\
    \        extension_length = extension.len();\n        if extension_length == 3\
    \ {\n            if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n                is_valid_extension = true;\n            }\n  \
    \      }\n    }\n    if name_start != 0 {\n        name = file_name[..name_start].to_string();\n\
    \        name_length = name.len();\n        if name_length > 0 {\n           \
    \ if name.chars().next().unwrap().is_alphabetic() {\n                is_valid_name\
    \ = true;\n            }\n        }\n    }\n    if extension_length != 3 {\n \
    \       is_valid_ext", "    let mut digits_count = 0;\n    let mut dot_count =\
    \ 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_before_dot_valid = false;\n    let\
    \ mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt = false;\n\
    \    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if is_before_dot {\n     \
    \           is_before_dot_valid = true;\n            } else if is_after_dot {\n\
    \                if c == 't' {\n                    is_after_dot_valid_txt = true;\n\
    \                } else if c == 'e' {\n                    is_after_dot_valid_exe\
    \ = true;\n                } else if c == 'd' {\n                    is_after_dot_valid_dll\
    \ = true;\n                }\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if !is_before_dot_valid {\n        is_valid = false;\n\
    \    }\n    if is_after_dot_valid_txt {\n        is_after_dot_valid = true;\n\
    \    } else if is_after_dot_valid_exe {\n        is_after_dot_valid = true;\n\
    \    } else if is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n\
    \    }\n    if !is_after_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        String::from(\"", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if c == '.' {\n            extension\
    \ = String::from(&file_name[(file_name.find('.').unwrap() + 1)..]);\n        \
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \                is_extension_valid = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_alphabetic() {\n            if i ==\
    \ 0 {\n                is_substring_before_dot_valid = true;\n            }\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if is_substring_before_dot_valid\
    \ {\n        let substring_after_dot = file_name.split('.').collect::<Vec<&str>>()[1];\n\
    \        if substring_after_dot == \"txt\" || substring_after_dot == \"exe\" ||\
    \ substring_after_dot == \"dll\" {\n            is_substring_after_dot_valid =\
    \ true;\n        }\n    }\n    if is_substring_after_dot_valid {\n        is_valid\
    \ = true;\n    } else {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_last_dot = false;\n    let mut is_last_letter = false;\n\
    \    let mut is_last_digit = false;\n    let mut is_last_extension = false;\n\
    \    let mut is_last_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n            is_last_digit = true;\n            is_last_letter = false;\n\
    \            is_last_extension = false;\n        } else if c == '.' {\n      \
    \      dot_count += 1;\n            is_last_dot = true;\n            is_last_letter\
    \ = false;\n            is_last_digit = false;\n            is_last_extension\
    \ = false;\n        } else if c.is_alphabetic() {\n            if is_first_letter\
    \ {\n                is_first_letter = false;\n            }\n            if is_last_dot\
    \ {\n                is_first_dot = false;\n            }\n            is_last_letter\
    \ = true;\n            is_last_digit = false;\n            is_last_extension =\
    \ false;\n        } else {\n            is_valid = false;\n            break;\n\
    \        }\n        if is_last_letter {\n            extension.push(c);\n    \
    \    }\n        if is_last_dot {\n            is_last_extension = true;\n    \
    \    }\n        if is_last_extension {\n            if extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\" {\n                is_last_extension_valid\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_first_dot || !is_last_extension_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")", "    let mut count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_ext = false;\n    let mut is_valid_name = false;\n    let mut is_valid_num\
    \ = true;\n    let mut is_valid_dot = false;\n    let mut is_valid_ext_count =\
    \ false;\n    let mut is_valid_name_count = false;\n    let mut is_valid_num_count\
    \ = true;\n    let mut is_valid_dot_count = false;\n    let mut is_valid_ext_count_count\
    \ = false;\n    let mut is_valid_name_count_count = false;\n    let mut is_valid_num_count_count\
    \ = true;\n    let mut is_valid_dot_count_count = false;\n    let mut is_valid_ext_count_count_count\
    \ = false;\n    let mut is_valid_name_count_count_count = false;\n    let mut\
    \ is_valid_num_count_count_count = true;\n    let mut is_valid_dot_count_count_count\
    \ = false;\n    let mut is_valid_ext_count_count_count_count = false;\n    let\
    \ mut is_valid_name_count_count_count_count = false;\n    let mut is_valid_num_count_count_count_count\
    \ = true;\n    let mut is_valid_dot_count_count_count_count = false;\n    let\
    \ mut is_valid_ext_count_count_count_count_count = false;\n    let mut is_valid_name_count_count_count_count_count\
    \ = false;\n    let mut is_valid_num_count_count_count_count_count = true;\n \
    \   let mut is_valid_dot_count_count_count_count_count = false;\n    let mut is_valid_ext_count_count_count_count_count_count\
    \ = false;\n    let mut is_valid_name_count_count_count_count_count_count = false;\n\
    \    let mut is_valid_num_count_count_count_count_count_count = true;\n    let\
    \ mut", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = false;\n        }\n        if is_first_letter && !c.is_alphabetic() {\n  \
    \          is_valid = false;\n        }\n        if !is_first_letter && c != '.'\
    \ {\n            extension.push(c);\n        }\n    }\n    if digits_count > 3\
    \ {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        is_extension_valid = true;\n    }\n    if is_valid &&\
    \ is_extension_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut letter_count = 0;\n    let mut extension_count = 0;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_valid\
    \ = false;\n    let mut extension_valid_count = 0;\n    let mut extension_valid_start\
    \ = 0;\n    let mut extension_valid_end = 0;\n    let mut extension_valid_length\
    \ = 0;\n    let mut extension_valid_length_count = 0;\n    let mut extension_valid_length_start\
    \ = 0;\n    let mut extension_valid_length_end = 0;\n    let mut extension_valid_length_valid\
    \ = false;\n    let mut extension_valid_length_valid_count = 0;\n    let mut extension_valid_length_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_end = 0;\n    let mut extension_valid_length_valid_valid\
    \ = false;\n    let mut extension_valid_length_valid_valid_count = 0;\n    let\
    \ mut extension_valid_length_valid_valid_start = 0;\n    let mut extension_valid_length_valid_valid_end\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid = false;\n    let\
    \ mut extension_valid_length_valid_valid_valid_count = 0;\n    let mut extension_valid_length_valid_valid_valid_start\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid = false;\n    let mut extension_valid_length_valid_valid_valid_valid_count\
    \ = 0;\n    let mut extension_valid_length_valid_valid_valid_valid_start = 0;\n\
    \    let mut extension_valid_length_valid_valid_valid_valid_end = 0;\n    let\
    \ mut extension_valid_length_valid_valid_valid_valid_valid = false;\n    let mut\
    \ extension_valid_length_valid_valid_valid_valid_valid_count = 0;\n    let mut\
    \ extension_valid_length_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_letter_valid = false;\n    let mut is_after_dot_valid = false;\n  \
    \  let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid_txt =\
    \ false;\n    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    let mut is_after_dot_valid_txt_checked = false;\n    let mut is_after_dot_valid_exe_checked\
    \ = false;\n    let mut is_after_dot_valid_dll_checked = false;\n    let mut is_after_dot_valid_txt_checked_first_letter\
    \ = false;\n    let mut is_after_dot_valid_exe_checked_first_letter = false;\n\
    \    let mut is_after_dot_valid_dll_checked_first_letter = false;\n    let mut\
    \ is_after_dot_valid_txt_checked_second_letter = false;\n    let mut is_after_dot_valid_exe_checked_second_letter\
    \ = false;\n    let mut is_after_dot_valid_dll_checked_second_letter = false;\n\
    \    let mut is_after_dot_valid_txt_checked_third_letter = false;\n    let mut\
    \ is_after_dot_valid_exe_checked_third_letter = false;\n    let mut is_after_dot_valid_dll_checked_third_letter\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n            is_first_letter = true;\n            if is_after_dot_valid_txt_checked\
    \ && is_after_dot_valid_exe_checked && is_after_dot_valid_dll_checked {\n    \
    \            is_after_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_letter_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            digits_count += 1;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            is_first_letter = true;\n\
    \        }\n        if is_first_letter {\n            if c.is_alphabetic() {\n\
    \                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if c == '.' {\n            extension\
    \ = file_name.chars().skip_while(|&c| c != '.').skip(1).collect();\n         \
    \   if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \                is_extension_valid = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_prefix_first_char\
    \ = false;\n    let mut is_valid_prefix_rest_chars = false;\n    let mut is_valid_prefix_rest_chars_count\
    \ = 0;\n    let mut is_valid_prefix_rest_chars_count_max = 0;\n    let mut is_valid_prefix_rest_chars_count_max_reached\
    \ = false;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count = 0;\n\
    \    let mut is_valid_prefix_rest_chars_count_max_reached_count_max = 0;\n   \
    \ let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached = false;\n\
    \    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count\
    \ = 0;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max\
    \ = 0;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max_reached\
    \ = false;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max_reached_count\
    \ = 0;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max_reached_count_max\
    \ = 0;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max_reached_count_max_reached\
    \ = false;\n    let mut is_valid_prefix_rest_chars_count_max_reached_count_max_reached_count_max_reached_count_max_reached",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_first_letter = true;\n\
    \    let mut is_extension_valid = false;\n    let mut extension_start = 0;\n \
    \   let mut extension_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            is_empty =\
    \ false;\n            if is_first_letter {\n                is_first_letter =\
    \ false;\n            }\n        }\n        if i == extension_start {\n      \
    \      extension_end = i + 3;\n        }\n        if i > extension_start && i\
    \ < extension_end {\n            if c.is_alphabetic() {\n                is_extension_valid\
    \ = true;\n            } else {\n                is_extension_valid = false;\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ is_empty || is_first_letter || !is_extension_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_valid\
    \ = false;\n    let mut is_substring_empty = true;\n    let mut is_substring_starts_with_letter\
    \ = false;\n    let mut is_substring_ends_with_valid_extension = false;\n    let\
    \ mut is_substring_ends_with_valid_extension_count = 0;\n    let mut is_substring_ends_with_valid_extension_txt\
    \ = false;\n    let mut is_substring_ends_with_valid_extension_exe = false;\n\
    \    let mut is_substring_ends_with_valid_extension_dll = false;\n    let mut\
    \ is_substring_ends_with_valid_extension_txt_count = 0;\n    let mut is_substring_ends_with_valid_extension_exe_count\
    \ = 0;\n    let mut is_substring_ends_with_valid_extension_dll_count = 0;\n  \
    \  let mut is_substring_ends_with_valid_extension_txt_index = 0;\n    let mut\
    \ is_substring_ends_with_valid_extension_exe_index = 0;\n    let mut is_substring_ends_with_valid_extension_dll_index\
    \ = 0;\n    let mut is_substring_ends_with_valid_extension_txt_index_count = 0;\n\
    \    let mut is_substring_ends_with_valid_extension_exe_index_count = 0;\n   \
    \ let mut is_substring_ends_with_valid_extension_dll_index_count = 0;\n    let\
    \ mut is_substring_ends_with_valid_extension_txt_index_count_2 = 0;\n    let mut\
    \ is_substring_ends_with_valid_extension_exe_index_count_2 = 0;\n    let mut is_substring_ends_with_valid_extension_dll_index_count_2\
    \ = 0;\n    let mut is_substring_ends_with_valid_extension_txt_index_count_",
  "    let mut digits = 0;\n    let mut dot_found = false;\n    let mut extension\
    \ = String::new();\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        }\n        if c == '.' {\n            dot_found\
    \ = true;\n        }\n        if dot_found && !c.is_digit(10) && !c.is_alphabetic()\
    \ {\n            return String::from(\"No\");\n        }\n        if dot_found\
    \ && c.is_alphabetic() {\n            extension.push(c);\n        }\n    }\n \
    \   if digits > 3 {\n        return String::from(\"No\");\n    }\n    if !dot_found\
    \ {\n        return String::from(\"No\");\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        valid_extension =\
    \ true;\n    }\n    if valid_extension {\n        valid_name = true;\n    }\n\
    \    if valid_name {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        } else if c ==\
    \ '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count >\
    \ 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let mut parts = file_name.split('.');\n        let first_part = parts.next().unwrap();\n\
    \        let second_part = parts.next().unwrap();\n        if first_part.is_empty()\
    \ || !first_part.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        }\n        if second_part != \"txt\" && second_part != \"\
    exe\" && second_part != \"dll\" {\n            is_valid = false;\n        }\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut first_char_is_letter = false;\n    let mut dot_index\
    \ = 0;\n    let mut last_char_is_letter = false;\n    let mut last_char_is_digit\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut extension_is_valid\
    \ = false;\n    let mut extension_is_empty = true;\n    let mut extension_is_txt\
    \ = false;\n    let mut extension_is_exe = false;\n    let mut extension_is_dll\
    \ = false;\n    let mut extension_is_txt_exe_dll = false;\n    let mut extension_is_txt_exe_dll_or_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty = false;\n\
    \    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty\
    \ = false;\n    let mut extension_is_txt_exe_dll_or_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_and_not_empty_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        let (prefix, suffix) = file_name.split_at(dot_index);\n\
    \        if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if suffix != \".txt\" &&\
    \ suffix != \".exe\" && suffix != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_after_dot = true;\n    let mut is_first_after_dot_valid\
    \ = false;\n    let mut is_second_after_dot_valid = false;\n    let mut is_third_after_dot_valid\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = false;\n            is_first_after_dot\
    \ = true;\n        }\n        if is_first_letter {\n            if !c.is_alphabetic()\
    \ {\n                is_valid = false;\n                break;\n            }\n\
    \        }\n        if is_first_after_dot {\n            if c == 't' {\n     \
    \           is_first_after_dot_valid = true;\n            } else if c == 'e' {\n\
    \                is_second_after_dot_valid = true;\n            } else if c ==\
    \ 'd' {\n                is_third_after_dot_valid = true;\n            } else\
    \ {\n                is_valid = false;\n                break;\n            }\n\
    \            is_first_after_dot = false;\n        } else {\n            if is_first_after_dot_valid\
    \ {\n                if c != 'x' {\n                    is_valid = false;\n  \
    \                  break;\n                }\n                is_first_after_dot_valid\
    \ = false;\n            } else if is_second_after_dot_valid {\n              \
    \  if c != 'e' {\n                    is_valid = false;\n                    break;\n\
    \                }\n                is_second_after_dot_valid = false;\n     \
    \       } else if is_third_after_dot_valid {\n                if c != 'l' {\n\
    \                    is_valid = false;\n                    break;\n         \
    \       }\n                is_third_after_dot_valid = false;\n            } else\
    \ {\n                is_valid = false;\n", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_string = String::new();\n\
    \    let mut extension_vec = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_vec_iter\
    \ = extension_vec.iter();\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n        }\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        }\n        if i == file_name.len() - 1 {\n            extension_end\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n  \
    \      return String::from(\"No\");\n    }\n    extension_string = file_name[extension_start..extension_end].to_string();\n\
    \    for i in extension_vec_iter {\n        if extension_string == *i {\n    \
    \        extension_count += 1;\n        }\n    }\n    if extension_count == 0\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut extension_index = 0;\n    let mut extension_valid = false;\n\
    \    let mut valid = true;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if dot_count == 1 {\n            extension_index = i + 1;\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid = false;\n    }\n\
    \    if dot_count != 1 {\n        valid = false;\n    }\n    if !file_name[0..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        valid = false;\n    }\n    if file_name[dot_index + 1..].len() ==\
    \ 3 {\n        match file_name[dot_index + 1..].as_ref() {\n            \"txt\"\
    \ => extension_valid = true,\n            \"exe\" => extension_valid = true,\n\
    \            \"dll\" => extension_valid = true,\n            _ => extension_valid\
    \ = false,\n        }\n    }\n    if !extension_valid {\n        valid = false;\n\
    \    }\n    if valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut extension = String::new();\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let valid_extensions = vec![\"txt\", \"exe\"\
    , \"dll\"];\n    let mut is_valid_name = false;\n    let mut name = String::new();\n\
    \    let mut is_valid_name_start = false;\n    let mut is_valid_name_end = false;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_ascii_digit()\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            is_valid_name_end = true;\n        }\n   \
    \     if !is_valid_name_end {\n            name.push(c);\n        }\n        if\
    \ is_valid_name_end && !is_valid_extension {\n            extension.push(c);\n\
    \        }\n        if i == 0 {\n            is_valid_name_start = c.is_ascii_alphabetic();\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_valid_name_start\
    \ {\n        is_valid = false;\n    }\n    if name.len() == 0 {\n        is_valid\
    \ = false;\n    }\n    for ext in valid_extensions {\n        if extension ==\
    \ format!(\".{}\", ext) {\n            is_valid_extension = true;\n        }\n\
    \    }\n    if !is_valid_extension {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut first_char_is_letter = false;\n    let mut last_three_chars = String::from(\"\
    \");\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n        \
    \    digits_count += 1;\n        } else if c == '.' {\n            dot_count +=\
    \ 1;\n        } else if c.is_alphabetic() {\n            first_char_is_letter\
    \ = true;\n        }\n        last_three_chars.push(c);\n        if last_three_chars.len()\
    \ > 3 {\n            last_three_chars.remove(0);\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !first_char_is_letter || \n        (last_three_chars\
    \ != String::from(\".txt\") && last_three_chars != String::from(\".exe\") &&\n\
    \        last_three_chars != String::from(\".dll\")) {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n            dot_index = i;\n      \
    \  }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ extension = &file_name[dot_index + 1..];\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    let prefix = &file_name[..dot_index];\n    if prefix.len() > 0 {\n      \
    \  let first_char = prefix.chars().next().unwrap();\n        if first_char.is_alphabetic()\
    \ {\n            valid_prefix = true;\n        }\n    }\n    if valid_extension\
    \ && valid_prefix {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n    let mut\
    \ is_first_char_valid = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut file_name_without_extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            if i == 0 {\n                is_valid = false;\n\
    \                break;\n            }\n            if i == file_name.len() -\
    \ 1 {\n                is_valid = false;\n                break;\n           \
    \ }\n            extension = file_name.chars().skip(i + 1).collect();\n      \
    \      file_name_without_extension = file_name.chars().take(i).collect();\n  \
    \      } else if c.is_alphabetic() {\n            is_first_char_valid = true;\n\
    \        } else {\n            is_valid = false;\n            break;\n       \
    \ }\n        is_empty = false;\n    }\n    if is_empty {\n        is_valid = false;\n\
    \    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if !is_first_char_valid {\n  \
    \      is_valid = false;\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        is_extension_valid = true;\n    }\n \
    \   if !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_substring_before_dot_valid = false;\n \
    \   let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    let mut substring_before_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid =\
    \ false;\n    }\n    let mut iter = file_name.split('.');\n    match iter.next()\
    \ {\n        Some(substring) => {\n            if substring.len() > 0 {\n    \
    \            is_substring_before_dot_valid = true;\n                substring_before_dot\
    \ = substring.to_string();\n            }\n        },\n        None => {\n   \
    \         is_valid = false;\n        }\n    }\n    match iter.next() {\n     \
    \   Some(substring) => {\n            if substring == \"txt\" || substring ==\
    \ \"exe\" || substring == \"dll\" {\n                is_substring_after_dot_valid\
    \ = true;\n                substring_after_dot = substring.to_string();\n    \
    \        }\n        },\n        None => {\n            is_valid = false;\n   \
    \     }\n    }\n    if is_substring_before_dot_valid && is_substring_after_dot_valid\
    \ {\n        let mut iter = substring_before_dot.chars();\n        match iter.next()\
    \ {\n            Some(c) => {\n                if !c.is_alphabetic() {\n     \
    \               is_valid = false;\n                }\n            },\n       \
    \     None => {\n                is_valid = false;\n            }\n        }\n\
    \    }\n    if is_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut num_digits = 0;\n    let mut dot_found\
    \ = false;\n    let mut extension = String::new();\n    let mut valid_extension\
    \ = false;\n    let valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    for\
    \ (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n   \
    \         num_digits += 1;\n        } else if c == '.' {\n            if i ==\
    \ 0 {\n                return String::from(\"No\");\n            }\n         \
    \   dot_found = true;\n        } else if c.is_alphabetic() {\n            if i\
    \ == 0 {\n                if c.is_lowercase() || c.is_uppercase() {\n        \
    \            continue;\n                } else {\n                    return String::from(\"\
    No\");\n                }\n            } else if dot_found {\n               \
    \ extension.push(c);\n            } else {\n                continue;\n      \
    \      }\n        } else {\n            return String::from(\"No\");\n       \
    \ }\n    }\n    if num_digits > 3 {\n        return String::from(\"No\");\n  \
    \  }\n    if !dot_found {\n        return String::from(\"No\");\n    }\n    for\
    \ ext in valid_extensions {\n        if extension == ext {\n            valid_extension\
    \ = true;\n            break;\n        }\n    }\n    if valid_extension {\n  \
    \      return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count !=\
    \ 1 {\n        is_valid = false;\n    }\n    let parts: Vec<&str> = file_name.split('.').collect();\n\
    \    if parts[0].is_empty() || !parts[0].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\" {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut valid_extension = false;\n    let mut valid_prefix = false;\n    let\
    \ mut valid_file_name = true;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n     \
    \       dot_count += 1;\n            extension_start = i + 1;\n        } else\
    \ if c.is_digit(10) {\n            digits_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if !valid_prefix {\n                prefix_start = i;\n     \
    \           valid_prefix = true;\n            }\n            prefix_end = i +\
    \ 1;\n        }\n    }\n    extension_end = file_name.len();\n    if digits_count\
    \ > 3 {\n        valid_file_name = false;\n    }\n    if dot_count != 1 {\n  \
    \      valid_file_name = false;\n    }\n    if valid_prefix {\n        let prefix\
    \ = &file_name[prefix_start..prefix_end];\n        if prefix.is_empty() {\n  \
    \          valid_file_name = false;\n        }\n    } else {\n        valid_file_name\
    \ = false;\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if !valid_extension {\n        valid_file_name\
    \ = false;\n    }\n    if valid_file_name {\n        String::from(\"Yes\")\n \
    \   } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    for ch in file_name.chars() {\n        if ch.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if ch == '.' {\n     \
    \       dot_count += 1;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut index = 0;\n    for ch\
    \ in file_name.chars() {\n        if ch == '.' {\n            break;\n       \
    \ }\n        substring_before_dot.push(ch);\n        index += 1;\n    }\n    if\
    \ substring_before_dot.len() == 0 {\n        is_valid = false;\n    }\n    if\
    \ substring_before_dot.chars().next().unwrap().is_alphabetic() {\n        is_substring_before_dot_valid\
    \ = true;\n    }\n    if is_substring_before_dot_valid {\n        for ch in file_name.chars().skip(index\
    \ + 1) {\n            substring_after_dot.push(ch);\n        }\n        if substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    \ {\n            is_substring_after_dot_valid = true;\n        }\n    }\n    if\
    \ is_substring_before_dot_valid && is_substring_after_dot_valid {\n        is_valid\
    \ = true;\n    }\n    if is_valid {\n        return String::from(\"Yes\");\n \
    \   }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut is_valid_name\
    \ = false;\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            if dot_count == 0 {\n                name.push(c);\n        \
    \    } else {\n                extension.push(c);\n            }\n        }\n\
    \    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if name.len() == 0 {\n       \
    \ is_valid = false;\n    }\n    if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n        is_valid_extension = true;\n    }\n    if\
    \ extension.len() == 0 {\n        is_valid = false;\n    }\n    if name.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid_name = true;\n    }\n    if is_valid && is_valid_extension\
    \ && is_valid_name {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix = false;\n\
    \    let mut prefix_started = false;\n    let mut prefix_ended = false;\n    let\
    \ mut extension_started = false;\n    let mut extension_ended = false;\n    let\
    \ mut extension_started_at = 0;\n    let mut prefix_started_at = 0;\n    let mut\
    \ prefix_ended_at = 0;\n    let mut extension_ended_at = 0;\n    let mut i = 0;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       prefix_ended = true;\n            prefix_ended_at = i;\n            extension_started\
    \ = true;\n            extension_started_at = i;\n        }\n        if extension_started\
    \ && !extension_ended {\n            if c == 't' {\n                extension_ended\
    \ = true;\n                extension_ended_at = i;\n                if extension_ended_at\
    \ - extension_started_at == 3 {\n                    valid_extension = true;\n\
    \                }\n            }\n        }\n        if prefix_started && !prefix_ended\
    \ {\n            if !c.is_alphabetic() {\n                prefix_ended = true;\n\
    \                prefix_ended_at = i;\n            }\n        }\n        if !prefix_started\
    \ && c.is_alphabetic() {\n            prefix_started = true;\n            prefix_started_at\
    \ = i;\n        }\n        i += 1;\n    }\n    if prefix_started_at == 0 {\n \
    \       valid_prefix = false;\n    } else {\n        valid_prefix = true;\n  \
    \  }\n    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if\
    \ !valid_prefix {\n        return String::from(\"No\");\n    }\n    if !valid_extension\
    \ {\n        return String::from(\"No\");", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut extension_valid = false;\n    let mut\
    \ extension_start = 0;\n    let mut extension_end = 0;\n    let mut extension_length\
    \ = 0;\n    let mut extension_valid_length = false;\n    let mut extension_valid_chars\
    \ = false;\n    let mut extension_valid_first_char = false;\n    let mut extension_valid_last_char\
    \ = false;\n    let mut extension_valid_middle_char = false;\n    let mut extension_valid_middle_char_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid = false;\n    let\
    \ mut extension_valid_middle_char_count_valid_count = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid\
    \ = false;\n    let mut extension_valid_middle_char_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid\
    \ = false;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid_count_valid_count_valid\
    \ = false;\n    let mut extension_valid_middle_char_count_valid_count_valid_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0;\n    let mut extension_valid_middle_char_count_valid_count_valid_count",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter\
    \ = false;\n    let mut last_three_chars_are_valid = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !first_char_is_letter\
    \ && c.is_alphabetic() {\n            first_char_is_letter = true;\n        }\n\
    \        if !last_three_chars_are_valid && c == '.' {\n            let last_three_chars\
    \ = &file_name[file_name.len() - 3..];\n            if last_three_chars == \"\
    txt\" || last_three_chars == \"exe\" || last_three_chars == \"dll\" {\n      \
    \          last_three_chars_are_valid = true;\n            }\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !first_char_is_letter || !last_three_chars_are_valid\
    \ {\n        String::from(\"No\")\n    } else {\n        String::from(\"Yes\"\
    )\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_letter = false;\n    let mut is_digit = false;\n   \
    \ let mut is_dot = false;\n    let mut is_ext = false;\n    let mut is_empty =\
    \ true;\n    let mut is_first_letter = false;\n    let mut is_first_digit = false;\n\
    \    let mut is_first_dot = false;\n    let mut is_first_ext = false;\n    let\
    \ mut is_first_empty = true;\n    let mut is_second_letter = false;\n    let mut\
    \ is_second_digit = false;\n    let mut is_second_dot = false;\n    let mut is_second_ext\
    \ = false;\n    let mut is_second_empty = true;\n    let mut is_third_letter =\
    \ false;\n    let mut is_third_digit = false;\n    let mut is_third_dot = false;\n\
    \    let mut is_third_ext = false;\n    let mut is_third_empty = true;\n    let\
    \ mut is_fourth_letter = false;\n    let mut is_fourth_digit = false;\n    let\
    \ mut is_fourth_dot = false;\n    let mut is_fourth_ext = false;\n    let mut\
    \ is_fourth_empty = true;\n    let mut is_fifth_letter = false;\n    let mut is_fifth_digit\
    \ = false;\n    let mut is_fifth_dot = false;\n    let mut is_fifth_ext = false;\n\
    \    let mut is_fifth_empty = true;\n    let mut is_sixth_letter = false;\n  \
    \  let mut is_sixth_digit = false;\n    let mut is_sixth_dot = false;\n    let\
    \ mut is_sixth_ext = false;\n    let mut is_sixth_empty = true;\n    let mut is_seventh_letter\
    \ = false;\n    let mut is_seventh_digit = false;\n    let mut is_seventh_dot\
    \ = false;\n    let mut is_seventh_ext = false;\n    let mut is_seventh_empty\
    \ = true;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_dot = true;\n    let mut is_first_letter_after_dot = true;\n\
    \    let mut is_first_letter_after_dot_valid = false;\n    let mut is_second_letter_after_dot_valid\
    \ = false;\n    let mut is_third_letter_after_dot_valid = false;\n    let mut\
    \ is_fourth_letter_after_dot_valid = false;\n    let mut is_fifth_letter_after_dot_valid\
    \ = false;\n    let mut is_sixth_letter_after_dot_valid = false;\n    let mut\
    \ is_seventh_letter_after_dot_valid = false;\n    let mut is_eighth_letter_after_dot_valid\
    \ = false;\n    let mut is_ninth_letter_after_dot_valid = false;\n    let mut\
    \ is_tenth_letter_after_dot_valid = false;\n    let mut is_eleventh_letter_after_dot_valid\
    \ = false;\n    let mut is_twelfth_letter_after_dot_valid = false;\n    let mut\
    \ is_thirteenth_letter_after_dot_valid = false;\n    let mut is_fourteenth_letter_after_dot_valid\
    \ = false;\n    let mut is_fifteenth_letter_after_dot_valid = false;\n    let\
    \ mut is_sixteenth_letter_after_dot_valid = false;\n    let mut is_seventeenth_letter_after_dot_valid\
    \ = false;\n    let mut is_eighteenth_letter_after_dot_valid = false;\n    let\
    \ mut is_nineteenth_letter_after_dot_valid = false;\n    let mut is_twentieth_letter_after_dot_valid\
    \ = false;\n    let mut is_twenty_first_letter_after_dot_valid = false;\n    let\
    \ mut is_twenty_second_letter_after_dot_valid = false;\n    let mut is_twenty_third_letter_after_dot_valid\
    \ = false;\n", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_substring_before_dot_valid = false;\n\
    \    let mut is_substring_after_dot_valid = false;\n    let mut is_substring_before_dot_empty\
    \ = true;\n    let mut is_substring_after_dot_empty = true;\n    let mut is_substring_before_dot_started\
    \ = false;\n    let mut is_substring_after_dot_started = false;\n    let mut is_substring_before_dot_started_with_letter\
    \ = false;\n    let mut is_substring_after_dot_started_with_letter = false;\n\
    \    let mut is_substring_before_dot_started_with_digit = false;\n    let mut\
    \ is_substring_after_dot_started_with_digit = false;\n    let mut is_substring_before_dot_started_with_dot\
    \ = false;\n    let mut is_substring_after_dot_started_with_dot = false;\n   \
    \ let mut is_substring_before_dot_started_with_underscore = false;\n    let mut\
    \ is_substring_after_dot_started_with_underscore = false;\n    let mut is_substring_before_dot_started_with_hyphen\
    \ = false;\n    let mut is_substring_after_dot_started_with_hyphen = false;\n\
    \    let mut is_substring_before_dot_started_with_other_char = false;\n    let\
    \ mut is_substring_after_dot_started_with_other_char = false;\n    let mut is_substring_before_dot_started_with_other_char_after_letter\
    \ = false;\n    let mut is_substring_after_dot_started_with_other_char_after_letter\
    \ = false;\n    let mut is_substring_before_dot_started_with_other_char_after_digit\
    \ = false;\n    let mut is_substring_after_dot_started_with_other_char_after_digit\
    \ = false;\n    let mut is_substring_before_dot", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid =\
    \ false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_letter = false;\n    let mut is_after_dot_txt\
    \ = false;\n    let mut is_after_dot_exe = false;\n    let mut is_after_dot_dll\
    \ = false;\n    let mut is_after_dot_txt_or_exe_or_dll = false;\n    let mut is_after_dot_txt_or_exe_or_dll_and_start_with_letter\
    \ = false;\n    let mut is_after_dot_txt_or_exe_or_dll_and_start_with_letter_and_not_empty\
    \ = false;\n    let mut is_before_dot_start_with_letter_and_not_empty = false;\n\
    \    let mut is_before_dot_start_with_letter_and_not_empty_and_less_than_3_digits\
    \ = false;\n    let mut is_before_dot_start_with_letter_and_not_empty_and_less_than_3_digits_and_one_dot\
    \ = false;\n    let mut is_before_dot_start_with_letter_and_not_empty_and_less_than_3_digits_and_one_dot_and_after_dot_valid\
    \ = false;\n    let mut is_before_dot_start_with_letter_and_not_empty_and_less_than_3_digits_and_one_dot_and_after_dot_valid_and_before_dot_valid\
    \ = false;\n    let mut is_before_dot_start_with_letter_and_not_empty_and_less_than_3_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_ascii_alphabetic()\
    \ {\n            is_substring_before_dot_valid = true;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    substring_after_dot = file_name.split('.').last().unwrap().to_string();\n\
    \    if substring_after_dot == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot\
    \ == \"dll\" {\n        is_substring_after_dot_valid = true;\n    }\n    if is_valid\
    \ && is_substring_before_dot_valid && is_substring_after_dot_valid {\n       \
    \ return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\
    \    let mut is_after_dot_valid_txt = false;\n    let mut is_after_dot_valid_exe\
    \ = false;\n    let mut is_after_dot_valid_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        }\n        if is_before_dot\
    \ {\n            if c.is_ascii_alphabetic() {\n                is_before_dot_valid\
    \ = true;\n            }\n        }\n        if is_after_dot {\n            if\
    \ c == 't' {\n                is_after_dot_valid_txt = true;\n            }\n\
    \            if c == 'e' {\n                is_after_dot_valid_exe = true;\n \
    \           }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_exe {\n        is_after_dot_valid = true;\n    }\n    if\
    \ is_after_dot_valid_dll {\n        is_after_dot_valid = true;\n    }\n    if\
    \ !is_after_dot_valid {\n        is_valid = false;\n    }\n   ", "    let mut\
    \ digits_counter = 0;\n    let mut dot_counter = 0;\n    let mut is_valid = true;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_valid_after_dot = false;\n    let mut is_valid_before_dot = false;\n\
    \    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let\
    \ mut is_valid_extension = true;\n    let mut extension = String::new();\n   \
    \ for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_counter\
    \ += 1;\n        }\n        if c == '.' {\n            dot_counter += 1;\n   \
    \         is_before_dot = false;\n            is_after_dot = true;\n        }\n\
    \        if is_before_dot && !c.is_alphabetic() {\n            is_valid_before_dot\
    \ = false;\n        }\n        if is_after_dot {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_counter > 3 {\n        is_valid_digits = false;\n\
    \    }\n    if dot_counter != 1 {\n        is_valid_dot = false;\n    }\n    if\
    \ extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n   \
    \     is_valid_extension = false;\n    }\n    if is_valid_before_dot && is_valid_digits\
    \ && is_valid_dot && is_valid_extension {\n        is_valid = true;\n    } else\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (index, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        }\n    }\n    if digits > 3 ||\
    \ dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n    \
    \    let (before_dot, after_dot) = file_name.split_at(dot_index);\n        if\
    \ before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if after_dot != \".txt\"\
    \ && after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n\
    \    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_first_char_letter = false;\n\
    \    let mut is_last_char_letter = false;\n    let mut is_last_char_digit = false;\n\
    \    let mut is_last_char_dot = false;\n    let mut is_last_char_extension = false;\n\
    \    let mut is_extension_valid = false;\n    for c in file_name.chars() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        }\n     \
    \   if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            if !is_first_char_letter {\n                is_first_char_letter\
    \ = true;\n            }\n            is_last_char_letter = true;\n        } else\
    \ {\n            is_last_char_letter = false;\n        }\n        if c.is_digit(10)\
    \ {\n            is_last_char_digit = true;\n        } else {\n            is_last_char_digit\
    \ = false;\n        }\n        if c == '.' {\n            is_last_char_dot = true;\n\
    \        } else {\n            is_last_char_dot = false;\n        }\n        if\
    \ c == 't' || c == 'e' || c == 'x' || c == 'd' || c == 'l' {\n            is_last_char_extension\
    \ = true;\n        } else {\n            is_last_char_extension = false;\n   \
    \     }\n    }\n    if is_last_char_extension && is_last_char_letter && is_last_char_digit\
    \ && is_last_char_dot {\n        is_extension_valid = true;\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !is_first_char_letter || !is_extension_valid {\n  \
    \      return String::from(\"No\");\n    }\n    return String::from(\"Yes\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix = false;\n\
    \    let mut valid_name = true;\n    let mut i = 0;\n    while i < file_name.len()\
    \ && valid_name {\n        match file_name.chars().nth(i) {\n            Some('.')\
    \ => {\n                dot_count += 1;\n                dot_index = i;\n    \
    \        },\n            Some(c) if c.is_digit(10) => digits_count += 1,\n   \
    \         Some(c) if c.is_alphabetic() => {\n                if i == 0 {\n   \
    \                 valid_prefix = true;\n                }\n            },\n  \
    \          _ => valid_name = false,\n        }\n        i += 1;\n    }\n    if\
    \ dot_count == 1 && valid_prefix && digits_count <= 3 {\n        let extension\
    \ = &file_name[dot_index+1..];\n        match extension {\n            \"txt\"\
    \ | \"exe\" | \"dll\" => valid_extension = true,\n            _ => valid_extension\
    \ = false,\n        }\n    }\n    if valid_name && valid_extension {\n       \
    \ String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_first_char_valid = false;\n    let mut is_before_dot_first_char_valid_count\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max = 0;\n    let mut\
    \ is_before_dot_first_char_valid_count_max_index = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last =\
    \ 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last_last_last_last_last\
    \ = 0;\n    let mut is_before_dot_first_char_valid_count_max_index_last_last_last_last_last_last_last_last_last_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter\
    \ = false;\n    let mut last_three_chars_are_valid = false;\n    for (i, c) in\
    \ file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if i == 0 && c.is_alphabetic() {\n            first_char_is_letter\
    \ = true;\n        }\n        if i == file_name.len() - 3 {\n            if c\
    \ == 't' && file_name.chars().nth(i + 1).unwrap() == 'x' && file_name.chars().nth(i\
    \ + 2).unwrap() == 't' {\n                last_three_chars_are_valid = true;\n\
    \            }\n            if c == 'e' && file_name.chars().nth(i + 1).unwrap()\
    \ == 'x' && file_name.chars().nth(i + 2).unwrap() == 'e' {\n                last_three_chars_are_valid\
    \ = true;\n            }\n            if c == 'd' && file_name.chars().nth(i +\
    \ 1).unwrap() == 'l' && file_name.chars().nth(i + 2).unwrap() == 'l' {\n     \
    \           last_three_chars_are_valid = true;\n            }\n        }\n   \
    \ }\n    if digits_count > 3 || dot_count != 1 || !first_char_is_letter || !last_three_chars_are_valid\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut counter = 0;\n    let mut dot_counter = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_digits = true;\n\
    \    let mut valid_dot = false;\n    let mut valid_extension_length = false;\n\
    \    let mut valid_name_length = false;\n    let mut valid_extension_char = false;\n\
    \    let mut valid_name_char = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_extension_start = false;\n    let mut valid_extension_end =\
    \ false;\n    let mut valid_name_end = false;\n    let mut valid_extension_start_char\
    \ = false;\n    let mut valid_name_start_char = false;\n    let mut valid_extension_end_char\
    \ = false;\n    let mut valid_name_end_char = false;\n    let mut valid_extension_start_length\
    \ = false;\n    let mut valid_name_start_length = false;\n    let mut valid_extension_end_length\
    \ = false;\n    let mut valid_name_end_length = false;\n    let mut valid_extension_start_char_length\
    \ = false;\n    let mut valid_name_start_char_length = false;\n    let mut valid_extension_end_char_length\
    \ = false;\n    let mut valid_name_end_char_length = false;\n    let mut valid_extension_start_char_char\
    \ = false;\n    let mut valid_name_start_char_char = false;\n    let mut valid_extension_end_char_char\
    \ = false;\n    let mut valid_name_end_char_char = false;\n    let mut valid_extension_start_char_char_char\
    \ = false;\n    let mut valid_name_start_char_char_char = false;\n    let mut\
    \ valid_extension_end_char_char_char = false;\n    let mut valid_name_end_char_char_char\
    \ = false;\n    let mut valid_extension_start_char_char_char_char = false;\n \
    \   let mut valid_name_start", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut valid_name = true;\n    let mut i\
    \ = 0;\n    while i < file_name.len() && valid_name {\n        match file_name.chars().nth(i)\
    \ {\n            Some('.') => {\n                dot_count += 1;\n           \
    \     dot_index = i;\n            },\n            Some(c) if c.is_digit(10) =>\
    \ digits_count += 1,\n            Some(c) if c.is_alphabetic() => {\n        \
    \        if i == 0 {\n                    valid_prefix = true;\n             \
    \   }\n            },\n            _ => valid_name = false,\n        }\n     \
    \   i += 1;\n    }\n    if valid_name && dot_count == 1 && digits_count <= 3 &&\
    \ valid_prefix {\n        let extension = &file_name[dot_index+1..];\n       \
    \ if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            valid_extension = true;\n        }\n    }\n    if valid_name && valid_extension\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_before_dot_first_char_valid = false;\n    let mut is_before_dot_second_char_valid\
    \ = false;\n    let mut is_before_dot_third_char_valid = false;\n    let mut is_before_dot_fourth_char_valid\
    \ = false;\n    let mut is_before_dot_fifth_char_valid = false;\n    let mut is_before_dot_sixth_char_valid\
    \ = false;\n    let mut is_before_dot_seventh_char_valid = false;\n    let mut\
    \ is_before_dot_eighth_char_valid = false;\n    let mut is_before_dot_ninth_char_valid\
    \ = false;\n    let mut is_before_dot_tenth_char_valid = false;\n    let mut is_before_dot_eleventh_char_valid\
    \ = false;\n    let mut is_before_dot_twelfth_char_valid = false;\n    let mut\
    \ is_before_dot_thirteenth_char_valid = false;\n    let mut is_before_dot_fourteenth_char_valid\
    \ = false;\n    let mut is_before_dot_fifteenth_char_valid = false;\n    let mut\
    \ is_before_dot_sixteenth_char_valid = false;\n    let mut is_before_dot_seventeenth_char_valid\
    \ = false;\n    let mut is_before_dot_eighteenth_char_valid = false;\n    let\
    \ mut is_before_dot_nineteenth_char_valid = false;\n    let mut is_before_dot_twentieth_char_valid\
    \ = false;\n    let mut is_before_dot_twenty_first_char_valid = false;\n    let\
    \ mut is_before_dot_twenty_second_char_valid = false;\n    let mut is_before_dot_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_prefix = false;\n    let mut prefix_start = 0;\n\
    \    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_start = i + 1;\n\
    \        }\n        if file_name.chars().nth(i).unwrap().is_alphabetic() {\n \
    \           prefix_start = i;\n            break;\n        }\n        i += 1;\n\
    \    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if\
    \ prefix_start == 0 {\n        return String::from(\"No\");\n    }\n    i = prefix_start;\n\
    \    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            prefix_end = i;\n            break;\n        }\n     \
    \   i += 1;\n    }\n    if prefix_end == 0 {\n        return String::from(\"No\"\
    );\n    }\n    valid_prefix = true;\n    i = extension_start;\n    while i < file_name.len()\
    \ {\n        if file_name.chars().nth(i).unwrap() == '.' {\n            extension_end\
    \ = i;\n            break;\n        }\n        i += 1;\n    }\n    if extension_end\
    \ == 0 {\n        extension_end = file_name.len();\n    }\n    let extension =\
    \ &file_name[extension_start..extension_end];\n    if extension == \"txt\" ||\
    \ extension == \"exe\" || extension", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_letter_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        }\n        if is_first_letter {\n            if c.is_ascii_alphabetic()\
    \ {\n                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            } else {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n        if i >= extension_start_index\
    \ {\n            extension.push(c);\n            extension_end_index = i;\n  \
    \      }\n    }\n    if extension_end_index - extension_start_index > 0 {\n  \
    \      if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !is_first_letter_valid || !is_extension_valid {\n \
    \       is_valid = false;\n    }\n    if is_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_letter_valid = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension_start_index = 0;\n  \
    \  let mut extension_end_index = 0;\n    let mut extension_len = 0;\n    let mut\
    \ extension = String::new();\n    let mut file_name_len = file_name.len();\n \
    \   let mut file_name_chars = file_name.chars();\n    let mut file_name_chars_vec:\
    \ Vec<char> = Vec::new();\n    let mut file_name_chars_vec_iter = file_name_chars_vec.iter();\n\
    \    let mut file_name_chars_vec_iter_rev = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone = file_name_chars_vec.iter().rev();\n\
    \    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone_clone\
    \ = file_name_chars_vec.iter().rev();\n    let mut file_name_chars_vec_iter_rev_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name_chars_vec.iter().rev();\n    let mut file_name_chars_vec_iter_rev_clone_clone_",
  "    // TODO: implement this function\n    String::from(\"No\")", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut extension = String::new();\n    let\
    \ mut prefix = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            if i == 0 {\n\
    \                return String::from(\"No\");\n            }\n            if i\
    \ == file_name.len() - 1 {\n                return String::from(\"No\");\n   \
    \         }\n            extension = file_name[i+1..].to_string();\n         \
    \   prefix = file_name[..i].to_string();\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        valid_prefix\
    \ = true;\n    }\n    if valid_extension && valid_prefix {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_ext\
    \ = false;\n    let mut is_valid_name = false;\n    let mut is_valid_digits =\
    \ true;\n    let mut is_valid_dot = true;\n    let mut is_valid_ext_count = true;\n\
    \    let mut is_valid_name_count = true;\n    let mut is_valid_name_start = true;\n\
    \    let mut is_valid_name_end = true;\n    let mut is_valid_ext_start = true;\n\
    \    let mut is_valid_ext_end = true;\n    let mut is_valid_ext_char = true;\n\
    \    let mut is_valid_name_char = true;\n    let mut name_start = 0;\n    let\
    \ mut name_end = 0;\n    let mut ext_start = 0;\n    let mut ext_end = 0;\n  \
    \  let mut ext_char = 0;\n    let mut name_char = 0;\n    let mut ext_count =\
    \ 0;\n    let mut name_count = 0;\n    let mut dot_index = 0;\n    let mut name_index\
    \ = 0;\n    let mut ext_index = 0;\n    let mut ext_len = 0;\n    let mut name_len\
    \ = 0;\n    let mut dot_len = 0;\n    let mut ext_char_len = 0;\n    let mut name_char_len\
    \ = 0;\n    let mut name_start_len = 0;\n    let mut name_end_len = 0;\n    let\
    \ mut ext_start_len = 0;\n    let mut ext_end_len = 0;\n    let mut name_count_len\
    \ = 0;\n    let mut ext_count_len = 0;\n    let mut is_valid_name_char_len = true;\n\
    \    let mut is_valid_ext_char_len = true;\n    let mut is_valid_name_start_len\
    \ = true;\n    let mut is_valid_name_end_len = true;\n    let mut is_valid_ext_start_len\
    \ = true;\n    let mut is", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix = false;\n\
    \    let mut prefix_start = 0;\n    let mut prefix_end = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_length = 0;\n  \
    \  let mut prefix_length = 0;\n    let mut valid_file_name = true;\n    let mut\
    \ i = 0;\n    while i < file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n\
    \        if c == '.' {\n            if dot_count == 0 {\n                dot_count\
    \ += 1;\n                extension_start = i + 1;\n                prefix_end\
    \ = i;\n            } else {\n                valid_file_name = false;\n     \
    \           break;\n            }\n        } else if c.is_digit(10) {\n      \
    \      digits_count += 1;\n        } else if c.is_alphabetic() {\n           \
    \ if !valid_prefix {\n                prefix_start = i;\n                valid_prefix\
    \ = true;\n            }\n        }\n        i += 1;\n    }\n    if valid_file_name\
    \ {\n        extension_end = file_name.len();\n        extension_length = extension_end\
    \ - extension_start;\n        prefix_length = prefix_end - prefix_start;\n   \
    \     if extension_length == 3 && prefix_length > 0 {\n            let extension\
    \ = file_name.chars().skip(extension_start).take(extension_length).collect::<String>();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                valid_extension = true;\n            }\n        }\n \
    \   }\n    if valid_file_name && valid_extension && valid_prefix && digits_count\
    \ <= 3 {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_prefix_letter = false;\n    let mut is_valid_prefix_digit\
    \ = false;\n    let mut is_valid_prefix_length = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut is_valid_extension_letter = false;\n    let mut is_valid_extension_digit\
    \ = false;\n    let mut is_valid_extension_symbol = false;\n    let mut is_valid_extension_symbol_count\
    \ = 0;\n    let mut is_valid_extension_symbol_count_max = 0;\n    let mut is_valid_extension_symbol_count_min\
    \ = 0;\n    let mut is_valid_extension_symbol_count_min_max = false;\n    let\
    \ mut is_valid_extension_symbol_count_min_max_max = 0;\n    let mut is_valid_extension_symbol_count_min_max_min\
    \ = 0;\n    let mut is_valid_extension_symbol_count_min_max_min_max = false;\n\
    \    let mut is_valid_extension_symbol_count_min_max_min_max_max = 0;\n    let\
    \ mut is_valid_extension_symbol_count_min_max_min_max_min = 0;\n    let mut is_valid_extension_symbol_count_min_max_min_max_min_max\
    \ = false;\n    let mut is_valid_extension_symbol_count_min_max_min_max_min_max_max\
    \ = 0;\n    let mut is_valid_extension_symbol_count_min_max_min_max_min_max_min\
    \ = 0;\n    let mut is_valid_extension_symbol_count_min_max_min_max_min_max_min_max\
    \ = false;\n    let mut is_valid_extension_symbol_count_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_substring_before_dot_valid = true;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 || !is_substring_before_dot_valid {\n\
    \        is_valid = false;\n    }\n    let mut iter = file_name.split('.');\n\
    \    let substring_before_dot = iter.next().unwrap();\n    substring_after_dot\
    \ = iter.next().unwrap().to_string();\n    if substring_after_dot == \"txt\" ||\
    \ substring_after_dot == \"exe\" || substring_after_dot == \"dll\" {\n       \
    \ is_substring_after_dot_valid = true;\n    }\n    if !is_substring_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_prefix = false;\n    let mut prefix_start = 0;\n    let mut prefix_end\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut extension_length = 0;\n    let mut prefix_length = 0;\n    let mut i\
    \ = 0;\n    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            extension_start = i + 1;\n\
    \        }\n        if file_name.chars().nth(i).unwrap().is_alphabetic() {\n \
    \           prefix_start = i;\n            break;\n        }\n        i += 1;\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        return String::from(\"\
    No\");\n    }\n    i = file_name.len() - 1;\n    while i > 0 {\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            extension_end = i;\n        }\n        if file_name.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n            prefix_end = i;\n            break;\n        }\n        i -=\
    \ 1;\n    }\n    extension_length = extension_end - extension_start;\n    prefix_length\
    \ = prefix_end - prefix_start + 1;\n    if extension_length == 3 && prefix_length\
    \ > 0 {\n        let extension = file_name.chars().skip(extension_start).take(extension_length).collect::<String>();\n\
    \        let prefix = file_name.chars().skip(prefix_start).take(prefix_length).collect::<String>();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true", "    let mut digits_count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_substring_before_dot_valid\
    \ = false;\n    let mut is_substring_after_dot_valid = false;\n    let mut substring_after_dot\
    \ = String::new();\n    let mut substring_before_dot = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            continue;\n        }\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if digits_count > 3 {\n            is_valid = false;\n\
    \            break;\n        }\n        if dot_count == 1 {\n            substring_after_dot.push(c);\n\
    \        } else {\n            substring_before_dot.push(c);\n        }\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !substring_before_dot.is_empty()\
    \ {\n        let first_char = substring_before_dot.chars().next().unwrap();\n\
    \        if first_char.is_ascii_alphabetic() {\n            is_substring_before_dot_valid\
    \ = true;\n        }\n    }\n    if substring_after_dot == \"txt\" || substring_after_dot\
    \ == \"exe\" || substring_after_dot == \"dll\" {\n        is_substring_after_dot_valid\
    \ = true;\n    }\n    if is_valid && is_substring_before_dot_valid && is_substring_after_dot_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let\
    \ mut valid_extension = false;\n    let mut valid_name = false;\n    let mut valid_file_name\
    \ = false;\n    let mut valid_name_index = 0;\n    let mut valid_name_length =\
    \ 0;\n    let mut valid_extension_index = 0;\n    let mut valid_extension_length\
    \ = 0;\n    let mut valid_extension_string = String::new();\n    let mut valid_name_string\
    \ = String::new();\n    let mut valid_file_name_string = String::new();\n    let\
    \ mut valid_file_name_length = 0;\n    let mut valid_file_name_index = 0;\n  \
    \  let mut valid_file_name_char = ' ';\n    let mut valid_file_name_char_index\
    \ = 0;\n    let mut valid_file_name_char_count = 0;\n    let mut valid_file_name_char_length\
    \ = 0;\n    let mut valid_file_name_char_string = String::new();\n    let mut\
    \ valid_file_name_char_string_length = 0;\n    let mut valid_file_name_char_string_index\
    \ = 0;\n    let mut valid_file_name_char_string_char = ' ';\n    let mut valid_file_name_char_string_char_index\
    \ = 0;\n    let mut valid_file_name_char_string_char_count = 0;\n    let mut valid_file_name_char_string_char_length\
    \ = 0;\n    let mut valid_file_name_char_string_char_string = String::new();\n\
    \    let mut valid_file_name_char_string_char_string_length = 0;\n    let mut\
    \ valid_file_name_char_string_char_string_index = 0;\n    let mut valid_file_name_char_string_char_string_char\
    \ = ' ';\n    let mut valid_file_name_char_string_char_string_char_index =", " \
    \   let mut digits = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_empty = true;\n    let mut is_letter = false;\n    let mut is_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_empty\
    \ = true;\n            is_letter = false;\n        } else if c.is_digit(10) {\n\
    \            digits += 1;\n        } else if c.is_alphabetic() {\n           \
    \ if is_empty {\n                is_letter = true;\n            }\n          \
    \  if !is_extension {\n                extension.push(c);\n            }\n   \
    \     }\n        is_empty = false;\n        if digits > 3 || dot_count > 1 ||\
    \ !is_letter || !is_valid_extension(&extension) {\n            is_valid = false;\n\
    \            break;\n        }\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_char_valid = false;\n    let mut is_last_char_valid = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension = String::new();\n  \
    \  let mut file_name_chars = file_name.chars();\n    let mut first_char = file_name_chars.next();\n\
    \    while let Some(c) = first_char {\n        if c.is_alphabetic() {\n      \
    \      is_first_char_valid = true;\n            break;\n        }\n        first_char\
    \ = file_name_chars.next();\n    }\n    let mut last_char = file_name_chars.next_back();\n\
    \    while let Some(c) = last_char {\n        if c.is_alphabetic() {\n       \
    \     is_last_char_valid = true;\n            break;\n        }\n        last_char\
    \ = file_name_chars.next_back();\n    }\n    for c in file_name_chars {\n    \
    \    if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let mut file_name_chars = file_name.chars();\n        while let Some(c)\
    \ = file_name_chars.next() {\n            if c == '.' {\n                break;\n\
    \            }\n            extension.push(c);\n        }\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension_valid\
    \ = true;\n        }\n    }\n    if is_valid && is_first_char_valid && is_last_char_valid\
    \ && is_extension_valid {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ has_letter = false;\n    let mut has_dot = false;\n    let mut has_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            has_dot = true;\n  \
    \      } else if c.is_alphabetic() {\n            has_letter = true;\n       \
    \ }\n        if has_dot {\n            extension.push(c);\n        }\n    }\n\
    \    if digits_count > 3 {\n        return String::from(\"No\");\n    }\n    if\
    \ dot_count != 1 {\n        return String::from(\"No\");\n    }\n    if !has_letter\
    \ {\n        return String::from(\"No\");\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        has_extension = true;\n\
    \    }\n    if has_extension {\n        return String::from(\"Yes\");\n    }\n\
    \    return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut extension_count = 0;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut extension_valid = false;\n\
    \    let mut extension_valid_count = 0;\n    let mut extension_valid_start = 0;\n\
    \    let mut extension_valid_end = 0;\n    let mut extension_valid_str = String::new();\n\
    \    let mut extension_valid_str_len = 0;\n    let mut extension_valid_str_is_empty\
    \ = true;\n    let mut extension_valid_str_is_valid = false;\n    let mut extension_valid_str_is_valid_count\
    \ = 0;\n    let mut extension_valid_str_is_valid_start = 0;\n    let mut extension_valid_str_is_valid_end\
    \ = 0;\n    let mut extension_valid_str_is_valid_str = String::new();\n    let\
    \ mut extension_valid_str_is_valid_str_len = 0;\n    let mut extension_valid_str_is_valid_str_is_empty\
    \ = true;\n    let mut extension_valid_str_is_valid_str_is_valid = false;\n  \
    \  let mut extension_valid_str_is_valid_str_is_valid_count = 0;\n    let mut extension_valid_str_is_valid_str_is_valid_start\
    \ = 0;\n    let mut extension_valid_str_is_valid_str_is_valid_end = 0;\n    let\
    \ mut extension_valid_str_is_valid_str_is_valid_str = String::new();\n    let\
    \ mut extension_valid_str_is_valid_str_is_valid_str_len = 0;\n    let mut extension_valid_str_is_valid_str_is_valid_str_is_empty\
    \ = true;\n    let mut extension_valid_str_is_valid_str_is_valid_str_is_valid\
    \ = false;\n    let mut extension_valid_str_is_valid_str_is_valid_str_is_valid_count\
    \ = 0;\n    let mut extension_valid_", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_letter = false;\n    let mut is_extension = false;\n    let mut\
    \ extension = String::new();\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_extension_length = false;\n    let mut is_valid_extension_chars\
    \ = false;\n    let mut is_valid_extension_chars_count = 0;\n    let mut is_valid_extension_chars_count_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min = 0;\n    let mut is_valid_extension_chars_count_min_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min_max_max = 0;\n    let mut\
    \ is_valid_extension_chars_count_min_max_max_max = 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max_max = 0;\n\
    \    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max = 0;\n\
    \    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max_max =\
    \ 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max_max_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    let mut is_valid_extension_chars_count_min_max_max_max_max_max_max",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_letter\
    \ = false;\n    let mut last_three = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            first_letter = true;\n        }\n        last_three.push(c);\n\
    \        if last_three.len() > 3 {\n            last_three.remove(0);\n      \
    \  }\n    }\n    if digits_count > 3 || dot_count != 1 || !first_letter ||\n \
    \       !(last_three == \"txt\" || last_three == \"exe\" || last_three == \"dll\"\
    ) {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter\
    \ = false;\n    let mut last_three_chars = String::from(\"\");\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            first_char_is_letter = true;\n        }\n        if last_three_chars.len()\
    \ == 3 {\n            last_three_chars.remove(0);\n        }\n        last_three_chars.push(c);\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !first_char_is_letter ||\
    \ \n        last_three_chars != \"txt\" && last_three_chars != \"exe\" && last_three_chars\
    \ != \"dll\" {\n        String::from(\"No\")\n    } else {\n        String::from(\"\
    Yes\")\n    }", "    let mut digits = 0;\n    let mut dot_pos = 0;\n    let mut\
    \ dot_found = false;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot_pos\
    \ = i;\n            dot_found = true;\n        }\n    }\n    if digits > 3 {\n\
    \        return String::from(\"No\");\n    }\n    if dot_found {\n        extension\
    \ = file_name.chars().skip(dot_pos + 1).collect();\n        name = file_name.chars().take(dot_pos).collect();\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        valid_extension = true;\n    }\n    if name.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    if valid_extension && valid_name {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_prefix_char = false;\n    let mut is_valid_extension_char\
    \ = false;\n    let mut is_valid_extension_char_count = 0;\n    let mut is_valid_prefix_char_count\
    \ = 0;\n    let mut is_valid_extension_char_count_max = 0;\n    let mut is_valid_prefix_char_count_max\
    \ = 0;\n    let mut is_valid_extension_char_count_min = 0;\n    let mut is_valid_prefix_char_count_min\
    \ = 0;\n    let mut is_valid_extension_char_count_min_set = false;\n    let mut\
    \ is_valid_prefix_char_count_min_set = false;\n    let mut is_valid_extension_char_count_max_set\
    \ = false;\n    let mut is_valid_prefix_char_count_max_set = false;\n    let mut\
    \ is_valid_extension_char_count_set = false;\n    let mut is_valid_prefix_char_count_set\
    \ = false;\n    let mut is_valid_extension_char_count_min_set_once = false;\n\
    \    let mut is_valid_prefix_char_count_min_set_once = false;\n    let mut is_valid_extension_char_count_max_set_once\
    \ = false;\n    let mut is_valid_prefix_char_count_max_set_once = false;\n   \
    \ let mut is_valid_extension_char_count_set_once = false;\n    let mut is_valid_prefix_char_count_set_once\
    \ = false;\n    let mut is_valid_extension_char_count_min_set_twice = false;\n\
    \    let mut is_valid_prefix_char_count_min_set_twice = false;\n    let mut is_valid_extension_char_count_max_set_twice\
    \ = false;", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut has_letter = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_alphabetic() {\n            has_letter\
    \ = true;\n        }\n    }\n    if dot_count == 1 {\n        let mut splitted\
    \ = file_name.split('.');\n        let first = splitted.next().unwrap();\n   \
    \     let second = splitted.next().unwrap();\n        if first.len() > 0 && second.len()\
    \ > 0 {\n            extension = second.to_string();\n            has_extension\
    \ = true;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !has_letter\
    \ || !has_extension {\n        return String::from(\"No\");\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut is_valid_prefix_char = false;\n    let mut is_valid_extension_char\
    \ = false;\n    let mut is_valid_prefix_length = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut is_valid_dot_count = false;\n    let mut is_valid_digits_count\
    \ = false;\n    let mut is_valid_dot_position = false;\n    let mut is_valid_prefix_char_count\
    \ = false;\n    let mut is_valid_extension_char_count = false;\n    let mut is_valid_prefix_char_position\
    \ = false;\n    let mut is_valid_extension_char_position = false;\n    let mut\
    \ is_valid_prefix_char_position_count = false;\n    let mut is_valid_extension_char_position_count\
    \ = false;\n    let mut is_valid_prefix_char_position_count_count = false;\n \
    \   let mut is_valid_extension_char_position_count_count = false;\n    let mut\
    \ is_valid_prefix_char_position_count_count_count = false;\n    let mut is_valid_extension_char_position_count_count_count\
    \ = false;\n    let mut is_valid_prefix_char_position_count_count_count_count\
    \ = false;\n    let mut is_valid_extension_char_position_count_count_count_count\
    \ = false;\n    let mut is_valid_prefix_char_position_count_count_count_count_count\
    \ = false;\n    let mut is_valid_extension_char_position_count_count_count_count_count\
    \ = false;\n    let mut is_valid_prefix_char_position_count_count_count_count_count_count\
    \ = false;\n    let mut is_valid_extension_char_position_count_count_count_count_count_count\
    \ = false;\n    let mut is_valid_", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut name_start_index = 0;\n    let mut name_end_index = 0;\n \
    \   for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            digits_count += 1;\n        }\n        if c == '.' {\n          \
    \  dot_count += 1;\n            extension_start_index = i + 1;\n        }\n  \
    \      if c.is_alphabetic() {\n            name_start_index = i;\n           \
    \ break;\n        }\n    }\n    if digits_count > 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n\
    \    }\n    if extension_start_index == 0 {\n        return String::from(\"No\"\
    );\n    }\n    for (i, c) in file_name.chars().enumerate() {\n        if c ==\
    \ '.' {\n            extension_end_index = i;\n        }\n    }\n    if extension_end_index\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    let extension = &file_name[extension_start_index..extension_end_index];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if name_start_index == 0 {\n    \
    \    return String::from(\"No\");\n    }\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            name_end_index = i;\n        }\n    }\n\
    \    if name_end_index == 0 {\n        return String::from(\"No\");\n    }\n \
    \   let name = &file_name[name_start_index..name_end_index];\n    if name.len()\
    \ > 0 {\n        valid_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_after_dot = false;\n    let mut is_after_first_letter = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n            if digits_count > 3 {\n                is_valid = false;\n\
    \                break;\n            }\n        }\n        if c == '.' {\n   \
    \         dot_count += 1;\n            if dot_count > 1 {\n                is_valid\
    \ = false;\n                break;\n            }\n            is_after_dot =\
    \ true;\n            is_after_first_letter = false;\n        }\n        if is_after_dot\
    \ {\n            if c.is_alphabetic() {\n                is_after_first_letter\
    \ = true;\n                extension.push(c);\n            } else {\n        \
    \        is_valid = false;\n                break;\n            }\n        }\n\
    \        if is_after_first_letter {\n            if c.is_alphabetic() {\n    \
    \            extension.push(c);\n            } else {\n                break;\n\
    \            }\n        }\n        if is_first_letter {\n            if c.is_alphabetic()\
    \ {\n                is_first_letter = false;\n            } else {\n        \
    \        is_valid = false;\n                break;\n            }\n        }\n\
    \    }\n    if is_valid {\n        if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n            is_extension_valid = true;\n    \
    \    }\n    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut extension = String::new();\n\
    \    let mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n\
    \    let mut extension_start_found = false;\n    let mut extension_end_found =\
    \ false;\n    let mut extension_start_found_first = false;\n    let mut extension_end_found_first\
    \ = false;\n    let mut extension_start_found_second = false;\n    let mut extension_end_found_second\
    \ = false;\n    let mut extension_start_found_third = false;\n    let mut extension_end_found_third\
    \ = false;\n    let mut extension_start_found_fourth = false;\n    let mut extension_end_found_fourth\
    \ = false;\n    let mut extension_start_found_fifth = false;\n    let mut extension_end_found_fifth\
    \ = false;\n    let mut extension_start_found_sixth = false;\n    let mut extension_end_found_sixth\
    \ = false;\n    let mut extension_start_found_seventh = false;\n    let mut extension_end_found_seventh\
    \ = false;\n    let mut extension_start_found_eighth = false;\n    let mut extension_end_found_eighth\
    \ = false;\n    let mut extension_start_found_ninth = false;\n    let mut extension_end_found_ninth\
    \ = false;\n    let mut extension_start_found_tenth = false;\n    let mut extension_end_found_tenth\
    \ = false;\n    let mut extension_start_found_eleventh = false;\n    let mut extension_end_found_eleventh\
    \ = false;\n    let mut extension_start_found_twelfth = false;\n    let mut extension_end_found_twelfth\
    \ = false;\n    let mut extension_start_found_thirteenth = false;\n    let mut\
    \ extension_end_found_thirteenth = false;\n    let mut extension_start_found_fourteenth\
    \ = false;\n    let mut", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_start_with_letter\
    \ = false;\n    let mut is_end_with_txt = false;\n    let mut is_end_with_exe\
    \ = false;\n    let mut is_end_with_dll = false;\n    for ch in file_name.chars()\
    \ {\n        if ch == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n        } else if ch.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if ch.is_alphabetic() {\n\
    \            if is_before_dot {\n                is_empty = false;\n         \
    \       if ch.is_lowercase() || ch.is_uppercase() {\n                    is_start_with_letter\
    \ = true;\n                }\n            } else if is_after_dot {\n         \
    \       if ch == 't' {\n                    is_end_with_txt = true;\n        \
    \        } else if ch == 'e' {\n                    is_end_with_exe = true;\n\
    \                } else if ch == 'd' {\n                    is_end_with_dll =\
    \ true;\n                }\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_empty {\n        is_valid = false;\n    }\n    if\
    \ !is_start_with_letter {\n        is_valid = false;\n    }\n    if !is_end_with_txt\
    \ && !is_end_with_exe && !is_end_with_dll {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension = String::new();\n    let mut name = String::new();\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            valid_extension = file_name[i + 1..].to_lowercase() == \"\
    txt\" ||\n                file_name[i + 1..].to_lowercase() == \"exe\" ||\n  \
    \              file_name[i + 1..].to_lowercase() == \"dll\";\n            extension\
    \ = file_name[i + 1..].to_lowercase();\n        }\n        if i < file_name.len()\
    \ - 4 {\n            valid_name = c.is_alphabetic();\n            name.push(c);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !valid_extension\
    \ || !valid_name {\n        String::from(\"No\")\n    } else {\n        String::from(\"\
    Yes\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut first_part_is_valid = false;\n    let mut second_part_is_valid = false;\n\
    \    let mut first_part_start = 0;\n    let mut second_part_start = 0;\n    let\
    \ mut second_part_end = 0;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            second_part_start\
    \ = i + 1;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            first_part_is_valid = true;\n\
    \            first_part_start = i;\n        }\n    }\n    if dot_count == 1 &&\
    \ digits_count <= 3 && first_part_is_valid {\n        second_part_end = file_name.len();\n\
    \        let second_part = &file_name[second_part_start..second_part_end];\n \
    \       if second_part == \"txt\" || second_part == \"exe\" || second_part ==\
    \ \"dll\" {\n            second_part_is_valid = true;\n        }\n    }\n    if\
    \ first_part_is_valid && second_part_is_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_started\
    \ = false;\n    let mut is_after_dot_started = false;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_letter\
    \ = false;\n    let mut is_after_dot_letter = false;\n    let mut is_before_dot_digit\
    \ = false;\n    let mut is_after_dot_digit = false;\n    let mut is_before_dot_other\
    \ = false;\n    let mut is_after_dot_other = false;\n    let mut is_before_dot_dot\
    \ = false;\n    let mut is_after_dot_dot = false;\n    let mut is_before_dot_space\
    \ = false;\n    let mut is_after_dot_space = false;\n    let mut is_before_dot_underscore\
    \ = false;\n    let mut is_after_dot_underscore = false;\n    let mut is_before_dot_dash\
    \ = false;\n    let mut is_after_dot_dash = false;\n    let mut is_before_dot_semicolon\
    \ = false;\n    let mut is_after_dot_semicolon = false;\n    let mut is_before_dot_colon\
    \ = false;\n    let mut is_after_dot_colon = false;\n    let mut is_before_dot_comma\
    \ = false;\n    let mut is_after_dot_comma = false;\n    let mut is_before_dot_slash\
    \ = false;\n    let mut is_after_dot_slash = false;\n    let mut is_before_dot_backslash\
    \ = false;\n    let mut is_after_dot_backslash = false;\n    let mut is_before_dot_question_mark\
    \ = false;\n    let mut is_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    let mut is_valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_alphabetic() {\n            if dot_count\
    \ == 0 {\n                name.push(c);\n            } else {\n              \
    \  extension.push(c);\n            }\n        }\n    }\n    if digits_count >\
    \ 3 || dot_count != 1 || name.is_empty() || !name.chars().next().unwrap().is_alphabetic()\
    \ || !(extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_char_letter = false;\n    let mut is_last_char_letter = false;\n  \
    \  let mut is_last_char_dot = false;\n    let mut is_extension_valid = false;\n\
    \    let mut is_first_char_digit = false;\n    let mut is_last_char_digit = false;\n\
    \    let mut is_last_char_letter_or_digit = false;\n    let mut is_last_char_letter_or_digit_or_dot\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_quote\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_quote_or_comma\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_quote_or_comma_or_colon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_quote_or_comma_or_colon_or_semicolon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_quote_or_comma_or_colon_or_semicolon_or_question_mark\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_letter = false;\n    let mut is_extension = false;\n    let mut is_empty\
    \ = true;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            is_empty = false;\n\
    \        }\n        if c.is_alphabetic() {\n            is_letter = true;\n  \
    \      }\n        if c == '.' && is_letter && is_empty {\n            is_valid\
    \ = false;\n        }\n        if c == '.' && !is_empty {\n            is_extension\
    \ = true;\n        }\n        if is_extension {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_valid {\n\
    \        return String::from(\"No\");\n    }\n    match extension.as_str() {\n\
    \        \".txt\" | \".exe\" | \".dll\" => String::from(\"Yes\"),\n        _ =>\
    \ String::from(\"No\"),\n    }", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let\
    \ mut is_after_dot = false;\n    let mut is_before_dot_valid = false;\n    let\
    \ mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_txt = false;\n\
    \    let mut is_after_dot_valid_exe = false;\n    let mut is_after_dot_valid_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \        }\n        if is_before_dot {\n            if c.is_alphabetic() {\n \
    \               is_before_dot_valid = true;\n            }\n        }\n      \
    \  if is_after_dot {\n            if c == 't' {\n                is_after_dot_valid_txt\
    \ = true;\n            }\n            if c == 'e' {\n                is_after_dot_valid_exe\
    \ = true;\n            }\n            if c == 'd' {\n                is_after_dot_valid_dll\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 {\n      \
    \  is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if !is_before_dot_valid {\n        is_valid = false;\n    }\n    if\
    \ is_after_dot_valid_txt || is_after_dot_valid_exe || is_after_dot_valid_dll {\n\
    \        is_after_dot_valid = true;\n    }\n    if !is_after_dot_valid {\n   \
    \     is_valid = false;\n    }\n    if is_valid {\n        String::from(\"Yes\"\
    )\n    } else {\n        String::from(\"No\")\n    }", "    let mut count = 0;\n\
    \    let mut dot_index = 0;\n    let mut extension = String::new();\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     count += 1;\n        }\n        if c == '.' {\n            dot_index = i;\n\
    \        }\n    }\n    if count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_index == 0 {\n        return String::from(\"No\");\n    }\n\
    \    if !file_name.chars().nth(0).unwrap().is_alphabetic() {\n        return String::from(\"\
    No\");\n    }\n    extension = file_name.chars().skip(dot_index + 1).collect();\n\
    \    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    // TODO: Implement the function here\n    String::from(\"No\")", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_first_letter = true;\n\
    \    let mut is_first_letter_valid = false;\n    let mut is_extension_valid =\
    \ false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_first_letter\
    \ = true;\n            is_first_letter_valid = false;\n            is_empty =\
    \ true;\n        } else if c.is_ascii_digit() {\n            digits_count += 1;\n\
    \            is_first_letter = false;\n        } else if c.is_ascii_alphabetic()\
    \ {\n            if is_first_letter {\n                is_first_letter_valid =\
    \ true;\n            }\n            is_first_letter = false;\n            is_empty\
    \ = false;\n        } else {\n            is_valid = false;\n            break;\n\
    \        }\n        if is_first_letter_valid && is_empty {\n            is_valid\
    \ = false;\n            break;\n        }\n        if dot_count == 1 && !is_first_letter\
    \ {\n            extension.push(c);\n        }\n    }\n    if is_valid && digits_count\
    \ <= 3 && dot_count == 1 {\n        if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n            is_extension_valid = true;\n    \
    \    }\n    }\n    if is_valid && is_extension_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\n \
    \   }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    let mut parts = file_name.split('.');\n    let first_part = parts.next().unwrap();\n\
    \    let second_part = parts.next().unwrap();\n    if first_part.is_empty() ||\
    \ !first_part.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_name = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_txt\
    \ = false;\n    let mut is_valid_extension_exe = false;\n    let mut is_valid_extension_dll\
    \ = false;\n    let mut is_valid_extension_txt_count = 0;\n    let mut is_valid_extension_exe_count\
    \ = 0;\n    let mut is_valid_extension_dll_count = 0;\n    let mut is_valid_extension_txt_count_2\
    \ = 0;\n    let mut is_valid_extension_exe_count_2 = 0;\n    let mut is_valid_extension_dll_count_2\
    \ = 0;\n    let mut is_valid_extension_txt_count_3 = 0;\n    let mut is_valid_extension_exe_count_3\
    \ = 0;\n    let mut is_valid_extension_dll_count_3 = 0;\n    let mut is_valid_extension_txt_count_4\
    \ = 0;\n    let mut is_valid_extension_exe_count_4 = 0;\n    let mut is_valid_extension_dll_count_4\
    \ = 0;\n    let mut is_valid_extension_txt_count_5 = 0;\n    let mut is_valid_extension_exe_count_5\
    \ = 0;\n    let mut is_valid_extension_dll_count_5 = 0;\n    let mut is_valid_extension_txt_count_6\
    \ = 0;\n    let mut is_valid_extension_exe_count_6 = 0;\n    let mut is_valid_extension_dll_count_6\
    \ = 0;\n    let mut is_valid_extension_txt_count_7 = 0;\n    let mut is_valid_extension_exe_count_7\
    \ = 0;\n    let mut is_valid_extension_dll_", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (index, ch) in file_name.chars().enumerate() {\n        if\
    \ ch.is_digit(10) {\n            digits_count += 1;\n        } else if ch == '.'\
    \ {\n            dot_count += 1;\n            dot_index = index;\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    } else {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if after_dot != \".txt\" &&\
    \ after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else\
    \ {\n        String::from(\"No\")\n    }", "    let mut digits_count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c == '.'\
    \ {\n            dot_count += 1;\n            dot_index = i;\n        }\n    \
    \    if c.is_digit(10) {\n            digits_count += 1;\n        }\n    }\n \
    \   if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if !is_valid {\n        return String::from(\"No\");\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if !is_valid {\n        return String::from(\"No\");\n    }\n    let\
    \ after_dot = after_dot.trim_start_matches('.');\n    if after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\" {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n\
    \        let c = file_name.chars().nth(i).unwrap();\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = i + 1;\n        }\n    \
    \    if c.is_alphabetic() {\n            valid_prefix = true;\n            prefix_start\
    \ = i;\n        }\n        i += 1;\n    }\n    prefix_end = extension_start -\
    \ 1;\n    extension_end = file_name.len();\n    if digits_count > 3 {\n      \
    \  return String::from(\"No\");\n    }\n    if dot_count != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if !valid_prefix {\n        return String::from(\"\
    No\");\n    }\n    let extension = &file_name[extension_start..extension_end];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        valid_extension = true;\n    }\n    if !valid_extension {\n        return\
    \ String::from(\"No\");\n    }\n    return String::from(\"Yes\");", "    // TODO:\
    \ Implement the function here\n    unimplemented!();", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut extension_index\
    \ = 0;\n    let mut extension = String::new();\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut valid_extension_length\
    \ = false;\n    let mut valid_name_length = false;\n    let mut valid_name_start\
    \ = false;\n    let mut valid_name_end = false;\n    let mut valid_extension_start\
    \ = false;\n    let mut valid_extension_end = false;\n    let mut valid_name_chars\
    \ = false;\n    let mut valid_extension_chars = false;\n    let mut valid_dot_count\
    \ = false;\n    let mut valid_digits_count = false;\n    let mut valid_extension_index\
    \ = false;\n    let mut valid_name_index = false;\n    let mut valid_extension_start_index\
    \ = false;\n    let mut valid_name_start_index = false;\n    let mut valid_extension_end_index\
    \ = false;\n    let mut valid_name_end_index = false;\n    let mut valid_extension_start_char\
    \ = false;\n    let mut valid_name_start_char = false;\n    let mut valid_extension_end_char\
    \ = false;\n    let mut valid_name_end_char = false;\n    let mut valid_extension_chars_count\
    \ = false;\n    let mut valid_name_chars_count = false;\n    let mut valid_extension_chars_index\
    \ = false;\n    let mut valid_name_chars_index = false;\n    let mut valid_extension_chars_char\
    \ = false;\n    let mut valid_name_chars_char = false;\n    let mut valid_extension_chars_char_index\
    \ = false;\n    let mut valid_name_chars_char_index = false;\n    let mut valid_extension_chars_char_char\
    \ = false;\n    let mut valid_name_chars_char_char = false;\n    let mut valid_extension_ch",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_last_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut first_char = ' ';\n    let mut last_char = ' ';\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        }\n        if i == 0 {\n            first_char = c;\n    \
    \    }\n        if i == file_name.len() - 1 {\n            last_char = c;\n  \
    \      }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if first_char.is_alphabetic()\
    \ {\n        is_first_char_valid = true;\n    }\n    if last_char.is_alphabetic()\
    \ {\n        is_last_char_valid = true;\n    }\n    if is_first_char_valid &&\
    \ is_last_char_valid {\n        extension_end_index = file_name.len() - 1;\n \
    \       extension = file_name[extension_start_index..extension_end_index].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if is_valid\
    \ && is_first_char_valid && is_last_char_valid && is_extension_valid {\n     \
    \   return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n\
    \    let mut is_valid_extension_count = true;\n    let mut is_valid_prefix_count\
    \ = true;\n    let mut is_valid_digits_count = true;\n    let mut is_valid_dot_count\
    \ = true;\n    let mut is_valid_extension_type = true;\n    let mut is_valid_prefix_type\
    \ = true;\n    let mut is_valid_digits_type = true;\n    let mut is_valid_dot_type\
    \ = true;\n    let mut is_valid_extension_empty = true;\n    let mut is_valid_prefix_empty\
    \ = true;\n    let mut is_valid_digits_empty = true;\n    let mut is_valid_dot_empty\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_digits_start = true;\n    let mut is_valid_dot_start\
    \ = true;\n    let mut is_valid_extension_end = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_digits_end = true;\n    let mut is_valid_dot_end\
    \ = true;\n    let mut is_valid_extension_length = true;\n    let mut is_valid_prefix_length\
    \ = true;\n    let mut is_valid_digits_length = true;\n    let mut is_valid_dot_length\
    \ = true;\n    let mut is_valid_extension_range = true;\n    let mut is_valid_prefix_range\
    \ = true;\n    let mut is_valid_digits_range = true;\n    let mut is_valid_dot_range\
    \ = true;\n    let mut is_valid_extension_ascii = true;\n    let mut is_valid_prefix",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_prefix\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid =\
    \ false;\n    }\n    let mut split = file_name.split('.');\n    let mut prefix_iter\
    \ = split.next();\n    let mut extension_iter = split.next();\n    if prefix_iter.is_some()\
    \ {\n        prefix = prefix_iter.unwrap().to_string();\n    }\n    if extension_iter.is_some()\
    \ {\n        extension = extension_iter.unwrap().to_string();\n    }\n    if prefix.len()\
    \ == 0 || !prefix.chars().next().unwrap().is_alphabetic() {\n        is_valid\
    \ = false;\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        is_valid_extension = true;\n    }\n    if is_valid &&\
    \ is_valid_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits = 0;\n    let mut dot_found = false;\n\
    \    let mut valid_extension = false;\n    let mut valid_prefix = false;\n   \
    \ let mut extension = String::new();\n    let mut prefix = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot_found = true;\n       \
    \ } else if dot_found {\n            extension.push(c);\n        } else {\n  \
    \          prefix.push(c);\n        }\n    }\n    if digits > 3 {\n        return\
    \ String::from(\"No\");\n    }\n    if !dot_found {\n        return String::from(\"\
    No\");\n    }\n    if prefix.is_empty() {\n        return String::from(\"No\"\
    );\n    }\n    if !prefix.chars().next().unwrap().is_alphabetic() {\n        return\
    \ String::from(\"No\");\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n    if\
    \ valid_extension {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"\
    ];\n    let mut valid_extension = false;\n    let mut valid_name = false;\n  \
    \  let mut valid_file_name = false;\n\n    for (index, character) in file_name.chars().enumerate()\
    \ {\n        if character.is_digit(10) {\n            digits_count += 1;\n   \
    \     }\n        if character == '.' {\n            dot_count += 1;\n        \
    \    dot_index = index;\n        }\n    }\n\n    if digits_count > 3 {\n     \
    \   valid_file_name = false;\n    } else if dot_count != 1 {\n        valid_file_name\
    \ = false;\n    } else {\n        let file_name_parts: Vec<&str> = file_name.split('.').collect();\n\
    \        let file_name_part = file_name_parts[0];\n        let file_extension\
    \ = file_name_parts[1];\n\n        if file_name_part.is_empty() {\n          \
    \  valid_file_name = false;\n        } else {\n            for character in file_name_part.chars()\
    \ {\n                if character.is_alphabetic() {\n                    valid_name\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n\n        for extension in valid_extensions {\n            if extension\
    \ == file_extension {\n                valid_extension = true;\n             \
    \   break;\n            }\n        }\n\n        if valid_name && valid_extension\
    \ {\n            valid_file_name = true;\n        }\n    }\n\n    if valid_file_name\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n            dot_index = i;\n      \
    \  }\n    }\n    if digits > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    } else {\n        let (prefix, suffix) = file_name.split_at(dot_index);\n\
    \        if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if suffix != \".txt\" && suffix\
    \ != \".exe\" && suffix != \".dll\" {\n            is_valid = false;\n       \
    \ }\n    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n \
    \       String::from(\"No\")\n    }", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension = file_name[i+1..].to_string();\n\
    \            prefix = file_name[..i].to_string();\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if prefix.len() == 0 {\n   \
    \     return String::from(\"No\");\n    }\n    if prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_prefix && valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_before_dot = false;\n    let mut is_valid_after_dot\
    \ = false;\n    let mut is_valid_digit_count = true;\n    let mut is_valid_dot_count\
    \ = true;\n    let mut is_valid_before_dot_empty = true;\n    let mut is_valid_before_dot_letter\
    \ = true;\n    let mut is_valid_after_dot_empty = true;\n    let mut is_valid_after_dot_letter\
    \ = true;\n    let mut is_valid_after_dot_extension = true;\n    let mut is_valid_after_dot_extension_txt\
    \ = true;\n    let mut is_valid_after_dot_extension_exe = true;\n    let mut is_valid_after_dot_extension_dll\
    \ = true;\n    let mut is_valid_after_dot_extension_txt_count = 0;\n    let mut\
    \ is_valid_after_dot_extension_exe_count = 0;\n    let mut is_valid_after_dot_extension_dll_count\
    \ = 0;\n    let mut is_valid_after_dot_extension_txt_count_max = 3;\n    let mut\
    \ is_valid_after_dot_extension_exe_count_max = 3;\n    let mut is_valid_after_dot_extension_dll_count_max\
    \ = 3;\n    let mut is_valid_after_dot_extension_txt_count_min = 3;\n    let mut\
    \ is_valid_after_dot_extension_exe_count_min = 3;\n    let mut is_valid_after_dot_extension_dll_count_min\
    \ = 3;\n    let mut is_valid_after_dot_extension_txt_count_equal = false;\n  \
    \  let mut is_valid_after_dot_extension_exe_count_equal = false;\n    let mut\
    \ is_valid_after_dot_extension_dll_count_equal = false;\n    let mut is", "  \
    \  let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    let mut split = file_name.split('.');\n\
    \    let name = split.next().unwrap();\n    let extension = split.next().unwrap();\n\
    \    if name.len() == 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ name.chars().next().unwrap().is_alphabetic() {\n        valid_name = true;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        valid_extension = true;\n    }\n    if valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_name = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            if i == 0\
    \ {\n                return String::from(\"No\");\n            }\n           \
    \ name = file_name[..i].to_string();\n            extension = file_name[i+1..].to_string();\n\
    \        }\n        if c.is_ascii_digit() {\n            digits_count += 1;\n\
    \        }\n        if digits_count > 3 {\n            return String::from(\"\
    No\");\n        }\n    }\n    if dot_count != 1 {\n        return String::from(\"\
    No\");\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if name.chars().next().unwrap().is_ascii_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    if valid_extension && valid_name {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_substring_empty = true;\n    let mut is_substring_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut substring = String::new();\n    for c in file_name.chars() {\n  \
    \      if c == '.' {\n            dot_count += 1;\n            is_substring_empty\
    \ = false;\n            is_substring_valid = true;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           if is_substring_empty {\n                is_substring_valid = true;\n\
    \            }\n            if is_substring_valid {\n                substring.push(c);\n\
    \            } else {\n                is_valid = false;\n                break;\n\
    \            }\n        } else {\n            is_valid = false;\n            break;\n\
    \        }\n    }\n    if is_valid {\n        if digits_count > 3 {\n        \
    \    is_valid = false;\n        } else if dot_count != 1 {\n            is_valid\
    \ = false;\n        } else if !is_substring_valid {\n            is_valid = false;\n\
    \        } else {\n            extension = file_name.split('.').last().unwrap().to_string();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                is_extension_valid = true;\n            }\n         \
    \   if !is_extension_valid {\n                is_valid = false;\n            }\n\
    \        }\n    }\n    if is_valid {\n        return String::from(\"Yes\");\n\
    \    } else {\n        return String::from(\"No\");\n    }"]
stop_tokens:
- "\n}"
