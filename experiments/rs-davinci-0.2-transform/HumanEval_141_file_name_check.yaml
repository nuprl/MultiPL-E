name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"\
  example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"\
  1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut first_letter = false;\n    let mut last_three_letters = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            if !first_letter {\n              \
    \  first_letter = true;\n            }\n            last_three_letters.push(c);\n\
    \            if last_three_letters.len() > 3 {\n                last_three_letters.remove(0);\n\
    \            }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 ||\
    \ !first_letter || \n        last_three_letters != \"txt\" && last_three_letters\
    \ != \"exe\" && last_three_letters != \"dll\" {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n\
    \    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut extension_start = 0;\n    let mut extension_end\
    \ = 0;\n    let mut name_start = 0;\n    let mut name_end = 0;\n    let mut i\
    \ = 0;\n    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = i + 1;\n        } else if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c.is_alphabetic() {\n       \
    \     if !valid_name {\n                name_start = i;\n                valid_name\
    \ = true;\n            }\n            name_end = i;\n        }\n        i += 1;\n\
    \    }\n    if dot_count == 1 {\n        extension_end = i - 1;\n        let extension\
    \ = &file_name[extension_start..extension_end];\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if digits <= 3 && valid_extension && valid_name\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ file_name_chars = file_name.chars();\n    for c in file_name_chars {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n        if c != '.' {\n       \
    \     is_empty = false;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || is_empty || !is_letter {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        let mut file_name_chars = file_name.chars();\n        for c in file_name_chars\
    \ {\n            if c == '.' {\n                break;\n            }\n      \
    \  }\n        for c in file_name_chars {\n            extension.push(c);\n   \
    \     }\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            is_extension = true;\n        }\n    }\n    if is_valid\
    \ && is_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid_extension = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    let mut valid_name = false;\n\
    \    let mut name_start_index = 0;\n    let mut name_end_index = 0;\n    let mut\
    \ valid_file_name = true;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if !valid_name {\n       \
    \         name_start_index = i;\n                name_end_index = i + 1;\n   \
    \             valid_name = true;\n            } else {\n                name_end_index\
    \ += 1;\n            }\n        }\n    }\n    if dot_count == 1 {\n        let\
    \ extension = &file_name[extension_start_index..];\n        if extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n            extension_end_index = extension_start_index + extension.len();\n\
    \        }\n    }\n    if digits_count > 3 {\n        valid_file_name = false;\n\
    \    }\n    if !valid_extension {\n        valid_file_name = false;\n    }\n \
    \   if !valid_name {\n        valid_file_name = false;\n    }\n    if valid_file_name\
    \ {\n        let name = &file_name[name_start_index..name_end_index];\n      \
    \  let extension = &file_name[extension_start_index..extension_end_index];\n \
    \       let mut new_file_name = String::new();\n        new_file_name.push_str(name);\n\
    \        new_file_name.push('.');\n        new_file_name.push_str(extension);\n\
    \        if new_file_name ==", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    let mut is_valid_substring_before_dot\
    \ = false;\n    let mut is_valid_substring_after_dot = false;\n    let mut substring_before_dot\
    \ = String::new();\n    let mut substring_after_dot = String::new();\n    let\
    \ mut is_valid_substring_before_dot_first_char = false;\n    let mut is_valid_substring_after_dot_first_char\
    \ = false;\n    let mut is_valid_substring_before_dot_second_char = false;\n \
    \   let mut is_valid_substring_after_dot_second_char = false;\n    let mut is_valid_substring_before_dot_third_char\
    \ = false;\n    let mut is_valid_substring_after_dot_third_char = false;\n   \
    \ let mut is_valid_substring_before_dot_fourth_char = false;\n    let mut is_valid_substring_after_dot_fourth_char\
    \ = false;\n    let mut is_valid_substring_before_dot_fifth_char = false;\n  \
    \  let mut is_valid_substring_after_dot_fifth_char = false;\n    let mut is_valid_substring_before_dot_sixth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_sixth_char = false;\n   \
    \ let mut is_valid_substring_before_dot_seventh_char = false;\n    let mut is_valid_substring_after_dot_seventh_char\
    \ = false;\n    let mut is_valid_substring_before_dot_eighth_char = false;\n \
    \   let mut is_valid_substring_after_dot_eighth_char = false;\n    let mut is_valid_substring_before_dot_ninth_char\
    \ = false;\n    let mut is_valid_substring_after_dot_ninth_char = false;\n   \
    \ let mut is_valid_sub", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_char_valid = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    let mut extension_index = 0;\n\n    for\
    \ (index, ch) in file_name.chars().enumerate() {\n        if ch.is_digit(10) {\n\
    \            digits_count += 1;\n        } else if ch == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        } else if ch.is_alphabetic()\
    \ {\n            is_first_char_valid = true;\n        }\n    }\n\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n\n    if dot_count != 1 {\n       \
    \ is_valid = false;\n    }\n\n    if !is_first_char_valid {\n        is_valid\
    \ = false;\n    }\n\n    extension_index = dot_index + 1;\n    extension = file_name[extension_index..].to_string();\n\
    \n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        is_extension_valid = true;\n    }\n\n    if !is_extension_valid {\n\
    \        is_valid = false;\n    }\n\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut is_first_char_letter\
    \ = false;\n    let mut is_last_char_letter = false;\n    let mut is_last_char_dot\
    \ = false;\n    let mut is_last_char_digit = false;\n    let mut is_last_char_letter_or_digit\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore = false;\n    let mut\
    \ is_last_char_letter_or_digit_or_dot_or_underscore_or_dash = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_semicolon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_semicolon_or_question_mark\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_first_digit = true;\n    let mut is_first_letter_after_dot = true;\n\
    \    let mut is_first_digit_after_dot = true;\n    let mut is_first_letter_after_first_dot\
    \ = true;\n    let mut is_first_digit_after_first_dot = true;\n    let mut is_first_letter_before_dot\
    \ = true;\n    let mut is_first_digit_before_dot = true;\n    let mut is_first_letter_before_first_dot\
    \ = true;\n    let mut is_first_digit_before_first_dot = true;\n    let mut is_first_letter_after_second_dot\
    \ = true;\n    let mut is_first_digit_after_second_dot = true;\n    let mut is_first_letter_before_second_dot\
    \ = true;\n    let mut is_first_digit_before_second_dot = true;\n    let mut is_first_letter_after_third_dot\
    \ = true;\n    let mut is_first_digit_after_third_dot = true;\n    let mut is_first_letter_before_third_dot\
    \ = true;\n    let mut is_first_digit_before_third_dot = true;\n    let mut is_first_letter_after_fourth_dot\
    \ = true;\n    let mut is_first_digit_after_fourth_dot = true;\n    let mut is_first_letter_before_fourth_dot\
    \ = true;\n    let mut is_first_digit_before_fourth_dot = true;\n    let mut is_first_letter_after_fifth_dot\
    \ = true;\n    let mut is_first_digit_after_fifth_dot = true;\n    let mut is_first_letter_before_fifth_dot\
    \ = true;\n    let mut is_first_digit_before_fifth_dot = true;\n    let mut is_first_letter_after_sixth_dot\
    \ = true;\n    let", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut name_start\
    \ = 0;\n    let mut name_end = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            extension_start\
    \ = i + 1;\n            name_end = i;\n        } else if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        } else if c.is_alphabetic() {\n       \
    \     if !valid_name {\n                name_start = i;\n                valid_name\
    \ = true;\n            }\n        }\n    }\n    if dot_count == 1 {\n        extension_end\
    \ = file_name.len();\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !valid_extension || !valid_name {\n        return String::from(\"\
    No\");\n    }\n    return String::from(\"Yes\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut parts\
    \ = file_name.split('.');\n    let first_part = parts.next().unwrap();\n    let\
    \ second_part = parts.next().unwrap();\n    if first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_prefix = false;\n    let mut prefix_start\
    \ = 0;\n    let mut prefix_end = 0;\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut i = 0;\n    while i < file_name.len() {\n\
    \        if file_name.chars().nth(i).unwrap().is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' {\n  \
    \          dot_count += 1;\n            extension_start = i + 1;\n        }\n\
    \        if file_name.chars().nth(i).unwrap().is_alphabetic() {\n            valid_prefix\
    \ = true;\n            prefix_start = i;\n            break;\n        }\n    \
    \    i += 1;\n    }\n    if digits_count > 3 || dot_count != 1 || !valid_prefix\
    \ {\n        return String::from(\"No\");\n    }\n    i = extension_start;\n \
    \   while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n            extension_end = i;\n        }\n        i += 1;\n    }\n    let\
    \ extension = &file_name[extension_start..extension_end + 1];\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        valid_extension\
    \ = true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if after_dot != \".txt\" && after_dot != \".exe\" && after_dot !=\
    \ \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_part_is_valid = false;\n\
    \    let mut second_part_is_valid = false;\n    let mut first_part = String::new();\n\
    \    let mut second_part = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ mut parts = file_name.split('.');\n    first_part = parts.next().unwrap().to_string();\n\
    \    second_part = parts.next().unwrap().to_string();\n    if first_part.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    for c in first_part.chars()\
    \ {\n        if c.is_alphabetic() {\n            first_part_is_valid = true;\n\
    \            break;\n        }\n    }\n    if !first_part_is_valid {\n       \
    \ return String::from(\"No\");\n    }\n    if second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\" {\n        second_part_is_valid = true;\n\
    \    }\n    if !second_part_is_valid {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            extension_start_index\
    \ = i + 1;\n        } else if c.is_alphabetic() {\n            is_first_char_valid\
    \ = true;\n        }\n        if i == file_name.len() - 1 {\n            extension_end_index\
    \ = i + 1;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid\
    \ {\n        is_valid = false;\n    }\n    let extension = &file_name[extension_start_index..extension_end_index];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_extension_valid = true;\n    }\n    if is_valid && is_extension_valid\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ extension_count = 0;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension_start_flag = false;\n    let mut extension_end_flag\
    \ = false;\n    let mut extension_start_flag_2 = false;\n    let mut extension_end_flag_2\
    \ = false;\n    let mut extension_start_flag_3 = false;\n    let mut extension_end_flag_3\
    \ = false;\n    let mut extension_start_flag_4 = false;\n    let mut extension_end_flag_4\
    \ = false;\n    let mut extension_start_flag_5 = false;\n    let mut extension_end_flag_5\
    \ = false;\n    let mut extension_start_flag_6 = false;\n    let mut extension_end_flag_6\
    \ = false;\n    let mut extension_start_flag_7 = false;\n    let mut extension_end_flag_7\
    \ = false;\n    let mut extension_start_flag_8 = false;\n    let mut extension_end_flag_8\
    \ = false;\n    let mut extension_start_flag_9 = false;\n    let mut extension_end_flag_9\
    \ = false;\n    let mut extension_start_flag_10 = false;\n    let mut extension_end_flag_10\
    \ = false;\n    let mut extension_start_flag_11 = false;\n    let mut extension_end_flag_11\
    \ = false;\n    let mut extension_start_flag_12 = false;\n    let mut extension_end_flag_12\
    \ = false;\n    let mut extension_start_flag_13 = false;\n    let mut extension_end_flag_13\
    \ = false;\n    let mut extension_start_flag_14 = false;\n    let mut extension_end_flag_14\
    \ = false;\n    let mut extension_start_flag_15 = false;\n    let mut extension_end_flag_15\
    \ = false;\n    let mut extension_start_flag_16 = false;\n    let mut extension_end_flag_16\
    \ = false;\n    let mut extension_start_flag_17 = false;", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (prefix,\
    \ suffix) = file_name.split_at(dot_index);\n    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if suffix != \".txt\" && suffix !=\
    \ \".exe\" && suffix != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\"\
    )\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_first_letter = true;\n        }\n\
    \        if is_after_dot {\n            if c.is_alphabetic() {\n             \
    \   if is_first_letter {\n                    extension.push(c);\n           \
    \         is_first_letter = false;\n                }\n            } else {\n\
    \                extension.push(c);\n            }\n        }\n        if is_after_dot\
    \ && c == '.' {\n            if extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\" {\n                is_extension_valid = true;\n       \
    \     }\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || !is_extension_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    } else {\n        return String::from(\"No\");\n    }", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    for (index, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = index;\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    let (first_part, second_part) = file_name.split_at(dot_index);\n\
    \    if first_part.is_empty() || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \".txt\" && second_part\
    \ != \".exe\" && second_part != \".dll\" {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ is_first_dot = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_digit = false;\n    let mut is_letter = false;\n  \
    \  let mut is_dot = false;\n    let mut is_other = false;\n    let mut is_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_digit = false;\n    let mut is_before_dot_digit\
    \ = false;\n    let mut is_after_dot_letter = false;\n    let mut is_before_dot_letter\
    \ = false;\n    let mut is_after_dot_dot = false;\n    let mut is_before_dot_dot\
    \ = false;\n    let mut is_after_dot_other = false;\n    let mut is_before_dot_other\
    \ = false;\n    let mut is_after_dot_first_letter = true;\n    let mut is_before_dot_first_letter\
    \ = true;\n    let mut is_after_dot_first_dot = true;\n    let mut is_before_dot_first_dot\
    \ = true;\n    let mut is_after_dot_first_digit = true;\n    let mut is_before_dot_first_digit\
    \ = true;\n    let mut is_after_dot_first_other = true;\n    let mut is_before_dot_first_other\
    \ = true;\n    let mut is_after_dot_first_letter_valid = false;\n    let mut is_before_dot_first_letter_valid\
    \ = false;\n    let mut is_after_dot_first_digit_valid = false;\n    let mut is_before_dot_first_digit_valid\
    \ = false;\n    let mut is_after_dot_first_other_valid =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_extension = false;\n    let mut extension = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        } else if c == '.' {\n            dot_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            has_letter = true;\n        }\n    }\n \
    \   if dot_count == 1 {\n        let mut parts = file_name.split('.');\n     \
    \   let first_part = parts.next().unwrap();\n        extension = parts.next().unwrap().to_string();\n\
    \        if first_part.chars().next().unwrap().is_alphabetic() {\n           \
    \ has_extension = true;\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !has_letter || !has_extension {\n        return String::from(\"No\"\
    );\n    }\n    match extension.as_str() {\n        \"txt\" | \"exe\" | \"dll\"\
    \ => String::from(\"Yes\"),\n        _ => String::from(\"No\"),\n    }"]
stop_tokens:
- "\n}"
