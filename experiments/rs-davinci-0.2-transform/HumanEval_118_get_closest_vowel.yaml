name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n      \
    \  if is_vowel(c) {\n            if !is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    let mut prev_prev_char\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if prev_char != ' ' && prev_prev_char != ' ' {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    for c in word.chars() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n\
    \        } else {\n            consonants.push(c);\n        }\n    }\n    let\
    \ mut result = String::new();\n    for i in 0..consonants.len() {\n        if\
    \ i < vowels.len() {\n            result.push(vowels[i]);\n        }\n    }\n\
    \    result", "    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_char_index = 0;\n    let mut index = 0;\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut char_index = 0;\n    let\
    \ mut found = false;\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    let mut found_char = false;\n    let mut found_last_vowel = false;\n\
    \    let mut found_last_consonant = false;\n    let mut found_last_char = false;\n\
    \    let mut found_last_vowel_index = false;\n    let mut found_last_consonant_index\
    \ = false;\n    let mut found_last_char_index = false;\n    let mut found_vowel_index\
    \ = false;\n    let mut found_consonant_index = false;\n    let mut found_char_index\
    \ = false;\n    let mut found_index = false;\n    let mut found_result = false;\n\
    \    let mut found_last_result = false;\n    let mut found_result_index = false;\n\
    \    let mut found_last_result_index = false;\n    let mut result_index = 0;\n\
    \    let mut last_result_index = 0;\n    let mut last_result = String::new();\n\
    \    let mut last_word = String::new();\n    let mut last_word_index = 0;\n  \
    \  let mut found_last_word = false;\n    let mut found_last_word_index = false;\n\
    \    let mut found_word = false;\n    let mut found_word_index = false;\n    let\
    \ mut word_index = 0;\n    let mut found_last_index = false;\n    let mut found_last",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_index {\n  \
    \              closest_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_index != word.len() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = i;\n        } else {\n            last_consonant = i;\n        }\n       \
    \ if last_vowel > last_consonant {\n            result = c.to_string();\n    \
    \    }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_consonant = ' ';\n    let\
    \ mut last_vowel = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n        } else {\n            if last_vowel\
    \ != ' ' {\n                result.push(last_vowel);\n                break;\n\
    \            }\n            last_consonant = c;\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && prev_char\
    \ != c {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n        }\n        prev_char = c;\n        index += 1;\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel > last_consonant {\n            result\
    \ = c.to_string();\n        }\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_prev_char =\
    \ ' ';\n    for c in word.chars().rev() {\n        if is_vowel(c) {\n        \
    \    if !is_vowel(prev_char) && is_vowel(prev_prev_char) {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if closest_vowel_index\
    \ < word.len() {\n                break;\n            }\n        }\n    }\n  \
    \  closest_vowel", "    let mut result = String::new();\n    let mut is_vowel\
    \ = false;\n    let mut is_consonant = false;\n    let mut is_first_vowel = false;\n\
    \    let mut is_first_consonant = false;\n    let mut is_second_vowel = false;\n\
    \    let mut is_second_consonant = false;\n    let mut is_third_vowel = false;\n\
    \    let mut is_third_consonant = false;\n    let mut is_fourth_vowel = false;\n\
    \    let mut is_fourth_consonant = false;\n    let mut is_fifth_vowel = false;\n\
    \    let mut is_fifth_consonant = false;\n    let mut is_sixth_vowel = false;\n\
    \    let mut is_sixth_consonant = false;\n    let mut is_seventh_vowel = false;\n\
    \    let mut is_seventh_consonant = false;\n    let mut is_eighth_vowel = false;\n\
    \    let mut is_eighth_consonant = false;\n    let mut is_ninth_vowel = false;\n\
    \    let mut is_ninth_consonant = false;\n    let mut is_tenth_vowel = false;\n\
    \    let mut is_tenth_consonant = false;\n    let mut is_eleventh_vowel = false;\n\
    \    let mut is_eleventh_consonant = false;\n    let mut is_twelfth_vowel = false;\n\
    \    let mut is_twelfth_consonant = false;\n    let mut is_thirteenth_vowel =\
    \ false;\n    let mut is_thirteenth_consonant = false;\n    let mut is_fourteenth_vowel\
    \ = false;\n    let mut is_fourteenth_consonant = false;\n    let mut is_fifteenth_vowel\
    \ = false;\n    let mut is_fifteenth_consonant = false;\n    let mut is_sixteenth_vowel\
    \ = false;\n    let mut is_sixteenth_consonant = false;\n    let mut is_", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_consonant > last_vowel {\n            result = word[last_vowel..last_consonant].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    for (i, c) in word.chars().enumerate() {\n \
    \       if vowels.contains(&c) {\n            last_vowel_index = i;\n        \
    \    last_vowel_char = c;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_consonant_char = c;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = last_vowel_char.to_string();\n\
    \        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let mut result\
    \ = String::new();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            if i < last_consonant_index\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        } else {\n            last_consonant_index = i;\n        }\n    }\n \
    \   result", "    let mut result = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut prev_vowel = false;\n    let mut prev_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n            prev_vowel = true;\n        } else\
    \ {\n            if prev_vowel {\n                prev_consonant = true;\n   \
    \         }\n        }\n    }\n    result", "    let mut closest_vowel = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if prev_char != ' ' && prev_prev_char != ' ' {\n\
    \                closest_vowel.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    closest_vowel", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ closest_vowel = String::new();\n    let mut closest_vowel_index = 0;\n    let\
    \ mut closest_vowel_distance = 0;\n    let mut prev_char = ' ';\n    let mut prev_char_index\
    \ = 0;\n    for (index, character) in word.chars().enumerate() {\n        if vowels.contains(&character)\
    \ {\n            if prev_char != ' ' && prev_char_index != 0 {\n             \
    \   let distance = index - prev_char_index;\n                if closest_vowel_distance\
    \ == 0 || distance < closest_vowel_distance {\n                    closest_vowel_distance\
    \ = distance;\n                    closest_vowel_index = index;\n            \
    \    }\n            }\n        } else {\n            prev_char = character;\n\
    \            prev_char_index = index;\n        }\n    }\n    if closest_vowel_index\
    \ != 0 {\n        closest_vowel.push(word.chars().nth(closest_vowel_index).unwrap());\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ vowel_found = false;\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let\
    \ mut vowel_index_list = Vec::new();\n    let mut consonant_index_list = Vec::new();\n\
    \    let mut word_chars: Vec<char> = word.chars().collect();\n    for (index,\
    \ character) in word_chars.iter().enumerate() {\n        if is_vowel(character)\
    \ {\n            vowel_count += 1;\n            vowel_index = index;\n       \
    \     vowel_index_list.push(vowel_index);\n        } else {\n            consonant_count\
    \ += 1;\n            consonant_index = index;\n            consonant_index_list.push(consonant_index);\n\
    \        }\n    }\n    if vowel_count == 0 || consonant_count == 0 {\n       \
    \ return result;\n    }\n    if vowel_count == 1 && consonant_count == 1 {\n \
    \       return result;\n    }\n    if vowel_count == 1 && consonant_count > 1\
    \ {\n        vowel_index = vowel_index_list[0];\n        for index in consonant_index_list\
    \ {\n            if vowel_index > index {\n                result = word_chars[vowel_index].to_string();\n\
    \                vowel_found = true;\n                break;\n            }\n\
    \        }\n        if !vowel_found {\n            result = word_chars[vowel_index].to_string();\n\
    \        }\n        return result;\n    }\n    if vowel_count > 1 && consonant_count\
    \ == 1 {\n        consonant_index = consonant_index_list[0];\n        for index\
    \ in vowel_index_list {\n            if consonant_index < index {\n          \
    \      result = word_chars[index].to_string();\n                vowel_found =\
    \ true;\n                break;\n            }\n        }\n        if !vowel_found\
    \ {\n            result = word_chars[vowel_index_list[", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i > 0 && i < word.len() - 1\
    \ {\n                if !vowels.contains(&word.chars().nth(i - 1).unwrap()) &&\
    \ !vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n                    if\
    \ i < closest_distance {\n                        closest_distance = i;\n    \
    \                    closest_vowel = c.to_string();\n                    }\n \
    \               }\n            }\n        }\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_is_consonant\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_is_consonant {\n                closest_vowel_index =\
    \ i;\n                break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n    }\n    if closest_vowel_index < word.len() {\n     \
    \   closest_vowel.push(word.chars().nth(closest_vowel_index).unwrap());\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut found = false;\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i == 0 {\n             \
    \   break;\n            }\n            if !vowels.contains(&word.chars().rev().nth(i\
    \ - 1).unwrap()) {\n                result.push(c);\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    if found {\n   \
    \     result\n    } else {\n        String::new()\n    }", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ < last_consonant_index {\n            result = word[last_vowel_index..last_consonant_index].to_string();\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_consonant = false;\n    let mut last_vowel = false;\n    for c in word.chars().rev()\
    \ {\n        if c.is_ascii_alphabetic() {\n            if c.is_ascii_lowercase()\
    \ {\n                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n                    if last_consonant {\n                        result.push(c);\n\
    \                        break;\n                    }\n                    last_vowel\
    \ = true;\n                } else {\n                    if last_vowel {\n   \
    \                     result.push(c);\n                        break;\n      \
    \              }\n                    last_consonant = true;\n               \
    \ }\n            } else {\n                if c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U' {\n                    if last_consonant {\n       \
    \                 result.push(c);\n                        break;\n          \
    \          }\n                    last_vowel = true;\n                } else {\n\
    \                    if last_vowel {\n                        result.push(c);\n\
    \                        break;\n                    }\n                    last_consonant\
    \ = true;\n                }\n            }\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut result = String::new();\n    let mut vowels = String::from(\"aeiouAEIOU\"\
    );\n    let mut consonants = String::from(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    );\n    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c\
    \ in word.chars() {\n        if vowels.contains(c) {\n            if consonants.contains(prev_char)\
    \ && consonants.contains(prev_prev_char) {\n                result = c.to_string();\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant_index = None;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if !vowels.contains(&c) {\n            last_consonant_index = Some(i);\n\
    \        } else if let Some(last_consonant_index) = last_consonant_index {\n \
    \           if i - last_consonant_index < closest_distance {\n               \
    \ closest_distance = i - last_consonant_index;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            if is_vowel(c) {\n                result.push(c);\n\
    \                is_vowel = true;\n            }\n        } else {\n         \
    \   if !is_vowel(c) {\n                is_consonant = true;\n            }\n \
    \       }\n    }\n    result.chars().rev().collect()", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut i = word.len() -\
    \ 1;\n    let mut is_consonant = false;\n    while i >= 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if is_consonant {\n                result.push(word.chars().nth(i).unwrap());\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        i -= 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut prev_char = ' ';\n    for (i,\
    \ c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n \
    \           if prev_char != ' ' && prev_char != c {\n                if i < closest_vowel_index\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        }\n        prev_char\
    \ = c;\n    }\n    closest_vowel", "    let mut result = String::new();\n    let\
    \ mut found_consonant = false;\n    let mut found_vowel = false;\n    for c in\
    \ word.chars().rev() {\n        if !found_consonant && is_consonant(c) {\n   \
    \         found_consonant = true;\n        } else if found_consonant && is_vowel(c)\
    \ {\n            result.push(c);\n            found_vowel = true;\n          \
    \  break;\n        }\n    }\n    if found_vowel {\n        result\n    } else\
    \ {\n        String::new()\n    }", "    let mut vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut i = word.len()\
    \ - 1;\n    let mut prev_vowel = false;\n    while i >= 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if prev_vowel {\n                break;\n            }\n    \
    \        result = word.chars().nth(i).unwrap().to_string();\n            prev_vowel\
    \ = true;\n        } else {\n            prev_vowel = false;\n        }\n    \
    \    i -= 1;\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            prev_vowel = c;\n        } else if\
    \ prev_char != ' ' && is_vowel(prev_char) {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut found = false;\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if !found {\n             \
    \   result.push(c);\n                found = true;\n            }\n        } else\
    \ {\n            if found && !vowels.contains(&prev_char) {\n                break;\n\
    \            }\n        }\n        prev_char = c;\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = None;\n    let mut last_consonant = None;\n    for c\
    \ in word.chars().rev() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = Some(c);\n        } else {\n            last_consonant = Some(c);\n      \
    \  }\n        if last_vowel.is_some() && last_consonant.is_some() {\n        \
    \    result.push(last_vowel.unwrap());\n            break;\n        }\n    }\n\
    \    result", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_prev_char =\
    \ ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if prev_char != ' ' && prev_prev_char != ' ' {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel_pos = 0;\n    let mut vowel_found = false;\n    for i in 0..word.len()\
    \ {\n        if is_vowel(word[i]) {\n            vowel_pos = i;\n            vowel_found\
    \ = true;\n            break;\n        }\n    }\n    if vowel_found {\n      \
    \  for i in 0..vowel_pos {\n            if is_consonant(word[i]) {\n         \
    \       return word[vowel_pos].to_string();\n            }\n        }\n    }\n\
    \    String::from(\"\")", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_vowel = String::new();\n    for c in word.chars() {\n      \
    \  if vowels.contains(&c) {\n            last_vowel = c.to_string();\n       \
    \ } else {\n            last_consonant = c.to_string();\n        }\n        if\
    \ last_consonant != \"\" && last_vowel != \"\" {\n            closest_vowel =\
    \ last_vowel.clone();\n            break;\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            is_consonant = false;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel = true;\n  \
    \      } else {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut result = String::new();\n    let mut found_vowel = false;\n    let\
    \ mut found_consonant = false;\n    let mut found_consonant_again = false;\n \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut i = word.len() -\
    \ 1;\n    while i >= 0 {\n        let c = word.chars().nth(i).unwrap();\n    \
    \    if vowels.contains(&c) {\n            if found_consonant_again {\n      \
    \          result.push(c);\n                break;\n            }\n          \
    \  found_vowel = true;\n        } else {\n            if found_vowel {\n     \
    \           found_consonant_again = true;\n            } else {\n            \
    \    found_consonant = true;\n            }\n        }\n        i -= 1;\n    }\n\
    \    if found_consonant && found_consonant_again {\n        result\n    } else\
    \ {\n        String::new()\n    }", "    let mut vowels = String::new();\n   \
    \ let mut consonants = String::new();\n    let mut result = String::new();\n \
    \   for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() < 2 {\n        return result;\n    }\n\
    \    let mut i = vowels.len() - 1;\n    while i > 0 {\n        if consonants.contains(vowels.chars().nth(i).unwrap())\
    \ && consonants.contains(vowels.chars().nth(i - 1).unwrap()) {\n            result.push(vowels.chars().nth(i).unwrap());\n\
    \            break;\n        }\n        i -= 1;\n    }\n    result", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut\
    \ prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && !vowels.contains(&prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        } else {\n            if prev_prev_char != ' ' && vowels.contains(&prev_prev_char)\
    \ {\n                result.push(prev_prev_char);\n                break;\n  \
    \          }\n        }\n        prev_prev_char = prev_char;\n        prev_char\
    \ = c;\n    }\n    result.chars().rev().collect()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_consonant\
    \ = ' ';\n    let mut last_vowel = ' ';\n    for c in word.chars().rev() {\n \
    \       if vowels.contains(&c) {\n            last_vowel = c;\n        } else\
    \ {\n            if last_vowel != ' ' {\n                result.push(last_vowel);\n\
    \                break;\n            }\n            last_consonant = c;\n    \
    \    }\n    }\n    result", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n   \
    \ let mut result = String::new();\n    let mut is_prev_consonant = false;\n  \
    \  let mut is_next_consonant = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i == 0 {\n             \
    \   is_prev_consonant = true;\n            } else {\n                is_prev_consonant\
    \ = !vowels.contains(&word.chars().nth(i - 1).unwrap());\n            }\n    \
    \        if i == word.len() - 1 {\n                is_next_consonant = true;\n\
    \            } else {\n                is_next_consonant = !vowels.contains(&word.chars().nth(i\
    \ + 1).unwrap());\n            }\n            if is_prev_consonant && is_next_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index < word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    for c in word.chars() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c.to_string();\n        } else {\n            last_consonant = c.to_string();\n\
    \        }\n        if !last_consonant.is_empty() && !last_vowel.is_empty() {\n\
    \            closest_vowel = last_vowel.clone();\n            break;\n       \
    \ }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < closest_index {\n                closest_index = i;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            if closest_index != word.len() {\n                break;\n  \
    \          }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let mut vowels = String::new();\n    let mut consonants\
    \ = String::new();\n    let mut result = String::new();\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_consonant = String::new();\n    let mut\
    \ vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_distance\
    \ = 0;\n    let mut consonant_distance = 0;\n    let mut vowel_found = false;\n\
    \    let mut consonant_found = false;\n    let mut vowel_count = 0;\n    let mut\
    \ consonant_count = 0;\n    let mut vowel_index_list = Vec::new();\n    let mut\
    \ consonant_index_list = Vec::new();\n    let mut vowel_distance_list = Vec::new();\n\
    \    let mut consonant_distance_list = Vec::new();\n    let mut vowel_index_list_index\
    \ = 0;\n    let mut consonant_index_list_index = 0;\n    let mut vowel_distance_list_index\
    \ = 0;\n    let mut consonant_distance_list_index = 0;\n    let mut vowel_index_list_length\
    \ = 0;\n    let mut consonant_index_list_length = 0;\n    let mut vowel_distance_list_length\
    \ = 0;\n    let mut consonant_distance_list_length = 0;\n    let mut vowel_index_list_index_temp\
    \ = 0;\n    let mut consonant_index_list_index_temp = 0;\n    let mut vowel_distance_list_index_temp\
    \ = 0;\n    let mut consonant_distance_list_index_temp = 0;\n    let mut vowel_index_list_length_temp\
    \ = 0;\n    let mut consonant_index_list_length_temp = 0;\n    let mut vowel_distance_list_length_temp\
    \ = 0;\n    let mut consonant_distance_list_length_temp = 0;\n    let mut vowel_index_list_index_temp_temp\
    \ = 0;\n    let mut consonant_index_list_index_temp_temp = 0;\n    let mut vowel_distance_list_index_temp_temp\
    \ = 0;\n    let mut consonant_", '    unimplemented!()', "    let mut result =\
    \ String::new();\n    let mut is_consonant = false;\n    let mut is_vowel = false;\n\
    \    for c in word.chars().rev() {\n        if is_vowel && is_consonant {\n  \
    \          result.push(c);\n            break;\n        }\n        if !is_vowel\
    \ && is_consonant && is_vowel(c) {\n            is_vowel = true;\n           \
    \ result.push(c);\n        }\n        if !is_consonant && !is_vowel(c) {\n   \
    \         is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(&c) {\n            if prev_char.is_alphabetic()\
    \ && !vowels.contains(&prev_char) {\n                result.push(c);\n       \
    \         break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n\
    \                is_vowel = true;\n            }\n        }\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U' {\n            is_consonant = true;\n       \
    \ }\n    }\n    result.chars().rev().collect()", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut found_vowel = false;\n    for\
    \ i in 0..word.len() {\n        if is_vowel(word[i]) {\n            if i + 1 <\
    \ word.len() && !is_vowel(word[i + 1]) {\n                result.push(word[i]);\n\
    \                found_vowel = true;\n                break;\n            }\n\
    \        }\n    }\n    if found_vowel {\n        result\n    } else {\n      \
    \  String::new()\n    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i - last_consonant_index\
    \ > 1 && i - last_consonant_index < closest_vowel_distance {\n               \
    \ closest_vowel = c.to_string();\n                closest_vowel_distance = i -\
    \ last_consonant_index;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut vowels = String::from(\"aeiouAEIOU\");\n    let mut consonants =\
    \ String::from(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\");\n    let mut consonant_count\
    \ = 0;\n    let mut vowel_count = 0;\n    let mut vowel_index = 0;\n    let mut\
    \ consonant_index = 0;\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut word_len = word_chars.len();\n    let mut i = word_len - 1;\n   \
    \ while i >= 0 {\n        if vowels.contains(word_chars[i]) {\n            vowel_count\
    \ += 1;\n            if vowel_count == 1 {\n                vowel_index = i;\n\
    \            }\n        } else if consonants.contains(word_chars[i]) {\n     \
    \       consonant_count += 1;\n            if consonant_count == 1 {\n       \
    \         consonant_index = i;\n            }\n        }\n        if consonant_count\
    \ == 2 && vowel_count == 1 {\n            result = word_chars[vowel_index].to_string();\n\
    \            break;\n        }\n        i -= 1;\n    }\n    result", "    let\
    \ mut vowels = Vec::new();\n    let mut consonants = Vec::new();\n    let mut\
    \ result = String::new();\n    for c in word.chars() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n\
    \        } else {\n            consonants.push(c);\n        }\n    }\n    if vowels.len()\
    \ == 0 || consonants.len() == 0 {\n        return result;\n    }\n    let mut\
    \ i = vowels.len() - 1;\n    let mut j = consonants.len() - 1;\n    while i >=\
    \ 0 && j >= 0 {\n        if vowels[i] == consonants[j] {\n            i -= 1;\n\
    \            j -= 1;\n        } else {\n            result.push(vowels[i]);\n\
    \            break;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if !vowels.contains(&c) {\n            last_consonant_index = i;\n\
    \            break;\n        }\n    }\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i > last_consonant_index {\n          \
    \  closest_vowel.push(c);\n            break;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n\
    \    let mut prev_vowel = ' ';\n    let mut result = String::new();\n    for c\
    \ in word.chars().rev() {\n        if vowels.contains(&c) {\n            prev_vowel\
    \ = c;\n        } else if prev_vowel != ' ' {\n            if prev_char != ' '\
    \ {\n                result.push(prev_vowel);\n                break;\n      \
    \      }\n            prev_vowel = ' ';\n        }\n        prev_char = c;\n \
    \   }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n\
    \        if is_vowel(c) {\n            if !is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut closest_vowel = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    let mut prev_vowel =\
    \ ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            prev_vowel = c;\n        } else if prev_char != ' ' && prev_vowel\
    \ != ' ' {\n            closest_vowel.push(prev_vowel);\n            break;\n\
    \        }\n        prev_char = c;\n    }\n    closest_vowel", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_char_is_consonant\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char_is_consonant {\n                closest_vowel =\
    \ c.to_string();\n                closest_vowel_index = i;\n                break;\n\
    \            }\n        } else {\n            prev_char_is_consonant = true;\n\
    \        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (index, ch) in word.chars().enumerate().rev() {\n   \
    \     if vowels.contains(&ch) {\n            if index < closest_vowel_index {\n\
    \                closest_vowel_index = index;\n                closest_vowel =\
    \ ch.to_string();\n            }\n        }\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    for c in word.chars() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c.to_string();\n        } else {\n            last_consonant = c.to_string();\n\
    \        }\n        if !last_vowel.is_empty() && !last_consonant.is_empty() {\n\
    \            result = last_vowel.clone();\n            break;\n        }\n   \
    \ }\n    result", "    let mut closest_vowel = String::new();\n    let mut last_consonant_index\
    \ = 0;\n    let mut last_vowel_index = 0;\n    let mut vowel_found = false;\n\
    \    let mut consonant_found = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            last_vowel_index = i;\n           \
    \ vowel_found = true;\n        } else {\n            last_consonant_index = i;\n\
    \            consonant_found = true;\n        }\n        if vowel_found && consonant_found\
    \ {\n            if last_vowel_index > last_consonant_index {\n              \
    \  closest_vowel = word[last_vowel_index..last_vowel_index + 1].to_string();\n\
    \            }\n            vowel_found = false;\n            consonant_found\
    \ = false;\n        }\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel_pos = 0;\n    let mut vowel_found = false;\n    for (i, c)\
    \ in word.iter().enumerate() {\n        if is_vowel(*c) {\n            vowel_pos\
    \ = i;\n            vowel_found = true;\n            break;\n        }\n    }\n\
    \    if vowel_found {\n        let mut closest_vowel = String::new();\n      \
    \  for (i, c) in word.iter().enumerate() {\n            if is_vowel(*c) && i >\
    \ vowel_pos {\n                closest_vowel.push(*c);\n                break;\n\
    \            }\n        }\n        closest_vowel\n    } else {\n        String::new()\n\
    \    }", "    let mut closest_vowel = String::new();\n    let mut prev_char =\
    \ ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n   \
    \     if is_vowel(c) {\n            if prev_char != ' ' && !is_vowel(prev_char)\
    \ {\n                closest_vowel.push(c);\n                break;\n        \
    \    }\n            prev_vowel = c;\n        } else {\n            if prev_vowel\
    \ != ' ' {\n                closest_vowel.push(prev_vowel);\n                break;\n\
    \            }\n        }\n        prev_char = c;\n    }\n    closest_vowel.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_char = ' ';\n\
    \    for (index, ch) in word.chars().enumerate().rev() {\n        if vowels.contains(&ch)\
    \ {\n            if prev_char != ' ' && prev_char != ch {\n                if\
    \ index < closest_vowel_index {\n                    closest_vowel_index = index;\n\
    \                    closest_vowel = ch.to_string();\n                }\n    \
    \        }\n        }\n        prev_char = ch;\n    }\n    closest_vowel", " \
    \   let mut result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut last_vowel = ' ';\n    let mut last_consonant = ' ';\n  \
    \  for c in word.chars().rev() {\n        if vowels.contains(&c) {\n         \
    \   last_vowel = c;\n        } else {\n            last_consonant = c;\n     \
    \       break;\n        }\n    }\n    if last_vowel != ' ' && last_consonant !=\
    \ ' ' {\n        result.push(last_vowel);\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let mut distance = 0;\n                for j in (i +\
    \ 1)..word.len() {\n                    if vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                        break;\n                    }\n                 \
    \   distance += 1;\n                }\n                if distance < closest_distance\
    \ {\n                    closest_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            is_consonant = false;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel = true;\n  \
    \      } else {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    let mut vowel_index = 0;\n    let mut vowel_found = false;\n    let mut vowel_found_index\
    \ = 0;\n    let mut vowel_found_char = ' ';\n    let mut consonant_found = false;\n\
    \    let mut consonant_found_index = 0;\n    let mut consonant_found_char = '\
    \ ';\n    let mut consonant_found_2 = false;\n    let mut consonant_found_index_2\
    \ = 0;\n    let mut consonant_found_char_2 = ' ';\n    let mut vowel_found_2 =\
    \ false;\n    let mut vowel_found_index_2 = 0;\n    let mut vowel_found_char_2\
    \ = ' ';\n    let mut vowel_found_3 = false;\n    let mut vowel_found_index_3\
    \ = 0;\n    let mut vowel_found_char_3 = ' ';\n    let mut vowel_found_4 = false;\n\
    \    let mut vowel_found_index_4 = 0;\n    let mut vowel_found_char_4 = ' ';\n\
    \    let mut vowel_found_5 = false;\n    let mut vowel_found_index_5 = 0;\n  \
    \  let mut vowel_found_char_5 = ' ';\n    let mut vowel_found_6 = false;\n   \
    \ let mut vowel_found_index_6 = 0;\n    let mut vowel_found_char_6 = ' ';\n  \
    \  let mut vowel_found_7 = false;\n    let mut vowel_found_index_7 = 0;\n    let\
    \ mut vowel_found_char_7 = ' ';\n    let mut vowel_found_8 = false;\n    let mut\
    \ vowel_found_index_8 = 0;\n    let mut vowel_found_char_8 = ' ';\n    let mut\
    \ vowel_found_9 = false;\n    let mut vowel_found_index_9 = 0;\n    let mut vowel_found_char_9\
    \ = ' ';\n    let mut vowel_found_10", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                if word.chars().nth(i\
    \ - 1).unwrap().is_alphabetic() && word.chars().nth(i + 1).unwrap().is_alphabetic()\
    \ {\n                    if i < closest_vowel_distance {\n                   \
    \     closest_vowel_distance = i;\n                        closest_vowel = c.to_string();\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut last_consonant = None;\n   \
    \ for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if let Some(consonant) = last_consonant {\n                if\
    \ i < consonant {\n                    closest_vowel = c.to_string();\n      \
    \              break;\n                }\n            }\n        } else {\n  \
    \          last_consonant = Some(i);\n        }\n    }\n    closest_vowel", " \
    \   let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    let mut is_vowel = false;\n    let mut\
    \ is_consonant = false;\n    let mut is_first_vowel = false;\n    let mut is_first_consonant\
    \ = false;\n    let mut is_second_vowel = false;\n    let mut is_second_consonant\
    \ = false;\n    let mut is_third_vowel = false;\n    let mut is_third_consonant\
    \ = false;\n    let mut is_fourth_vowel = false;\n    let mut is_fourth_consonant\
    \ = false;\n    let mut is_fifth_vowel = false;\n    let mut is_fifth_consonant\
    \ = false;\n    let mut is_sixth_vowel = false;\n    let mut is_sixth_consonant\
    \ = false;\n    let mut is_seventh_vowel = false;\n    let mut is_seventh_consonant\
    \ = false;\n    let mut is_eighth_vowel = false;\n    let mut is_eighth_consonant\
    \ = false;\n    let mut is_ninth_vowel = false;\n    let mut is_ninth_consonant\
    \ = false;\n    let mut is_tenth_vowel = false;\n    let mut is_tenth_consonant\
    \ = false;\n    let mut is_eleventh_vowel = false;\n    let mut is_eleventh_consonant\
    \ = false;\n    let mut is_twelfth_vowel = false;\n    let mut is_twelfth_consonant\
    \ = false;\n    let mut is_thirteenth_vowel = false;\n    let mut is_thirteenth_consonant\
    \ = false;\n    let mut is_fourteenth_vowel = false;\n    let mut is_fourteenth_consonant\
    \ = false;\n    let mut is_fifteenth_vowel = false;\n    let mut is_fifteenth_consonant\
    \ = false;\n    let mut is_sixteenth_vowel = false", "    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (index, letter)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&letter) {\n     \
    \       if index - last_consonant_index < closest_distance {\n               \
    \ closest_distance = index - last_consonant_index;\n                closest_vowel\
    \ = letter.to_string();\n            }\n        } else {\n            last_consonant_index\
    \ = index;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut is_consonant = false;\n    for ch in word.chars().rev() {\n     \
    \   if is_consonant && is_vowel(ch) {\n            result.push(ch);\n        \
    \    break;\n        }\n        if !is_vowel(ch) {\n            is_consonant =\
    \ true;\n        }\n    }\n    result", "    let vowels = \"aeiouAEIOU\";\n  \
    \  let mut closest_vowel = String::new();\n    let mut vowel_index = 0;\n    let\
    \ mut consonant_index = 0;\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            vowel_index = i;\n            found_vowel = true;\n        }\
    \ else if found_vowel {\n            consonant_index = i;\n            found_consonant\
    \ = true;\n            break;\n        }\n    }\n    if found_vowel && found_consonant\
    \ {\n        closest_vowel.push(word.chars().nth(vowel_index).unwrap());\n   \
    \ }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let mut distance = word.len() - i;\n            if i > 0 {\n\
    \                distance -= 1;\n            }\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut vowels = String::new();\n    let mut consonants = String::new();\n \
    \   for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return String::from(\"\");\n    }\n    let mut result = String::new();\n \
    \   for i in (0..consonants.len()).rev() {\n        for j in (0..vowels.len()).rev()\
    \ {\n            if consonants.chars().nth(i).unwrap() < vowels.chars().nth(j).unwrap()\
    \ {\n                result.push(vowels.chars().nth(j).unwrap());\n          \
    \      return result;\n            }\n        }\n    }\n    return String::from(\"\
    \");", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut prev_char = ' ';\n    let mut prev_prev_char = '\
    \ ';\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n\
    \            if !is_vowel(prev_char) && !is_vowel(prev_prev_char) {\n        \
    \        if i < closest_vowel_distance {\n                    closest_vowel =\
    \ c.to_string();\n                    closest_vowel_distance = i;\n          \
    \      }\n            }\n        }\n        prev_prev_char = prev_char;\n    \
    \    prev_char = c;\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if prev_char == ' ' {\n            prev_char =\
    \ c;\n            continue;\n        }\n        if prev_prev_char == ' ' {\n \
    \           prev_prev_char = c;\n            continue;\n        }\n        if\
    \ is_vowel(c) {\n            if !is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut closest_vowel = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n\
    \        if prev_char.is_vowel() && !c.is_vowel() {\n            closest_vowel\
    \ = prev_char.to_string();\n            break;\n        }\n        prev_prev_char\
    \ = prev_char;\n        prev_char = c;\n    }\n    if closest_vowel.is_empty()\
    \ && prev_prev_char.is_vowel() {\n        closest_vowel = prev_prev_char.to_string();\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut\
    \ last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n        if\
    \ vowels.contains(&c) {\n            last_vowel = i;\n        } else {\n     \
    \       last_consonant = i;\n        }\n        if last_vowel > last_consonant\
    \ {\n            result = word[last_vowel..last_vowel + 1].to_string();\n    \
    \    }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut index = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel = ' ';\n\
    \    let mut last_consonant = ' ';\n    for c in word.chars() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n            last_vowel_index = index;\n    \
    \    } else {\n            last_consonant = c;\n            last_consonant_index\
    \ = index;\n        }\n        index += 1;\n    }\n    if last_vowel_index > last_consonant_index\
    \ {\n        result.push(last_vowel);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut vowels = String::from(\"aeiouAEIOU\");\n    let\
    \ mut consonants = String::from(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    );\n    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c\
    \ in word.chars() {\n        if vowels.contains(c) {\n            if consonants.contains(prev_char)\
    \ && consonants.contains(prev_prev_char) {\n                result = c.to_string();\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_is_consonant = false;\n    let mut next_is_consonant = false;\n\
    \    let mut vowel_index = 0;\n    let mut vowel_index_temp = 0;\n    let mut\
    \ vowel_index_temp_2 = 0;\n    let mut vowel_index_temp_3 = 0;\n    let mut vowel_index_temp_4\
    \ = 0;\n    let mut vowel_index_temp_5 = 0;\n    let mut vowel_index_temp_6 =\
    \ 0;\n    let mut vowel_index_temp_7 = 0;\n    let mut vowel_index_temp_8 = 0;\n\
    \    let mut vowel_index_temp_9 = 0;\n    let mut vowel_index_temp_10 = 0;\n \
    \   let mut vowel_index_temp_11 = 0;\n    let mut vowel_index_temp_12 = 0;\n \
    \   let mut vowel_index_temp_13 = 0;\n    let mut vowel_index_temp_14 = 0;\n \
    \   let mut vowel_index_temp_15 = 0;\n    let mut vowel_index_temp_16 = 0;\n \
    \   let mut vowel_index_temp_17 = 0;\n    let mut vowel_index_temp_18 = 0;\n \
    \   let mut vowel_index_temp_19 = 0;\n    let mut vowel_index_temp_20 = 0;\n \
    \   let mut vowel_index_temp_21 = 0;\n    let mut vowel_index_temp_22 = 0;\n \
    \   let mut vowel_index_temp_23 = 0;\n    let mut vowel_index_temp_24 = 0;\n \
    \   let mut vowel_index_temp_25 = 0;\n    let mut vowel_index_temp_26 = 0;\n \
    \   let mut vowel_index_temp_27 = 0;\n    let mut vowel_index_temp_28 = 0;\n \
    \   let mut vowel_index_temp_29 = 0;\n    let mut vowel_index_temp_30 = 0;\n \
    \   let mut vowel_index_temp_31 = 0;\n    let mut vowel_index_temp_32 = 0;\n \
    \   let mut vowel_index_temp_33 = 0;\n    let mut", "    let mut word_chars =\
    \ word.chars().collect::<Vec<char>>();\n    let mut vowel_index = 0;\n    let\
    \ mut vowel_distance = 0;\n    let mut consonant_count = 0;\n    let mut vowel_count\
    \ = 0;\n    let mut vowel_found = false;\n    let mut vowel_found_index = 0;\n\
    \    let mut vowel_found_distance = 0;\n    let mut vowel_found_count = 0;\n \
    \   let mut consonant_found = false;\n    let mut consonant_found_index = 0;\n\
    \    let mut consonant_found_distance = 0;\n    let mut consonant_found_count\
    \ = 0;\n    let mut vowel_found_first = false;\n    let mut consonant_found_first\
    \ = false;\n    let mut vowel_found_first_index = 0;\n    let mut consonant_found_first_index\
    \ = 0;\n    let mut vowel_found_first_distance = 0;\n    let mut consonant_found_first_distance\
    \ = 0;\n    let mut vowel_found_first_count = 0;\n    let mut consonant_found_first_count\
    \ = 0;\n    let mut vowel_found_second = false;\n    let mut consonant_found_second\
    \ = false;\n    let mut vowel_found_second_index = 0;\n    let mut consonant_found_second_index\
    \ = 0;\n    let mut vowel_found_second_distance = 0;\n    let mut consonant_found_second_distance\
    \ = 0;\n    let mut vowel_found_second_count = 0;\n    let mut consonant_found_second_count\
    \ = 0;\n    let mut vowel_found_third = false;\n    let mut consonant_found_third\
    \ = false;\n    let mut vowel_found_third_index = 0;\n    let mut consonant_found_third_index\
    \ = 0;\n    let mut vowel_found_third_distance = 0;\n    let mut consonant_found_third_distance\
    \ = 0;\n    let mut vowel_found_third_count = 0;\n    let mut consonant_found_third_count\
    \ = 0;\n    let mut vowel_found_fourth = false;\n    let mut", "    let mut closest_vowel\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_is_vowel =\
    \ false;\n    for c in word.chars().rev() {\n        if is_vowel(c) {\n      \
    \      if !prev_is_vowel {\n                closest_vowel.push(c);\n         \
    \       break;\n            }\n            prev_is_vowel = true;\n        } else\
    \ {\n            prev_is_vowel = false;\n        }\n        prev_char = c;\n \
    \   }\n    closest_vowel.chars().rev().collect()", "    let vowels = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let mut closest_vowel = String::from(\"\"\
    );\n    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c.to_string().as_str()) {\n            let mut\
    \ distance = word.len() - i;\n            if distance < closest_distance {\n \
    \               closest_distance = distance;\n                closest_vowel =\
    \ c.to_string();\n            }\n        }\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut prev_char_is_vowel\
    \ = false;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            prev_char_is_vowel = true;\n            continue;\n        }\n\
    \        if prev_char_is_vowel {\n            prev_char_is_vowel = false;\n  \
    \          continue;\n        }\n        for (j, v) in word.chars().enumerate()\
    \ {\n            if vowels.contains(&v) && j > i {\n                if j - i <\
    \ closest_vowel_distance {\n                    closest_vowel_distance = j - i;\n\
    \                    closest_vowel = v.to_string();\n                }\n     \
    \       }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut is_consonant = false;\n    for c in word.chars().rev() {\n      \
    \  if is_consonant && is_vowel(c) {\n            result.push(c);\n           \
    \ break;\n        }\n        if !is_vowel(c) {\n            is_consonant = true;\n\
    \        }\n    }\n    result.chars().rev().collect()", "    let mut closest_vowel\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n\
    \    for ch in word.chars().rev() {\n        if ch == 'a' || ch == 'e' || ch ==\
    \ 'i' || ch == 'o' || ch == 'u' {\n            if prev_char != ' ' && prev_char\
    \ != 'a' && prev_char != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char\
    \ != 'u' {\n                closest_vowel = ch.to_string();\n                break;\n\
    \            }\n            prev_vowel = ch;\n        }\n        prev_char = ch;\n\
    \    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_char = String::new();\n    let mut is_consonant = false;\n \
    \   let mut is_vowel = false;\n    let mut is_last_consonant = false;\n    let\
    \ mut is_last_vowel = false;\n    let mut is_last_char = false;\n    let mut is_closest_vowel\
    \ = false;\n    let mut is_last_closest_vowel = false;\n    let mut is_last_last_vowel\
    \ = false;\n    let mut is_last_last_consonant = false;\n    let mut is_last_last_char\
    \ = false;\n    let mut is_last_last_closest_vowel = false;\n    let mut is_last_last_last_vowel\
    \ = false;\n    let mut is_last_last_last_consonant = false;\n    let mut is_last_last_last_char\
    \ = false;\n    let mut is_last_last_last_closest_vowel = false;\n    let mut\
    \ is_last_last_last_last_vowel = false;\n    let mut is_last_last_last_last_consonant\
    \ = false;\n    let mut is_last_last_last_last_char = false;\n    let mut is_last_last_last_last_closest_vowel\
    \ = false;\n    let mut is_last_last_last_last_last_vowel = false;\n    let mut\
    \ is_last_last_last_last_last_consonant = false;\n    let mut is_last_last_last_last_last_char\
    \ = false;\n    let mut is_last_last_last_last_last_closest_vowel = false;\n \
    \   let mut is_last_last_last_last_last_last_vowel = false;\n    let mut is_last_last_last_last_last_last_consonant\
    \ = false;", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_idx = word.len();\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n    \
    \        if i < closest_vowel_idx {\n                closest_vowel_idx = i;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            if closest_vowel_idx != word.len() {\n                break;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut is_vowel = false;\n    let mut is_consonant = false;\n    for c in\
    \ word.chars().rev() {\n        if is_vowel && is_consonant {\n            result.push(c);\n\
    \            break;\n        }\n        if is_vowel {\n            is_vowel =\
    \ false;\n        }\n        if is_consonant {\n            is_consonant = false;\n\
    \        }\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel\
    \ = true;\n        } else {\n            is_consonant = true;\n        }\n   \
    \ }\n    result.chars().rev().collect()", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_idx\
    \ = 0;\n    let mut last_consonant_idx = 0;\n    for (idx, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_idx = idx;\n   \
    \     } else {\n            last_consonant_idx = idx;\n            if last_vowel_idx\
    \ < last_consonant_idx {\n                result = word[last_vowel_idx..last_consonant_idx].to_string();\n\
    \            }\n        }\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ < last_consonant_index {\n            result = word[last_vowel_index..last_consonant_index].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            last_vowel_index = i;\n       \
    \ } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let mut vowels = Vec::new();\n    let mut consonants\
    \ = Vec::new();\n    let mut result = String::new();\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return result;\n    }\n    let mut i = vowels.len() - 1;\n    let mut j =\
    \ consonants.len() - 1;\n    while i >= 0 && j >= 0 {\n        if vowels[i] !=\
    \ consonants[j] {\n            result.push(vowels[i]);\n            break;\n \
    \       }\n        i -= 1;\n        j -= 1;\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i < distance {\n       \
    \         closest_vowel = c.to_string();\n                distance = i;\n    \
    \        }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            let distance = word.len() - i;\n\
    \            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = c.to_string();\n            }\n\
    \        }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = 0;\n    let mut last_consonant_index = 0;\n\
    \    let mut last_vowel_index = 0;\n    let mut is_last_char_consonant = false;\n\
    \    let mut is_last_char_vowel = false;\n    let mut is_first_char_vowel = false;\n\
    \    let mut is_first_char_consonant = false;\n    let mut is_first_char_consonant_found\
    \ = false;\n    let mut is_first_char_vowel_found = false;\n    let mut is_closest_vowel_found\
    \ = false;\n    let mut is_last_char_consonant_found = false;\n    let mut is_last_char_vowel_found\
    \ = false;\n    let mut is_last_char_consonant_found_first = false;\n    let mut\
    \ is_last_char_vowel_found_first = false;\n    let mut is_first_char_consonant_found_first\
    \ = false;\n    let mut is_first_char_vowel_found_first = false;\n    let mut\
    \ is_first_char_consonant_found_second = false;\n    let mut is_first_char_vowel_found_second\
    \ = false;\n    let mut is_last_char_consonant_found_second = false;\n    let\
    \ mut is_last_char_vowel_found_second = false;\n    let mut is_last_char_consonant_found_third\
    \ = false;\n    let mut is_last_char_vowel_found_third = false;\n    let mut is_first_char_consonant_found_third\
    \ = false;\n    let mut is_first_char_vowel_found_third = false;\n    let mut\
    \ is_last_char_consonant_found_fourth = false;\n    let mut is_last_char_vowel_found_fourth\
    \ = false;\n    let mut is_first_char_consonant_found_fourth = false;\n   ", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut consonant_count\
    \ = 0;\n    let mut vowel_count = 0;\n    let mut vowel_flag = false;\n    let\
    \ mut consonant_flag = false;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            vowel_flag = true;\n          \
    \  vowel_count += 1;\n            if consonant_flag {\n                if consonant_count\
    \ < 2 {\n                    consonant_count = 0;\n                    consonant_flag\
    \ = false;\n                } else {\n                    if consonant_count <\
    \ vowel_count {\n                        closest_vowel = c.to_string();\n    \
    \                    vowel_index = i;\n                        consonant_count\
    \ = 0;\n                        consonant_flag = false;\n                    }\
    \ else {\n                        consonant_count = 0;\n                     \
    \   consonant_flag = false;\n                    }\n                }\n      \
    \      }\n        } else {\n            consonant_flag = true;\n            consonant_count\
    \ += 1;\n            if vowel_flag {\n                if vowel_count < 2 {\n \
    \                   vowel_count = 0;\n                    vowel_flag = false;\n\
    \                } else {\n                    if consonant_count < vowel_count\
    \ {\n                        closest_vowel = c.to_string();\n                \
    \        vowel_index = i;\n                        consonant_count = 0;\n    \
    \                    consonant_flag = false;\n                    } else {\n \
    \                       consonant_count = 0;\n                        consonant_flag\
    \ = false;\n                    }\n                }\n            }\n        }\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut\
    \ last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n        if\
    \ vowels.contains(&c) {\n            last_vowel = i;\n        } else {\n     \
    \       last_consonant = i;\n        }\n        if last_vowel > last_consonant\
    \ {\n            result = c.to_string();\n        }\n    }\n    result", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_consonant > last_vowel {\n            result = word[last_vowel..last_consonant].to_string();\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut word_vec: Vec<char> = word.chars().collect();\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_count = 0;\n\
    \    let mut consonant_count = 0;\n    let mut vowel_index_vec = Vec::new();\n\
    \    let mut consonant_index_vec = Vec::new();\n    let mut vowel_count_vec =\
    \ Vec::new();\n    let mut consonant_count_vec = Vec::new();\n    let mut vowel_index_vec_index\
    \ = 0;\n    let mut consonant_index_vec_index = 0;\n    let mut vowel_count_vec_index\
    \ = 0;\n    let mut consonant_count_vec_index = 0;\n    let mut vowel_index_vec_index_vec\
    \ = Vec::new();\n    let mut consonant_index_vec_index_vec = Vec::new();\n   \
    \ let mut vowel_count_vec_index_vec = Vec::new();\n    let mut consonant_count_vec_index_vec\
    \ = Vec::new();\n    let mut vowel_index_vec_index_vec_index = 0;\n    let mut\
    \ consonant_index_vec_index_vec_index = 0;\n    let mut vowel_count_vec_index_vec_index\
    \ = 0;\n    let mut consonant_count_vec_index_vec_index = 0;\n    let mut vowel_index_vec_index_vec_index_vec\
    \ = Vec::new();\n    let mut consonant_index_vec_index_vec_index_vec = Vec::new();\n\
    \    let mut vowel_count_vec_index_", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (index, character) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&character) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel_index = index;\n                closest_vowel\
    \ = character.to_string();\n            }\n        } else {\n            if !closest_vowel.is_empty()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_index = word.len();\n    for (index, letter) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&letter) {\n            if index < closest_index\
    \ {\n                closest_index = index;\n                closest_vowel = letter.to_string();\n\
    \            }\n        } else {\n            if closest_index != word.len() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut prev_is_consonant = false;\n \
    \   let mut next_is_consonant = false;\n    let mut vowel_index = 0;\n    let\
    \ mut vowel_distance = 0;\n    let mut current_distance = 0;\n    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    for (index, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if prev_is_consonant && next_is_consonant\
    \ {\n                current_distance = index;\n                if vowel_distance\
    \ == 0 || current_distance < vowel_distance {\n                    vowel_distance\
    \ = current_distance;\n                    vowel_index = index;\n            \
    \    }\n            }\n            prev_is_consonant = false;\n        } else\
    \ {\n            next_is_consonant = true;\n            prev_is_consonant = true;\n\
    \        }\n    }\n    if vowel_distance > 0 {\n        result = word.chars().rev().skip(vowel_distance).take(1).collect();\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_consonant = 0;\n    let mut last_vowel\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_consonant > last_vowel {\n            result\
    \ = word[last_vowel..last_consonant].to_string();\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         last_vowel = i;\n        } else {\n            last_consonant = i;\n\
    \        }\n        if last_vowel > last_consonant {\n            result = c.to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_index =\
    \ word.len();\n    for (index, letter) in word.chars().enumerate().rev() {\n \
    \       if vowels.contains(&letter) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel_index = index;\n                closest_vowel\
    \ = letter.to_string();\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            prev_vowel = c;\n        }\
    \ else if prev_char != ' ' && prev_vowel != ' ' {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_pos = 0;\n\
    \    let mut prev_consonant = false;\n    let mut found = false;\n    for (i,\
    \ c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c) {\n \
    \           if prev_consonant {\n                vowel_pos = i;\n            \
    \    found = true;\n                break;\n            }\n        } else {\n\
    \            prev_consonant = true;\n        }\n    }\n    if found {\n      \
    \  word.chars().skip(word.len() - vowel_pos - 1).take(1).collect()\n    } else\
    \ {\n        String::from(\"\")\n    }", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut index =\
    \ word.len() - 1;\n    let mut is_consonant = false;\n    while index > 0 {\n\
    \        if vowels.contains(&word.chars().nth(index).unwrap()) {\n           \
    \ if is_consonant {\n                closest_vowel.push(word.chars().nth(index).unwrap());\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    let mut last_consonant = 0;\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         if i - last_consonant < distance {\n                distance = i - last_consonant;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            last_consonant = i;\n        }\n    }\n    closest_vowel", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance = 0;\n\
    \    let mut prev_is_consonant = false;\n    let mut prev_is_vowel = false;\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_is_consonant {\n                if closest_vowel_distance\
    \ == 0 {\n                    closest_vowel_distance = i;\n                  \
    \  closest_vowel_index = i;\n                    closest_vowel = c.to_string();\n\
    \                } else if i < closest_vowel_distance {\n                    closest_vowel_distance\
    \ = i;\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n            prev_is_vowel\
    \ = true;\n            prev_is_consonant = false;\n        } else {\n        \
    \    if prev_is_vowel {\n                prev_is_consonant = true;\n         \
    \   }\n            prev_is_vowel = false;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = ' ';\n    let mut last_vowel = ' ';\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c;\n        } else {\n            if last_vowel != ' ' {\n               \
    \ result.push(last_vowel);\n                break;\n            }\n          \
    \  last_consonant = c;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    let mut last_consonant_index = 0;\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         if i - last_consonant_index < closest_distance {\n                closest_distance\
    \ = i - last_consonant_index;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            last_consonant_index = i;\n    \
    \    }\n    }\n    closest_vowel", "    let mut vowel_pos = 0;\n    let mut vowel_dist\
    \ = 0;\n    let mut prev_cons = false;\n    let mut curr_cons = false;\n    let\
    \ mut curr_vowel = false;\n    let mut curr_vowel_pos = 0;\n    let mut curr_vowel_dist\
    \ = 0;\n    let mut word_iter = word.chars().rev();\n    while let Some(c) = word_iter.next()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           curr_vowel = true;\n            curr_vowel_pos = word.len() - word_iter.as_str().len()\
    \ - 1;\n            curr_vowel_dist = word.len() - word_iter.as_str().len() -\
    \ vowel_pos;\n            if prev_cons && curr_vowel_dist < vowel_dist {\n   \
    \             vowel_pos = curr_vowel_pos;\n                vowel_dist = curr_vowel_dist;\n\
    \            }\n        } else {\n            curr_cons = true;\n            if\
    \ curr_vowel {\n                prev_cons = true;\n                curr_vowel\
    \ = false;\n            }\n        }\n    }\n    if vowel_pos == 0 {\n       \
    \ String::from(\"\")\n    } else {\n        word.chars().nth(vowel_pos).unwrap().to_string()\n\
    \    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars\
    \ = word.chars().collect::<Vec<char>>();\n    word_chars.reverse();\n    let mut\
    \ result = String::new();\n    let mut found_consonant = false;\n    for c in\
    \ word_chars {\n        if vowels.contains(&c) {\n            if found_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        } else {\n            found_consonant = true;\n        }\n    }\n   \
    \ result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_index = word.len();\n    for (index, character)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&character)\
    \ {\n            if index < closest_index {\n                closest_index = index;\n\
    \                closest_vowel = character.to_string();\n            }\n     \
    \   } else {\n            if closest_index != word.len() {\n                break;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ index = word.len() - 1;\n    let mut prev_vowel = false;\n    while index >=\
    \ 0 {\n        let c = word.chars().nth(index).unwrap();\n        if vowels.contains(&c)\
    \ {\n            if prev_vowel {\n                break;\n            }\n    \
    \        closest_vowel = c.to_string();\n            prev_vowel = true;\n    \
    \    } else {\n            prev_vowel = false;\n        }\n        index -= 1;\n\
    \    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel = String::new();\n    let mut found = false;\n    for i in\
    \ 0..word.len() {\n        if word[i].is_ascii_alphabetic() {\n            if\
    \ word[i].is_ascii_lowercase() {\n                if word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \         vowel.push(word[i]);\n                    found = true;\n          \
    \          break;\n                }\n            } else {\n                if\
    \ word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i]\
    \ == 'U' {\n                    vowel.push(word[i]);\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    if found {\n        vowel\n    } else {\n        String::from(\"\
    \")\n    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_distance = word.len();\n    let\
    \ mut prev_char_is_vowel = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if !prev_char_is_vowel {\n\
    \                if i < closest_vowel_distance {\n                    closest_vowel\
    \ = c.to_string();\n                    closest_vowel_distance = i;\n        \
    \        }\n            }\n            prev_char_is_vowel = true;\n        } else\
    \ {\n            prev_char_is_vowel = false;\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut prev_char_is_vowel = false;\n    let mut prev_char_is_consonant = false;\n\
    \    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            if prev_char_is_consonant && !vowel_found\
    \ {\n                result.push(c);\n                vowel_found = true;\n  \
    \          }\n            prev_char_is_vowel = true;\n            prev_char_is_consonant\
    \ = false;\n        } else {\n            prev_char_is_vowel = false;\n      \
    \      prev_char_is_consonant = true;\n        }\n    }\n    result", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > last_consonant_index && i < closest_vowel_index {\n  \
    \              closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i;\n            }\n        } else {\n            last_consonant_index = i;\n\
    \        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < last_consonant_index {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut is_consonant = false;\n    while index > 0 {\n        let\
    \ c = word.chars().nth(index).unwrap();\n        if vowels.contains(&c) {\n  \
    \          if is_consonant {\n                result.push(c);\n              \
    \  break;\n            }\n        } else {\n            is_consonant = true;\n\
    \        }\n        index -= 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut last_consonant_index = 0;\n \
    \   for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            if i > last_consonant_index && i < closest_vowel_index {\n      \
    \          closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i;\n            }\n        } else {\n            last_consonant_index = i;\n\
    \        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut prev_is_consonant = false;\n    let mut prev_is_vowel = false;\n\
    \    for c in word.chars().rev() {\n        if is_vowel(c) {\n            if prev_is_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \            prev_is_vowel = true;\n        } else {\n            if prev_is_vowel\
    \ {\n                prev_is_consonant = true;\n            }\n        }\n   \
    \ }\n    result", "    let mut result = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut is_consonant = false;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if is_consonant {\n       \
    \         result.push(c);\n                break;\n            }\n        } else\
    \ {\n            is_consonant = true;\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut is_consonant = false;\n    let mut\
    \ is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel &&\
    \ is_consonant {\n            result.push(c);\n            break;\n        }\n\
    \        if !is_vowel && is_consonant && is_vowel(c) {\n            is_vowel =\
    \ true;\n            result.push(c);\n        }\n        if !is_consonant && !is_vowel(c)\
    \ {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    for c in word.chars() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c.to_string();\n        } else {\n            last_consonant = c.to_string();\n\
    \        }\n        if !last_consonant.is_empty() && !last_vowel.is_empty() {\n\
    \            closest_vowel = last_vowel.clone();\n            break;\n       \
    \ }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_pos = 0;\n    let\
    \ mut last_consonant_pos = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            last_vowel_pos = i;\n        }\
    \ else {\n            last_consonant_pos = i;\n        }\n        if last_vowel_pos\
    \ > last_consonant_pos {\n            result = word[last_vowel_pos..last_vowel_pos\
    \ + 1].to_string();\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut is_vowel = false;\n    let mut is_consonant = false;\n    let mut\
    \ is_first_consonant = false;\n    let mut is_first_vowel = false;\n    let mut\
    \ is_second_consonant = false;\n    let mut is_second_vowel = false;\n    let\
    \ mut is_third_consonant = false;\n    let mut is_third_vowel = false;\n    let\
    \ mut is_fourth_consonant = false;\n    let mut is_fourth_vowel = false;\n   \
    \ let mut is_fifth_consonant = false;\n    let mut is_fifth_vowel = false;\n \
    \   let mut is_sixth_consonant = false;\n    let mut is_sixth_vowel = false;\n\
    \    let mut is_seventh_consonant = false;\n    let mut is_seventh_vowel = false;\n\
    \    let mut is_eighth_consonant = false;\n    let mut is_eighth_vowel = false;\n\
    \    let mut is_ninth_consonant = false;\n    let mut is_ninth_vowel = false;\n\
    \    let mut is_tenth_consonant = false;\n    let mut is_tenth_vowel = false;\n\
    \    let mut is_eleventh_consonant = false;\n    let mut is_eleventh_vowel = false;\n\
    \    let mut is_twelfth_consonant = false;\n    let mut is_twelfth_vowel = false;\n\
    \    let mut is_thirteenth_consonant = false;\n    let mut is_thirteenth_vowel\
    \ = false;\n    let mut is_fourteenth_consonant = false;\n    let mut is_fourteenth_vowel\
    \ = false;\n    let mut is_fifteenth_consonant = false;\n    let mut is_fifteenth_vowel\
    \ = false;\n    let mut is_sixteenth_consonant = false;\n    let mut is_sixteenth_vowel\
    \ = false;\n    let mut is_", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i - last_consonant_index\
    \ < closest_vowel_distance {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_distance = i - last_consonant_index;\n        \
    \    }\n        } else {\n            last_consonant_index = i;\n        }\n \
    \   }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                let left =\
    \ word.chars().nth(i - 1).unwrap();\n                let right = word.chars().nth(i\
    \ + 1).unwrap();\n                if !vowels.contains(&left) && !vowels.contains(&right)\
    \ {\n                    if i < distance {\n                        distance =\
    \ i;\n                        closest_vowel = c.to_string();\n               \
    \     }\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut is_consonant = true;\n    let\
    \ mut is_vowel = false;\n    let mut is_first_vowel = false;\n    let mut is_second_vowel\
    \ = false;\n    let mut is_first_consonant = false;\n    let mut is_second_consonant\
    \ = false;\n    let mut is_first_char = true;\n    let mut is_second_char = false;\n\
    \    let mut is_third_char = false;\n    let mut is_fourth_char = false;\n   \
    \ let mut is_fifth_char = false;\n    let mut is_sixth_char = false;\n    let\
    \ mut is_seventh_char = false;\n    let mut is_eighth_char = false;\n    let mut\
    \ is_ninth_char = false;\n    let mut is_tenth_char = false;\n    let mut is_eleventh_char\
    \ = false;\n    let mut is_twelfth_char = false;\n    let mut is_thirteenth_char\
    \ = false;\n    let mut is_fourteenth_char = false;\n    let mut is_fifteenth_char\
    \ = false;\n    let mut is_sixteenth_char = false;\n    let mut is_seventeenth_char\
    \ = false;\n    let mut is_eighteenth_char = false;\n    let mut is_nineteenth_char\
    \ = false;\n    let mut is_twentieth_char = false;\n    let mut is_twenty_first_char\
    \ = false;\n    let mut is_twenty_second_char = false;\n    let mut is_twenty_third_char\
    \ = false;\n    let mut is_twenty_fourth_char = false;\n    let mut is_twenty_fifth_char\
    \ = false;\n    let mut is_twenty_sixth_char = false;\n    let mut is_twenty_seventh_char\
    \ = false;\n    let mut is_twenty_eighth_char = false;\n    let mut is_twenty_ninth_char\
    \ = false;\n    let mut is_thirtieth_char = false;\n    let mut is_thirty_first_",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            prev_vowel = c;\n        } else if prev_char != ' ' && prev_vowel\
    \ != ' ' {\n            result = prev_vowel.to_string();\n            break;\n\
    \        }\n        prev_char = c;\n        index += 1;\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut index = word.len();\n\
    \    let mut result = String::new();\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i < index {\n          \
    \      index = i;\n                result = c.to_string();\n            }\n  \
    \      }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_index = word.len();\n\
    \    for (index, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if index < closest_index {\n                closest_index = index;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            if closest_index != word.len() {\n                break;\n  \
    \          }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    let mut last_index = 0;\n    for\
    \ (index, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel = index;\n        } else {\n            last_consonant\
    \ = index;\n        }\n        if last_vowel > last_consonant {\n            last_index\
    \ = last_vowel;\n        }\n    }\n    if last_vowel > last_consonant {\n    \
    \    result.push(word.chars().nth(last_index).unwrap());\n    }\n    result",
  "    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    let\
    \ mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(c) {\n        \
    \    last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..=last_vowel_index].to_string();\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_vowel = ' ';\n    let mut\
    \ last_consonant = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n        } else {\n            last_consonant\
    \ = c;\n            break;\n        }\n    }\n    if last_vowel != ' ' && last_consonant\
    \ != ' ' {\n        result.push(last_vowel);\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let mut distance = 0;\n                for j in (i +\
    \ 1)..word.len() {\n                    if vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                        break;\n                    }\n                 \
    \   distance += 1;\n                }\n                if distance < closest_distance\
    \ {\n                    closest_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_vowel > last_consonant {\n            result = word[last_vowel..last_vowel\
    \ + 1].to_string();\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char != ' ' && prev_char != 'a' && prev_char != 'e' && prev_char\
    \ != 'i' && prev_char != 'o' && prev_char != 'u' {\n                result.push(c);\n\
    \                break;\n            }\n            prev_vowel = c;\n        }\n\
    \        prev_char = c;\n    }\n    if result.is_empty() {\n        result.push(prev_vowel);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_is_consonant\
    \ = false;\n    let mut prev_is_vowel = false;\n    for c in word.chars().rev()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n\
    \                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \                    if prev_is_consonant {\n                        result.push(c);\n\
    \                        break;\n                    }\n                    prev_is_vowel\
    \ = true;\n                } else {\n                    if prev_is_vowel {\n\
    \                        result.push(c);\n                        break;\n   \
    \                 }\n                    prev_is_consonant = true;\n         \
    \       }\n            } else {\n                if c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U' {\n                    if prev_is_consonant {\n\
    \                        result.push(c);\n                        break;\n   \
    \                 }\n                    prev_is_vowel = true;\n             \
    \   } else {\n                    if prev_is_vowel {\n                       \
    \ result.push(c);\n                        break;\n                    }\n   \
    \                 prev_is_consonant = true;\n                }\n            }\n\
    \        }\n    }\n    result.chars().rev().collect()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    let mut is_consonant = false;\n    while index >= 0 {\n\
    \        if vowels.contains(&word.chars().nth(index).unwrap()) {\n           \
    \ if is_consonant {\n                result.push(word.chars().nth(index).unwrap());\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut vowels = Vec::new();\n    let mut consonants =\
    \ Vec::new();\n    let mut chars = word.chars();\n    let mut last_char = chars.next();\n\
    \    while let Some(c) = last_char {\n        if is_vowel(c) {\n            vowels.push(c);\n\
    \        } else {\n            consonants.push(c);\n        }\n        last_char\
    \ = chars.next();\n    }\n    if consonants.len() > 1 {\n        let mut i = consonants.len()\
    \ - 1;\n        while i > 0 {\n            if let Some(c) = vowels.pop() {\n \
    \               if c != consonants[i] {\n                    result.push(c);\n\
    \                    break;\n                }\n            }\n            i -=\
    \ 1;\n        }\n    }\n    result", "    let mut vowels = String::new();\n  \
    \  let mut consonants = String::new();\n    for c in word.chars() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels.push(c);\n   \
    \     } else {\n            consonants.push(c);\n        }\n    }\n    if vowels.len()\
    \ == 0 || consonants.len() == 0 {\n        return String::from(\"\");\n    }\n\
    \    let mut result = String::new();\n    for c in consonants.chars().rev() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            result.push(c);\n\
    \        } else {\n            break;\n        }\n    }\n    if result.len() ==\
    \ 0 {\n        return String::from(\"\");\n    }\n    let mut result_char = result.chars().nth(0).unwrap();\n\
    \    let mut result_index = 0;\n    for (i, c) in vowels.chars().enumerate() {\n\
    \        if c == result_char {\n            result_index = i;\n            break;\n\
    \        }\n    }\n    if result_index == 0 {\n        return String::from(\"\"\
    );\n    }\n    let mut result_str = String::new();\n    result_str.push(vowels.chars().nth(result_index\
    \ - 1).unwrap());\n    return result_str;", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut vowel_pos = None;\n    let mut prev_is_consonant = false;\n    for\
    \ (i, c) in word.chars().rev().enumerate() {\n        if is_vowel(c) {\n     \
    \       if prev_is_consonant {\n                vowel_pos = Some(i);\n       \
    \         break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n    }\n    match vowel_pos {\n        Some(i) => word.chars().rev().skip(i).take(1).collect(),\n\
    \        None => String::new(),\n    }", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n    \
    \        if i < last_consonant_index {\n                if i < closest_vowel_index\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant_index = i;\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(&c) {\n            if prev_char\
    \ != ' ' && !vowels.contains(&prev_char) {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel <\
    \ last_consonant {\n            result.push(c);\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = ' ';\n    let mut last_consonant = ' ';\n    for c in\
    \ word.chars().rev() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c;\n        } else {\n            last_consonant = c;\n            break;\n\
    \        }\n    }\n    if last_vowel != ' ' && last_consonant != ' ' {\n     \
    \   result.push(last_vowel);\n    }\n    result", "    let mut closest_vowel =\
    \ String::new();\n    let mut vowel_index = 0;\n    let mut vowel_found = false;\n\
    \    let mut vowel_found_index = 0;\n    let mut consonant_found = false;\n  \
    \  let mut consonant_found_index = 0;\n    let mut vowel_found_first = false;\n\
    \    let mut consonant_found_first = false;\n    let mut vowel_found_second =\
    \ false;\n    let mut consonant_found_second = false;\n    let mut vowel_found_third\
    \ = false;\n    let mut consonant_found_third = false;\n    let mut vowel_found_fourth\
    \ = false;\n    let mut consonant_found_fourth = false;\n    let mut vowel_found_fifth\
    \ = false;\n    let mut consonant_found_fifth = false;\n    let mut vowel_found_sixth\
    \ = false;\n    let mut consonant_found_sixth = false;\n    let mut vowel_found_seventh\
    \ = false;\n    let mut consonant_found_seventh = false;\n    let mut vowel_found_eighth\
    \ = false;\n    let mut consonant_found_eighth = false;\n    let mut vowel_found_ninth\
    \ = false;\n    let mut consonant_found_ninth = false;\n    let mut vowel_found_tenth\
    \ = false;\n    let mut consonant_found_tenth = false;\n    let mut vowel_found_eleventh\
    \ = false;\n    let mut consonant_found_eleventh = false;\n    let mut vowel_found_twelfth\
    \ = false;\n    let mut consonant_found_twelfth = false;\n    let mut vowel_found_thirteenth\
    \ = false;\n    let mut consonant_found_thirteenth = false;\n    let mut vowel_found_fourteenth\
    \ = false;\n    let mut consonant_found_fourteenth = false;\n    let mut vowel_found_fifteenth\
    \ = false;\n    let mut consonant_found_fifteenth = false;\n    let mut vowel_found_sixteenth\
    \ = false;\n    let mut consonant_found_sixteenth = false;\n    let mut vowel_found_seventeenth\
    \ = false;\n    let mut", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut found_vowel = false;\n\
    \    let mut found_consonant = false;\n    for c in word.chars().rev() {\n   \
    \     if vowels.contains(&c) {\n            if found_consonant {\n           \
    \     closest_vowel.push(c);\n                found_vowel = true;\n          \
    \      break;\n            }\n        } else {\n            found_consonant =\
    \ true;\n        }\n    }\n    if found_vowel {\n        closest_vowel.chars().rev().collect()\n\
    \    } else {\n        String::new()\n    }", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < closest_vowel_index {\n          \
    \      closest_vowel_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_vowel_index != word.len()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_count\
    \ = 0;\n    let mut consonant_count = 0;\n    let mut vowel_indices = Vec::new();\n\
    \    let mut consonant_indices = Vec::new();\n    let mut vowel_distance = 0;\n\
    \    let mut consonant_distance = 0;\n    let mut distance = 0;\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance\
    \ = 0;\n    let mut closest_consonant_index = 0;\n    let mut closest_consonant_distance\
    \ = 0;\n    let mut closest_distance = 0;\n    let mut closest_vowel_found = false;\n\
    \    let mut closest_consonant_found = false;\n    let mut closest_distance_found\
    \ = false;\n    let mut vowel_found_first = false;\n    let mut consonant_found_first\
    \ = false;\n    let mut vowel_found_last = false;\n    let mut consonant_found_last\
    \ = false;\n    let mut vowel_found_first_index = 0;\n    let mut consonant_found_first_index\
    \ = 0;\n    let mut vowel_found_last_index = 0;\n    let mut consonant_found_last_index\
    \ = 0;\n    let mut vowel_found_first_distance = 0;\n    let mut consonant_found_first_distance\
    \ = 0;\n    let mut vowel_found_last_distance = 0;\n    let mut consonant_found_last_distance\
    \ = 0;\n    let mut vowel_found_first_found = false;\n    let mut consonant_found_first_found\
    \ = false;\n    let mut vowel_found_last_found = false;\n    let mut consonant_found_last_found\
    \ = false;\n    let mut vowel_found_first_closest = false;\n    let mut consonant_found_first_closest\
    \ = false;\n    let mut vowel_found_last_closest = false;\n", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel <\
    \ last_consonant {\n            result.push(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let mut\
    \ last_consonant_found = false;\n    let mut last_vowel_found = false;\n    let\
    \ mut last_char = ' ';\n    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant\
    \ = false;\n    let mut last_char_is_space = false;\n    let mut last_char_is_punctuation\
    \ = false;\n    let mut last_char_is_letter = false;\n    let mut last_char_is_digit\
    \ = false;\n    let mut last_char_is_whitespace = false;\n    let mut last_char_is_alphanumeric\
    \ = false;\n    let mut last_char_is_lowercase = false;\n    let mut last_char_is_uppercase\
    \ = false;\n    let mut last_char_is_control = false;\n    let mut last_char_is_ascii\
    \ = false;\n    let mut last_char_is_ascii_uppercase = false;\n    let mut last_char_is_ascii_lowercase\
    \ = false;\n    let mut last_char_is_alphabetic = false;\n    let mut last_char_is_numeric\
    \ = false;\n    let mut last_char_is_alphanumeric = false;\n    let mut last_char_is_whitespace\
    \ = false;\n    let mut last_char_is_alphabetic = false;\n    let mut last_char_is_numeric\
    \ = false;\n    let mut last_char_is_alphanumeric = false;\n    let mut last_char_is_whitespace\
    \ = false;\n    let mut last_char_is_alphabetic = false;\n    let mut last_char_is_numeric\
    \ = false;\n    let mut last_char_is_alphanumeric = false;\n    let mut last_char_is_whitespace\
    \ = false;\n    let mut last_char_is_alphabetic = false;\n   ", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant_index < closest_vowel_distance {\n    \
    \            closest_vowel = c.to_string();\n                closest_vowel_distance\
    \ = i - last_consonant_index;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut found = false;\n\
    \    let mut last_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if vowels.contains(&c) {\n            if last_consonant {\n             \
    \   result.push(c);\n                found = true;\n                break;\n \
    \           }\n        } else {\n            last_consonant = true;\n        }\n\
    \    }\n    if found {\n        result\n    } else {\n        String::new()\n\
    \    }", "    let mut result = String::new();\n    let mut vowel_index = 0;\n\
    \    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_found_first\
    \ = false;\n    let mut consonant_found_first = false;\n    let mut vowel_found_last\
    \ = false;\n    let mut consonant_found_last = false;\n    let mut vowel_found_last_index\
    \ = 0;\n    let mut consonant_found_last_index = 0;\n    let mut vowel_found_first_index\
    \ = 0;\n    let mut consonant_found_first_index = 0;\n    let mut vowel_found_last_count\
    \ = 0;\n    let mut consonant_found_last_count = 0;\n    let mut vowel_found_first_count\
    \ = 0;\n    let mut consonant_found_first_count = 0;\n    let mut vowel_found_last_index_count\
    \ = 0;\n    let mut consonant_found_last_index_count = 0;\n    let mut vowel_found_first_index_count\
    \ = 0;\n    let mut consonant_found_first_index_count = 0;\n    let mut vowel_found_last_index_count_first\
    \ = 0;\n    let mut consonant_found_last_index_count_first = 0;\n    let mut vowel_found_first_index_count_first\
    \ = 0;\n    let mut consonant_found_first_index_count_first = 0;\n    let mut\
    \ vowel_found_last_index_count_first_index = 0;\n    let mut consonant_found_last_index_count_first_index\
    \ = 0;\n    let mut vowel_found_first_index_count_first_index = 0;\n    let mut\
    \ consonant_found_first_index_count_first_index = 0;\n    let mut vowel_found_last_index_count_first_index_count\
    \ = 0;\n    let mut consonant_found_last_index_count_first_index_count = 0;\n\
    \    let mut vowel_found_first_index_count_first_index", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ found_consonant = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if found_consonant {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        } else {\n            found_consonant\
    \ = true;\n        }\n    }\n    closest_vowel.chars().rev().collect()", "   \
    \ let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            is_consonant = false;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel = true;\n  \
    \      } else {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_pos = 0;\n    let mut last_consonant_pos = 0;\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         last_vowel_pos = i;\n        } else {\n            last_consonant_pos\
    \ = i;\n        }\n        if last_vowel_pos < last_consonant_pos {\n        \
    \    result = word[last_vowel_pos..last_consonant_pos].to_string();\n        }\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            vowel_index = i;\n            closest_vowel.push(c);\n      \
    \      break;\n        }\n    }\n    if vowel_index == word.len() {\n        return\
    \ String::new();\n    }\n    for (i, c) in word.chars().enumerate().rev() {\n\
    \        if !vowels.contains(&c) && i < vowel_index {\n            return closest_vowel;\n\
    \        }\n    }\n    closest_vowel", "    let mut vowels = String::new();\n\
    \    let mut consonants = String::new();\n    let mut result = String::new();\n\
    \    let mut vowels_index = 0;\n    let mut consonants_index = 0;\n    let mut\
    \ index = 0;\n    let mut closest_index = 0;\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_consonant = String::new();\n    let mut vowel_found = false;\n\
    \    let mut consonant_found = false;\n    let mut vowel_consonant_found = false;\n\
    \    let mut vowel_consonant_index = 0;\n    let mut vowel_consonant_vowel = String::new();\n\
    \    let mut vowel_consonant_consonant = String::new();\n    let mut vowel_consonant_closest_index\
    \ = 0;\n    let mut vowel_consonant_closest_vowel = String::new();\n    let mut\
    \ vowel_consonant_closest_consonant = String::new();\n    let mut vowel_consonant_closest_vowel_index\
    \ = 0;\n    let mut vowel_consonant_closest_consonant_index = 0;\n    let mut\
    \ vowel_consonant_closest_vowel_found = false;\n    let mut vowel_consonant_closest_consonant_found\
    \ = false;\n    let mut vowel_consonant_closest_vowel_consonant_found = false;\n\
    \    let mut vowel_consonant_closest_vowel_consonant_index = 0;\n    let mut vowel_consonant_closest_vowel_consonant_vowel\
    \ = String::new();\n    let mut vowel_consonant_closest_vowel_consonant_consonant\
    \ = String::new();\n    let mut vowel_consonant_closest_vowel_consonant_closest_index\
    \ = 0;\n    let mut vowel_consonant_closest_vowel_consonant_closest_vowel = String::new();\n",
  "    let mut closest_vowel = String::new();\n    let mut found_consonant = false;\n\
    \    for c in word.chars().rev() {\n        if !found_consonant {\n          \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                closest_vowel.push(c);\n\
    \            } else {\n                found_consonant = true;\n            }\n\
    \        } else {\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_consonant_found = false;\n    let mut last_vowel_found = false;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel_index = i;\n            last_vowel_found = true;\n\
    \        } else {\n            if last_vowel_found {\n                last_consonant_index\
    \ = i;\n                last_consonant_found = true;\n            }\n        }\n\
    \        if last_consonant_found && last_vowel_found {\n            if last_consonant_index\
    \ - last_vowel_index == 1 {\n                result = word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n                break;\n            }\n        }\n    }\n\
    \    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  if i < closest_distance {\n                closest_distance = i;\n        \
    \        closest_vowel = c.to_string();\n            }\n        }\n    }\n   \
    \ closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ closest_vowel = String::new();\n    let mut last_vowel_index = 0;\n    let mut\
    \ last_consonant_index = 0;\n    let mut last_vowel_found = false;\n    let mut\
    \ last_consonant_found = false;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            last_vowel_index = i;\n       \
    \     last_vowel_found = true;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_consonant_found = true;\n        }\n        if last_vowel_found\
    \ && last_consonant_found {\n            if last_vowel_index > last_consonant_index\
    \ {\n                closest_vowel = word[last_vowel_index..last_vowel_index +\
    \ 1].to_string();\n            }\n            last_vowel_found = false;\n    \
    \        last_consonant_found = false;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            prev_vowel = c;\n        }\
    \ else if prev_vowel != ' ' && prev_char != ' ' {\n            closest_vowel.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_index = word.len();\n    for (index, character) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&character) {\n            if index < closest_index\
    \ {\n                closest_index = index;\n                closest_vowel = character.to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (index, letter) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&letter) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel_index = index;\n                closest_vowel\
    \ = letter.to_string();\n            }\n        }\n    }\n    closest_vowel",
  "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    let mut closest_vowel = String::from(\"\");\n    let mut closest_vowel_index\
    \ = 0;\n    let mut closest_consonant_index = 0;\n    let mut closest_consonant_index_2\
    \ = 0;\n    let mut closest_vowel_distance = 0;\n    let mut closest_consonant_distance\
    \ = 0;\n    let mut closest_consonant_distance_2 = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut consonant_found_2\
    \ = false;\n    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n \
    \   let mut consonant_index_2 = 0;\n    let mut vowel_distance = 0;\n    let mut\
    \ consonant_distance = 0;\n    let mut consonant_distance_2 = 0;\n    for (i,\
    \ c) in word_chars.iter().enumerate() {\n        if vowels.contains(c) {\n   \
    \         vowel_found = true;\n            vowel_index = i;\n            vowel_distance\
    \ = word_chars.len() - i;\n            if consonant_found && consonant_found_2\
    \ {\n                if vowel_distance > closest_vowel_distance {\n          \
    \          closest_vowel_distance = vowel_distance;\n                    closest_vowel_index\
    \ = vowel_index;\n                    closest_consonant_index = consonant_index;\n\
    \                    closest_consonant_index_2 = consonant_index_2;\n        \
    \            closest_vowel = c.to_string();\n                }\n            }\n\
    \        }\n        if consonants.contains", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut consonant_found = false;\n    for c in word {\n        if is_vowel(c) {\n\
    \            if consonant_found {\n                result.push(c);\n         \
    \       vowel_found = true;\n                break;\n            }\n        }\
    \ else {\n            consonant_found = true;\n        }\n    }\n    if vowel_found\
    \ {\n        result\n    } else {\n        String::new()\n    }", "    let mut\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut result = String::new();\n    let mut index\
    \ = 0;\n    let mut flag = false;\n    let mut flag_vowel = false;\n    let mut\
    \ flag_consonant = false;\n    let mut flag_vowel_found = false;\n    let mut\
    \ flag_consonant_found = false;\n    let mut flag_vowel_found_first = false;\n\
    \    let mut flag_consonant_found_first = false;\n    let mut flag_vowel_found_second\
    \ = false;\n    let mut flag_consonant_found_second = false;\n    let mut flag_vowel_found_third\
    \ = false;\n    let mut flag_consonant_found_third = false;\n    let mut flag_vowel_found_fourth\
    \ = false;\n    let mut flag_consonant_found_fourth = false;\n    let mut flag_vowel_found_fifth\
    \ = false;\n    let mut flag_consonant_found_fifth = false;\n    let mut flag_vowel_found_sixth\
    \ = false;\n    let mut flag_consonant_found_sixth = false;\n    let mut flag_vowel_found_seventh\
    \ = false;\n    let mut flag_consonant_found_seventh = false;\n    let mut flag_vowel_found_eighth\
    \ = false;\n    let mut flag_consonant_found_eighth = false;\n    let mut flag_vowel_found_ninth\
    \ = false;\n    let mut flag_consonant_found_ninth = false;\n    let mut flag_vowel_found_tenth\
    \ = false;\n    let mut flag_consonant_found_tenth = false;\n    let mut flag_",
  "    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut last_consonant = false;\n    let mut last_vowel = false;\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            if last_consonant {\n             \
    \   result.push(c);\n                vowel_found = true;\n                break;\n\
    \            }\n            last_vowel = true;\n        } else {\n           \
    \ if last_vowel {\n                last_consonant = true;\n            }\n   \
    \     }\n    }\n    if vowel_found {\n        result\n    } else {\n        String::new()\n\
    \    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  let mut distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    let mut found = false;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if found {\n              \
    \  result.push(c);\n                break;\n            }\n        } else {\n\
    \            found = true;\n        }\n        index += 1;\n    }\n    result.chars().rev().collect()",
  "    let mut closest_vowel = String::new();\n    let mut vowel_found = false;\n\
    \    let mut last_char = ' ';\n    for c in word.chars().rev() {\n        if !vowel_found\
    \ && is_vowel(c) {\n            closest_vowel.push(c);\n            vowel_found\
    \ = true;\n        } else if vowel_found && !is_vowel(c) {\n            if !is_vowel(last_char)\
    \ {\n                break;\n            }\n        }\n        last_char = c;\n\
    \    }\n    closest_vowel.chars().rev().collect()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (index, character) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&character) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel_index = index;\n                closest_vowel\
    \ = character.to_string();\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if !vowels.contains(&word.chars().nth(i - 1).unwrap())\
    \ && !vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n                 \
    \   let distance = word.len() - i;\n                    if distance < closest_distance\
    \ {\n                        closest_distance = distance;\n                  \
    \      closest_vowel = c.to_string();\n                    }\n               \
    \ }\n            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_distance = word.len();\n    let mut last_consonant_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i < last_consonant_index {\n                if last_consonant_index\
    \ - i < closest_vowel_distance {\n                    closest_vowel = c.to_string();\n\
    \                    closest_vowel_distance = last_consonant_index - i;\n    \
    \            }\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if is_vowel(c) {\n            if !is_vowel(prev_char)\
    \ && !is_vowel(prev_prev_char) {\n                result.push(c);\n          \
    \      break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut closest_vowel = String::new();\n\
    \    let mut vowel_found = false;\n    let mut prev_char_is_vowel = false;\n \
    \   let mut prev_char_is_consonant = false;\n    let mut vowel_index = 0;\n  \
    \  let mut consonant_index = 0;\n    let mut vowel_index_list = Vec::new();\n\
    \    let mut consonant_index_list = Vec::new();\n    let mut vowel_list = Vec::new();\n\
    \    let mut consonant_list = Vec::new();\n    for (index, character) in word.chars().enumerate()\
    \ {\n        if is_vowel(character) {\n            vowel_found = true;\n     \
    \       vowel_index = index;\n            vowel_index_list.push(vowel_index);\n\
    \            vowel_list.push(character);\n            if prev_char_is_consonant\
    \ {\n                break;\n            }\n            prev_char_is_vowel = true;\n\
    \            prev_char_is_consonant = false;\n        } else {\n            prev_char_is_vowel\
    \ = false;\n            prev_char_is_consonant = true;\n            consonant_index\
    \ = index;\n            consonant_index_list.push(consonant_index);\n        \
    \    consonant_list.push(character);\n        }\n    }\n    if vowel_found {\n\
    \        let mut vowel_index_list_len = vowel_index_list.len();\n        let mut\
    \ consonant_index_list_len = consonant_index_list.len();\n        if vowel_index_list_len\
    \ > 1 {\n            vowel_index_list_len -= 1;\n        }\n        if consonant_index_list_len\
    \ > 1 {\n            consonant_index_list_len -= 1;\n        }\n        let vowel_index\
    \ = vowel_index_list[vowel_index_list_len];\n        let consonant_index = consonant_index_list[consonant_index_list_len];\n\
    \        if vowel_index > consonant_index {\n            closest_vowel = vowel_list[vowel_index",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index < last_consonant_index {\n    \
    \        result = word[last_vowel_index..last_consonant_index].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut vowel_pos = -1;\n    let mut consonant_pos = -1;\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n    \
    \        vowel_pos = i;\n        } else {\n            consonant_pos = i;\n  \
    \          break;\n        }\n    }\n    if vowel_pos > consonant_pos {\n    \
    \    word.chars().nth(vowel_pos).unwrap().to_string()\n    } else {\n        String::from(\"\
    \")\n    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n\
    \    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n       \
    \     prev_vowel = c;\n        }\n        if prev_char != ' ' && vowels.contains(&prev_char)\
    \ && !vowels.contains(&c) {\n            result.push(prev_vowel);\n          \
    \  break;\n        }\n        prev_char = c;\n    }\n    result", '    unimplemented!()',
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut last_consonant_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if i < last_consonant_index {\n         \
    \       if i < closest_vowel_index {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = c.to_string();\n                }\n\
    \            }\n        } else {\n            last_consonant_index = i;\n    \
    \    }\n    }\n    closest_vowel"]
stop_tokens:
- "\n}"
