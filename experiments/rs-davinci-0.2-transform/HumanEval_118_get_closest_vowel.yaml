name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n      \
    \  if is_vowel(c) {\n            if !is_vowel(prev_char) && is_vowel(prev_prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if vowels.contains(&word.chars().nth(i - 1).unwrap())\
    \ || vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n                  \
    \  continue;\n                }\n            }\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if word.chars().nth(i - 1).unwrap().is_uppercase() &&\
    \ word.chars().nth(i + 1).unwrap().is_uppercase() {\n                    if i\
    \ < distance {\n                        distance = i;\n                      \
    \  closest_vowel = c.to_string();\n                    }\n                }\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    for i in 0..word.len() {\n        if\
    \ word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i]\
    \ == 'u' ||\n           word[i] == 'A' || word[i] == 'E' || word[i] == 'I' ||\
    \ word[i] == 'O' || word[i] == 'U' {\n            vowels.push(word[i]);\n    \
    \    } else {\n            consonants.push(word[i]);\n        }\n    }\n    if\
    \ vowels.len() == 0 || consonants.len() == 0 {\n        return result;\n    }\n\
    \    for i in 0..vowels.len() {\n        if vowels[i] == consonants[0] {\n   \
    \         result.push(vowels[i]);\n            break;\n        }\n    }\n    result",
  "    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    for c in word.chars() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels.push(c);\n   \
    \     } else {\n            consonants.push(c);\n        }\n    }\n    for c in\
    \ consonants.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n            result.push(c);\n            break;\n        }\n    }\n    for\
    \ c in vowels.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U' {\n            result.push(c);\n            break;\n        }\n    }\n \
    \   if result.len() == 2 {\n        result.pop();\n    }\n    result", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut first_vowel = 0;\n    let mut first_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if last_consonant == 0 {\n\
    \                last_consonant = 1;\n                last_consonant_index = i;\n\
    \            } else {\n                first_vowel = 1;\n                first_vowel_index\
    \ = i;\n            }\n        } else {\n            if first_vowel == 1 {\n \
    \               break;\n            }\n        }\n    }\n    if first_vowel ==\
    \ 1 {\n        result.push(word.chars().nth(first_vowel_index).unwrap());\n  \
    \  }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_vowel = ' ';\n    for ch in word.chars().rev() {\n\
    \        if is_vowel(ch) {\n            prev_vowel = ch;\n        } else if prev_vowel\
    \ != ' ' {\n            result.push(prev_vowel);\n            break;\n       \
    \ }\n        prev_char = ch;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", '    unimplemented!()', "    let mut vowels = String::new();\n   \
    \ let mut consonants = String::new();\n    let mut result = String::new();\n \
    \   for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ {\n            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() < 2 {\n        return result;\n    }\n\
    \    let mut v = vowels.chars().rev().collect::<Vec<char>>();\n    let mut c =\
    \ consonants.chars().rev().collect::<Vec<char>>();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < v.len() && j < c.len() {\n        if v[i] == c[j]\
    \ {\n            i += 1;\n            j += 1;\n        } else {\n            result.push(v[i]);\n\
    \            break;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    for (index,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     last_vowel_index = index;\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                closest_vowel = word[last_vowel_index..index].to_string();\n\
    \            }\n            last_consonant_index = index;\n        }\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel_index = 0;\n    let mut\
    \ last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate() {\n  \
    \      if vowels.contains(&c) {\n            last_vowel_index = i;\n        }\
    \ else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut found = false;\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i == 0 {\n             \
    \   break;\n            }\n            if !vowels.contains(&word.chars().rev().nth(i\
    \ - 1).unwrap()) {\n                result.push(c);\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    if found {\n   \
    \     result\n    } else {\n        String::new()\n    }", "    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    let mut vowel_index = 0;\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            vowel_index = i;\n            if vowel_index - last_consonant_index\
    \ > 1 {\n                if vowel_index - last_consonant_index < closest_distance\
    \ {\n                    closest_distance = vowel_index - last_consonant_index;\n\
    \                    closest_vowel = c.to_string();\n                }\n     \
    \       }\n        } else {\n            last_consonant_index = i;\n        }\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut word_chars = word.chars().rev().collect::<Vec<char>>();\n    let\
    \ mut result = String::new();\n    let mut i = 0;\n    while i < word_chars.len()\
    \ {\n        if vowels.contains(&word_chars[i]) {\n            if i == 0 {\n \
    \               break;\n            } else {\n                result = word_chars[i].to_string();\n\
    \                break;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut is_consonant = false;\n\
    \    for c in word.chars() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c.to_string();\n            if is_consonant {\n                result = last_vowel.clone();\n\
    \                break;\n            }\n        } else {\n            last_consonant\
    \ = c.to_string();\n            is_consonant = true;\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut found = false;\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && !vowels.contains(&word.chars().rev().nth(i\
    \ - 1).unwrap()) {\n                result.push(c);\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    if !found {\n  \
    \      result = String::from(\"\");\n    }\n    result", "    let mut vowel_pos\
    \ = 0;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    let mut closest_vowel = String::from(\"\");\n    let mut vowel_list = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word_vec: Vec<char> = word.chars().collect();\n\
    \    let mut word_len = word_vec.len();\n    let mut i = word_len - 1;\n    while\
    \ i >= 0 {\n        if vowel_list.contains(&word_vec[i]) {\n            vowel_found\
    \ = true;\n            vowel_pos = i;\n        } else {\n            consonant_found\
    \ = true;\n        }\n        if vowel_found && consonant_found {\n          \
    \  closest_vowel = word_vec[vowel_pos].to_string();\n            break;\n    \
    \    }\n        i -= 1;\n    }\n    closest_vowel", "    let mut index = word.len();\n\
    \    let mut vowel_index = 0;\n    let mut vowel_found = false;\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    for (i,\
    \ c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c) {\n \
    \           if prev_char != ' ' && prev_char != c {\n                vowel_index\
    \ = index - i;\n                vowel_found = true;\n                break;\n\
    \            }\n        }\n        prev_char = c;\n    }\n    if vowel_found {\n\
    \        word.chars().nth(vowel_index).unwrap().to_string()\n    } else {\n  \
    \      String::from(\"\")\n    }", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char != ' ' && prev_prev_char != ' ' {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", '    unimplemented!()', "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut vowels = Vec::new();\n    let mut consonants = Vec::new();\n    let\
    \ mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n   \
    \ let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    for c in word.chars() {\n        if c == 'a' {\n            vowels.push(i);\n\
    \        } else if c == 'e' {\n            vowels.push(i);\n        } else if\
    \ c == 'i' {\n            vowels.push(i);\n        } else if c == 'o' {\n    \
    \        vowels.push(i);\n        } else if c == 'u' {\n            vowels.push(i);\n\
    \        } else if c == 'A' {\n            vowels.push(i);\n        } else if\
    \ c == 'E' {\n            vowels.push(i);\n        } else if c == 'I' {\n    \
    \        vowels.push(i);\n        } else if c == 'O' {\n            vowels.push(i);\n\
    \        } else if c == 'U' {\n            vowels.push(i);\n        } else if\
    \ c == 'b' {\n            consonants.push(j);\n        } else if c == 'c' {\n\
    \            consonants.push(k);\n        } else if c == 'd' {\n            consonants.push(l);\n\
    \        } else if c == 'f' {\n            consonants.push(m);\n        } else\
    \ if c == 'g' {\n            consonants.push(n);\n        } else if c == 'h' {\n\
    \            consonants.push(o);\n        } else if c ==", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    for (index,\
    \ letter) in word.chars().enumerate() {\n        if vowels.contains(&letter) {\n\
    \            last_vowel_index = index;\n        } else {\n            last_consonant_index\
    \ = index;\n        }\n        if last_vowel_index > last_consonant_index {\n\
    \            closest_vowel = letter.to_string();\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            closest_vowel = c.to_string();\n            break;\n        }\n\
    \        if i > 0 && vowels.contains(&word.chars().rev().nth(i - 1).unwrap())\
    \ {\n            break;\n        }\n    }\n    closest_vowel", "    let mut result\
    \ = String::new();\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants\
    \ = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for c in word.chars().rev() {\n   \
    \     if vowels.contains(&c) {\n            if found_consonant {\n           \
    \     result.push(c);\n                found_vowel = true;\n                break;\n\
    \            }\n        } else if consonants.contains(&c) {\n            if found_vowel\
    \ {\n                break;\n            } else {\n                found_consonant\
    \ = true;\n            }\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            let distance = word.len() - i;\n\
    \            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = c.to_string();\n            }\n\
    \        }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut vowel_found = false;\n    let mut prev_char_is_vowel = false;\n \
    \   let mut prev_char_is_consonant = false;\n    let mut prev_char = ' ';\n  \
    \  for c in word.chars() {\n        if c.is_alphabetic() {\n            if c.is_vowel()\
    \ {\n                if prev_char_is_consonant {\n                    closest_vowel\
    \ = c.to_string();\n                    vowel_found = true;\n                \
    \    break;\n                }\n                prev_char_is_vowel = true;\n \
    \           } else {\n                if prev_char_is_vowel {\n              \
    \      prev_char_is_consonant = true;\n                }\n            }\n    \
    \        prev_char = c;\n        }\n    }\n    if vowel_found {\n        closest_vowel\n\
    \    } else {\n        String::new()\n    }", "    let mut closest_vowel = String::new();\n\
    \    let mut found_consonant = false;\n    for c in word.chars().rev() {\n   \
    \     if found_consonant {\n            if is_vowel(c) {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        } else {\n            if !is_vowel(c)\
    \ {\n                found_consonant = true;\n            }\n        }\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if i < closest_vowel_index {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = c.to_string();\n            }\n      \
    \  } else {\n            if closest_vowel_index != word.len() {\n            \
    \    break;\n            }\n        }\n    }\n    closest_vowel", "    let mut\
    \ result = String::new();\n    let mut prev_is_consonant = false;\n    let mut\
    \ prev_is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel(c)\
    \ {\n            if prev_is_consonant {\n                result.push(c);\n   \
    \             break;\n            }\n            prev_is_vowel = true;\n     \
    \   } else {\n            if prev_is_vowel {\n                prev_is_consonant\
    \ = true;\n            }\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            index = i;\n            result.push(c);\n            break;\n\
    \        }\n    }\n    if index == 0 {\n        return String::new();\n    }\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if i > index && !vowels.contains(&c)\
    \ {\n            return result;\n        }\n    }\n    String::new()", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (index, letter) in word.chars().enumerate() {\n        if vowels.contains(&letter)\
    \ {\n            last_vowel_index = index;\n        } else {\n            last_consonant_index\
    \ = index;\n        }\n        if last_vowel_index > last_consonant_index {\n\
    \            result = letter.to_string();\n        }\n    }\n    result", "  \
    \  let mut closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let\
    \ mut prev_is_vowel = false;\n    let mut found_vowel = false;\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            if !prev_is_vowel {\n             \
    \   closest_vowel.push(c);\n                found_vowel = true;\n            \
    \    break;\n            }\n            prev_is_vowel = true;\n        } else\
    \ {\n            prev_is_vowel = false;\n        }\n        prev_char = c;\n \
    \   }\n    if !found_vowel {\n        closest_vowel\n    } else {\n        closest_vowel.chars().rev().collect()\n\
    \    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut index = word.len() - 1;\n    let mut prev_is_consonant\
    \ = false;\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            if prev_is_consonant {\n      \
    \          closest_vowel.push(c);\n                break;\n            }\n   \
    \     } else {\n            prev_is_consonant = true;\n        }\n        index\
    \ -= 1;\n    }\n    closest_vowel", "    let mut result = String::new();\n   \
    \ let mut vowel_found = false;\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut consonant_found = false;\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    word_chars.reverse();\n    for (index, c) in word_chars.iter().enumerate()\
    \ {\n        if is_vowel(*c) {\n            vowel_found = true;\n            vowel_index\
    \ = index;\n        }\n        if is_consonant(*c) && vowel_found {\n        \
    \    consonant_found = true;\n            consonant_index = index;\n         \
    \   break;\n        }\n    }\n    if consonant_found {\n        result.push(word_chars[vowel_index]);\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut word_chars = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut found_vowel = false;\n    let mut found_consonant = false;\n    for\
    \ c in word_chars {\n        if vowels.contains(&c) {\n            found_vowel\
    \ = true;\n        } else if found_vowel {\n            found_consonant = true;\n\
    \            break;\n        }\n    }\n    if found_vowel && found_consonant {\n\
    \        for c in word_chars {\n            if vowels.contains(&c) {\n       \
    \         result.push(c);\n                break;\n            }\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n \
    \       if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            if prev_char\
    \ != ' ' && prev_char != 'a' && prev_char != 'e' && prev_char != 'i' && prev_char\
    \ != 'o' && prev_char != 'u' && prev_char != 'A' && prev_char != 'E' && prev_char\
    \ != 'I' && prev_char != 'O' && prev_char != 'U' {\n                result.push(c);\n\
    \                break;\n            }\n            prev_vowel = c;\n        }\n\
    \        prev_char = c;\n    }\n    if result.is_empty() {\n        result.push(prev_vowel);\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel > last_consonant {\n            result\
    \ = word[last_vowel..last_vowel + 1].to_string();\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut prev_char_is_vowel\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            prev_char_is_vowel = true;\n        } else if prev_char_is_vowel\
    \ {\n            if i < closest_vowel_distance {\n                closest_vowel_distance\
    \ = i;\n                closest_vowel = c.to_string();\n            }\n      \
    \      prev_char_is_vowel = false;\n        }\n    }\n    closest_vowel", "  \
    \  let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut result\
    \ = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ found_consonant = false;\n    for c in word {\n        if vowels.contains(&c)\
    \ {\n            if found_consonant {\n                result.push(c);\n     \
    \           break;\n            }\n        } else {\n            found_consonant\
    \ = true;\n        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n      \
    \  if vowels.contains(&c) {\n            if prev_char != ' ' && !vowels.contains(&prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut found_vowel =\
    \ false;\n    let mut found_consonant = false;\n    let mut found_vowel_index\
    \ = 0;\n    let mut found_consonant_index = 0;\n    let mut index = 0;\n    for\
    \ c in word.chars() {\n        if is_vowel(c) {\n            if found_consonant\
    \ {\n                found_vowel = true;\n                found_vowel_index =\
    \ index;\n                break;\n            }\n        } else {\n          \
    \  if found_vowel {\n                found_consonant = true;\n               \
    \ found_consonant_index = index;\n            }\n        }\n        index += 1;\n\
    \    }\n    if found_vowel && found_consonant {\n        result.push(word.chars().nth(found_vowel_index).unwrap());\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_distance = word.len();\n\
    \    let mut last_vowel_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            if i - last_vowel_index < closest_vowel_distance {\n\
    \                closest_vowel_distance = i - last_vowel_index;\n            \
    \    closest_vowel = word[last_vowel_index..last_vowel_index + 1].to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars: Vec<char>\
    \ = word.chars().collect();\n    word_chars.reverse();\n    let mut found_consonant\
    \ = false;\n    for c in word_chars {\n        if vowels.contains(&c) {\n    \
    \        if found_consonant {\n                result.push(c);\n             \
    \   break;\n            }\n        } else {\n            found_consonant = true;\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_vowel = String::new();\n    for c in word.chars() {\n      \
    \  if vowels.contains(&c) {\n            last_vowel = c.to_string();\n       \
    \ } else {\n            last_consonant = c.to_string();\n        }\n        if\
    \ !last_consonant.is_empty() && !last_vowel.is_empty() {\n            closest_vowel\
    \ = last_vowel.clone();\n            break;\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut vowel_found = false;\n    let\
    \ mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if !vowel_found {\n            if is_vowel(c) {\n               \
    \ if !is_vowel(prev_char) && is_vowel(prev_prev_char) {\n                    result.push(c);\n\
    \                    vowel_found = true;\n                }\n            }\n \
    \       }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut vowels = String::new();\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           vowels.push(c);\n        }\n    }\n    if vowels.len() == 0 {\n  \
    \      return String::from(\"\");\n    }\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    while index >= 0 {\n        let c =\
    \ word.chars().nth(index).unwrap();\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            result.push(c);\n        } else {\n \
    \           if result.len() > 0 {\n                break;\n            }\n   \
    \     }\n        index -= 1;\n    }\n    if result.len() == 0 {\n        return\
    \ String::from(\"\");\n    }\n    let mut min_distance = word.len();\n    let\
    \ mut min_vowel = String::new();\n    for c in vowels.chars() {\n        let mut\
    \ distance = 0;\n        for i in 0..result.len() {\n            if c == result.chars().nth(i).unwrap()\
    \ {\n                distance = result.len() - i;\n                break;\n  \
    \          }\n        }\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_vowel = c.to_string();\n        }\n    }\n    return\
    \ min_vowel;", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if found_consonant {\n                closest_vowel.push(c);\n\
    \                found_vowel = true;\n                break;\n            }\n\
    \        } else {\n            found_consonant = true;\n        }\n    }\n   \
    \ if found_vowel {\n        closest_vowel.chars().rev().collect()\n    } else\
    \ {\n        String::new()\n    }", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut index = 0;\n\
    \    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && next_char\
    \ != ' ' {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n        } else {\n            if index < word.len() - 1 {\n  \
    \              next_char = word.chars().nth(index + 1).unwrap();\n           \
    \ }\n            prev_char = c;\n        }\n        index += 1;\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let mut distance = word.len()\
    \ - i;\n            if i > 0 {\n                distance -= 1;\n            }\n\
    \            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = c.to_string();\n            }\n\
    \        }\n    }\n    closest_vowel", "    let mut vowels = String::new();\n\
    \    let mut consonants = String::new();\n    for c in word.chars() {\n      \
    \  match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O'\
    \ | 'U' => vowels.push(c),\n            _ => consonants.push(c),\n        }\n\
    \    }\n    if vowels.len() < 2 {\n        return String::new();\n    }\n    let\
    \ mut result = String::new();\n    let mut i = vowels.len() - 1;\n    let mut\
    \ j = consonants.len() - 1;\n    while i > 0 && j >= 0 {\n        if vowels.chars().nth(i).unwrap()\
    \ == consonants.chars().nth(j).unwrap() {\n            j -= 1;\n        } else\
    \ {\n            result.push(vowels.chars().nth(i).unwrap());\n            break;\n\
    \        }\n        i -= 1;\n    }\n    result", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel = String::new();\n    let mut consonant = String::new();\n\
    \    let mut result = String::new();\n    for i in 0..word.len() {\n        if\
    \ word[i].is_alphabetic() {\n            if word[i].is_ascii_lowercase() {\n \
    \               if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n                    vowel.push(word[i]);\n     \
    \           } else {\n                    consonant.push(word[i]);\n         \
    \       }\n            } else {\n                if word[i] == 'A' || word[i]\
    \ == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n           \
    \         vowel.push(word[i]);\n                } else {\n                   \
    \ consonant.push(word[i]);\n                }\n            }\n        }\n    \
    \    if vowel.len() > 0 && consonant.len() > 0 {\n            result.push(vowel.pop().unwrap());\n\
    \            break;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut vowel_found = false;\n    let mut last_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if last_char != ' ' && !vowel_found {\n         \
    \       result.push(c);\n                vowel_found = true;\n            }\n\
    \        } else {\n            if vowel_found {\n                break;\n    \
    \        }\n        }\n        last_char = c;\n    }\n    result.chars().rev().collect()",
  "    let mut closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let\
    \ mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if prev_char\
    \ != ' ' && prev_prev_char != ' ' {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut vowel_index = 0;\n    let mut vowel_distance\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_consonant_distance\
    \ = 0;\n    let mut last_vowel_index = 0;\n    let mut last_vowel_distance = 0;\n\
    \    let mut result = String::new();\n    for (index, character) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&character) {\n            if last_consonant_distance\
    \ > 0 {\n                if last_consonant_distance < index - last_vowel_index\
    \ {\n                    vowel_index = index;\n                    vowel_distance\
    \ = index - last_consonant_index;\n                }\n            }\n        \
    \    last_vowel_index = index;\n            last_vowel_distance = index - last_consonant_index;\n\
    \        } else {\n            last_consonant_index = index;\n            last_consonant_distance\
    \ = index - last_vowel_index;\n        }\n    }\n    if vowel_distance > 0 {\n\
    \        result.push(word.chars().nth(vowel_index).unwrap());\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            let mut distance = 0;\n   \
    \         for j in (i + 1)..word.len() {\n                if vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                    break;\n                }\n                distance +=\
    \ 1;\n            }\n            if distance < closest_distance {\n          \
    \      closest_distance = distance;\n                closest_vowel = c.to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word = word.chars().collect::<Vec<char>>();\n\
    \    word.reverse();\n    let mut index = 0;\n    let mut vowel_index = 0;\n \
    \   let mut vowel_found = false;\n    while index < word.len() {\n        if vowels.contains(&word[index])\
    \ {\n            vowel_index = index;\n            vowel_found = true;\n     \
    \       break;\n        }\n        index += 1;\n    }\n    if vowel_found {\n\
    \        let mut index = vowel_index + 1;\n        while index < word.len() {\n\
    \            if !vowels.contains(&word[index]) {\n                return word[vowel_index].to_string();\n\
    \            }\n            index += 1;\n        }\n    }\n    String::from(\"\
    \")", "    let mut result = String::new();\n    let mut prev_is_consonant = false;\n\
    \    let mut is_consonant = false;\n    let mut is_vowel = false;\n    let mut\
    \ is_first_char = true;\n    let mut is_last_char = false;\n    let mut index\
    \ = 0;\n    let mut prev_index = 0;\n    let mut word_chars = word.chars();\n\
    \    let mut prev_char = ' ';\n    let mut curr_char = ' ';\n    let mut next_char\
    \ = ' ';\n    while !is_last_char {\n        prev_char = curr_char;\n        curr_char\
    \ = next_char;\n        next_char = match word_chars.next() {\n            Some(c)\
    \ => c,\n            None => {\n                is_last_char = true;\n       \
    \         ' '\n            }\n        };\n        is_consonant = !is_vowel(curr_char);\n\
    \        is_vowel = is_vowel(curr_char);\n        if is_first_char {\n       \
    \     if is_vowel {\n                prev_is_consonant = true;\n            }\n\
    \            is_first_char = false;\n        } else if is_last_char {\n      \
    \      if is_vowel {\n                if prev_is_consonant {\n               \
    \     result = curr_char.to_string();\n                }\n            }\n    \
    \    } else {\n            if is_vowel {\n                if prev_is_consonant\
    \ && is_consonant(next_char) {\n                    result = curr_char.to_string();\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     prev_is_consonant = is_consonant;\n        prev_index = index;\n       \
    \ index += 1;\n    }\n    result", "    let mut vowels = Vec::new();\n    let\
    \ mut consonants = Vec::new();\n    let mut result = String::new();\n    for c\
    \ in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n   \
    \         vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return result;\n    }\n    let mut i = vowels.len() - 1;\n    let mut j =\
    \ consonants.len() - 1;\n    while i >= 0 && j >= 0 {\n        if vowels[i] ==\
    \ consonants[j] {\n            i -= 1;\n            j -= 1;\n        } else {\n\
    \            result.push(vowels[i]);\n            break;\n        }\n    }\n \
    \   result", "    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n        if\
    \ is_vowel(c) {\n            if prev_char != ' ' && !is_vowel(prev_char) {\n \
    \               result = c.to_string();\n                break;\n            }\n\
    \            prev_vowel = c;\n        }\n        prev_char = c;\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (index, letter) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&letter) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel = letter.to_string();\n                closest_vowel_index\
    \ = index;\n            }\n        } else {\n            if closest_vowel_index\
    \ != word.len() {\n                break;\n            }\n        }\n    }\n \
    \   closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel_index = 0;\n    let mut\
    \ last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate() {\n  \
    \      if vowels.contains(&c) {\n            last_vowel_index = i;\n        }\
    \ else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut last_vowel = ' ';\n    let mut last_consonant = ' ';\n    let mut result\
    \ = String::new();\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n        } else {\n            last_consonant\
    \ = c;\n            if last_vowel != ' ' {\n                result.push(last_vowel);\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_char_is_consonant\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char_is_consonant {\n                closest_vowel =\
    \ c.to_string();\n                closest_vowel_index = i;\n                break;\n\
    \            }\n        } else {\n            prev_char_is_consonant = true;\n\
    \        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut vowel_index = 0;\n    let mut\
    \ vowel_found = false;\n    let mut consonant_found = false;\n    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            vowel_index = index;\n        \
    \    vowel_found = true;\n        } else if vowel_found {\n            consonant_found\
    \ = true;\n            break;\n        }\n        index -= 1;\n    }\n    if vowel_found\
    \ && consonant_found {\n        result.push(word.chars().nth(vowel_index).unwrap());\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n \
    \       if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n      \
    \      if prev_char != ' ' && prev_char != 'a' && prev_char != 'e' && prev_char\
    \ != 'i' && prev_char != 'o' && prev_char != 'u' {\n                result.push(c);\n\
    \                break;\n            }\n            prev_vowel = c;\n        }\n\
    \        prev_char = c;\n    }\n    if result.is_empty() {\n        result.push(prev_vowel);\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    let mut prev_char_is_vowel = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if !prev_char_is_vowel {\n\
    \                closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i;\n            }\n            prev_char_is_vowel = true;\n        } else\
    \ {\n            prev_char_is_vowel = false;\n        }\n    }\n    if closest_vowel_index\
    \ == word.len() {\n        String::new()\n    } else {\n        closest_vowel\n\
    \    }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    let mut prev_consonant\
    \ = false;\n    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_consonant {\n                if i < closest_distance\
    \ {\n                    closest_distance = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n            prev_consonant\
    \ = false;\n        } else {\n            prev_consonant = true;\n        }\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_index = word.len();\n\
    \    let mut prev_is_vowel = false;\n    for (index, ch) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&ch) {\n            if !prev_is_vowel {\n    \
    \            if index < closest_index {\n                    closest_index = index;\n\
    \                    closest_vowel = ch.to_string();\n                }\n    \
    \        }\n            prev_is_vowel = true;\n        } else {\n            prev_is_vowel\
    \ = false;\n        }\n    }\n    closest_vowel", "    let mut closest_vowel =\
    \ String::new();\n    let mut last_consonant_index = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel\
    \ = false;\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c)\
    \ {\n            last_vowel_index = i;\n            last_char_is_vowel = true;\n\
    \            last_char_is_consonant = false;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_char_is_consonant = true;\n            last_char_is_vowel\
    \ = false;\n        }\n        if last_char_is_consonant && last_char_is_vowel\
    \ {\n            closest_vowel = word[last_vowel_index..last_consonant_index].to_string();\n\
    \            break;\n        }\n    }\n    closest_vowel", "    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.append(&mut vec!['A', 'E', 'I',\
    \ 'O', 'U']);\n    let mut chars = word.chars().collect::<Vec<char>>();\n    chars.reverse();\n\
    \    let mut result = String::new();\n    let mut found = false;\n    for i in\
    \ 0..chars.len() {\n        if vowels.contains(&chars[i]) {\n            if i\
    \ == 0 {\n                break;\n            }\n            if !vowels.contains(&chars[i\
    \ - 1]) {\n                result.push(chars[i]);\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    if found {\n   \
    \     result\n    } else {\n        String::new()\n    }", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n \
    \       if vowels.contains(&c) {\n            prev_vowel = c;\n        } else\
    \ if prev_char != ' ' && prev_vowel != ' ' {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_vowel > last_consonant {\n            result = word[last_vowel..last_vowel\
    \ + 1].to_string();\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let mut vowels = Vec::new();\n    let mut consonants\
    \ = Vec::new();\n    let mut result = String::new();\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels.push(c);\n\
    \        } else {\n            consonants.push(c);\n        }\n    }\n    if vowels.len()\
    \ == 0 || consonants.len() == 0 {\n        return result;\n    }\n    let mut\
    \ i = vowels.len() - 1;\n    let mut j = consonants.len() - 1;\n    while i >=\
    \ 0 && j >= 0 {\n        if vowels[i] == consonants[j] {\n            i -= 1;\n\
    \            j -= 1;\n        } else {\n            result.push(vowels[i]);\n\
    \            break;\n        }\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ word = word.chars().collect::<Vec<char>>();\n    word.reverse();\n    for c\
    \ in word {\n        if vowels.contains(&c) {\n            last_vowel = c.to_string();\n\
    \            if !last_consonant.is_empty() {\n                closest_vowel =\
    \ last_vowel.clone();\n                break;\n            }\n        } else {\n\
    \            last_consonant = c.to_string();\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut i = word.len() - 1;\n    while i > 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if vowels.contains(&word.chars().nth(i - 1).unwrap()) {\n   \
    \             i -= 1;\n            } else {\n                result.push(word.chars().nth(i).unwrap());\n\
    \                break;\n            }\n        }\n        i -= 1;\n    }\n  \
    \  result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut found_vowel\
    \ = false;\n    let mut found_consonant = false;\n    let mut closest_vowel =\
    \ String::new();\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            found_vowel = true;\n            closest_vowel = c.to_string();\n\
    \        } else if found_vowel && !found_consonant {\n            found_consonant\
    \ = true;\n        } else if found_vowel && found_consonant {\n            break;\n\
    \        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut index = 0;\n    let\
    \ mut prev_is_consonant = false;\n    let mut is_consonant = false;\n    for c\
    \ in word.chars().rev() {\n        if vowels.contains(&c) {\n            if prev_is_consonant\
    \ && is_consonant {\n                result.push(c);\n                break;\n\
    \            }\n            is_consonant = false;\n        } else {\n        \
    \    is_consonant = true;\n        }\n        prev_is_consonant = is_consonant;\n\
    \        index += 1;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut index =\
    \ word.len() - 1;\n    let mut is_consonant = false;\n    while index >= 0 {\n\
    \        let letter = word.chars().nth(index).unwrap();\n        if vowels.contains(&letter)\
    \ {\n            if is_consonant {\n                closest_vowel.push(letter);\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i < distance {\n       \
    \         distance = i;\n                closest_vowel = c.to_string();\n    \
    \        }\n        }\n    }\n    closest_vowel", "    let mut vowels = String::new();\n\
    \    let mut consonants = String::new();\n    for c in word.chars() {\n      \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n           \
    \ vowels.push(c);\n        } else {\n            consonants.push(c);\n       \
    \ }\n    }\n    let mut result = String::new();\n    for c in vowels.chars().rev()\
    \ {\n        if consonants.contains(c) {\n            result.push(c);\n      \
    \  }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let word_chars: Vec<char> = word.chars().collect();\n    let mut vowel_index:\
    \ usize = 0;\n    let mut vowel_distance: usize = 0;\n    let mut last_consonant_index:\
    \ usize = 0;\n    for (index, character) in word_chars.iter().enumerate() {\n\
    \        if vowels.contains(character) {\n            vowel_index = index;\n \
    \           vowel_distance = vowel_index - last_consonant_index;\n        } else\
    \ {\n            last_consonant_index = index;\n        }\n    }\n    if vowel_distance\
    \ > 1 {\n        return word_chars[vowel_index].to_string();\n    }\n    String::from(\"\
    \")", "    let mut result = String::new();\n    let mut prev_char = ' ';\n   \
    \ let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if prev_char\
    \ != ' ' && prev_prev_char != ' ' {\n                result.push(c);\n       \
    \         break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut i = word.len()\
    \ - 1;\n    let mut vowel_found = false;\n    while i >= 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            if vowel_found {\n                result.push(word.chars().nth(i).unwrap());\n\
    \                break;\n            }\n        } else {\n            vowel_found\
    \ = true;\n        }\n        i -= 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    word_chars.reverse();\n    let mut found = false;\n    let mut result = String::new();\n\
    \    for i in 0..word_chars.len() {\n        if vowels.contains(&word_chars[i])\
    \ {\n            if i > 0 && i < word_chars.len() - 1 {\n                if !vowels.contains(&word_chars[i\
    \ - 1]) && !vowels.contains(&word_chars[i + 1]) {\n                    found =\
    \ true;\n                    result.push(word_chars[i]);\n                   \
    \ break;\n                }\n            }\n        }\n    }\n    if found {\n\
    \        result\n    } else {\n        String::new()\n    }", '    unimplemented!()',
  "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut result\
    \ = String::new();\n    let mut found_consonant = false;\n    for c in word {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       if found_consonant {\n                result.push(c);\n              \
    \  break;\n            }\n        } else {\n            found_consonant = true;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            prev_vowel = c;\n        } else if\
    \ prev_char != ' ' && is_vowel(prev_char) {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut result\
    \ = String::new();\n    let mut found_consonant = false;\n    for c in word {\n\
    \        if !found_consonant {\n            if !is_vowel(c) {\n              \
    \  found_consonant = true;\n            }\n        } else {\n            if is_vowel(c)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n    }\n    result.chars().rev().collect::<String>()", "    let mut\
    \ closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if is_vowel(c) {\n      \
    \      if !is_vowel(prev_char) {\n                closest_vowel = c.to_string();\n\
    \                break;\n            } else {\n                prev_vowel = c;\n\
    \            }\n        }\n        prev_char = c;\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_pos = 0;\n \
    \   let mut vowel_found = false;\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            vowel_pos = i;\n          \
    \  vowel_found = true;\n            break;\n        }\n    }\n    if vowel_found\
    \ {\n        let mut vowel_found = false;\n        for (i, c) in word.chars().rev().enumerate()\
    \ {\n            if i > vowel_pos && !vowels.contains(&c) {\n                vowel_found\
    \ = true;\n                break;\n            }\n        }\n        if vowel_found\
    \ {\n            let mut vowel_found = false;\n            for (i, c) in word.chars().rev().enumerate()\
    \ {\n                if i < vowel_pos && !vowels.contains(&c) {\n            \
    \        vowel_found = true;\n                    break;\n                }\n\
    \            }\n            if vowel_found {\n                return word.chars().rev().skip(vowel_pos).take(1).collect();\n\
    \            }\n        }\n    }\n    String::from(\"\")", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    for c in\
    \ word.chars() {\n        if vowels.contains(&c) {\n            last_vowel = c.to_string();\n\
    \        } else {\n            last_consonant = c.to_string();\n        }\n  \
    \      if last_vowel != \"\" && last_consonant != \"\" {\n            result =\
    \ last_vowel.clone();\n            break;\n        }\n    }\n    result", "  \
    \  let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' {\n            vowels.push(c);\n        } else {\n      \
    \      consonants.push(c);\n        }\n    }\n    let mut result = String::new();\n\
    \    for c in vowels.chars().rev() {\n        if consonants.contains(c) {\n  \
    \          result.push(c);\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if !closest_vowel.is_empty()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut prev_char = ' ';\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char != ' ' && prev_char != c {\n                if i\
    \ < closest_vowel_index {\n                    closest_vowel_index = i;\n    \
    \                closest_vowel = c.to_string();\n                }\n         \
    \   }\n        }\n        prev_char = c;\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            prev_vowel = c;\n        }\
    \ else if prev_char != ' ' && prev_vowel != ' ' {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let left = word.chars().nth(i - 1).unwrap();\n      \
    \          let right = word.chars().nth(i + 1).unwrap();\n                if !vowels.contains(&left)\
    \ && !vowels.contains(&right) {\n                    if i < distance {\n     \
    \                   distance = i;\n                        closest_vowel = c.to_string();\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                let mut left_consonant\
    \ = false;\n                let mut right_consonant = false;\n               \
    \ for j in (0..i).rev() {\n                    if !vowels.contains(&word.chars().nth(j).unwrap())\
    \ {\n                        left_consonant = true;\n                        break;\n\
    \                    }\n                }\n                for j in (i + 1)..word.len()\
    \ {\n                    if !vowels.contains(&word.chars().nth(j).unwrap()) {\n\
    \                        right_consonant = true;\n                        break;\n\
    \                    }\n                }\n                if left_consonant &&\
    \ right_consonant {\n                    if i < closest_distance {\n         \
    \               closest_distance = i;\n                        closest_vowel =\
    \ c.to_string();\n                    }\n                }\n            }\n  \
    \      }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut found = false;\n   \
    \ for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && !vowels.contains(&word.chars().rev().nth(i - 1).unwrap())\
    \ {\n                result.push(c);\n                found = true;\n        \
    \        break;\n            }\n        }\n    }\n    if !found {\n        result\
    \ = String::from(\"\");\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut consonant_count = 0;\n \
    \   let mut vowel_count = 0;\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    for (index, letter) in word.chars().enumerate() {\n        if\
    \ vowels.contains(&letter) {\n            vowel_count += 1;\n            if consonant_count\
    \ == 1 {\n                vowel_index = index;\n                vowel_found =\
    \ true;\n            }\n        } else {\n            consonant_count += 1;\n\
    \            if vowel_count == 1 {\n                consonant_index = index;\n\
    \                consonant_found = true;\n            }\n        }\n        if\
    \ vowel_found && consonant_found {\n            closest_vowel = word[vowel_index..consonant_index].to_string();\n\
    \            break;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_index {\n  \
    \              closest_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if !closest_vowel.is_empty() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if closest_vowel_index\
    \ != word.len() {\n                break;\n            }\n        }\n    }\n \
    \   closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            let distance = word.len() - i;\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n\
    \        if vowels.contains(&c) {\n            index = i;\n            result.push(c);\n\
    \            break;\n        }\n    }\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if i > index && !vowels.contains(&c) {\n            return result;\n\
    \        }\n    }\n    String::new()", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                let prev_char\
    \ = word.chars().nth(i - 1).unwrap();\n                let next_char = word.chars().nth(i\
    \ + 1).unwrap();\n                if !vowels.contains(&prev_char) && !vowels.contains(&next_char)\
    \ {\n                    let distance = word.len() - i;\n                    if\
    \ distance < closest_distance {\n                        closest_distance = distance;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    let mut found = false;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            result = c.to_string();\n \
    \           found = true;\n            break;\n        }\n        index += 1;\n\
    \    }\n    if found {\n        for c in word.chars().rev().skip(index + 1) {\n\
    \            if !vowels.contains(&c) {\n                return result;\n     \
    \       }\n        }\n    }\n    String::new()", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut index\
    \ = 0;\n    let mut found_vowel = false;\n    let mut found_consonant = false;\n\
    \    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n       \
    \     if found_consonant {\n                closest_vowel.push(c);\n         \
    \       found_vowel = true;\n                break;\n            }\n        }\
    \ else {\n            if found_vowel {\n                found_consonant = true;\n\
    \            }\n        }\n        index += 1;\n    }\n    if !found_vowel {\n\
    \        return String::new();\n    }\n    closest_vowel.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            closest_vowel = c.to_string();\n            break;\n        }\n\
    \        index += 1;\n    }\n    if index == word.len() {\n        return String::new();\n\
    \    }\n    for c in word.chars().rev().skip(index) {\n        if !vowels.contains(&c)\
    \ {\n            return closest_vowel;\n        }\n    }\n    String::new()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let left_char = word.chars().nth(i - 1).unwrap();\n \
    \               let right_char = word.chars().nth(i + 1).unwrap();\n         \
    \       if !vowels.contains(&left_char) && !vowels.contains(&right_char) {\n \
    \                   let distance = word.len() - i;\n                    if distance\
    \ < closest_distance {\n                        closest_distance = distance;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowel\
    \ = String::new();\n    let mut found = false;\n    for i in 0..word.len() {\n\
    \        if !found && word[i].is_ascii_alphabetic() && !word[i].is_ascii_lowercase()\
    \ {\n            continue;\n        }\n        if !found && word[i].is_ascii_lowercase()\
    \ {\n            found = true;\n        }\n        if found && word[i].is_ascii_lowercase()\
    \ {\n            if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n                vowel.push(word[i]);\n         \
    \       break;\n            }\n        }\n    }\n    vowel", "    let mut result\
    \ = String::new();\n    let mut is_consonant = true;\n    let mut is_vowel = false;\n\
    \    let mut is_first_vowel = false;\n    let mut is_second_vowel = false;\n \
    \   let mut is_first_consonant = false;\n    let mut is_second_consonant = false;\n\
    \    let mut is_first_letter = true;\n    let mut is_second_letter = false;\n\
    \    let mut is_third_letter = false;\n    let mut is_fourth_letter = false;\n\
    \    let mut is_fifth_letter = false;\n    let mut is_sixth_letter = false;\n\
    \    let mut is_seventh_letter = false;\n    let mut is_eighth_letter = false;\n\
    \    let mut is_ninth_letter = false;\n    let mut is_tenth_letter = false;\n\
    \    let mut is_eleventh_letter = false;\n    let mut is_twelfth_letter = false;\n\
    \    let mut is_thirteenth_letter = false;\n    let mut is_fourteenth_letter =\
    \ false;\n    let mut is_fifteenth_letter = false;\n    let mut is_sixteenth_letter\
    \ = false;\n    let mut is_seventeenth_letter = false;\n    let mut is_eighteenth_letter\
    \ = false;\n    let mut is_nineteenth_letter = false;\n    let mut is_twentieth_letter\
    \ = false;\n    let mut is_twenty_first_letter = false;\n    let mut is_twenty_second_letter\
    \ = false;\n    let mut is_twenty_third_letter = false;\n    let mut is_twenty_fourth_letter\
    \ = false;\n    let mut is_twenty_fifth_letter = false;\n    let mut is_twenty_sixth_letter\
    \ = false;\n    let mut is_twenty_seventh_letter = false;\n    let mut is_twenty_eighth_letter\
    \ = false;\n    let mut is_twenty_ninth_letter = false;\n    let mut is_thirtieth_letter\
    \ = false;\n    let mut is_thirty_first_", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i > 0 && i < word.len() - 1 {\n                if !vowels.contains(&word.chars().nth(i\
    \ - 1).unwrap()) && !vowels.contains(&word.chars().nth(i + 1).unwrap()) {\n  \
    \                  if i < distance {\n                        distance = i;\n\
    \                        closest_vowel = c.to_string();\n                    }\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    for c in word.chars() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = c.to_string();\n        } else {\n            last_consonant = c.to_string();\n\
    \        }\n        if last_consonant != \"\" && last_vowel != \"\" {\n      \
    \      closest_vowel = last_vowel.clone();\n            break;\n        }\n  \
    \  }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut prev_char = ' ';\n   \
    \ let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            prev_vowel = c;\n        } else if prev_vowel != ' ' && prev_char\
    \ != ' ' {\n            closest_vowel.push(prev_vowel);\n            break;\n\
    \        }\n        prev_char = c;\n    }\n    closest_vowel", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_index\
    \ = 0;\n    for c in word.chars() {\n        if vowels.contains(&c) {\n      \
    \      last_vowel_index = index;\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                closest_vowel = word[last_vowel_index..index].to_string();\n\
    \            }\n            last_consonant_index = index;\n        }\n       \
    \ index += 1;\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            closest_vowel_index = i;\n            closest_vowel\
    \ = c.to_string();\n            break;\n        }\n    }\n    if closest_vowel_index\
    \ == word.len() {\n        return String::new();\n    }\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if !vowels.contains(&c) && i < closest_vowel_index {\n          \
    \  return closest_vowel;\n        }\n    }\n    String::new()", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut index = word.len() - 1;\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            if prev_char != ' ' && prev_char\
    \ != c {\n                result = c.to_string();\n                break;\n  \
    \          }\n            prev_vowel = c;\n        } else {\n            if prev_vowel\
    \ != ' ' {\n                result = prev_vowel.to_string();\n               \
    \ break;\n            }\n            prev_char = c;\n        }\n        index\
    \ -= 1;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut index = word.len() - 1;\n  \
    \  let mut found_vowel = false;\n    while index > 0 {\n        let current_char\
    \ = word.chars().nth(index).unwrap();\n        if vowels.contains(&current_char)\
    \ {\n            found_vowel = true;\n        } else if found_vowel {\n      \
    \      result.push(current_char);\n            break;\n        }\n        index\
    \ -= 1;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            last_vowel_index = i;\n       \
    \ } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = c.to_string();\n        }\n \
    \   }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel < last_consonant {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    for (i, c) in word.chars().enumerate() {\n \
    \       if vowels.contains(&c) {\n            last_vowel_index = i;\n        \
    \    last_vowel_char = c;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_consonant_char = c;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = last_vowel_char.to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut prev_vowel = false;\n    let\
    \ mut prev_consonant = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n            prev_vowel = true;\n        } else\
    \ {\n            if prev_vowel {\n                prev_consonant = true;\n   \
    \         }\n        }\n    }\n    result", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut found = false;\n    let mut result = String::new();\n    for i in\
    \ 0..word.len() {\n        if is_vowel(word[i]) {\n            if i == 0 {\n \
    \               break;\n            }\n            if is_vowel(word[i - 1]) {\n\
    \                continue;\n            }\n            result.push(word[i]);\n\
    \            found = true;\n            break;\n        }\n    }\n    if found\
    \ {\n        result\n    } else {\n        String::new()\n    }", "    let mut\
    \ result = String::new();\n    let mut is_consonant = false;\n    let mut is_vowel\
    \ = false;\n    for c in word.chars().rev() {\n        if is_vowel && is_consonant\
    \ {\n            result.push(c);\n            break;\n        }\n        if is_vowel\
    \ {\n            is_vowel = false;\n        }\n        if is_consonant {\n   \
    \         if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                is_vowel\
    \ = true;\n            }\n        }\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U' {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n\
    \        if vowels.contains(&c) {\n            index = i;\n            closest_vowel.push(c);\n\
    \            break;\n        }\n    }\n    if index == 0 {\n        return String::new();\n\
    \    }\n    for (i, c) in word.chars().rev().enumerate() {\n        if i > index\
    \ && !vowels.contains(&c) {\n            return closest_vowel;\n        }\n  \
    \  }\n    String::new()", "    let mut result = String::new();\n    let mut is_consonant\
    \ = false;\n    let mut is_vowel = false;\n    for c in word.chars().rev() {\n\
    \        if is_vowel && is_consonant {\n            result.push(c);\n        \
    \    break;\n        }\n        if is_vowel {\n            is_vowel = false;\n\
    \        }\n        if is_consonant {\n            if is_vowel(c) {\n        \
    \        result.push(c);\n                is_vowel = true;\n            }\n  \
    \      } else {\n            if !is_vowel(c) {\n                is_consonant =\
    \ true;\n            }\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            is_consonant = false;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel = true;\n  \
    \      } else {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut word = word.chars().rev().collect::<Vec<char>>();\n    let mut vowel\
    \ = String::new();\n    let mut found = false;\n    for i in 0..word.len() {\n\
    \        if !found && word[i].is_ascii_alphabetic() && !word[i].is_ascii_lowercase()\
    \ {\n            continue;\n        }\n        if !found && word[i].is_ascii_lowercase()\
    \ {\n            found = true;\n        }\n        if found && word[i].is_ascii_lowercase()\
    \ {\n            vowel.push(word[i]);\n            break;\n        }\n    }\n\
    \    vowel.chars().rev().collect::<String>()", "    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_vowel = ' ';\n    for c in word.chars().rev() {\n        if\
    \ vowels.contains(&c) {\n            prev_vowel = c;\n        } else if prev_char\
    \ != ' ' && prev_vowel != ' ' {\n            result.push(prev_vowel);\n      \
    \      break;\n        }\n        prev_char = c;\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut prev_vowel = false;\n    let mut prev_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U' {\n            if prev_consonant {\n                result.push(c);\n\
    \                break;\n            }\n            prev_vowel = true;\n     \
    \   } else {\n            if prev_vowel {\n                prev_consonant = true;\n\
    \            }\n        }\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_vowel_index = 0;\n    for (index, ch) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&ch) {\n            if prev_char != ' ' && !vowels.contains(&prev_char)\
    \ {\n                if index > prev_vowel_index {\n                    result\
    \ = ch.to_string();\n                    break;\n                }\n         \
    \   }\n            prev_vowel_index = index;\n        }\n        prev_char = ch;\n\
    \    }\n    result", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_char = ' ';\n    for c in word.chars() {\n        if\
    \ vowels.contains(&c) {\n            last_vowel = last_consonant;\n        } else\
    \ {\n            last_consonant += 1;\n        }\n        if last_vowel != 0 &&\
    \ last_consonant - last_vowel == 2 {\n            result = last_char.to_string();\n\
    \        }\n        last_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut found_consonant = false;\n    let mut found_vowel\
    \ = false;\n    for c in word.chars().rev() {\n        if is_vowel(c) {\n    \
    \        if found_consonant {\n                result.push(c);\n             \
    \   found_vowel = true;\n                break;\n            }\n        } else\
    \ {\n            found_consonant = true;\n        }\n    }\n    if found_vowel\
    \ {\n        result\n    } else {\n        String::new()\n    }", "    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n \
    \   let mut closest_distance = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                let left_c = word.chars().nth(i - 1).unwrap();\n    \
    \            let right_c = word.chars().nth(i + 1).unwrap();\n               \
    \ if !vowels.contains(&left_c) && !vowels.contains(&right_c) {\n             \
    \       let distance = word.len() - i;\n                    if distance < closest_distance\
    \ {\n                        closest_distance = distance;\n                  \
    \      closest_vowel = c.to_string();\n                    }\n               \
    \ }\n            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    word_chars.reverse();\n    let mut result = String::new();\n    let mut is_consonant\
    \ = false;\n    for c in word_chars {\n        if vowels.contains(&c) {\n    \
    \        if is_consonant {\n                result.push(c);\n                break;\n\
    \            }\n        } else {\n            is_consonant = true;\n        }\n\
    \    }\n    result", "    let mut vowels = String::new();\n    let mut consonants\
    \ = String::new();\n    let mut result = String::new();\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return result;\n    }\n    let mut i = vowels.len() - 1;\n    let mut j =\
    \ consonants.len() - 1;\n    while i >= 0 && j >= 0 {\n        if vowels.chars().nth(i).unwrap()\
    \ == consonants.chars().nth(j).unwrap() {\n            i -= 1;\n            j\
    \ -= 1;\n        } else {\n            result.push(vowels.chars().nth(i).unwrap());\n\
    \            break;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if !closest_vowel.is_empty()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut index = word.len() - 1;\n    let\
    \ mut vowel_index = 0;\n    let mut is_vowel = false;\n    let mut is_consonant\
    \ = false;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    while index >\
    \ 0 {\n        if vowels.contains(&word.chars().nth(index).unwrap()) {\n     \
    \       is_vowel = true;\n            vowel_index = index;\n        } else {\n\
    \            is_consonant = true;\n        }\n        if is_vowel && is_consonant\
    \ {\n            result.push(word.chars().nth(vowel_index).unwrap());\n      \
    \      break;\n        }\n        index -= 1;\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_vec:\
    \ Vec<char> = word.chars().collect();\n    let mut word_vec_len = word_vec.len();\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_flag\
    \ = false;\n    let mut consonant_flag = false;\n    let mut vowel_index_vec =\
    \ Vec::new();\n    let mut consonant_index_vec = Vec::new();\n    let mut vowel_index_vec_len\
    \ = 0;\n    let mut consonant_index_vec_len = 0;\n    let mut vowel_index_vec_len_flag\
    \ = false;\n    let mut consonant_index_vec_len_flag = false;\n    let mut vowel_index_vec_len_flag_index\
    \ = 0;\n    let mut consonant_index_vec_len_flag_index = 0;\n    let mut vowel_index_vec_len_flag_index_vec\
    \ = Vec::new();\n    let mut consonant_index_vec_len_flag_index_vec = Vec::new();\n\
    \    let mut vowel_index_vec_len_flag_index_vec_len = 0;\n    let mut consonant_index_vec_len_flag_index_vec_len\
    \ = 0;\n    let mut vowel_index_vec_len_flag_index_vec_len_flag = false;\n   \
    \ let mut consonant_index_vec_len_flag_index_vec_len_flag = false;\n    let mut\
    \ vowel_index_vec_len_flag_index_vec_len_flag_index = 0;\n    let mut consonant_index_vec_len_flag_index_vec_len_flag_index\
    \ = 0;\n    let mut vowel_", "    let mut vowel_pos = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut closest_vowel =\
    \ String::from(\"\");\n    let mut vowel_list = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut word_chars: Vec<char> = word.chars().collect();\n    let mut word_len\
    \ = word_chars.len();\n    let mut i = word_len - 1;\n    while i >= 0 {\n   \
    \     if vowel_list.contains(&word_chars[i]) {\n            vowel_found = true;\n\
    \            vowel_pos = i;\n        } else {\n            consonant_found = true;\n\
    \        }\n        if vowel_found && consonant_found {\n            closest_vowel\
    \ = word_chars[vowel_pos].to_string();\n            break;\n        }\n      \
    \  i -= 1;\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = 0;\n    let mut closest_vowel_distance = 0;\n    let mut consonant_count =\
    \ 0;\n    let mut vowel_count = 0;\n    let mut vowel_index = 0;\n    let mut\
    \ vowel_distance = 0;\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    word_chars.reverse();\n    for (i, c) in word_chars.iter().enumerate() {\n\
    \        if vowels.contains(c) {\n            vowel_count += 1;\n            vowel_index\
    \ = i;\n            vowel_distance = consonant_count;\n            if consonant_count\
    \ > 0 {\n                if closest_vowel_distance == 0 {\n                  \
    \  closest_vowel_distance = vowel_distance;\n                    closest_vowel_index\
    \ = vowel_index;\n                    closest_vowel = c.to_string();\n       \
    \         } else if vowel_distance < closest_vowel_distance {\n              \
    \      closest_vowel_distance = vowel_distance;\n                    closest_vowel_index\
    \ = vowel_index;\n                    closest_vowel = c.to_string();\n       \
    \         }\n            }\n            consonant_count = 0;\n        } else {\n\
    \            consonant_count += 1;\n        }\n    }\n    if vowel_count == 1\
    \ {\n        closest_vowel = String::new();\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            prev_vowel = c;\n        }\
    \ else if prev_char != ' ' && prev_vowel != ' ' {\n            result.push(prev_vowel);\n\
    \            break;\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    let mut word_vec: Vec<char> = word.chars().collect();\n\
    \    for i in 0..word_vec.len() {\n        if word_vec[i] == 'a' || word_vec[i]\
    \ == 'e' || word_vec[i] == 'i' || word_vec[i] == 'o' || word_vec[i] == 'u' ||\
    \ word_vec[i] == 'A' || word_vec[i] == 'E' || word_vec[i] == 'I' || word_vec[i]\
    \ == 'O' || word_vec[i] == 'U' {\n            vowels.push(word_vec[i]);\n    \
    \    } else {\n            consonants.push(word_vec[i]);\n        }\n    }\n \
    \   if vowels.len() == 0 || consonants.len() == 0 {\n        return result;\n\
    \    }\n    let mut vowels_vec: Vec<char> = vowels.chars().collect();\n    let\
    \ mut consonants_vec: Vec<char> = consonants.chars().collect();\n    for i in\
    \ 0..consonants_vec.len() {\n        for j in 0..vowels_vec.len() {\n        \
    \    if consonants_vec[i] < vowels_vec[j] {\n                result.push(vowels_vec[j]);\n\
    \                return result;\n            }\n        }\n    }\n    result.push(vowels_vec[0]);\n\
    \    return result;", "    let mut word_vec: Vec<char> = word.chars().collect();\n\
    \    let mut vowel_vec: Vec<char> = Vec::new();\n    let mut vowel_idx: Vec<usize>\
    \ = Vec::new();\n    let mut vowel_idx_rev: Vec<usize> = Vec::new();\n    for\
    \ (i, c) in word_vec.iter().enumerate() {\n        if c.is_alphabetic() {\n  \
    \          if c.is_ascii_lowercase() {\n                match c {\n          \
    \          'a' | 'e' | 'i' | 'o' | 'u' => {\n                        vowel_vec.push(*c);\n\
    \                        vowel_idx.push(i);\n                    }\n         \
    \           _ => (),\n                }\n            } else {\n              \
    \  match c {\n                    'A' | 'E' | 'I' | 'O' | 'U' => {\n         \
    \               vowel_vec.push(*c);\n                        vowel_idx.push(i);\n\
    \                    }\n                    _ => (),\n                }\n    \
    \        }\n        }\n    }\n    if vowel_vec.len() == 0 {\n        return String::from(\"\
    \");\n    }\n    vowel_idx_rev = vowel_idx.clone();\n    vowel_idx_rev.reverse();\n\
    \    let mut vowel_idx_rev_iter = vowel_idx_rev.iter();\n    let mut vowel_idx_iter\
    \ = vowel_idx.iter();\n    let mut vowel_idx_iter_next = vowel_idx_iter.next();\n\
    \    let mut vowel_idx_rev_iter_next = vowel_idx_rev_iter.next();\n    let mut\
    \ vowel_idx_iter_next_next = vowel_idx_iter.next();\n    let mut vowel_idx_rev_iter_next_next\
    \ = vowel_idx_rev_iter.next();\n    let mut vowel_idx_iter_next_next_next = vowel_idx_iter.next();\n\
    \    let mut vowel_idx_rev_iter_next_next_next = vowel_idx_rev_iter.next();\n\
    \    let mut vowel_idx_", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut result = String::new();\n    let mut found = false;\n    let mut prev_char\
    \ = ' ';\n    for c in word.chars().rev() {\n        if !found {\n           \
    \ if vowels.contains(&c) {\n                result.push(c);\n            } else\
    \ {\n                if prev_char != ' ' && vowels.contains(&prev_char) {\n  \
    \                  found = true;\n                }\n            }\n        }\n\
    \        prev_char = c;\n    }\n    result.chars().rev().collect()", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let mut\
    \ closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U' {\n            if prev_char != ' ' && prev_char != 'a' && prev_char\
    \ != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char != 'u' && prev_char\
    \ != 'A' && prev_char != 'E' && prev_char != 'I' && prev_char != 'O' && prev_char\
    \ != 'U' {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n            prev_vowel = c;\n        }\n        prev_char = c;\n\
    \    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut prev_char = ' ';\n  \
    \  let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n        if\
    \ vowels.contains(&c) {\n            if prev_char != ' ' && prev_prev_char !=\
    \ ' ' {\n                closest_vowel.push(c);\n                break;\n    \
    \        }\n        }\n        prev_prev_char = prev_char;\n        prev_char\
    \ = c;\n    }\n    closest_vowel", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel_pos = 0;\n    let mut vowel_found = false;\n    for (i, c)\
    \ in word.iter().enumerate() {\n        if is_vowel(c) {\n            vowel_pos\
    \ = i;\n            vowel_found = true;\n            break;\n        }\n    }\n\
    \    if vowel_found {\n        for (i, c) in word.iter().enumerate() {\n     \
    \       if is_vowel(c) {\n                if i > vowel_pos {\n               \
    \     return String::from(\"\");\n                }\n            } else {\n  \
    \              if i < vowel_pos {\n                    return String::from(\"\"\
    );\n                }\n            }\n        }\n        return word[vowel_pos].to_string();\n\
    \    }\n    String::from(\"\")", "    let mut result = String::new();\n    let\
    \ mut vowel_found = false;\n    let mut consonant_found = false;\n    let mut\
    \ last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let mut last_index\
    \ = 0;\n    let mut last_char = ' ';\n    for (index, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            if consonant_found {\n            \
    \    result = word[last_vowel_index..index].to_string();\n                vowel_found\
    \ = true;\n                break;\n            }\n            last_vowel_index\
    \ = index;\n            last_char = c;\n        } else {\n            consonant_found\
    \ = true;\n            last_consonant_index = index;\n        }\n        last_index\
    \ = index;\n    }\n    if !vowel_found && consonant_found && is_vowel(last_char)\
    \ {\n        result = word[last_vowel_index..last_index + 1].to_string();\n  \
    \  }\n    result", "    let mut closest_vowel = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    let mut\
    \ prev_prev_char = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_char != ' ' && !vowels.contains(&prev_char) {\n     \
    \           closest_vowel.push(c);\n                break;\n            }\n  \
    \      }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            prev_vowel = c;\n        } else if prev_char != ' ' && prev_vowel\
    \ != ' ' {\n            result.push(prev_vowel);\n            break;\n       \
    \ }\n        prev_char = c;\n    }\n    result", "    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    let mut result = String::new();\n \
    \   let mut index = 0;\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let\
    \ mut vowel_flag = false;\n    let mut consonant_flag = false;\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels.push(c);\n\
    \            vowel_count += 1;\n            vowel_flag = true;\n        } else\
    \ {\n            consonants.push(c);\n            consonant_count += 1;\n    \
    \        consonant_flag = true;\n        }\n    }\n    if vowel_flag == false\
    \ || consonant_flag == false {\n        return result;\n    }\n    if vowel_count\
    \ > consonant_count {\n        for i in 0..vowels.len() {\n            if vowels[i]\
    \ == consonants[consonants.len() - 1] {\n                vowel_index = i;\n  \
    \              consonant_index = consonants.len() - 1;\n                break;\n\
    \            }\n        }\n        for i in (0..vowel_index).rev() {\n       \
    \     if vowels[i] != consonants[consonant_index] {\n                result.push(vowels[i]);\n\
    \                break;\n            }\n        }\n    } else {\n        for i\
    \ in 0..consonants.len() {\n            if consonants[i] == vowels[vowels.len()\
    \ - 1] {\n                consonant_index = i;\n                vowel_index =\
    \ vowels.len() - 1;\n                break;\n            }\n        }\n      \
    \  for i in (0..consonant_index).rev() {\n            if consonants[i] != vowels[vowel_index]",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            closest_vowel_index = i;\n\
    \            closest_vowel = c.to_string();\n            break;\n        }\n \
    \   }\n    if closest_vowel_index == word.len() {\n        return String::new();\n\
    \    }\n    for (i, c) in word.chars().enumerate().rev() {\n        if !vowels.contains(&c)\
    \ && i < closest_vowel_index {\n            return closest_vowel;\n        }\n\
    \    }\n    String::new()", "    let mut word_chars = word.chars().rev();\n  \
    \  let mut prev_char = word_chars.next().unwrap();\n    let mut vowel_index =\
    \ 0;\n    let mut vowel_char = ' ';\n    let mut vowel_found = false;\n    let\
    \ mut index = 0;\n    for c in word_chars {\n        if is_vowel(c) {\n      \
    \      if !is_vowel(prev_char) {\n                vowel_index = index;\n     \
    \           vowel_char = c;\n                vowel_found = true;\n           \
    \     break;\n            }\n        }\n        prev_char = c;\n        index\
    \ += 1;\n    }\n    if vowel_found {\n        let mut word_chars = word.chars().rev();\n\
    \        for _ in 0..vowel_index {\n            word_chars.next();\n        }\n\
    \        return word_chars.next().unwrap().to_string();\n    }\n    String::from(\"\
    \")", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_index = word.len();\n    for (index, letter)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&letter) {\n\
    \            if index < closest_index {\n                closest_index = index;\n\
    \                closest_vowel = letter.to_string();\n            }\n        }\
    \ else {\n            if closest_index != word.len() {\n                break;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    let mut flag = false;\n    while index > 0 {\n      \
    \  if vowels.contains(&word.chars().nth(index).unwrap()) {\n            if flag\
    \ {\n                result.push(word.chars().nth(index).unwrap());\n        \
    \        break;\n            }\n        } else {\n            flag = true;\n \
    \       }\n        index -= 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n\
    \        if vowels.contains(&c) {\n            if prev_char != ' ' && !vowels.contains(&prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    let mut chars = word.chars();\n   \
    \ let mut prev = chars.next();\n    for c in chars {\n        if is_vowel(c) {\n\
    \            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n        if prev.is_some() && is_vowel(prev.unwrap()) && is_vowel(c)\
    \ {\n            vowels.pop();\n        }\n        prev = Some(c);\n    }\n  \
    \  if vowels.len() == 0 || consonants.len() == 0 {\n        return result;\n \
    \   }\n    let mut i = vowels.len() - 1;\n    let mut j = consonants.len() - 1;\n\
    \    while i >= 0 && j >= 0 {\n        result.push(vowels[i]);\n        i -= 1;\n\
    \        j -= 1;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    for (index, letter) in word.chars().enumerate().rev() {\n\
    \        if vowels.contains(&letter) {\n            if index < closest_vowel_index\
    \ {\n                closest_vowel = letter.to_string();\n                closest_vowel_index\
    \ = index;\n            }\n        } else {\n            if closest_vowel_index\
    \ < word.len() - 1 {\n                return closest_vowel;\n            }\n \
    \       }\n    }\n    closest_vowel", "    let mut vowels = String::new();\n \
    \   let mut consonants = String::new();\n    let mut result = String::new();\n\
    \    for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' {\n            vowels.push(c);\n        } else {\n      \
    \      consonants.push(c);\n        }\n    }\n    if vowels.len() == 0 || consonants.len()\
    \ == 0 {\n        return result;\n    }\n    let mut vowels_iter = vowels.chars().rev();\n\
    \    let mut consonants_iter = consonants.chars().rev();\n    let mut last_consonant\
    \ = consonants_iter.next().unwrap();\n    for c in vowels_iter {\n        if last_consonant\
    \ != ' ' {\n            result.push(c);\n            break;\n        }\n     \
    \   last_consonant = consonants_iter.next().unwrap();\n    }\n    result", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i == 0 {\n                break;\n            }\n        \
    \    closest_vowel.push(c);\n            break;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut prev_is_vowel = false;\n   \
    \ while index > 0 {\n        let ch = word.chars().nth(index).unwrap();\n    \
    \    if vowels.contains(&ch) {\n            if prev_is_vowel {\n             \
    \   result.push(ch);\n                break;\n            }\n            prev_is_vowel\
    \ = true;\n        } else {\n            prev_is_vowel = false;\n        }\n \
    \       index -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut is_consonant = false;\n    let mut is_vowel = false;\n    for c in\
    \ word.chars().rev() {\n        if is_vowel && is_consonant {\n            result.push(c);\n\
    \            break;\n        }\n        if is_vowel {\n            is_vowel =\
    \ false;\n        }\n        if is_consonant {\n            if is_vowel_char(c)\
    \ {\n                is_vowel = true;\n            }\n        } else {\n     \
    \       if !is_vowel_char(c) {\n                is_consonant = true;\n       \
    \     }\n        }\n    }\n    result.chars().rev().collect()", "    let mut result\
    \ = String::new();\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut is_consonant = false;\n    for i in 0..word.len() {\n        if is_consonant\
    \ && is_vowel(word[i]) {\n            result.push(word[i]);\n            break;\n\
    \        }\n        if !is_vowel(word[i]) {\n            is_consonant = true;\n\
    \        }\n    }\n    result.chars().rev().collect::<String>()", "    let mut\
    \ closest_vowel = String::new();\n    let mut prev_char = ' ';\n    let mut prev_prev_char\
    \ = ' ';\n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U' {\n            if prev_char != ' ' && prev_prev_char != ' '\
    \ {\n                closest_vowel.push(c);\n                break;\n        \
    \    }\n        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n\
    \    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            if !is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                closest_vowel.push(c);\n                break;\n        \
    \    }\n        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n\
    \    }\n    closest_vowel", "    let mut vowels = String::new();\n    let mut\
    \ consonants = String::new();\n    let mut result = String::new();\n    let mut\
    \ vowels_index = 0;\n    let mut consonants_index = 0;\n    let mut index = 0;\n\
    \    let mut vowel_found = false;\n    let mut consonant_found = false;\n    let\
    \ mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_index_found\
    \ = false;\n    let mut consonant_index_found = false;\n    let mut vowel_index_found_first\
    \ = false;\n    let mut consonant_index_found_first = false;\n    let mut vowel_index_found_second\
    \ = false;\n    let mut consonant_index_found_second = false;\n    let mut vowel_index_found_third\
    \ = false;\n    let mut consonant_index_found_third = false;\n    let mut vowel_index_found_fourth\
    \ = false;\n    let mut consonant_index_found_fourth = false;\n    let mut vowel_index_found_fifth\
    \ = false;\n    let mut consonant_index_found_fifth = false;\n    let mut vowel_index_found_sixth\
    \ = false;\n    let mut consonant_index_found_sixth = false;\n    let mut vowel_index_found_seventh\
    \ = false;\n    let mut consonant_index_found_seventh = false;\n    let mut vowel_index_found_eighth\
    \ = false;\n    let mut consonant_index_found_eighth = false;\n    let mut vowel_index_found_ninth\
    \ = false;\n    let mut consonant_index_found_ninth = false;\n    let mut vowel_index_found_tenth\
    \ = false;\n    let mut consonant_index_found_tenth = false;\n    let mut vowel_index_found_eleventh\
    \ = false;\n    let mut consonant_index_found_eleventh = false;\n    let mut vowel_index_found_twelfth\
    \ = false;\n    let mut consonant_index_found_twelfth = false;\n    let mut vowel_index_found_thirteenth\
    \ = false;\n    let mut conson", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel = String::new();\n    for i in 0..word.len() {\n        if\
    \ word[i].is_alphabetic() {\n            if word[i].is_lowercase() {\n       \
    \         match word[i] {\n                    'a' | 'e' | 'i' | 'o' | 'u' =>\
    \ {\n                        vowel.push(word[i]);\n                        break;\n\
    \                    }\n                    _ => continue,\n                }\n\
    \            } else {\n                match word[i] {\n                    'A'\
    \ | 'E' | 'I' | 'O' | 'U' => {\n                        vowel.push(word[i]);\n\
    \                        break;\n                    }\n                    _\
    \ => continue,\n                }\n            }\n        }\n    }\n    vowel",
  "    let mut result = String::new();\n    let mut found_vowel = false;\n    let\
    \ mut found_consonant = false;\n    let mut found_consonant_again = false;\n \
    \   let mut found_vowel_again = false;\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut last_vowel = ' ';\n    for c in word.chars().rev() {\n  \
    \      if !found_vowel && vowels.contains(&c) {\n            found_vowel = true;\n\
    \            last_vowel = c;\n        } else if found_vowel && !found_consonant\
    \ && !vowels.contains(&c) {\n            found_consonant = true;\n        } else\
    \ if found_vowel && found_consonant && vowels.contains(&c) {\n            found_vowel_again\
    \ = true;\n        } else if found_vowel && found_consonant && !vowels.contains(&c)\
    \ {\n            found_consonant_again = true;\n        }\n        if found_vowel\
    \ && found_consonant && found_vowel_again && found_consonant_again {\n       \
    \     result.push(last_vowel);\n            break;\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (index, character) in\
    \ word.chars().enumerate().rev() {\n        if vowels.contains(&character) {\n\
    \            if index < closest_vowel_index {\n                closest_vowel_index\
    \ = index;\n                closest_vowel = character.to_string();\n         \
    \   }\n        } else {\n            if closest_vowel_index != word.len() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_vowel > last_consonant {\n            result = c.to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            vowel_index = i;\n            closest_vowel.push(c);\n      \
    \      break;\n        }\n    }\n    if vowel_index == word.len() || vowel_index\
    \ == 0 {\n        return String::new();\n    }\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if !vowels.contains(&c) && i < vowel_index {\n            return\
    \ closest_vowel;\n        }\n    }\n    String::new()", "    let mut result =\
    \ String::new();\n    let mut is_consonant = false;\n    let mut is_vowel = false;\n\
    \    for c in word.chars().rev() {\n        if is_vowel && is_consonant {\n  \
    \          result.push(c);\n            break;\n        }\n        if is_vowel\
    \ {\n            is_vowel = false;\n        }\n        if is_consonant {\n   \
    \         if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                is_vowel\
    \ = true;\n            }\n        }\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U' {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if closest_vowel_index\
    \ != word.len() {\n                break;\n            }\n        }\n    }\n \
    \   closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_consonant = 0;\n    let mut first_vowel\
    \ = 0;\n    let mut first_vowel_index = 0;\n    let mut last_consonant_index =\
    \ 0;\n    for (index, letter) in word.chars().enumerate() {\n        if vowels.contains(&letter)\
    \ {\n            if last_consonant == 0 {\n                last_consonant = 1;\n\
    \                last_consonant_index = index;\n            } else {\n       \
    \         first_vowel = 1;\n                first_vowel_index = index;\n     \
    \       }\n        } else {\n            if first_vowel == 1 {\n             \
    \   break;\n            }\n        }\n    }\n    if first_vowel == 1 {\n     \
    \   for (index, letter) in word.chars().enumerate() {\n            if index >\
    \ last_consonant_index && index < first_vowel_index {\n                if vowels.contains(&letter)\
    \ {\n                    result.push(letter);\n                    break;\n  \
    \              }\n            }\n        }\n    }\n    result", "    let mut word\
    \ = word.chars().rev().collect::<Vec<char>>();\n    let mut vowel = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj =\
    \ 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut\
    \ nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n   \
    \ let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu =\
    \ 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut\
    \ yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n   \
    \ let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff =\
    \ 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let\
    \ mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm =\
    \ 0;\n    let", "    let mut vowels = String::new();\n    let mut consonants =\
    \ String::new();\n    for c in word.chars() {\n        if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n       \
    \ } else {\n            consonants.push(c);\n        }\n    }\n    let mut result\
    \ = String::new();\n    let mut i = vowels.len() - 1;\n    let mut j = consonants.len()\
    \ - 1;\n    while i >= 0 && j >= 0 {\n        if vowels.chars().nth(i).unwrap()\
    \ == consonants.chars().nth(j).unwrap() {\n            i -= 1;\n            j\
    \ -= 1;\n        } else {\n            result.push(vowels.chars().nth(i).unwrap());\n\
    \            break;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ vowel_index = word.len();\n    for (index, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            vowel_index = index;\n    \
    \        break;\n        }\n    }\n    if vowel_index == word.len() {\n      \
    \  return closest_vowel;\n    }\n    for (index, c) in word.chars().enumerate().rev()\
    \ {\n        if !vowels.contains(&c) && index < vowel_index {\n            closest_vowel.push(word.chars().nth(vowel_index).unwrap());\n\
    \            break;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut index\
    \ = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            index = i;\n            result.push(c);\n            break;\n\
    \        }\n    }\n    if index == 0 {\n        return String::new();\n    }\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if i < index {\n\
    \            if !vowels.contains(&c) {\n                return result;\n     \
    \       }\n        }\n    }\n    String::new()", "    let mut vowels = String::new();\n\
    \    let mut consonants = String::new();\n    let mut result = String::new();\n\
    \    let mut flag = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n\
    \    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n\
    \    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n\
    \    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12\
    \ = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let\
    \ mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n\
    \    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20\
    \ = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let\
    \ mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n\
    \    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28\
    \ = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let\
    \ mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n\
    \    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36\
    \ = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let\
    \ mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n\
    \    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44\
    \ = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let\
    \ mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n\
    \    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag52\
    \ = false;\n    let mut flag53 = false;\n    let mut", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut found_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if found_consonant {\n                result.push(c);\n     \
    \           break;\n            }\n        } else {\n            found_consonant\
    \ = true;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut is_consonant = false;\n    let mut is_vowel = false;\n    for c in\
    \ word.chars().rev() {\n        if is_vowel && is_consonant {\n            result.push(c);\n\
    \            break;\n        }\n        if is_vowel {\n            is_vowel =\
    \ false;\n        }\n        if is_consonant {\n            if is_vowel(c) {\n\
    \                result.push(c);\n                is_vowel = true;\n         \
    \   }\n        } else {\n            if !is_vowel(c) {\n                is_consonant\
    \ = true;\n            }\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index < last_consonant_index {\n    \
    \        result = word[last_vowel_index..last_consonant_index].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut vowel_index = word.len();\n\
    \    let mut consonant_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            vowel_index = i;\n        }\
    \ else {\n            consonant_index = i;\n            if vowel_index < consonant_index\
    \ {\n                closest_vowel = word[vowel_index..vowel_index + 1].to_string();\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant =\
    \ false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut last_char_is_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_consonant = false;\n\
    \    let mut last_char_is_vowel_and_consonant_and_consonant = false;\n    let\
    \ mut last_char_is_vowel_or_consonant_and_vowel = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel =\
    \ false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel = false;\n\
    \    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_vowel\
    \ = false;\n    let mut last_char_is_vowel_", "    let mut vowel_index = 0;\n\
    \    let mut vowel_distance = 0;\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    let mut prev_consonant = ' ';\n    let mut vowel_found = false;\n\
    \    let mut consonant_found = false;\n    let mut vowel_distance_found = false;\n\
    \    let mut consonant_distance_found = false;\n    let mut vowel_distance_temp\
    \ = 0;\n    let mut consonant_distance_temp = 0;\n    let mut vowel_index_temp\
    \ = 0;\n    let mut consonant_index_temp = 0;\n    let mut consonant_index = 0;\n\
    \    let mut consonant_distance = 0;\n    let mut vowel_found_temp = false;\n\
    \    let mut consonant_found_temp = false;\n    let mut vowel_distance_found_temp\
    \ = false;\n    let mut consonant_distance_found_temp = false;\n    let mut vowel_distance_temp_temp\
    \ = 0;\n    let mut consonant_distance_temp_temp = 0;\n    let mut vowel_index_temp_temp\
    \ = 0;\n    let mut consonant_index_temp_temp = 0;\n    let mut consonant_index_temp_temp\
    \ = 0;\n    let mut consonant_distance_temp_temp = 0;\n    let mut vowel_found_temp_temp\
    \ = false;\n    let mut consonant_found_temp_temp = false;\n    let mut vowel_distance_found_temp_temp\
    \ = false;\n    let mut consonant_distance_found_temp_temp = false;\n    let mut\
    \ vowel_distance_temp_temp_temp = 0;\n    let mut consonant_distance_temp_temp_temp\
    \ = 0;\n    let mut vowel_index_temp_temp_temp = 0;\n    let mut consonant_index_temp_temp_temp\
    \ = 0;\n    let mut consonant_index_temp_temp_temp = 0;\n    let mut consonant_distance_temp_temp_temp\
    \ = 0;\n    let mut vowel_found_temp_temp_temp = false;\n    let mut consonant_found_temp_temp_temp\
    \ = false;", "    let mut result = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", "    let mut result = String::new();\n    let mut is_vowel = false;\n\
    \    let mut is_consonant = false;\n    let mut is_first_consonant = false;\n\
    \    let mut is_second_consonant = false;\n    let mut is_first_vowel = false;\n\
    \    let mut is_second_vowel = false;\n    let mut is_third_vowel = false;\n \
    \   let mut is_fourth_vowel = false;\n    let mut is_fifth_vowel = false;\n  \
    \  let mut is_sixth_vowel = false;\n    let mut is_seventh_vowel = false;\n  \
    \  let mut is_eighth_vowel = false;\n    let mut is_ninth_vowel = false;\n   \
    \ let mut is_tenth_vowel = false;\n    let mut is_eleventh_vowel = false;\n  \
    \  let mut is_twelfth_vowel = false;\n    let mut is_thirteenth_vowel = false;\n\
    \    let mut is_fourteenth_vowel = false;\n    let mut is_fifteenth_vowel = false;\n\
    \    let mut is_sixteenth_vowel = false;\n    let mut is_seventeenth_vowel = false;\n\
    \    let mut is_eighteenth_vowel = false;\n    let mut is_nineteenth_vowel = false;\n\
    \    let mut is_twentieth_vowel = false;\n    let mut is_twenty_first_vowel =\
    \ false;\n    let mut is_twenty_second_vowel = false;\n    let mut is_twenty_third_vowel\
    \ = false;\n    let mut is_twenty_fourth_vowel = false;\n    let mut is_twenty_fifth_vowel\
    \ = false;\n    let mut is_twenty_sixth_vowel = false;\n    let mut is_twenty_seventh_vowel\
    \ = false;\n    let mut is_twenty_eighth_vowel = false;\n    let mut is_twenty_ninth_v",
  "    let mut result = String::new();\n    let mut is_consonant = false;\n    let\
    \ mut is_vowel = false;\n    for c in word.chars().rev() {\n        if is_vowel\
    \ && is_consonant {\n            result.push(c);\n            break;\n       \
    \ }\n        if is_vowel {\n            is_vowel = false;\n        }\n       \
    \ if is_consonant {\n            is_consonant = false;\n        }\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            is_vowel = true;\n  \
    \      } else {\n            is_consonant = true;\n        }\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut found = false;\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if !vowels.contains(&prev_char)\
    \ {\n                result.push(c);\n                found = true;\n        \
    \        break;\n            }\n        }\n        prev_char = c;\n    }\n   \
    \ if found {\n        result\n    } else {\n        String::new()\n    }", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    let mut prev_char = ' ';\n    let mut next_char =\
    \ ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if prev_char != ' ' && next_char != ' ' {\n                closest_vowel\
    \ = c.to_string();\n                break;\n            }\n        } else {\n\
    \            if index == 0 {\n                next_char = c;\n            } else\
    \ {\n                prev_char = c;\n            }\n        }\n        index +=\
    \ 1;\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if is_vowel(c) {\n            if !is_vowel(prev_char)\
    \ && is_vowel(prev_prev_char) {\n                closest_vowel.push(c);\n    \
    \            break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut index = word.len()\
    \ - 1;\n    let mut found_consonant = false;\n    while index > 0 {\n        let\
    \ ch = word.chars().nth(index).unwrap();\n        if !vowels.contains(&ch) {\n\
    \            found_consonant = true;\n        } else if found_consonant {\n  \
    \          result.push(ch);\n            break;\n        }\n        index -= 1;\n\
    \    }\n    result", "    let mut word_iter = word.chars().rev();\n    let mut\
    \ prev_char: char = ' ';\n    let mut curr_char: char = ' ';\n    let mut next_char:\
    \ char = ' ';\n    let mut vowel_pos: usize = 0;\n    let mut vowel_pos_found:\
    \ bool = false;\n    let mut vowel_char: char = ' ';\n    let mut vowel_char_found:\
    \ bool = false;\n    let mut vowel_char_found_pos: usize = 0;\n    let mut vowel_char_found_char:\
    \ char = ' ';\n    let mut vowel_char_found_prev_char: char = ' ';\n    let mut\
    \ vowel_char_found_next_char: char = ' ';\n    let mut vowel_char_found_prev_char_is_consonant:\
    \ bool = false;\n    let mut vowel_char_found_next_char_is_consonant: bool = false;\n\
    \    let mut vowel_char_found_prev_char_is_vowel: bool = false;\n    let mut vowel_char_found_next_char_is_vowel:\
    \ bool = false;\n    let mut vowel_char_found_prev_char_is_space: bool = false;\n\
    \    let mut vowel_char_found_next_char_is_space: bool = false;\n    let mut vowel_char_found_prev_char_is_letter:\
    \ bool = false;\n    let mut vowel_char_found_next_char_is_letter: bool = false;\n\
    \    let mut vowel_char_found_prev_char_is_digit: bool = false;\n    let mut vowel_char_found_next_char_is_digit:\
    \ bool = false;\n    let mut vowel_char_found_prev_char_is_punctuation: bool =\
    \ false;\n    let mut vowel_char_found_next_char_is_punctuation: bool = false;\n\
    \    let mut vowel_char_found_prev_char_is_whitespace: bool = false;\n    let\
    \ mut vowel_char_found_next_char_is_whitespace: bool = false;\n    let mut vowel_char",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    for (i, c) in word.chars().rev().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i == 0 {\n                break;\n            }\n        \
    \    if !vowels.contains(&word.chars().rev().nth(i - 1).unwrap()) {\n        \
    \        closest_vowel = c.to_string();\n                break;\n            }\n\
    \        }\n    }\n    closest_vowel"]
stop_tokens:
- "\n}"
