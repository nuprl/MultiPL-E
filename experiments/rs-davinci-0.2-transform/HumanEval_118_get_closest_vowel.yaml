name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    let mut prev_prev_char = ' ';\n    for c in word.chars().rev() {\n      \
    \  if is_vowel(c) {\n            if !is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    let mut prev_prev_char\
    \ = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c) {\n\
    \            if prev_char != ' ' && prev_prev_char != ' ' {\n                result.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    for c in word.chars() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n\
    \        } else {\n            consonants.push(c);\n        }\n    }\n    let\
    \ mut result = String::new();\n    for i in 0..consonants.len() {\n        if\
    \ i < vowels.len() {\n            result.push(vowels[i]);\n        }\n    }\n\
    \    result", "    let mut vowels = String::new();\n    let mut consonants = String::new();\n\
    \    let mut result = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_char_index = 0;\n    let mut index = 0;\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut char_index = 0;\n    let\
    \ mut found = false;\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    let mut found_char = false;\n    let mut found_last_vowel = false;\n\
    \    let mut found_last_consonant = false;\n    let mut found_last_char = false;\n\
    \    let mut found_last_vowel_index = false;\n    let mut found_last_consonant_index\
    \ = false;\n    let mut found_last_char_index = false;\n    let mut found_vowel_index\
    \ = false;\n    let mut found_consonant_index = false;\n    let mut found_char_index\
    \ = false;\n    let mut found_index = false;\n    let mut found_result = false;\n\
    \    let mut found_last_result = false;\n    let mut found_result_index = false;\n\
    \    let mut found_last_result_index = false;\n    let mut result_index = 0;\n\
    \    let mut last_result_index = 0;\n    let mut last_result = String::new();\n\
    \    let mut last_word = String::new();\n    let mut last_word_index = 0;\n  \
    \  let mut found_last_word = false;\n    let mut found_last_word_index = false;\n\
    \    let mut found_word = false;\n    let mut found_word_index = false;\n    let\
    \ mut word_index = 0;\n    let mut found_last_index = false;\n    let mut found_last",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_index {\n  \
    \              closest_index = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            if closest_index != word.len() {\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = i;\n        } else {\n            last_consonant = i;\n        }\n       \
    \ if last_vowel > last_consonant {\n            result = c.to_string();\n    \
    \    }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_consonant = ' ';\n    let\
    \ mut last_vowel = ' ';\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c;\n        } else {\n            if last_vowel\
    \ != ' ' {\n                result.push(last_vowel);\n                break;\n\
    \            }\n            last_consonant = c;\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut index = 0;\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if prev_char != ' ' && prev_char\
    \ != c {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n        }\n        prev_char = c;\n        index += 1;\n    }\n\
    \    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel > last_consonant {\n            result\
    \ = c.to_string();\n        }\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut prev_prev_char =\
    \ ' ';\n    for c in word.chars().rev() {\n        if is_vowel(c) {\n        \
    \    if !is_vowel(prev_char) && is_vowel(prev_prev_char) {\n                closest_vowel.push(c);\n\
    \                break;\n            }\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if closest_vowel_index\
    \ < word.len() {\n                break;\n            }\n        }\n    }\n  \
    \  closest_vowel", "    let mut result = String::new();\n    let mut is_vowel\
    \ = false;\n    let mut is_consonant = false;\n    let mut is_first_vowel = false;\n\
    \    let mut is_first_consonant = false;\n    let mut is_second_vowel = false;\n\
    \    let mut is_second_consonant = false;\n    let mut is_third_vowel = false;\n\
    \    let mut is_third_consonant = false;\n    let mut is_fourth_vowel = false;\n\
    \    let mut is_fourth_consonant = false;\n    let mut is_fifth_vowel = false;\n\
    \    let mut is_fifth_consonant = false;\n    let mut is_sixth_vowel = false;\n\
    \    let mut is_sixth_consonant = false;\n    let mut is_seventh_vowel = false;\n\
    \    let mut is_seventh_consonant = false;\n    let mut is_eighth_vowel = false;\n\
    \    let mut is_eighth_consonant = false;\n    let mut is_ninth_vowel = false;\n\
    \    let mut is_ninth_consonant = false;\n    let mut is_tenth_vowel = false;\n\
    \    let mut is_tenth_consonant = false;\n    let mut is_eleventh_vowel = false;\n\
    \    let mut is_eleventh_consonant = false;\n    let mut is_twelfth_vowel = false;\n\
    \    let mut is_twelfth_consonant = false;\n    let mut is_thirteenth_vowel =\
    \ false;\n    let mut is_thirteenth_consonant = false;\n    let mut is_fourteenth_vowel\
    \ = false;\n    let mut is_fourteenth_consonant = false;\n    let mut is_fifteenth_vowel\
    \ = false;\n    let mut is_fifteenth_consonant = false;\n    let mut is_sixteenth_vowel\
    \ = false;\n    let mut is_sixteenth_consonant = false;\n    let mut is_", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(&c) {\n          \
    \  last_vowel = i;\n        } else {\n            last_consonant = i;\n      \
    \  }\n        if last_consonant > last_vowel {\n            result = word[last_vowel..last_consonant].to_string();\n\
    \        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    for (i, c) in word.chars().enumerate() {\n \
    \       if vowels.contains(&c) {\n            last_vowel_index = i;\n        \
    \    last_vowel_char = c;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_consonant_char = c;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = last_vowel_char.to_string();\n\
    \        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let mut result\
    \ = String::new();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            if i < last_consonant_index\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        } else {\n            last_consonant_index = i;\n        }\n    }\n \
    \   result", "    let mut result = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut prev_vowel = false;\n    let mut prev_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if vowels.contains(&c)\
    \ {\n            if prev_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n            prev_vowel = true;\n        } else\
    \ {\n            if prev_vowel {\n                prev_consonant = true;\n   \
    \         }\n        }\n    }\n    result", "    let mut closest_vowel = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_prev_char = ' ';\n    for c in\
    \ word.chars().rev() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if prev_char != ' ' && prev_prev_char != ' ' {\n\
    \                closest_vowel.push(c);\n                break;\n            }\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    closest_vowel", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ closest_vowel = String::new();\n    let mut closest_vowel_index = 0;\n    let\
    \ mut closest_vowel_distance = 0;\n    let mut prev_char = ' ';\n    let mut prev_char_index\
    \ = 0;\n    for (index, character) in word.chars().enumerate() {\n        if vowels.contains(&character)\
    \ {\n            if prev_char != ' ' && prev_char_index != 0 {\n             \
    \   let distance = index - prev_char_index;\n                if closest_vowel_distance\
    \ == 0 || distance < closest_vowel_distance {\n                    closest_vowel_distance\
    \ = distance;\n                    closest_vowel_index = index;\n            \
    \    }\n            }\n        } else {\n            prev_char = character;\n\
    \            prev_char_index = index;\n        }\n    }\n    if closest_vowel_index\
    \ != 0 {\n        closest_vowel.push(word.chars().nth(closest_vowel_index).unwrap());\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ vowel_found = false;\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let\
    \ mut vowel_index_list = Vec::new();\n    let mut consonant_index_list = Vec::new();\n\
    \    let mut word_chars: Vec<char> = word.chars().collect();\n    for (index,\
    \ character) in word_chars.iter().enumerate() {\n        if is_vowel(character)\
    \ {\n            vowel_count += 1;\n            vowel_index = index;\n       \
    \     vowel_index_list.push(vowel_index);\n        } else {\n            consonant_count\
    \ += 1;\n            consonant_index = index;\n            consonant_index_list.push(consonant_index);\n\
    \        }\n    }\n    if vowel_count == 0 || consonant_count == 0 {\n       \
    \ return result;\n    }\n    if vowel_count == 1 && consonant_count == 1 {\n \
    \       return result;\n    }\n    if vowel_count == 1 && consonant_count > 1\
    \ {\n        vowel_index = vowel_index_list[0];\n        for index in consonant_index_list\
    \ {\n            if vowel_index > index {\n                result = word_chars[vowel_index].to_string();\n\
    \                vowel_found = true;\n                break;\n            }\n\
    \        }\n        if !vowel_found {\n            result = word_chars[vowel_index].to_string();\n\
    \        }\n        return result;\n    }\n    if vowel_count > 1 && consonant_count\
    \ == 1 {\n        consonant_index = consonant_index_list[0];\n        for index\
    \ in vowel_index_list {\n            if consonant_index < index {\n          \
    \      result = word_chars[index].to_string();\n                vowel_found =\
    \ true;\n                break;\n            }\n        }\n        if !vowel_found\
    \ {\n            result = word_chars[vowel_index_list["]
stop_tokens:
- "\n}"
