language: rs
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut j = 0;\n  \
    \  while j < primes.len() {\n        let mut k = j + 1;\n        while k < primes.len()\
    \ {\n            let mut l = k + 1;\n            while l < primes.len() {\n  \
    \              if primes[j] * primes[k] * primes[l] == a {\n                 \
    \   return true;\n                }\n                l += 1;\n            }\n\
    \            k += 1;\n        }\n        j += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp_bx4gcnt.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqg21j4q4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqg21j4q4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n    }\n    for i in primes.iter() {\n        if\
    \ a % i == 0 {\n            a /= i;\n        }\n    }\n    a == 1\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpkln4c4c3.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_factors = Vec::new();\n\
    \    let mut i = 2;\n    let mut n = a;\n    while i <= n {\n        if n % i\
    \ == 0 {\n            prime_factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    prime_factors.len() == 3\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ a > 1 {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n\
    \            a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpkdv659vq.rs:9:9\n\
    \  |\n9 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpkdv659vq.rs:15:13\n   |\n8  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n15 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for i in 0..prime_numbers.len() {\n        for j in i..prime_numbers.len()\
    \ {\n            for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5oj7my83.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes: Vec<isize> = vec![];\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpprvfgz60.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i\
    \ == 0 {\n            primes.push(i);\n            a /= i;\n        }\n      \
    \  i += 1;\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsu78qj5g.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = true;\n\
    \    let mut i = 2;\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n        i += 1;\n    }\n    if is_prime\
    \ {\n        return true;\n    }\n    let mut i = 2;\n    while i < a {\n    \
    \    if a % i == 0 {\n            if is_multiply_prime(i) && is_multiply_prime(a\
    \ / i) {\n                return true;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyet1piv3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = true;\n\
    \    let mut prime_numbers = vec![];\n    for i in 2..a {\n        for j in 2..i\
    \ {\n            if i % j == 0 {\n                is_prime = false;\n        \
    \        break;\n            }\n        }\n        if is_prime {\n           \
    \ prime_numbers.push(i);\n        }\n        is_prime = true;\n    }\n    let\
    \ mut is_multiply_prime = false;\n    for i in 0..prime_numbers.len() {\n    \
    \    for j in 0..prime_numbers.len() {\n            for k in 0..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true;\n                }\n \
    \           }\n        }\n    }\n    is_multiply_prime\n}\n\nfn main() {\n   \
    \ let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n \
    \   assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n  \
    \  assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_factors: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    let mut a = a;\n    while i <= a {\n\
    \        if a % i == 0 {\n            prime_factors.push(i);\n            a /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    prime_factors.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i <= a {\n      \
    \  if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    let mut j = 0;\n    while j < primes.len() {\n        let mut k =\
    \ j + 1;\n        while k < primes.len() {\n            let mut l = k + 1;\n \
    \           while l < primes.len() {\n                if primes[j] * primes[k]\
    \ * primes[l] == a {\n                    result = true;\n                }\n\
    \                l += 1;\n            }\n            k += 1;\n        }\n    \
    \    j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp8h8xboiy.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n\
    \            a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if result.len() == 3 {\n        return true;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpanagp5qu.rs:9:9\n\
    \  |\n9 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpanagp5qu.rs:15:13\n   |\n8  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n15 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let prime = primes[i];\n        if a % prime ==\
    \ 0 {\n            let mut b = a / prime;\n            let mut j = 0;\n      \
    \      while j < primes.len() {\n                let prime = primes[j];\n    \
    \            if b % prime == 0 {\n                    let c = b / prime;\n   \
    \                 if primes.contains(&c) {\n                        result = true;\n\
    \                        break;\n                    }\n                }\n  \
    \              j += 1;\n            }\n        }\n        i += 1;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                }\n                k += 1;\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpttq33953.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut num = a;\n    let\
    \ mut count = 0;\n    let mut result = false;\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            if num % i == 0 {\n                num = num / i;\n\
    \                count += 1;\n            }\n        }\n        if count == 3\
    \ {\n            result = true;\n            break;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpuvxzqd3s.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                }\n                k += 1;\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqjsl9ftn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in 0..primes.len() {\n            for k in 0..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmptjb_yeai.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            let b = a /\
    \ primes[i];\n            let mut j = 0;\n            while j < primes.len() {\n\
    \                if b % primes[j] == 0 {\n                    let c = b / primes[j];\n\
    \                    let mut k = 0;\n                    while k < primes.len()\
    \ {\n                        if c % primes[k] == 0 {\n                       \
    \     result = true;\n                            break;\n                   \
    \     }\n                        k += 1;\n                    }\n            \
    \        break;\n                }\n                j += 1;\n            }\n \
    \           break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptrtrpfoq.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i < a {\n       \
    \ if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    for i in primes.iter() {\n        for j in primes.iter() {\n     \
    \       for k in primes.iter() {\n                if i * j * k == a {\n      \
    \              result = true;\n                }\n            }\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp3jz_acan.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: -1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    while a > 1 {\n        for i in 2..a {\n            if\
    \ a % i == 0 {\n                primes.push(i);\n                a /= i;\n   \
    \             break;\n            }\n        }\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010281
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes: Vec<isize> = Vec::new();\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpw14tff2c.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i;\n        while j < primes.len() {\n\
    \            let mut k = j;\n            while k < primes.len() {\n          \
    \      if a == primes[i] * primes[j] * primes[k] {\n                    result\
    \ = true;\n                }\n                k += 1;\n            }\n       \
    \     j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len()\
    \ {\n            for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplicw7lrw.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ a > 1 {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n\
    \            a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpkdv659vq.rs:9:9\n\
    \  |\n9 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpkdv659vq.rs:15:13\n   |\n8  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n15 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if is_prime(i)\
    \ {\n            while a % i == 0 {\n                primes.push(i);\n       \
    \         a /= i;\n            }\n        }\n        i += 1;\n    }\n    primes.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpt4ygpc0c.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = Vec::new();\n\
    \    let mut is_prime = true;\n    for i in 2..a {\n        for j in 2..i {\n\
    \            if i % j == 0 {\n                is_prime = false;\n            \
    \    break;\n            }\n        }\n        if is_prime {\n            prime_numbers.push(i);\n\
    \        }\n        is_prime = true;\n    }\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a <= 0 {\n        return\
    \ false;\n    }\n    let mut a = a;\n    let mut count = 0;\n    for i in 2..a\
    \ {\n        if a % i == 0 && is_prime(i) {\n            a /= i;\n           \
    \ count += 1;\n        }\n        if count == 3 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwqgieh08.rs:15:26\n\
    \   |\n15 |         if a % i == 0 && is_prime(i) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    let mut count = 0;\n    for i in\
    \ primes {\n        if a % i == 0 {\n            a /= i;\n            count +=\
    \ 1;\n        }\n        if count == 3 {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpodzxnx70.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i <= a {\n      \
    \  if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n \
    \           for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpx2avi_wg.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i < a {\n       \
    \ if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n \
    \           for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp01sf646g.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsu78qj5g.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut n = a;\n    let mut i = 2;\n    while\
    \ n > 1 {\n        if n % i == 0 {\n            primes.push(i);\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if primes.len()\
    \ == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while i < a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    let mut\
    \ j = 0;\n    while j < primes.len() {\n        let mut k = j + 1;\n        while\
    \ k < primes.len() {\n            let mut l = k + 1;\n            while l < primes.len()\
    \ {\n                if primes[j] * primes[k] * primes[l] == a {\n           \
    \         return true;\n                }\n                l += 1;\n         \
    \   }\n            k += 1;\n        }\n        j += 1;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpelsodcuz.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut i = 2;\n    let mut\
    \ a = a;\n    let mut primes = Vec::new();\n    while i <= a {\n        if a %\
    \ i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                }\n                k += 1;\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqjsl9ftn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let mut result\
    \ = false;\n    for i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len()\
    \ {\n            for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpa6kbprep.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while primes.len() < 3 {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n   \
    \ }\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    while i <\
    \ primes.len() {\n        while j < primes.len() {\n            while k < primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true;\n                }\n                k += 1;\n         \
    \   }\n            j += 1;\n        }\n        i += 1;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpghoxtnoz.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut i = 2;\n    let mut\
    \ a = a;\n    let mut result = 1;\n    while i <= a {\n        if a % i == 0 {\n\
    \            result *= i;\n            a /= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    result == a\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpar0amdy4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqg21j4q4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    for i in 2..a {\n        if a % i == 0 {\n            result = is_prime(i)\
    \ && is_prime(a / i);\n            if result {\n                break;\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpo9lbpblm.rs:12:22\n\
    \   |\n12 |             result = is_prime(i) && is_prime(a / i);\n   |       \
    \               ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_prime` in this scope\n  --> /tmp/tmpo9lbpblm.rs:12:37\n   |\n12\
    \ |             result = is_prime(i) && is_prime(a / i);\n   |               \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ count = 0;\n    for i in 2..a {\n        if a % i == 0 {\n            a = a\
    \ / i;\n            count += 1;\n        }\n        if count == 3 {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8tv3a2mo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i <= a\
    \ {\n        while j <= a {\n            while k <= a {\n                if i\
    \ * j * k == a {\n                    result = true;\n                }\n    \
    \            k += 1;\n            }\n            j += 1;\n        }\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp8p4zibf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        while a\
    \ % i == 0 {\n            primes.push(i);\n            a /= i;\n        }\n  \
    \      i += 1;\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            result.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    let mut\
    \ j = 0;\n    while j < primes.len() {\n        let mut k = j + 1;\n        while\
    \ k < primes.len() {\n            let mut l = k + 1;\n            while l < primes.len()\
    \ {\n                if primes[j] * primes[k] * primes[l] == a {\n           \
    \         return true;\n                }\n                l += 1;\n         \
    \   }\n            k += 1;\n        }\n        j += 1;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmph4uu98e8.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            a /= i;\n            primes.push(i);\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len() {\n\
    \        for j in 0..primes.len() {\n            for k in 0..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i\
    \ == 0 {\n            primes.push(i);\n            a /= i;\n        }\n      \
    \  i += 1;\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    for i in 2..a {\n        if a % i == 0 {\n            let mut b = a / i;\n\
    \            for j in 2..b {\n                if b % j == 0 {\n              \
    \      let mut c = b / j;\n                    for k in 2..c {\n             \
    \           if c % k == 0 {\n                            result = false;\n   \
    \                     } else {\n                            result = true;\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph_17l16u.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpykarjmw7.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    for i in prime_numbers.iter()\
    \ {\n        for j in prime_numbers.iter() {\n            for k in prime_numbers.iter()\
    \ {\n                if i * j * k == a {\n                    return true;\n \
    \               }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp3tgwd1vt.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i\
    \ == 0 {\n            primes.push(i);\n            a /= i;\n        }\n      \
    \  i += 1;\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            a /= i;\n            primes.push(i);\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            result.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut i = 0;\n    let mut result = 1;\n    while i <\
    \ primes.len() {\n        if a % primes[i] == 0 {\n            result *= primes[i];\n\
    \        }\n        if result == a {\n            return true;\n        }\n  \
    \      i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpak8nghvu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            result.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    result.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = Vec::new();\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpxx3f5dpn.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7srkjfpi.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut i = 2;\n    let mut\
    \ result = 1;\n    while i <= a {\n        if a % i == 0 {\n            result\
    \ *= i;\n            a /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result == a\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmptcjvqjo1.rs:14:13\n\
    \   |\n8  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n14 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ count = 0;\n    let mut result = true;\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            if a % i == 0 {\n                a = a / i;\n               \
    \ count += 1;\n            }\n        }\n        if count == 3 {\n           \
    \ break;\n        }\n    }\n    if count != 3 {\n        result = false;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmprushzmnq.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            result = true;\n\
    \            break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvraux0is.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = 1;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            a /= i;\n            result *= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    result == a\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_arv46f7.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = Vec::new();\n\
    \    let mut is_prime = true;\n    let mut i = 2;\n    while i <= a {\n      \
    \  for j in 2..i {\n            if i % j == 0 {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if is_prime {\n   \
    \         prime_numbers.push(i);\n        }\n        is_prime = true;\n      \
    \  i += 1;\n    }\n    let mut is_multiply_prime = false;\n    let mut i = 0;\n\
    \    while i < prime_numbers.len() {\n        let mut j = i + 1;\n        while\
    \ j < prime_numbers.len() {\n            let mut k = j + 1;\n            while\
    \ k < prime_numbers.len() {\n                if a == prime_numbers[i] * prime_numbers[j]\
    \ * prime_numbers[k] {\n                    is_multiply_prime = true;\n      \
    \              break;\n                }\n                k += 1;\n          \
    \  }\n            j += 1;\n        }\n        i += 1;\n    }\n    is_multiply_prime\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8smi3m8a.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < a {\n\
    \        while j < a {\n            while k < a {\n                if i * j *\
    \ k == a {\n                    result = true;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv4u3mmy3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplg_rr05n.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpykarjmw7.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut n = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while n > 1 {\n        if n %\
    \ i == 0 {\n            primes.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                }\n                k += 1;\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsa4c2x4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7srkjfpi.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                }\n                k += 1;\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpttq33953.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < 100\
    \ {\n        while j < 100 {\n            while k < 100 {\n                if\
    \ i * j * k == a {\n                    result = true;\n                }\n  \
    \              k += 1;\n            }\n            j += 1;\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz8l3_api.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            let b = a /\
    \ primes[i];\n            let mut j = 0;\n            while j < primes.len() {\n\
    \                if b % primes[j] == 0 {\n                    let c = b / primes[j];\n\
    \                    let mut k = 0;\n                    while k < primes.len()\
    \ {\n                        if c % primes[k] == 0 {\n                       \
    \     result = true;\n                            break;\n                   \
    \     }\n                        k += 1;\n                    }\n            \
    \        break;\n                }\n                j += 1;\n            }\n \
    \           break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptrtrpfoq.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let mut result\
    \ = false;\n    for i in 0..prime_numbers.len() {\n        for j in i..prime_numbers.len()\
    \ {\n            for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpez9vdi31.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if a == primes[i] * primes[j] * primes[k] {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7srkjfpi.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if a %\
    \ i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    for i in 2..a {\n        if a % i == 0 {\n           \
    \ if primes.contains(&i) {\n                primes.remove_item(&i);\n        \
    \    }\n        }\n    }\n    primes.is_empty()\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp23tp91fq.rs:13:24\n   |\n13 |          \
    \       primes.remove_item(&i);\n   |                        ^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `remove`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a != 1 {\n        if a %\
    \ i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = true;\n\
    \    let mut i = 2;\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n        i += 1;\n    }\n    is_prime\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphpnwfg_f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            let mut b =\
    \ a / primes[i];\n            let mut j = 0;\n            while j < primes.len()\
    \ {\n                if b % primes[j] == 0 {\n                    let c = b /\
    \ primes[j];\n                    if primes.contains(&c) {\n                 \
    \       result = true;\n                        break;\n                    }\n\
    \                }\n                j += 1;\n            }\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    for i in 2..a {\n        if a % i == 0 {\n            let mut j = a / i;\n\
    \            for k in 2..j {\n                if j % k == 0 {\n              \
    \      j = j / k;\n                    if is_prime(j) {\n                    \
    \    result = true;\n                    }\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4lge63yn.rs:16:24\n\
    \   |\n16 |                     if is_prime(j) {\n   |                       \
    \ ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in 0..primes.len() {\n            for k in 0..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmptjb_yeai.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n          \
    \  while a % i == 0 {\n                a /= i;\n                primes.push(i);\n\
    \            }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpj9kqkmju.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        while a\
    \ % i == 0 {\n            primes.push(i);\n            a /= i;\n        }\n  \
    \      i += 1;\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = true;\n\
    \    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    let mut a_copy\
    \ = a;\n    while i < a_copy {\n        if a_copy % i == 0 {\n            a_copy\
    \ = a_copy / i;\n            j = i;\n            while j < a_copy {\n        \
    \        if a_copy % j == 0 {\n                    a_copy = a_copy / j;\n    \
    \                k = j;\n                    while k < a_copy {\n            \
    \            if a_copy % k == 0 {\n                            is_prime = false;\n\
    \                            break;\n                        }\n             \
    \           k += 1;\n                    }\n                    break;\n     \
    \           }\n                j += 1;\n            }\n            break;\n  \
    \      }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2jzs246s.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = Vec::new();\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpoaz7scok.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut j = 0;\n   \
    \ while j < primes.len() {\n        let mut k = j + 1;\n        while k < primes.len()\
    \ {\n            let mut l = k + 1;\n            while l < primes.len() {\n  \
    \              if primes[j] * primes[k] * primes[l] == a {\n                 \
    \   return true;\n                }\n                l += 1;\n            }\n\
    \            k += 1;\n        }\n        j += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmph184_wl2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        let mut j = i + 1;\n        while j < primes.len()\
    \ {\n            let mut k = j + 1;\n            while k < primes.len() {\n  \
    \              if primes[i] * primes[j] * primes[k] == a {\n                 \
    \   result = true;\n                    break;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqg21j4q4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while i < a {\n        if is_prime(i)\
    \ {\n            prime_numbers.push(i);\n        }\n        i += 1;\n    }\n \
    \   let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    while j < prime_numbers.len()\
    \ {\n        while k < prime_numbers.len() {\n            while l < prime_numbers.len()\
    \ {\n                if prime_numbers[j] * prime_numbers[k] * prime_numbers[l]\
    \ == a {\n                    return true;\n                }\n              \
    \  l += 1;\n            }\n            k += 1;\n        }\n        j += 1;\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmph96b76sg.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = Vec::new();\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpzkfk3ac5.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n          \
    \  while a % i == 0 {\n                a /= i;\n                primes.push(i);\n\
    \            }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpj9kqkmju.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i <= a {\n      \
    \  if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n \
    \           for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpx2avi_wg.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ a > 1 {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n\
    \            a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpkdv659vq.rs:9:9\n\
    \  |\n9 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpkdv659vq.rs:15:13\n   |\n8  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n15 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpkm2jr4c2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < prime_numbers.len() {\n        if a % prime_numbers[i] == 0 {\n        \
    \    result = true;\n            break;\n        }\n        i += 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc4j7mwo7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: -1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    while a > 1 {\n        for i in 2..a {\n            if\
    \ a % i == 0 {\n                primes.push(i);\n                a /= i;\n   \
    \             break;\n            }\n        }\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes: Vec<isize> = Vec::new();\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpw14tff2c.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n    }\n    for i in primes.iter() {\n        if\
    \ a % i == 0 {\n            a /= i;\n        }\n    }\n    if a == 1 {\n     \
    \   return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmmizqluq.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpadzz8y4q.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = true;\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i\
    \ = 0;\n    while a != 1 && i < primes.len() {\n        if a % primes[i] == 0\
    \ {\n            a /= primes[i];\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    if a != 1 {\n        result = false;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo2jwnhk8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n          \
    \  if a % i == 0 {\n                primes.push(i);\n                a = a / i;\n\
    \            }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp64tugy1j.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n\
    \            primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n\
    \        for j in i..primes.len() {\n            for k in j..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubgimzz6.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut j = 0;\n   \
    \ while j < primes.len() {\n        let mut k = j + 1;\n        while k < primes.len()\
    \ {\n            let mut l = k + 1;\n            while l < primes.len() {\n  \
    \              if primes[j] * primes[k] * primes[l] == a {\n                 \
    \   return true;\n                }\n                l += 1;\n            }\n\
    \            k += 1;\n        }\n        j += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmph184_wl2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let mut result\
    \ = false;\n    for i in 0..prime_numbers.len() {\n        for j in i..prime_numbers.len()\
    \ {\n            for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp0eipg82z.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ result = 1;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            result *= i;\n            a /= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    result == a\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqxtjdxem.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < a {\n\
    \        while j < a {\n            while k < a {\n                if i * j *\
    \ k == a {\n                    result = true;\n                }\n          \
    \      k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv4u3mmy3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while primes.len() < 3\
    \ {\n        if is_prime(i) {\n            primes.push(i);\n        }\n      \
    \  i += 1;\n    }\n    let mut j = 0;\n    while j < primes.len() {\n        let\
    \ mut k = j + 1;\n        while k < primes.len() {\n            let mut l = k\
    \ + 1;\n            while l < primes.len() {\n                if a == primes[j]\
    \ * primes[k] * primes[l] {\n                    result = true;\n            \
    \    }\n                l += 1;\n            }\n            k += 1;\n        }\n\
    \        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpr5wjuiuj.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpkm2jr4c2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len() {\n\
    \        for j in 0..primes.len() {\n            for k in 0..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    let mut\
    \ result = false;\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyvn41bzt.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n\
    \    let mut primes = vec![];\n    let mut i = 2;\n    while i < a {\n       \
    \ if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n \
    \           for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp01sf646g.rs:13:12\n\
    \   |\n13 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            a /= i;\n            primes.push(i);\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in 0..primes.len()\
    \ {\n            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplgrz0u_k.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpkm2jr4c2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = Vec::new();\n    let mut d = Vec::new();\n    let mut e = Vec::new();\n\
    \    let mut f = Vec::new();\n    let mut g = Vec::new();\n    let mut h = Vec::new();\n\
    \    let mut i = Vec::new();\n    let mut j = Vec::new();\n    let mut k = Vec::new();\n\
    \    let mut l = Vec::new();\n    let mut m = Vec::new();\n    let mut n = Vec::new();\n\
    \    let mut o = Vec::new();\n    let mut p = Vec::new();\n    let mut q = Vec::new();\n\
    \    let mut r = Vec::new();\n    let mut s = Vec::new();\n    let mut t = Vec::new();\n\
    \    let mut u = Vec::new();\n    let mut v = Vec::new();\n    let mut w = Vec::new();\n\
    \    let mut x = Vec::new();\n    let mut y = Vec::new();\n    let mut z = Vec::new();\n\
    \    let mut aa = Vec::new();\n    let mut ab = Vec::new();\n    let mut ac =\
    \ Vec::new();\n    let mut ad = Vec::new();\n    let mut ae = Vec::new();\n  \
    \  let mut af = Vec::new();\n    let mut ag = Vec::new();\n    let mut ah = Vec::new();\n\
    \    let mut ai = Vec::new();\n    let mut aj = Vec::new();\n    let mut ak =\
    \ Vec::new();\n    let mut al = Vec::new();\n    let mut am = Vec::new();\n  \
    \  let mut an = Vec::new();\n    let mut ao = Vec::new();\n    let mut ap = Vec::new();\n\
    \    let mut aq = Vec::new();\n    let mut ar = Vec::new();\n    let mut as_ =\
    \ Vec::new();\n    let mut at = Vec::new();\n    let mut au = Vec::new();\n  \
    \  let mut av = Vec::new();\n    let mut aw = Vec::new();\n    let mut ax = Vec::new();\n\
    \    let mut ay = Vec::new();\n    let mut az = Vec\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfd9w8pje.rs:59:21\n   |\n\
    59 |     let mut az = Vec\n   |                     ^ help: add `;` here\n60 |\
    \ }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n\
    \   --> /tmp/tmpfd9w8pje.rs:59:18\n    |\n59  |       let mut az = Vec\n    |\
    \                    ^^^ help: use struct literal syntax instead: `Vec { buf:\
    \ val, len: val }`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfd9w8pje.rs:8:35\n\
    \  |\n8 | fn is_multiply_prime(a: isize) -> bool {\n  |    ----------------- \
    \             ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a == 1 {\n        return\
    \ false;\n    }\n    let mut primes = vec![];\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmptev2he8d.rs:14:12\n\
    \   |\n14 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < primes.len() {\n        if a % primes[i] == 0 {\n            result = true;\n\
    \            let mut tmp = a / primes[i];\n            let mut j = 0;\n      \
    \      while j < primes.len() {\n                if tmp % primes[j] == 0 {\n \
    \                   tmp = tmp / primes[j];\n                    j = 0;\n     \
    \           } else {\n                    j += 1;\n                }\n       \
    \     }\n            if tmp == 1 {\n                break;\n            }\n  \
    \      }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3756ia9h.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpkm2jr4c2.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut\
    \ c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let\
    \ mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5m9n67s.rs:8:35\n  |\n8 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp6g5e3a_7.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsu78qj5g.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in 0..primes.len() {\n            for k in 0..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010276
