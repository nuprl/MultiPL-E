name: HumanEval_62_derivative
language: rs
prompt: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n///\
  \ >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
  \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = Vec::new();\n    for i in 1..xs.len() {\n    \
    \    result.push(xs[i] * i as isize);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(x *\
    \ i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i]\
    \ * i as isize);\n    }\n    res", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = vec![];\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = vec![];\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result"]
stop_tokens:
- "\n}"
