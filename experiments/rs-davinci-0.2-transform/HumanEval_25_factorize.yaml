name: HumanEval_25_factorize
language: rs
prompt: "/// Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>>\
  \ factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut n = n;\n    let mut factors = Vec::new();\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut n = n;\n    let mut result = Vec::new();\n    let mut i = 2;\n    while\
    \ i * i <= n {\n        while n % i == 0 {\n            result.push(i);\n    \
    \        n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n        result.push(n);\n\
    \    }\n    result", "    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while\
    \ n > 1 {\n        while n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n        }\n        i += 1;\n    }\n    factors", "    let mut n\
    \ = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while i <=\
    \ n {\n        if n % i == 0 {\n            factors.push(i);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    factors", " \
    \   let mut n = n;\n    let mut result = Vec::new();\n    let mut i = 2;\n   \
    \ while i * i <= n {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    result.push(n);\n    }\n    result", "    let mut n = n;\n    let mut factors\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n % i == 0\
    \ {\n            factors.push(i);\n            n /= i;\n        } else {\n   \
    \         i += 1;\n        }\n    }\n    factors", "    let mut n = n;\n    let\
    \ mut factors = Vec::new();\n    let mut divisor = 2;\n    while n > 1 {\n   \
    \     while n % divisor == 0 {\n            factors.push(divisor);\n         \
    \   n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors", "  \
    \  let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n   \
    \ while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n    \
    \        n /= i;\n        } else {\n            i += 1;\n        }\n    }\n  \
    \  factors", "    let mut n = n;\n    let mut factors = Vec::new();\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut n = n;\n    let mut factors = Vec::new();\n    let\
    \ mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut n = n;\n    let mut factors = Vec::new();\n    let\
    \ mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n    \
    \        factors.push(divisor);\n            n /= divisor;\n        }\n      \
    \  divisor += 1;\n    }\n    factors", "    let mut n = n;\n    let mut factors\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        while n %\
    \ i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n   \
    \     i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors",
  "    let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n   \
    \ while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n    \
    \        n /= i;\n        } else {\n            i += 1;\n        }\n    }\n  \
    \  factors", "    let mut n = n;\n    let mut factors = Vec::new();\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut n = n;\n    let mut factors = Vec::new();\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors", "    let mut n\
    \ = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while i <=\
    \ n {\n        if n % i == 0 {\n            factors.push(i);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n  \
    \  while n > 1 {\n        while n % i == 0 {\n            factors.push(i);\n \
    \           n /= i;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            factors.push(i);\n          \
    \  n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors"]
stop_tokens:
- "\n}"
