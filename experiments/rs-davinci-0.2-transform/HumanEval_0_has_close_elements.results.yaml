language: rs
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted = numbers.clone();\n    sorted.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n    for i in 0..sorted.len() - 1 {\n        if\
    \ sorted[i + 1] - sorted[i] < threshold {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted = numbers.clone();\n    sorted.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n    for i in 0..sorted.len() - 1 {\n        if\
    \ sorted[i + 1] - sorted[i] < threshold {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() - 1 {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_sorted.len() - 1 {\n\
    \        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted = numbers.clone();\n    sorted.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n    for i in 0..sorted.len() - 1 {\n        if\
    \ sorted[i + 1] - sorted[i] < threshold {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..(sorted_numbers.len() - 1) {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut min_distance = std::f64::MAX;\n    for i in 0..numbers.len()\
    \ {\n        for j in i + 1..numbers.len() {\n            let distance = (numbers[i]\
    \ - numbers[j]).abs();\n            if distance < min_distance {\n           \
    \     min_distance = distance;\n            }\n        }\n    }\n    min_distance\
    \ < threshold\n}\n\nfn main() {\n    let candidate = has_close_elements;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqp7a14lr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 101
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqp7a14lr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let mut i = 0;\n    while i < numbers.len() - 1 {\n        if numbers[i +\
    \ 1] - numbers[i] < threshold {\n            return true;\n        }\n       \
    \ i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_sorted.len() - 1 {\n\
    \        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_sorted.len() - 1 {\n\
    \        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers_sorted.len() - 1 {\n\
    \        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted = numbers.clone();\n    sorted.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n    for i in 0..sorted.len() - 1 {\n        if\
    \ sorted[i + 1] - sorted[i] < threshold {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = has_close_elements;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1,\
    \ 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for i in 0..sorted_numbers.len() - 1 {\n\
    \        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95),\
    \ true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n \
    \   assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len()\
    \ {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0,\
    \ 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64)\
    \ -> bool {\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] <\
    \ threshold {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1],\
    \ 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
