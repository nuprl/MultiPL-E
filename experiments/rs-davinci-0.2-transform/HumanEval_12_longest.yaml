name: HumanEval_12_longest
language: rs
prompt: "/// Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n/// strings of the same length. Return None in case the input\
  \ list is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
  a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n\
  /// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
  ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut longest = None;\n    for s in strings {\n        match\
    \ longest {\n            None => longest = Some(s),\n            Some(ref l) =>\
    \ if s.len() > l.len() {\n                longest = Some(s);\n            },\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for string\
    \ in strings {\n        match longest {\n            None => longest = Some(string),\n\
    \            Some(ref mut l) => {\n                if l.len() < string.len() {\n\
    \                    *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = &strings[0];\n    for s in &strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    Some(longest.clone())",
  '    strings.into_iter().max_by_key(|s| s.len()).cloned()', "    let mut longest\
    \ = None;\n    for string in strings {\n        match longest {\n            None\
    \ => longest = Some(string),\n            Some(ref mut s) => {\n             \
    \   if s.len() < string.len() {\n                    *s = string;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest_string = None;\n    for string in strings {\n        match\
    \ longest_string {\n            None => longest_string = Some(string),\n     \
    \       Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut max_len = 0;\n    let mut\
    \ max_string = None;\n    for s in strings {\n        if s.len() > max_len {\n\
    \            max_len = s.len();\n            max_string = Some(s);\n        }\n\
    \    }\n    max_string", "    let mut longest_string = None;\n    let mut longest_length\
    \ = 0;\n    for string in strings {\n        if string.len() > longest_length\
    \ {\n            longest_length = string.len();\n            longest_string =\
    \ Some(string);\n        }\n    }\n    longest_string", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ string in &strings {\n        if string.len() > longest.len() {\n          \
    \  longest = string;\n        }\n    }\n    Some(longest.clone())", "    let mut\
    \ max_len = 0;\n    let mut max_string = None;\n    for s in strings {\n     \
    \   if s.len() > max_len {\n            max_len = s.len();\n            max_string\
    \ = Some(s);\n        }\n    }\n    max_string", "    let mut longest = None;\n\
    \    for string in strings {\n        match longest {\n            None => longest\
    \ = Some(string),\n            Some(ref mut l) => {\n                if l.len()\
    \ < string.len() {\n                    *l = string;\n                }\n    \
    \        }\n        }\n    }\n    longest", "    let mut longest = None;\n   \
    \ for s in strings {\n        if longest.is_none() || s.len() > longest.as_ref().unwrap().len()\
    \ {\n            longest = Some(s);\n        }\n    }\n    longest", "    let\
    \ mut longest = None;\n    for string in strings {\n        match longest {\n\
    \            None => longest = Some(string),\n            Some(ref mut current)\
    \ => {\n                if string.len() > current.len() {\n                  \
    \  *current = string;\n                }\n            }\n        }\n    }\n  \
    \  longest", "    let mut longest = None;\n    for string in strings {\n     \
    \   match longest {\n            None => longest = Some(string),\n           \
    \ Some(ref mut l) => {\n                if l.len() < string.len() {\n        \
    \            *l = string;\n                }\n            }\n        }\n    }\n\
    \    longest", "    if strings.is_empty() {\n        return None;\n    }\n   \
    \ let mut longest = &strings[0];\n    for string in &strings {\n        if string.len()\
    \ > longest.len() {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest"]
stop_tokens:
- "\n}"
