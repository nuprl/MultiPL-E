name: HumanEval_12_longest
language: rs
prompt: "/// Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n/// strings of the same length. Return None in case the input\
  \ list is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
  a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n\
  /// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
  ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut longest = None;\n    for s in strings {\n        match\
    \ longest {\n            None => longest = Some(s),\n            Some(ref l) =>\
    \ if s.len() > l.len() {\n                longest = Some(s);\n            },\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for string\
    \ in strings {\n        match longest {\n            None => longest = Some(string),\n\
    \            Some(ref mut l) => {\n                if l.len() < string.len() {\n\
    \                    *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = &strings[0];\n    for s in &strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    Some(longest.clone())",
  '    strings.into_iter().max_by_key(|s| s.len()).cloned()', "    let mut longest\
    \ = None;\n    for string in strings {\n        match longest {\n            None\
    \ => longest = Some(string),\n            Some(ref mut s) => {\n             \
    \   if s.len() < string.len() {\n                    *s = string;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest_string = None;\n    for string in strings {\n        match\
    \ longest_string {\n            None => longest_string = Some(string),\n     \
    \       Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut max_len = 0;\n    let mut\
    \ max_string = None;\n    for s in strings {\n        if s.len() > max_len {\n\
    \            max_len = s.len();\n            max_string = Some(s);\n        }\n\
    \    }\n    max_string", "    let mut longest_string = None;\n    let mut longest_length\
    \ = 0;\n    for string in strings {\n        if string.len() > longest_length\
    \ {\n            longest_length = string.len();\n            longest_string =\
    \ Some(string);\n        }\n    }\n    longest_string", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ string in &strings {\n        if string.len() > longest.len() {\n          \
    \  longest = string;\n        }\n    }\n    Some(longest.clone())", "    let mut\
    \ max_len = 0;\n    let mut max_string = None;\n    for s in strings {\n     \
    \   if s.len() > max_len {\n            max_len = s.len();\n            max_string\
    \ = Some(s);\n        }\n    }\n    max_string", "    let mut longest = None;\n\
    \    for string in strings {\n        match longest {\n            None => longest\
    \ = Some(string),\n            Some(ref mut l) => {\n                if l.len()\
    \ < string.len() {\n                    *l = string;\n                }\n    \
    \        }\n        }\n    }\n    longest", "    let mut longest = None;\n   \
    \ for s in strings {\n        if longest.is_none() || s.len() > longest.as_ref().unwrap().len()\
    \ {\n            longest = Some(s);\n        }\n    }\n    longest", "    let\
    \ mut longest = None;\n    for string in strings {\n        match longest {\n\
    \            None => longest = Some(string),\n            Some(ref mut current)\
    \ => {\n                if string.len() > current.len() {\n                  \
    \  *current = string;\n                }\n            }\n        }\n    }\n  \
    \  longest", "    let mut longest = None;\n    for string in strings {\n     \
    \   match longest {\n            None => longest = Some(string),\n           \
    \ Some(ref mut l) => {\n                if l.len() < string.len() {\n        \
    \            *l = string;\n                }\n            }\n        }\n    }\n\
    \    longest", "    if strings.is_empty() {\n        return None;\n    }\n   \
    \ let mut longest = &strings[0];\n    for string in &strings {\n        if string.len()\
    \ > longest.len() {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut l)\
    \ => {\n                if l.len() < string.len() {\n                    *l =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut l)\
    \ => {\n                if l.len() < string.len() {\n                    *l =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut result = None;\n    for s in strings {\n        match result {\n \
    \           None => result = Some(s),\n            Some(r) => {\n            \
    \    if s.len() > r.len() {\n                    result = Some(s);\n         \
    \       }\n            }\n        }\n    }\n    result", '    strings.into_iter().max_by_key(|s|
    s.len()).cloned()', '    strings.into_iter().max_by_key(|s| s.len()).map(|s| s.to_string())',
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for string in &strings {\n        if string.len() > longest.len()\
    \ {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for string\
    \ in strings {\n        match longest {\n            None => longest = Some(string),\n\
    \            Some(ref mut l) => {\n                if l.len() < string.len() {\n\
    \                    *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest_string = None;\n    for string in strings {\n        match\
    \ longest_string {\n            None => longest_string = Some(string),\n     \
    \       Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut longest = None;\n    for\
    \ s in strings {\n        if longest.is_none() || s.len() > longest.as_ref().unwrap().len()\
    \ {\n            longest = Some(s);\n        }\n    }\n    longest", "    let\
    \ mut max_len = 0;\n    let mut max_len_string = None;\n    for string in strings\
    \ {\n        if string.len() > max_len {\n            max_len = string.len();\n\
    \            max_len_string = Some(string);\n        }\n    }\n    max_len_string",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ s in &strings {\n        if s.len() > longest.len() {\n            longest =\
    \ s;\n        }\n    }\n    Some(longest.clone())", "    let mut max_len = 0;\n\
    \    let mut max_str = None;\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n            max_str = Some(s);\n        }\n\
    \    }\n    max_str", "    let mut longest_string = None;\n    for string in strings\
    \ {\n        match longest_string {\n            None => longest_string = Some(string),\n\
    \            Some(ref mut l) => {\n                if l.len() < string.len() {\n\
    \                    *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest_string", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut l)\
    \ => {\n                if l.len() < string.len() {\n                    *l =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut longest_string)\
    \ => {\n                if string.len() > longest_string.len() {\n           \
    \         *longest_string = string;\n                }\n            }\n      \
    \  }\n    }\n    longest", "    if strings.is_empty() {\n        return None;\n\
    \    }\n    let mut longest = strings[0].clone();\n    for string in strings {\n\
    \        if string.len() > longest.len() {\n            longest = string;\n  \
    \      }\n    }\n    Some(longest)", "    if strings.is_empty() {\n        return\
    \ None;\n    }\n    let mut longest = strings[0].clone();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    Some(longest)", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest_string = None;\n    for\
    \ string in strings {\n        match longest_string {\n            None => longest_string\
    \ = Some(string),\n            Some(ref mut longest) => {\n                if\
    \ string.len() > longest.len() {\n                    *longest = string;\n   \
    \             }\n            }\n        }\n    }\n    longest_string", "    let\
    \ mut longest = None;\n    for s in strings {\n        match longest {\n     \
    \       None => longest = Some(s),\n            Some(ref mut l) => {\n       \
    \         if s.len() > l.len() {\n                    *l = s;\n              \
    \  }\n            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", '    strings.into_iter().max_by_key(|s| s.len()).cloned()',
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for string in strings {\n        match longest {\n            None\
    \ => longest = Some(string),\n            Some(ref mut s) => {\n             \
    \   if s.len() < string.len() {\n                    *s = string;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for string in &strings {\n        if string.len() > longest.len()\
    \ {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut result = None;\n    for s in strings {\n        match result {\n  \
    \          None => result = Some(s),\n            Some(r) => {\n             \
    \   if s.len() > r.len() {\n                    result = Some(s);\n          \
    \      }\n            }\n        }\n    }\n    result", "    let mut max_length\
    \ = 0;\n    let mut max_string = None;\n    for s in strings {\n        if s.len()\
    \ > max_length {\n            max_length = s.len();\n            max_string =\
    \ Some(s);\n        }\n    }\n    max_string", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ string in &strings {\n        if string.len() > longest.len() {\n          \
    \  longest = string;\n        }\n    }\n    Some(longest.clone())", "    let mut\
    \ longest = None;\n    for s in strings {\n        match longest {\n         \
    \   None => longest = Some(s),\n            Some(ref mut l) => {\n           \
    \     if s.len() > l.len() {\n                    *l = s;\n                }\n\
    \            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref l) => if s.len() > l.len() {\n            \
    \    longest = Some(s);\n            },\n        }\n    }\n    longest", "   \
    \ let mut longest = None;\n    for s in strings {\n        match longest {\n \
    \           None => longest = Some(s),\n            Some(ref mut l) => {\n   \
    \             if s.len() > l.len() {\n                    *l = s;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref l) => if s.len() > l.len() {\n    \
    \            longest = Some(s);\n            },\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut s)\
    \ => {\n                if s.len() < string.len() {\n                    *s =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        if longest.is_none() || s.len() > longest.as_ref().unwrap().len()\
    \ {\n            longest = Some(s);\n        }\n    }\n    longest", "    let\
    \ mut longest = None;\n    for s in strings {\n        match longest {\n     \
    \       None => longest = Some(s),\n            Some(ref mut l) => {\n       \
    \         if s.len() > l.len() {\n                    *l = s;\n              \
    \  }\n            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref l) => {\n                if s.len() > l.len()\
    \ {\n                    longest = Some(s);\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for string\
    \ in strings {\n        match longest {\n            None => longest = Some(string),\n\
    \            Some(ref mut s) => {\n                if s.len() < string.len() {\n\
    \                    *s = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        longest = match longest {\n       \
    \     None => Some(s),\n            Some(ref l) => {\n                if s.len()\
    \ > l.len() {\n                    Some(s)\n                } else {\n       \
    \             Some(l.clone())\n                }\n            }\n        }\n \
    \   }\n    longest", "    let mut longest = None;\n    for string in strings {\n\
    \        match longest {\n            None => longest = Some(string),\n      \
    \      Some(ref mut l) => {\n                if l.len() < string.len() {\n   \
    \                 *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref l) => if s.len() > l.len() {\n    \
    \            longest = Some(s);\n            },\n        }\n    }\n    longest",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for s in &strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n    Some(longest.clone())", "   \
    \ let mut longest = None;\n    for s in strings {\n        match longest {\n \
    \           None => longest = Some(s),\n            Some(ref mut l) => {\n   \
    \             if s.len() > l.len() {\n                    *l = s;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for string in strings {\n        longest = match longest {\n  \
    \          None => Some(string),\n            Some(ref mut longest) => {\n   \
    \             if string.len() > longest.len() {\n                    *longest\
    \ = string;\n                }\n                Some(longest.clone())\n      \
    \      }\n        }\n    }\n    longest", "    let mut longest = None;\n    for\
    \ s in strings {\n        match longest {\n            None => longest = Some(s),\n\
    \            Some(ref mut l) => {\n                if s.len() > l.len() {\n  \
    \                  *l = s;\n                }\n            }\n        }\n    }\n\
    \    longest", "    let mut longest = None;\n    for s in strings {\n        if\
    \ longest.is_none() || s.len() > longest.as_ref().unwrap().len() {\n         \
    \   longest = Some(s);\n        }\n    }\n    longest", "    let mut longest =\
    \ None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref l) => {\n                if s.len() > l.len() {\n             \
    \       longest = Some(s);\n                }\n            }\n        }\n    }\n\
    \    longest", "    let mut max_len = 0;\n    let mut max_string = None;\n   \
    \ for s in strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \            max_string = Some(s);\n        }\n    }\n    max_string", "    let\
    \ mut longest = None;\n    for s in strings {\n        match longest {\n     \
    \       None => longest = Some(s),\n            Some(ref mut l) => {\n       \
    \         if s.len() > l.len() {\n                    *l = s;\n              \
    \  }\n            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ l) => {\n                if s.len() > l.len() {\n                    longest\
    \ = Some(s);\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest_string = None;\n    for string in strings {\n        match\
    \ longest_string {\n            None => longest_string = Some(string),\n     \
    \       Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut longest_string = None;\n\
    \    for s in strings {\n        match longest_string {\n            None => longest_string\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest_string", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest_string\
    \ = None;\n    for string in strings {\n        match longest_string {\n     \
    \       None => longest_string = Some(string),\n            Some(ref mut longest)\
    \ => {\n                if string.len() > longest.len() {\n                  \
    \  *longest = string;\n                }\n            }\n        }\n    }\n  \
    \  longest_string", "    let mut longest = None;\n    for s in strings {\n   \
    \     match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        if longest.is_none() || s.len() > longest.as_ref().unwrap().len()\
    \ {\n            longest = Some(s);\n        }\n    }\n    longest", "    let\
    \ mut longest = None;\n    for string in strings {\n        match longest {\n\
    \            None => longest = Some(string),\n            Some(ref mut longest_string)\
    \ => {\n                if string.len() > longest_string.len() {\n           \
    \         *longest_string = string;\n                }\n            }\n      \
    \  }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest_string = None;\n    for s in strings {\n        match longest_string\
    \ {\n            None => longest_string = Some(s),\n            Some(ref mut s_longest)\
    \ => {\n                if s.len() > s_longest.len() {\n                    *s_longest\
    \ = s;\n                }\n            }\n        }\n    }\n    longest_string",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut longest_string)\
    \ => {\n                if string.len() > longest_string.len() {\n           \
    \         *longest_string = string;\n                }\n            }\n      \
    \  }\n    }\n    longest", "    let mut longest = None;\n    for string in strings\
    \ {\n        if let Some(ref mut l) = longest {\n            if string.len() >\
    \ l.len() {\n                *l = string;\n            }\n        } else {\n \
    \           longest = Some(string);\n        }\n    }\n    longest", '    strings.into_iter().max_by_key(|s|
    s.len()).cloned()', "    if strings.is_empty() {\n        return None;\n    }\n\
    \    let mut longest = &strings[0];\n    for string in &strings {\n        if\
    \ string.len() > longest.len() {\n            longest = string;\n        }\n \
    \   }\n    Some(longest.clone())", "    let mut longest_string = None;\n    for\
    \ string in strings {\n        match longest_string {\n            None => longest_string\
    \ = Some(string),\n            Some(ref mut longest) => {\n                if\
    \ string.len() > longest.len() {\n                    *longest = string;\n   \
    \             }\n            }\n        }\n    }\n    longest_string", "    let\
    \ mut longest = None;\n    for s in strings {\n        match longest {\n     \
    \       None => longest = Some(s),\n            Some(ref l) => if s.len() > l.len()\
    \ {\n                longest = Some(s);\n            },\n        }\n    }\n  \
    \  longest", "    let mut longest = None;\n    for s in strings {\n        match\
    \ longest {\n            None => longest = Some(s),\n            Some(ref l) =>\
    \ {\n                if s.len() > l.len() {\n                    longest = Some(s);\n\
    \                }\n            }\n        }\n    }\n    longest", "    let mut\
    \ longest = None;\n    for s in strings {\n        match longest {\n         \
    \   None => longest = Some(s),\n            Some(ref mut l) => {\n           \
    \     if s.len() > l.len() {\n                    *l = s;\n                }\n\
    \            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut result = None;\n    for s in strings {\n  \
    \      match result {\n            None => result = Some(s),\n            Some(r)\
    \ => {\n                if s.len() > r.len() {\n                    result = Some(s);\n\
    \                }\n            }\n        }\n    }\n    result", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ string in &strings {\n        if string.len() > longest.len() {\n          \
    \  longest = string;\n        }\n    }\n    Some(longest.clone())", "    let mut\
    \ longest = None;\n    for string in strings {\n        match longest {\n    \
    \        None => longest = Some(string),\n            Some(ref mut current) =>\
    \ {\n                if string.len() > current.len() {\n                    *current\
    \ = string;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut l)\
    \ => {\n                if l.len() < string.len() {\n                    *l =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for string in strings {\n        match longest {\n            None\
    \ => longest = Some(string),\n            Some(ref mut l) => {\n             \
    \   if l.len() < string.len() {\n                    *l = string;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref l) => if s.len() > l.len() {\n    \
    \            longest = Some(s);\n            },\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut l)\
    \ => {\n                if l.len() < string.len() {\n                    *l =\
    \ string;\n                }\n            }\n        }\n    }\n    longest", " \
    \   let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest_string\
    \ = None;\n    for string in strings {\n        match longest_string {\n     \
    \       None => longest_string = Some(string),\n            Some(ref mut longest)\
    \ => {\n                if string.len() > longest.len() {\n                  \
    \  *longest = string;\n                }\n            }\n        }\n    }\n  \
    \  longest_string", '    strings.into_iter().max_by_key(|s| s.len()).cloned()',
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut max_len\
    \ = 0;\n    let mut max_string = None;\n    for s in strings {\n        if s.len()\
    \ > max_len {\n            max_len = s.len();\n            max_string = Some(s);\n\
    \        }\n    }\n    max_string", "    let mut longest_string = None;\n    for\
    \ string in strings {\n        match longest_string {\n            None => longest_string\
    \ = Some(string),\n            Some(ref mut longest) => {\n                if\
    \ string.len() > longest.len() {\n                    *longest = string;\n   \
    \             }\n            }\n        }\n    }\n    longest_string", "    let\
    \ mut longest = None;\n    for s in strings {\n        if longest.is_none() ||\
    \ s.len() > longest.as_ref().unwrap().len() {\n            longest = Some(s);\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for string in &strings {\n        if string.len() > longest.len()\
    \ {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  '    strings.into_iter().max_by_key(|s| s.len()).cloned()', "    let mut longest\
    \ = None;\n    for string in strings {\n        match longest {\n            None\
    \ => longest = Some(string),\n            Some(ref mut l) => {\n             \
    \   if l.len() < string.len() {\n                    *l = string;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for string\
    \ in strings {\n        match longest {\n            None => longest = Some(string),\n\
    \            Some(ref mut l) => {\n                if l.len() < string.len() {\n\
    \                    *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest_string = None;\n    for string in strings {\n        match\
    \ longest_string {\n            None => longest_string = Some(string),\n     \
    \       Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut longest = None;\n    for\
    \ s in strings {\n        match longest {\n            None => longest = Some(s),\n\
    \            Some(ref mut l) => {\n                if s.len() > l.len() {\n  \
    \                  *l = s;\n                }\n            }\n        }\n    }\n\
    \    longest", "    let mut longest = None;\n    for s in strings {\n        match\
    \ longest {\n            None => longest = Some(s),\n            Some(ref l) =>\
    \ {\n                if s.len() > l.len() {\n                    longest = Some(s);\n\
    \                }\n            }\n        }\n    }\n    longest", "    let mut\
    \ longest = None;\n    for s in strings {\n        match longest {\n         \
    \   None => longest = Some(s),\n            Some(ref mut l) => {\n           \
    \     if s.len() > l.len() {\n                    *l = s;\n                }\n\
    \            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for string in strings {\n        match longest {\n            None => longest\
    \ = Some(string),\n            Some(ref mut l) => {\n                if l.len()\
    \ < string.len() {\n                    *l = string;\n                }\n    \
    \        }\n        }\n    }\n    longest", "    let mut longest = None;\n   \
    \ for s in strings {\n        match longest {\n            None => longest = Some(s),\n\
    \            Some(ref mut l) => {\n                if s.len() > l.len() {\n  \
    \                  *l = s;\n                }\n            }\n        }\n    }\n\
    \    longest", "    let mut longest_string = None;\n    for string in strings\
    \ {\n        match longest_string {\n            None => longest_string = Some(string),\n\
    \            Some(ref mut longest) => {\n                if string.len() > longest.len()\
    \ {\n                    *longest = string;\n                }\n            }\n\
    \        }\n    }\n    longest_string", "    let mut result = None;\n    for s\
    \ in strings {\n        match result {\n            None => result = Some(s),\n\
    \            Some(r) => {\n                if s.len() > r.len() {\n          \
    \          result = Some(s);\n                }\n            }\n        }\n  \
    \  }\n    result", "    let mut longest = None;\n    for s in strings {\n    \
    \    match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for string in &strings {\n        if string.len() > longest.len()\
    \ {\n            longest = string;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut max_len = 0;\n    let mut max_str\
    \ = None;\n    for s in strings {\n        if s.len() > max_len {\n          \
    \  max_len = s.len();\n            max_str = Some(s);\n        }\n    }\n    max_str",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest_string\
    \ = &strings[0];\n    for string in &strings {\n        if string.len() > longest_string.len()\
    \ {\n            longest_string = string;\n        }\n    }\n    Some(longest_string.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut max_length\
    \ = 0;\n    let mut max_string = None;\n    for s in strings {\n        if s.len()\
    \ > max_length {\n            max_length = s.len();\n            max_string =\
    \ Some(s);\n        }\n    }\n    max_string", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", "    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = &strings[0];\n    for s in &strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    Some(longest.clone())",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref l) => if s.len()\
    \ > l.len() {\n                longest = Some(s);\n            },\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for string in strings {\n        match longest\
    \ {\n            None => longest = Some(string),\n            Some(ref mut longest_string)\
    \ => {\n                if string.len() > longest_string.len() {\n           \
    \         *longest_string = string;\n                }\n            }\n      \
    \  }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref mut l) => {\n  \
    \              if s.len() > l.len() {\n                    *l = s;\n         \
    \       }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref mut l) => {\n                if s.len() > l.len() {\n         \
    \           *l = s;\n                }\n            }\n        }\n    }\n    longest",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ &strings[0];\n    for s in &strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n    Some(longest.clone())", "   \
    \ let mut longest = None;\n    for s in strings {\n        match longest {\n \
    \           None => longest = Some(s),\n            Some(ref mut l) => {\n   \
    \             if s.len() > l.len() {\n                    *l = s;\n          \
    \      }\n            }\n        }\n    }\n    longest", "    let mut longest\
    \ = None;\n    for s in strings {\n        match longest {\n            None =>\
    \ longest = Some(s),\n            Some(ref mut l) => {\n                if s.len()\
    \ > l.len() {\n                    *l = s;\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest_string = None;\n    for\
    \ string in strings {\n        match longest_string {\n            None => longest_string\
    \ = Some(string),\n            Some(ref mut l) => {\n                if l.len()\
    \ < string.len() {\n                    *l = string;\n                }\n    \
    \        }\n        }\n    }\n    longest_string", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref l) => {\n                if s.len() > l.len()\
    \ {\n                    longest = Some(s);\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut max_len = 0;\n    let mut max_str\
    \ = String::new();\n    for s in strings {\n        if s.len() > max_len {\n \
    \           max_len = s.len();\n            max_str = s;\n        }\n    }\n \
    \   if max_len == 0 {\n        None\n    } else {\n        Some(max_str)\n   \
    \ }", "    let mut longest = None;\n    for s in strings {\n        match longest\
    \ {\n            None => longest = Some(s),\n            Some(ref mut l) => {\n\
    \                if s.len() > l.len() {\n                    *l = s;\n       \
    \         }\n            }\n        }\n    }\n    longest", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = &strings[0];\n    for\
    \ string in &strings {\n        if string.len() > longest.len() {\n          \
    \  longest = string;\n        }\n    }\n    Some(longest.clone())", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = strings[0].clone();\n\
    \    for string in strings {\n        if string.len() > longest.len() {\n    \
    \        longest = string;\n        }\n    }\n    Some(longest)", "    let mut\
    \ longest = None;\n    for s in strings {\n        match longest {\n         \
    \   None => longest = Some(s),\n            Some(ref mut l) => {\n           \
    \     if s.len() > l.len() {\n                    *l = s;\n                }\n\
    \            }\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for string in strings {\n        match longest {\n            None => longest\
    \ = Some(string),\n            Some(ref mut s) => {\n                if s.len()\
    \ < string.len() {\n                    *s = string;\n                }\n    \
    \        }\n        }\n    }\n    longest", "    if strings.is_empty() {\n   \
    \     return None;\n    }\n    let mut longest = &strings[0];\n    for s in &strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    Some(longest.clone())", "    let mut result = None;\n    for s in\
    \ strings {\n        match result {\n            None => result = Some(s),\n \
    \           Some(ref r) => if s.len() > r.len() {\n                result = Some(s);\n\
    \            },\n        }\n    }\n    result", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref mut l) => {\n                if s.len() > l.len()\
    \ {\n                    *l = s;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for s in strings {\n \
    \       match longest {\n            None => longest = Some(s),\n            Some(ref\
    \ mut l) => {\n                if s.len() > l.len() {\n                    *l\
    \ = s;\n                }\n            }\n        }\n    }\n    longest", "  \
    \  let mut longest = None;\n    for s in strings {\n        match longest {\n\
    \            None => longest = Some(s),\n            Some(ref l) => if s.len()\
    \ > l.len() {\n                longest = Some(s);\n            },\n        }\n\
    \    }\n    longest", "    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = &strings[0];\n    for string in &strings {\n      \
    \  if string.len() > longest.len() {\n            longest = string;\n        }\n\
    \    }\n    Some(longest.clone())", "    let mut longest = None;\n    for s in\
    \ strings {\n        match longest {\n            None => longest = Some(s),\n\
    \            Some(ref mut l) => {\n                if s.len() > l.len() {\n  \
    \                  *l = s;\n                }\n            }\n        }\n    }\n\
    \    longest", "    let mut longest = None;\n    for s in strings {\n        match\
    \ longest {\n            None => longest = Some(s),\n            Some(ref mut\
    \ l) => {\n                if s.len() > l.len() {\n                    *l = s;\n\
    \                }\n            }\n        }\n    }\n    longest", "    let mut\
    \ longest = None;\n    for string in strings {\n        match longest {\n    \
    \        None => longest = Some(string),\n            Some(ref mut l) => {\n \
    \               if l.len() < string.len() {\n                    *l = string;\n\
    \                }\n            }\n        }\n    }\n    longest", "    let mut\
    \ max_len = 0;\n    let mut max_len_str = None;\n    for s in strings {\n    \
    \    if s.len() > max_len {\n            max_len = s.len();\n            max_len_str\
    \ = Some(s);\n        }\n    }\n    max_len_str", "    let mut longest = None;\n\
    \    for s in strings {\n        match longest {\n            None => longest\
    \ = Some(s),\n            Some(ref l) => {\n                if s.len() > l.len()\
    \ {\n                    longest = Some(s);\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut longest = None;\n    for s in strings\
    \ {\n        match longest {\n            None => longest = Some(s),\n       \
    \     Some(ref l) => if s.len() > l.len() {\n                longest = Some(s);\n\
    \            },\n        }\n    }\n    longest", "    let mut longest = None;\n\
    \    for string in strings {\n        match longest {\n            None => longest\
    \ = Some(string),\n            Some(ref mut l) => {\n                if l.len()\
    \ < string.len() {\n                    *l = string;\n                }\n    \
    \        }\n        }\n    }\n    longest", "    let mut max_len = 0;\n    let\
    \ mut max_str = None;\n    for s in strings {\n        if s.len() > max_len {\n\
    \            max_len = s.len();\n            max_str = Some(s);\n        }\n \
    \   }\n    max_str", "    let mut longest = None;\n    for string in strings {\n\
    \        match longest {\n            None => longest = Some(string),\n      \
    \      Some(ref mut l) => {\n                if l.len() < string.len() {\n   \
    \                 *l = string;\n                }\n            }\n        }\n\
    \    }\n    longest", "    let mut longest = None;\n    for string in strings\
    \ {\n        match longest {\n            None => longest = Some(string),\n  \
    \          Some(ref l) => {\n                if string.len() > l.len() {\n   \
    \                 longest = Some(string);\n                }\n            }\n\
    \        }\n    }\n    longest", "    let mut max_length = 0;\n    let mut max_string\
    \ = None;\n    for s in strings {\n        if s.len() > max_length {\n       \
    \     max_length = s.len();\n            max_string = Some(s);\n        }\n  \
    \  }\n    max_string"]
stop_tokens:
- "\n}"
