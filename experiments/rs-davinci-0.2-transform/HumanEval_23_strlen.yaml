name: HumanEval_23_strlen
language: rs
prompt: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n///\
  \ 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut len = 0;\n    for _ in string.chars() {\n        len +=\
    \ 1;\n    }\n    len", "    let mut count = 0;\n    for _ in string.chars() {\n\
    \        count += 1;\n    }\n    count", "    let mut len = 0;\n    for _ in string.chars()\
    \ {\n        len += 1;\n    }\n    len", "    let mut length = 0;\n    for _ in\
    \ string.chars() {\n        length += 1;\n    }\n    length", '    string.len()
    as isize', '    string.len() as isize', "    let mut length = 0;\n    for _ in\
    \ string.chars() {\n        length += 1;\n    }\n    length", "    let mut length\
    \ = 0;\n    for _ in string.chars() {\n        length += 1;\n    }\n    length",
  '    string.len() as isize', '    string.len() as isize', "    let mut count = 0;\n\
    \    for _ in string.chars() {\n        count += 1;\n    }\n    count", "    let\
    \ mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n    }\n    len",
  '    string.len() as isize', "    let mut len = 0;\n    for _ in string.chars()\
    \ {\n        len += 1;\n    }\n    len", "    let mut len = 0;\n    for _ in string.chars()\
    \ {\n        len += 1;\n    }\n    len", '    string.len() as isize', "    let\
    \ mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n    }\n\
    \    count", "    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length", "    let mut length = 0;\n    for _ in string.chars()\
    \ {\n        length += 1;\n    }\n    length", '    string.len() as isize']
stop_tokens:
- "\n}"
