name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive(vec![-1,\
  \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ['    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| x > &0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    unimplemented!();', '    l.into_iter().filter(|&x| x > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut new_l = Vec::new();\n    for i in l {\n     \
    \   if i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l", "  \
    \  let mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n         \
    \   res.push(i);\n        }\n    }\n    res", '    l.into_iter().filter(|x| *x
    > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let mut\
    \ result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result", '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  "    // TODO: implement me!\n    unimplemented!()", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n     \
    \   if i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|&x| x > 0).collect()',
  "    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n      \
    \      result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut res = Vec::new();\n    for i in l {\n       \
    \ if i > 0 {\n            res.push(i);\n        }\n    }\n    res", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', "    let mut ret = Vec::new();\n    for i in l {\n     \
    \   if i > 0 {\n            ret.push(i);\n        }\n    }\n    ret", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()', '    unimplemented!()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!();', '    l.into_iter().filter(|x| *x >
    0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for i in\
    \ l {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n   \
    \ result", '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  "    let mut v = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ v.push(i);\n        }\n    }\n    v", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', "    let mut result = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            result.push(i);\n        }\n\
    \    }\n    result", '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()']
stop_tokens:
- "\n}"
