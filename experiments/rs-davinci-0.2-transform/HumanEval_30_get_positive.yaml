name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive(vec![-1,\
  \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ['    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    l.into_iter().filter(|x| x > &0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()']
stop_tokens:
- "\n}"
