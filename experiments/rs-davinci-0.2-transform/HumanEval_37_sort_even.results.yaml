language: rs
name: HumanEval_37_sort_even
results:
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<isize> = Vec::new();\n\
    \    for (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even_indicies.push(i as isize);\n        }\n    }\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for i in even_indicies {\n        even_values.push(l[i\
    \ as usize]);\n    }\n    even_values.sort();\n    for (i, v) in even_values.iter().enumerate()\
    \ {\n        l_prime[even_indicies[i] as usize] = *v;\n    }\n    l_prime\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmp5mj7w1yf.rs:22:17\n\
    \    |\n10  |     let mut even_indicies: Vec<isize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n22  |         l_prime[even_indicies[i] as usize]\
    \ = *v;\n    |                 ^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `even_indicies`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n17  |     for i in &even_indicies\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpmkejcdsy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even.push(*x);\n        } else {\n            odd.push(*x);\n        }\n \
    \   }\n    even.sort();\n    for (i, x) in even.iter().enumerate() {\n       \
    \ l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(*x);\n        } else\
    \ {\n            odd_indicies.push(*x);\n        }\n    }\n    even_indicies.sort();\n\
    \    for (i, x) in even_indicies.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = vec![];\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = l[i..].iter().min().unwrap().clone();\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -10, 2, -10, 3, -10, 0, -10, 1, -10]`,\n right: `[-10, 3, -5, 2, -3,\
    \ 3, 5, 0, 9, 1, 123]`', /tmp/tmpjqrishs2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, n) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*n);\n        } else {\n            odd_indicies.push(*n);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, n) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *n;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens: Vec<isize> = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n\
    \    evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n     \
    \       l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indicies {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpk002dz4j.rs:21:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n        \
    \    even_indicies.push(l[i]);\n        } else {\n            odd_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..even_indicies.len()\
    \ {\n        l[i * 2] = even_indicies[i];\n    }\n    for i in 0..odd_indicies.len()\
    \ {\n        l[i * 2 + 1] = odd_indicies[i];\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    let mut even_values: Vec<isize> = Vec::new();\n    for (i, &x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n           \
    \ even_values.push(x);\n        }\n    }\n    even_values.sort();\n    for (i,\
    \ &x) in even_indicies.iter().enumerate() {\n        l_prime[*x] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmp8b1zzaip.rs:20:17\n\
    \   |\n20 |         l_prime[*x] = even_values[i];\n   |                 ^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut sorted_evens = l.clone();\n    sorted_evens.sort();\n    let mut result\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            result.push(*x);\n        } else {\n            result.push(sorted_evens[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, -5, -5, 0, -3, 2, 9, 3, 123, 9, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpkgglahtb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, v) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*v);\n        } else {\n            evens.push(*v);\n        }\n\
    \    }\n    evens.sort();\n    for (i, v) in evens.iter().enumerate() {\n    \
    \    l[i * 2 + 1] = *v;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpwsqyz69z.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    l.swap(i, j);\n       \
    \         }\n                j += 1;\n            }\n        }\n        i += 1;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpc3q7p5kb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<isize> = Vec::new();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            even_indicies.push(l[i]);\n        } else {\n\
    \            odd_indicies.push(l[i]);\n        }\n    }\n    even_indicies.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l[i * 2] = even_indicies[i];\n\
    \    }\n    for i in 0..odd_indicies.len() {\n        l[i * 2 + 1] = odd_indicies[i];\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    l[i * 2 + 1] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpa_9ifzfr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n        \
    \    even_indicies.push(l[i]);\n        } else {\n            odd_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..even_indicies.len()\
    \ {\n        l[i * 2] = even_indicies[i];\n    }\n    for i in 0..odd_indicies.len()\
    \ {\n        l[i * 2 + 1] = odd_indicies[i];\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indices.push(x);\n        } else {\n            odd_indices.push(x);\n\
    \        }\n    }\n    even_indices.sort();\n    for (i, x) in even_indices.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvudmw8a.rs:21:20\n   |\n\
    21 |         l[i * 2] = *x;\n   |         --------   ^^ expected `isize`, found\
    \ `&isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |         l[i * 2] =\
    \ **x;\n   |                    +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmprev3_x0e.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_copy = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indicies {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l_copy[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_copy\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpfuwgnb4z.rs:21:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            let temp = l[i];\n                l[i] = l[j];\n                l[j]\
    \ = temp;\n            }\n            j += 2;\n        }\n        i += 2;\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpw3zyruij.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    let tmp = l[i];\n     \
    \               l[i] = l[j];\n                    l[j] = tmp;\n              \
    \  }\n                j += 1;\n            }\n        }\n        i += 1;\n   \
    \ }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp10q3860e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values = Vec::new();\n    for i in even_indicies\
    \ {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for\
    \ i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpy_ajrkze.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    let mut even_values = Vec::new();\n    for i in even_indices\
    \ {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for\
    \ i in 0..even_values.len() {\n        l_prime[even_indices[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmpazh_4wvb.rs:22:17\n\
    \    |\n10  |     let mut even_indices = Vec::new();\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n22  |         l_prime[even_indices[i]] = even_values[i];\n    |         \
    \        ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `even_indices`\nhelp: consider\
    \ iterating over a slice of the `Vec<usize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n17  |     for i in &even_indices {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    for i in even_indices {\n        l[i] = l[i..].iter().min().unwrap().clone();\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -10, 2, -10, 3, -10, 0, -10, 1, -10]`,\n right: `[-10, 3, -5, 2, -3,\
    \ 3, 5, 0, 9, 1, 123]`', /tmp/tmp1169q2c9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    l.swap(i, j);\n       \
    \         }\n                j += 1;\n            }\n        }\n        i += 1;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpc3q7p5kb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    let temp = l[i];\n    \
    \                l[i] = l[j];\n                    l[j] = temp;\n            \
    \    }\n                j += 1;\n            }\n        }\n        i += 1;\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd9amc_0m.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            l.swap(i, j);\n            }\n            j += 2;\n        }\n  \
    \      i += 2;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd62qox5u.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        let mut temp = l[i];\n        let\
    \ mut j = i;\n        while j > 0 && l[j - 1] > temp {\n            l[j] = l[j\
    \ - 1];\n            j -= 1;\n        }\n        l[j] = temp;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 5, 3, 2, 3, 9, 0, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmphu3_b1gg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = l[i..].iter().min().unwrap().clone();\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -10, 2, -10, 3, -10, 0, -10, 1, -10]`,\n right: `[-10, 3, -5, 2, -3,\
    \ 3, 5, 0, 9, 1, 123]`', /tmp/tmp9bful0rc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = l.clone();\n    let mut l_odd = l.clone();\n    l_even.retain(|x|\
    \ x % 2 == 0);\n    l_odd.retain(|x| x % 2 != 0);\n    l_even.sort();\n    let\
    \ mut l_even_odd = Vec::new();\n    for (i, x) in l_odd.iter().enumerate() {\n\
    \        l_even_odd.push(*x);\n        if i < l_even.len() {\n            l_even_odd.push(l_even[i]);\n\
    \        }\n    }\n    l_even_odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, -10, 3, 0, -5, 2, -3, 3, 9, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpkzr93x6n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        let mut temp = l[i];\n        let\
    \ mut j = i;\n        while j > 0 && l[j - 1] > temp {\n            l[j] = l[j\
    \ - 1];\n            j -= 1;\n        }\n        l[j] = temp;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 5, 3, 2, 3, 9, 0, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmphu3_b1gg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indicies {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpk002dz4j.rs:21:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_indicies.push(i\
    \ as isize);\n        }\n    }\n    let mut even_indicies_sorted = even_indicies.clone();\n\
    \    even_indicies_sorted.sort();\n    for i in 0..even_indicies.len() {\n   \
    \     l.swap(even_indicies[i] as usize, even_indicies_sorted[i] as usize);\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpglp2844k.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, v)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*v);\n\
    \        } else {\n            l_odd.push(*v);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_even_odd = Vec::new();\n    for (i, v) in l_even.iter().enumerate()\
    \ {\n        l_even_odd.push(*v);\n        l_even_odd.push(l_odd[i]);\n    }\n\
    \    l_even_odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmphkdxba3l.rs:22:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    odds.insert(i * 2 + 1, *x);\n    }\n    odds\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpsh4fa2t6.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        let mut temp = l[i];\n\
    \        let mut j = i;\n        while j > 0 && l[j - 1] > temp {\n          \
    \  l_prime[j] = l[j - 1];\n            j = j - 1;\n        }\n        l_prime[j]\
    \ = temp;\n    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp0ha92v22.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indices.push(x);\n        } else {\n            odd_indices.push(x);\n\
    \        }\n    }\n    even_indices.sort();\n    for (i, x) in even_indices.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvudmw8a.rs:21:20\n   |\n\
    21 |         l[i * 2] = *x;\n   |         --------   ^^ expected `isize`, found\
    \ `&isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |         l[i * 2] =\
    \ **x;\n   |                    +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = l[i..].iter().min().unwrap().clone();\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -10, 2, -10, 3, -10, 0, -10, 1, -10]`,\n right: `[-10, 3, -5, 2, -3,\
    \ 3, 5, 0, 9, 1, 123]`', /tmp/tmp9bful0rc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(*x);\n        } else\
    \ {\n            odd_indicies.push(*x);\n        }\n    }\n    even_indicies.sort();\n\
    \    for (i, x) in even_indicies.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens: Vec<isize> = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n\
    \    evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n     \
    \       l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, n) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*n);\n        } else {\n            odd_indicies.push(*n);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, n) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *n;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for (i, _) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    for i in even_indices {\n        let mut sub_vec = Vec::new();\n  \
    \      for j in i..l.len() {\n            if j % 2 == 0 {\n                sub_vec.push(l[j]);\n\
    \            }\n        }\n        sub_vec.sort();\n        for (j, k) in sub_vec.iter().enumerate()\
    \ {\n            l[i + j] = *k;\n        }\n    }\n    l\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpu7dzv8lj.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_new = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_new.push(*x);\n        l_new.push(l_odd[i]);\n    }\n    l_new\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp5glzca25.rs:22:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_sorted = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_sorted.push(*x);\n        l_sorted.push(l_odd[i]);\n    }\n   \
    \ l_sorted\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpbarab6yf.rs:22:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, &x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(x);\n\
    \        } else {\n            l_odd.push(x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_new = Vec::new();\n    for (i, &x) in l.iter().enumerate() {\n\
    \        if i % 2 == 0 {\n            l_new.push(l_even.pop().unwrap());\n   \
    \     } else {\n            l_new.push(x);\n        }\n    }\n    l_new\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 2, 3]`', /tmp/tmpva2989aj.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    let\
    \ mut odd_indicies = Vec::new();\n    for (i, _) in l.iter().enumerate() {\n \
    \       if i % 2 == 0 {\n            even_indicies.push(i);\n        } else {\n\
    \            odd_indicies.push(i);\n        }\n    }\n    let mut even_values\
    \ = Vec::new();\n    for i in even_indicies {\n        even_values.push(l[i]);\n\
    \    }\n    even_values.sort();\n    for (i, v) in even_values.iter().enumerate()\
    \ {\n        l_prime[even_indicies[i]] = *v;\n    }\n    l_prime\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpxk7fd758.rs:25:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n20  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         l_prime[even_indicies[i]] = *v;\n    |                 ^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n20  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*x);\n        } else {\n            odd_indicies.push(*x);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, x) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpuiitsxhr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even_indicies.push(i);\n        }\n    }\n    for i in even_indicies {\n \
    \       l_prime[i] = l[i];\n    }\n    l_prime\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpn8_zk4v3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    l[i * 2 + 1] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpa_9ifzfr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i <\
    \ l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n \
    \       } else {\n            odd_indices.push(l[i]);\n        }\n        i +=\
    \ 1;\n    }\n    even_indices.sort();\n    i = 0;\n    while i < even_indices.len()\
    \ {\n        l[i * 2] = even_indices[i];\n        i += 1;\n    }\n    i = 0;\n\
    \    while i < odd_indices.len() {\n        l[i * 2 + 1] = odd_indices[i];\n \
    \       i += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = vec![];\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = sort_even_helper(l[i]);\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_even_helper` in this scope\n \
    \ --> /tmp/tmpv1rcgd92.rs:17:16\n   |\n17 |         l[i] = sort_even_helper(l[i]);\n\
    \   |                ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            even.push(l[i]);\n        }\n    }\n   \
    \ even.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n         \
    \   l[i] = even[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even.push(*x);\n        } else {\n            odd.push(*x);\n        }\n \
    \   }\n    even.sort();\n    for (i, x) in even.iter().enumerate() {\n       \
    \ l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = vec![];\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    let mut even_indices_values = vec![];\n    for i in even_indices {\n\
    \        even_indices_values.push(l[i]);\n    }\n    even_indices_values.sort();\n\
    \    for i in 0..even_indices.len() {\n        l[even_indices[i]] = even_indices_values[i];\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmpq8cyjran.rs:21:17\n\
    \    |\n10  |     let mut even_indices = vec![];\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indices.len() {\n    |                 ^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indices`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indices {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even_indices: Vec<isize> = Vec::new();\n    let mut odd_indices: Vec<isize>\
    \ = Vec::new();\n    let mut sorted_even_indices: Vec<isize> = Vec::new();\n \
    \   let mut sorted_list: Vec<isize> = Vec::new();\n\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n\n    sorted_even_indices\
    \ = even_indices.clone();\n    sorted_even_indices.sort();\n\n    for (i, x) in\
    \ l.iter().enumerate() {\n        if i % 2 == 0 {\n            sorted_list.push(sorted_even_indices[i\
    \ / 2]);\n        } else {\n            sorted_list.push(*x);\n        }\n   \
    \ }\n\n    sorted_list\n}\n\nfn main() {\n    let candidate = sort_even;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in 0..even_indicies.len() {\n        for j in i..even_indicies.len()\
    \ {\n            if l[even_indicies[i]] > l[even_indicies[j]] {\n            \
    \    let temp = l[even_indicies[i]];\n                l[even_indicies[i]] = l[even_indicies[j]];\n\
    \                l[even_indicies[j]] = temp;\n            }\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in 0..even_indicies.len() {\n        for j in i..even_indicies.len()\
    \ {\n            if l[even_indicies[i]] > l[even_indicies[j]] {\n            \
    \    l.swap(even_indicies[i], even_indicies[j]);\n            }\n        }\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens: Vec<isize> = Vec::new();\n    let mut odds:\
    \ Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n       \
    \ if i % 2 == 0 {\n            odds.push(*x);\n        } else {\n            evens.push(*x);\n\
    \        }\n    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate()\
    \ {\n        odds.insert(i * 2 + 1, *x);\n    }\n    odds\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpcg5awil9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*x);\n        } else {\n            odd_indicies.push(*x);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, x) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    l[i * 2 + 1] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpa_9ifzfr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ // TODO: Implement this function\n    let mut new_list = l.clone();\n    let\
    \ mut even_list = Vec::new();\n    let mut odd_list = Vec::new();\n    for (i,\
    \ x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_list.push(*x);\n\
    \        } else {\n            odd_list.push(*x);\n        }\n    }\n    even_list.sort();\n\
    \    for (i, x) in even_list.iter().enumerate() {\n        new_list[i * 2] = *x;\n\
    \    }\n    new_list\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = l.clone();\n    let mut l_odd = l.clone();\n    l_even.retain(|x|\
    \ x % 2 == 0);\n    l_odd.retain(|x| x % 2 != 0);\n    l_even.sort();\n    let\
    \ mut l_even_odd = Vec::new();\n    for (i, x) in l_odd.iter().enumerate() {\n\
    \        l_even_odd.push(*x);\n        if i < l_even.len() {\n            l_even_odd.push(l_even[i]);\n\
    \        }\n    }\n    l_even_odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, -10, 3, 0, -5, 2, -3, 3, 9, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpkzr93x6n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indicies {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpk002dz4j.rs:21:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            l.sort();\n        }\n        i += 1;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpyy4ox2po.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    for i in even_indices {\n        let mut temp = l[i];\n\
    \        for j in i..l.len() {\n            if l[j] < temp {\n               \
    \ temp = l[j];\n                l_prime[i] = l[j];\n                l_prime[j]\
    \ = l[i];\n            }\n        }\n    }\n    l_prime\n}\n\nfn main() {\n  \
    \  let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -10, 2, -10, 3, -10, 9, -10, 123, 123]`,\n right: `[-10, 3, -5, 2,\
    \ -3, 3, 5, 0, 9, 1, 123]`', /tmp/tmp4puy4pa3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        let mut temp = l_prime[i];\n\
    \        for j in i..l.len() {\n            if l_prime[j] < temp {\n         \
    \       temp = l_prime[j];\n                l_prime[j] = l_prime[i];\n       \
    \         l_prime[i] = temp;\n            }\n        }\n    }\n    l_prime\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpgxmv605x.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for (i, _) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    for i in even_indices {\n        let mut even_slice = Vec::new();\n\
    \        for j in i..l.len() {\n            if j % 2 == 0 {\n                even_slice.push(l[j]);\n\
    \            }\n        }\n        even_slice.sort();\n        for (j, val) in\
    \ even_slice.iter().enumerate() {\n            l[i + j] = *val;\n        }\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqw_way_k.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpmkejcdsy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   l_even.push(*x);\n        } else {\n            l_odd.push(*x);\n        }\n\
    \    }\n    l_even.sort();\n    for (i, x) in l_even.iter().enumerate() {\n  \
    \      l[2 * i] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in 0..even_indicies.len() {\n        for j in 0..even_indicies.len()\
    \ {\n            if l[even_indicies[i]] < l[even_indicies[j]] {\n            \
    \    let temp = l[even_indicies[i]];\n                l[even_indicies[i]] = l[even_indicies[j]];\n\
    \                l[even_indicies[j]] = temp;\n            }\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in 0..even_indicies.len() {\n        for j in 0..even_indicies.len()\
    \ - 1 {\n            if l[even_indicies[j]] > l[even_indicies[j + 1]] {\n    \
    \            let temp = l[even_indicies[j]];\n                l[even_indicies[j]]\
    \ = l[even_indicies[j + 1]];\n                l[even_indicies[j + 1]] = temp;\n\
    \            }\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indices {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indices.len() {\n        l_prime[even_indices[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmpgrvd6l8_.rs:21:17\n\
    \    |\n10  |     let mut even_indices: Vec<usize> = Vec::new();\n    |      \
    \   ---------------- move occurs because `even_indices` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indices\
    \ {\n    |              ------------ `even_indices` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indices.len() {\n  \
    \  |                 ^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `even_indices`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indices {\n    |      \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = l[i] + 1;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[1, 2, 3]`', /tmp/tmp6nbivbw3.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        let mut even_values =\
    \ Vec::new();\n        for j in even_indicies {\n            even_values.push(l[j]);\n\
    \        }\n        even_values.sort();\n        for j in even_indicies {\n  \
    \          l_prime[j] = even_values[j];\n        }\n    }\n    l_prime\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpk6tki872.rs:16:9\n   |\n16\
    \ |     for i in even_indicies {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `even_indicies`\n   --> /tmp/tmpk6tki872.rs:18:18\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n16  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    17  |         let mut even_values = Vec::new();\n18  |         for j in even_indicies\
    \ {\n    |                  ^^^^^^^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror[E0382]: use of moved value: `even_indicies`\n  --> /tmp/tmpk6tki872.rs:22:18\n\
    \   |\n10 |     let mut even_indicies = Vec::new();\n   |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n18 |         for j in even_indicies {\n   |         \
    \         ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n22 |         for j in even_indicies {\n   |                  ^^^^^^^^^^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<usize>`'s content to avoid moving into the `for` loop\n   |\n18 |     \
    \    for j in &even_indicies {\n   |                  +\n\nerror: aborting due\
    \ to 2 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, v) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*v);\n        } else {\n            odd_indicies.push(*v);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, v) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *v;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut l_even = l.clone();\n    l_even.retain(|x| l.iter().position(|y|\
    \ y == x).unwrap() % 2 == 0);\n    l_even.sort();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            l[i] = l_even[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values = Vec::new();\n    for i in even_indicies\
    \ {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for\
    \ i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpy_ajrkze.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens: Vec<isize> = vec![];\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n\
    \    evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n     \
    \       l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    l[i * 2 + 1] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpa_9ifzfr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_even_odd = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_even_odd.push(*x);\n        l_even_odd.push(l_odd[i]);\n    }\n\
    \    l_even_odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpwyxtk05r.rs:22:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    let mut even_values = Vec::new();\n    for i in even_indices {\n  \
    \      even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in 0..even_indices.len()\
    \ {\n        l[even_indices[i]] = even_values[i];\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmpu6z99xbs.rs:21:17\n\
    \    |\n10  |     let mut even_indices = Vec::new();\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indices.len() {\n    |                 ^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indices`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indices {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for (i, elem) in l.iter().enumerate() {\n        if i % 2\
    \ == 0 {\n            even_indices.push(*elem);\n        } else {\n          \
    \  odd_indices.push(*elem);\n        }\n    }\n    even_indices.sort();\n    for\
    \ (i, elem) in even_indices.iter().enumerate() {\n        l[i * 2] = *elem;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        l[i] = l[i] + 1;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[1, 2, 3]`', /tmp/tmp6nbivbw3.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    even_indices.sort_by(|a, b| l[*a].cmp(&l[*b]));\n    for i in 0..even_indices.len()\
    \ {\n        l.swap(even_indices[i], i);\n    }\n    l\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpe207jsaa.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values: Vec<isize> = Vec::new();\n    for\
    \ i in even_indicies {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpk002dz4j.rs:21:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n17  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<usize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<usize> = Vec::new();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            even_indicies.push(i);\n        } else {\n \
    \           odd_indicies.push(i);\n        }\n    }\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for i in even_indicies {\n        even_values.push(l[i]);\n\
    \    }\n    even_values.sort();\n    for i in 0..even_indicies.len() {\n     \
    \   l[even_indicies[i]] = even_values[i];\n    }\n    l\n}\n\nfn main() {\n  \
    \  let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpmm60idsb.rs:24:17\n\
    \    |\n10  |     let mut even_indicies: Vec<usize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<usize>`,\
    \ which does not implement the `Copy` trait\n...\n20  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n24  |     for i in 0..even_indicies.len() {\n \
    \   |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `even_indicies`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n20  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indices.push(*x);\n        } else {\n            odd_indices.push(*x);\n\
    \        }\n    }\n    even_indices.sort();\n    for (i, x) in even_indices.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    let mut even_values = Vec::new();\n    for i in even_indices {\n  \
    \      even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in 0..even_values.len()\
    \ {\n        l[even_indices[i]] = even_values[i];\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmps1ik54jx.rs:22:11\n\
    \    |\n10  |     let mut even_indices = Vec::new();\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n22  |         l[even_indices[i]] = even_values[i];\n    |           ^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indices`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indices {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            evens.push(*x);\n        }\n    }\n\
    \    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n        l[i\
    \ * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            l[i] = l[i + 1];\n        }\n        i += 2;\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpjcos7i8a.rs:13:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            l.swap(i, j);\n            }\n            j += 2;\n        }\n  \
    \      i += 2;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd62qox5u.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            evens.push(*x);\n        }\n    }\n\
    \    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n        l[i\
    \ * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_indicies_values = Vec::new();\n    for i in even_indicies\
    \ {\n        even_indicies_values.push(l[i]);\n    }\n    even_indicies_values.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l[even_indicies[i]] = even_indicies_values[i];\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpigetnp5z.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    for i in (0..l.len()).step_by(2) {\n        let mut j =\
    \ i + 1;\n        while j < l.len() {\n            if l[j] < l[i] {\n        \
    \        l.swap(i, j);\n            }\n            j += 2;\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp20kz_8o5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_even_odd = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_even_odd.push(*x);\n        l_even_odd.push(l_odd[i]);\n    }\n\
    \    l_even_odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpwyxtk05r.rs:22:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    for i in even_indices {\n        let mut temp = l[i];\n\
    \        let mut j = i;\n        while j > 0 && l[j - 1] > temp {\n          \
    \  l_prime[j] = l[j - 1];\n            j = j - 1;\n        }\n        l_prime[j]\
    \ = temp;\n    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp1kkk7jno.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpuiitsxhr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_indicies.push(*x);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, x) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n        \
    \    even_indices.push(l[i]);\n        } else {\n            odd_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..even_indices.len()\
    \ {\n        l[2 * i] = even_indices[i];\n    }\n    for i in 0..odd_indices.len()\
    \ {\n        l[2 * i + 1] = odd_indices[i];\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = vec![];\n    let mut\
    \ odd_indices: Vec<isize> = vec![];\n    for i in 0..l.len() {\n        if i %\
    \ 2 == 0 {\n            even_indices.push(l[i]);\n        } else {\n         \
    \   odd_indices.push(l[i]);\n        }\n    }\n    even_indices.sort();\n    for\
    \ i in 0..even_indices.len() {\n        l[i * 2] = even_indices[i];\n    }\n \
    \   l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<isize> = Vec::new();\n\
    \    for (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even_indicies.push(i as isize);\n        }\n    }\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for i in even_indicies {\n        even_values.push(l[i\
    \ as usize]);\n    }\n    even_values.sort();\n    for (i, v) in even_values.iter().enumerate()\
    \ {\n        l_prime[even_indicies[i] as usize] = *v;\n    }\n    l_prime\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmp5mj7w1yf.rs:22:17\n\
    \    |\n10  |     let mut even_indicies: Vec<isize> = Vec::new();\n    |     \
    \    ----------------- move occurs because `even_indicies` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for i in even_indicies\
    \ {\n    |              ------------- `even_indicies` moved due to this implicit\
    \ call to `.into_iter()`\n...\n22  |         l_prime[even_indicies[i] as usize]\
    \ = *v;\n    |                 ^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `even_indicies`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n17  |     for i in &even_indicies\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    let mut odd_indices\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indices.push(x);\n        } else {\n            odd_indices.push(x);\n\
    \        }\n    }\n    even_indices.sort();\n    for (i, x) in even_indices.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvudmw8a.rs:21:20\n   |\n\
    21 |         l[i * 2] = *x;\n   |         --------   ^^ expected `isize`, found\
    \ `&isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |         l[i * 2] =\
    \ **x;\n   |                    +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even.push(*x);\n        } else {\n            odd.push(*x);\n        }\n \
    \   }\n    even.sort();\n    for (i, x) in even.iter().enumerate() {\n       \
    \ l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            l.swap(i, j);\n            }\n            j += 2;\n        }\n  \
    \      i += 2;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd62qox5u.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<isize> = Vec::new();\n    for (i, v) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(*v);\n        } else\
    \ {\n            odd_indicies.push(*v);\n        }\n    }\n    even_indicies.sort();\n\
    \    for (i, v) in even_indicies.iter().enumerate() {\n        l[i * 2] = *v;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    let temp = l[i];\n    \
    \                l[i] = l[j];\n                    l[j] = temp;\n            \
    \    }\n                j += 1;\n            }\n        }\n        i += 1;\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd9amc_0m.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_new = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_new.push(*x);\n        l_new.push(l_odd[i]);\n    }\n    l_new\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp5glzca25.rs:22:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_new = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_new.push(*x);\n        l_new.push(l_odd[i]);\n    }\n    l_new\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp5glzca25.rs:22:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indicies: Vec<isize> = Vec::new();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            even_indicies.push(l[i]);\n        } else {\n\
    \            odd_indicies.push(l[i]);\n        }\n    }\n    even_indicies.sort();\n\
    \    for i in 0..even_indicies.len() {\n        l[2 * i] = even_indicies[i];\n\
    \    }\n    for i in 0..odd_indicies.len() {\n        l[2 * i + 1] = odd_indicies[i];\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    let mut l_final\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            l_even.push(*x);\n        } else {\n            l_odd.push(*x);\n\
    \        }\n    }\n    l_even.sort();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_final.push(*x);\n        l_final.push(l_odd[i]);\n    }\n    l_final\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpu50szqzr.rs:22:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values = Vec::new();\n    for i in even_indicies\
    \ {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for\
    \ i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpy_ajrkze.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = vec![];\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        let mut j = i + 1;\n        while\
    \ j < l.len() {\n            if l[j] < l[i] {\n                let temp = l[i];\n\
    \                l[i] = l[j];\n                l[j] = temp;\n            }\n \
    \           j += 2;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpdpv_alz1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            even.push(l[i]);\n        }\n    }\n   \
    \ even.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n         \
    \   l[i] = even[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in 0..even_indicies.len() {\n        for j in i..even_indicies.len()\
    \ {\n            if l[even_indicies[i]] > l[even_indicies[j]] {\n            \
    \    let temp = l[even_indicies[i]];\n                l[even_indicies[i]] = l[even_indicies[j]];\n\
    \                l[even_indicies[j]] = temp;\n            }\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            let temp = l[i];\n                l[i] = l[j];\n                l[j]\
    \ = temp;\n            }\n            j += 1;\n        }\n        i += 2;\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp7r5_ewxa.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<usize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l[i] = l[i..].iter().min().unwrap().clone();\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -10, 2, -10, 3, -10, 0, -10, 1, -10]`,\n right: `[-10, 3, -5, 2, -3,\
    \ 3, 5, 0, 9, 1, 123]`', /tmp/tmp2cfx030i.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut evens = Vec::new();\n    let mut odds = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            odds.push(*x);\n\
    \        } else {\n            evens.push(*x);\n        }\n    }\n    evens.sort();\n\
    \    let mut result = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n\
    \        if i % 2 == 0 {\n            result.push(*x);\n        } else {\n   \
    \         result.push(evens.pop().unwrap());\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 3, -3, 2, 9, 1, 123, 0, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpie8u1a_r.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut v = l.clone();\n    for i in (0..v.len()).step_by(2) {\n        v[i..i+2].sort();\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''range end index 4 out of range for slice
    of length 3'', library/core/src/slice/index.rs:73:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        let mut\
    \ j = i + 1;\n        while j < l.len() {\n            if l[i] > l[j] {\n    \
    \            l.swap(i, j);\n            }\n            j += 2;\n        }\n  \
    \      i += 2;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, -5, 3, -3, 3, 1, 9, 2, 123, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd62qox5u.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n        \
    \    even_indicies.push(l[i]);\n        } else {\n            odd_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..even_indicies.len()\
    \ {\n        l[i * 2] = even_indicies[i];\n    }\n    for i in 0..odd_indicies.len()\
    \ {\n        l[i * 2 + 1] = odd_indicies[i];\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    let tmp = l[i];\n     \
    \               l[i] = l[j];\n                    l[j] = tmp;\n              \
    \  }\n                j += 1;\n            }\n        }\n        i += 1;\n   \
    \ }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp10q3860e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_copy = l.clone();\n    let mut even_indices = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    let mut even_indices_copy = even_indices.clone();\n   \
    \ even_indices_copy.sort_by(|a, b| l[*a].cmp(&l[*b]));\n    for i in 0..even_indices.len()\
    \ {\n        l_copy[even_indices[i]] = l[even_indices_copy[i]];\n    }\n    l_copy\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(*x);\n        } else {\n            odd_indicies.push(*x);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, x) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even_indicies = Vec::new();\n    let mut odd_indicies = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even_indicies.push(*x);\n        } else {\n            odd_indicies.push(*x);\n\
    \        }\n    }\n    even_indicies.sort();\n    let mut result = Vec::new();\n\
    \    for (i, x) in even_indicies.iter().enumerate() {\n        result.push(*x);\n\
    \        result.push(odd_indicies[i]);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp7c6vjxco.rs:22:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    let\
    \ mut odd_indices: Vec<isize> = Vec::new();\n    for (i, x) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(*x);\n        } else\
    \ {\n            odd_indices.push(*x);\n        }\n    }\n    even_indices.sort();\n\
    \    for (i, x) in even_indices.iter().enumerate() {\n        l[i * 2] = *x;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    let mut odd_indicies: Vec<usize> = Vec::new();\n    for (i, _) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        } else\
    \ {\n            odd_indicies.push(i);\n        }\n    }\n    for i in even_indicies\
    \ {\n        let mut temp_vec: Vec<isize> = Vec::new();\n        for j in even_indicies.iter()\
    \ {\n            temp_vec.push(l[*j]);\n        }\n        temp_vec.sort();\n\
    \        for (j, k) in even_indicies.iter().enumerate() {\n            l_prime[*k]\
    \ = temp_vec[j];\n        }\n    }\n    for i in odd_indicies {\n        l_prime[i]\
    \ = l[i];\n    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpcr51g7ez.rs:19:9\n   |\n19\
    \ |     for i in even_indicies {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `even_indicies`\n   -->\
    \ /tmp/tmpcr51g7ez.rs:21:18\n    |\n10  |     let mut even_indicies: Vec<usize>\
    \ = Vec::new();\n    |         ----------------- move occurs because `even_indicies`\
    \ has type `Vec<usize>`, which does not implement the `Copy` trait\n...\n19  |\
    \     for i in even_indicies {\n    |              ------------- `even_indicies`\
    \ moved due to this implicit call to `.into_iter()`\n20  |         let mut temp_vec:\
    \ Vec<isize> = Vec::new();\n21  |         for j in even_indicies.iter() {\n  \
    \  |                  ^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `even_indicies`\n    = note: borrow occurs due to deref coercion to `[usize]`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n19  |     for i in &even_indicies {\n    |     \
    \         +\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_prime[i] = l[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpuiitsxhr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    let mut odd_indicies\
    \ = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            even_indicies.push(x);\n        } else {\n            odd_indicies.push(x);\n\
    \        }\n    }\n    even_indicies.sort();\n    for (i, x) in even_indicies.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8gt4oxg2.rs:21:20\n   |\n\
    21 |         l[i * 2] = *x;\n   |         --------   ^^ expected `isize`, found\
    \ `&isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |         l[i * 2] =\
    \ **x;\n   |                    +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   even.push(*x);\n        } else {\n            odd.push(*x);\n        }\n \
    \   }\n    even.sort();\n    for (i, x) in even.iter().enumerate() {\n       \
    \ l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut new_list = l.clone();\n    let mut even_list = Vec::new();\n    for\
    \ (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_list.push(*x);\n\
    \        }\n    }\n    even_list.sort();\n    for (i, x) in even_list.iter().enumerate()\
    \ {\n        new_list[i * 2] = *x;\n    }\n    new_list\n}\n\nfn main() {\n  \
    \  let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010834
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_copy = l.clone();\n    let mut even_indicies: Vec<usize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_copy[i] = l[i];\n \
    \   }\n    l_copy\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp4z_q63p0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            evens.push(l[i]);\n        }\n    }\n  \
    \  evens.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     l[i] = evens[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    let mut i = 0;\n    while i < l.len() {\n        if i % 2 == 0 {\n      \
    \      even.push(l[i]);\n        } else {\n            odd.push(l[i]);\n     \
    \   }\n        i += 1;\n    }\n    even.sort();\n    i = 0;\n    while i < l.len()\
    \ {\n        if i % 2 == 0 {\n            l[i] = even[i / 2];\n        } else\
    \ {\n            l[i] = odd[i / 2];\n        }\n        i += 1;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010834
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices = Vec::new();\n    for\
    \ (i, _) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            even_indices.push(i);\n\
    \        }\n    }\n    for i in even_indices {\n        let mut even_values =\
    \ Vec::new();\n        for j in even_indices {\n            even_values.push(l[j]);\n\
    \        }\n        even_values.sort();\n        for (j, k) in even_indices.iter().enumerate()\
    \ {\n            l_prime[*k] = even_values[j];\n        }\n    }\n    l_prime\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpkbso97pu.rs:16:9\n   |\n16\
    \ |     for i in even_indices {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `even_indices`\n   --> /tmp/tmpkbso97pu.rs:18:18\n\
    \    |\n10  |     let mut even_indices = Vec::new();\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n16  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    17  |         let mut even_values = Vec::new();\n18  |         for j in even_indices\
    \ {\n    |                  ^^^^^^^^^^^^ value used here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `even_indices`\n\
    help: consider iterating over a slice of the `Vec<usize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for i in &even_indices {\n    |      \
    \        +\n\nerror[E0382]: borrow of moved value: `even_indices`\n  --> /tmp/tmpkbso97pu.rs:22:23\n\
    \   |\n10 |     let mut even_indices = Vec::new();\n   |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n18 |         for j in even_indices {\n   |          \
    \        ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n22 |         for (j, k) in even_indices.iter().enumerate() {\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   |\n \
    \  = note: borrow occurs due to deref coercion to `[usize]`\nhelp: consider iterating\
    \ over a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \   |\n18 |         for j in &even_indices {\n   |                  +\n\nerror:\
    \ aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    let temp = l[i];\n    \
    \                l[i] = l[j];\n                    l[j] = temp;\n            \
    \    }\n                j += 1;\n            }\n        }\n        i += 1;\n \
    \   }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd9amc_0m.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            l[i] = l[i + 1];\n        }\n        i += 2;\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpjcos7i8a.rs:13:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_copy = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    for i in even_indicies {\n        l_copy[i] = l[i];\n \
    \   }\n    l_copy\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmprrkciu_w.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indices: Vec<isize> = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l_prime[i] = even_indices[i / 2];\n        }\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010834
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even_indicies = Vec::new();\n    let mut odd_indicies = Vec::new();\n\
    \    for (i, &x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n        \
    \    even_indicies.push(x);\n        } else {\n            odd_indicies.push(x);\n\
    \        }\n    }\n    even_indicies.sort();\n    let mut new_list = Vec::new();\n\
    \    for (i, &x) in even_indicies.iter().enumerate() {\n        new_list.push(x);\n\
    \        new_list.push(odd_indicies[i]);\n    }\n    new_list\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpb0tuw2e2.rs:22:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010834
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    let mut odd = Vec::new();\n\
    \    let mut sorted = Vec::new();\n    for (i, x) in l.iter().enumerate() {\n\
    \        if i % 2 == 0 {\n            even.push(*x);\n        } else {\n     \
    \       odd.push(*x);\n        }\n    }\n    even.sort();\n    for (i, x) in even.iter().enumerate()\
    \ {\n        sorted.push(*x);\n        sorted.push(odd[i]);\n    }\n    sorted\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpnnkz5n35.rs:23:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010834
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = vec![];\n    let mut odd_indices\
    \ = vec![];\n    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n\
    \            even_indices.push(x);\n        } else {\n            odd_indices.push(x);\n\
    \        }\n    }\n    even_indices.sort();\n    for (i, x) in even_indices.iter().enumerate()\
    \ {\n        l[i * 2] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprpjqznur.rs:21:20\n   |\n\
    21 |         l[i * 2] = *x;\n   |         --------   ^^ expected `isize`, found\
    \ `&isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |         l[i * 2] =\
    \ **x;\n   |                    +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even = Vec::new();\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            even.push(l[i]);\n        }\n    }\n   \
    \ even.sort();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n         \
    \   l[i] = even[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    l.swap(i, j);\n       \
    \         }\n                j += 1;\n            }\n        }\n        i += 1;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpc3q7p5kb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_even = Vec::new();\n    let mut l_odd = Vec::new();\n    for (i, x)\
    \ in l.iter().enumerate() {\n        if i % 2 == 0 {\n            l_even.push(*x);\n\
    \        } else {\n            l_odd.push(*x);\n        }\n    }\n    l_even.sort();\n\
    \    let mut l_new = Vec::new();\n    for (i, x) in l_even.iter().enumerate()\
    \ {\n        l_new.push(*x);\n        l_new.push(l_odd[i]);\n    }\n    l_new\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp5glzca25.rs:22:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    let mut even_values = Vec::new();\n    for i in even_indicies {\n\
    \        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in\
    \ 0..even_indicies.len() {\n        l[even_indicies[i]] = even_values[i];\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmptw6fx54s.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i %\
    \ 2 == 0 {\n            let mut j = i + 1;\n            while j < l.len() {\n\
    \                if l[j] < l[i] {\n                    l.swap(i, j);\n       \
    \         }\n                j += 1;\n            }\n        }\n        i += 1;\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpc3q7p5kb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indices.push(i);\n        }\n \
    \   }\n    let mut even_values = Vec::new();\n    for i in even_indices {\n  \
    \      even_values.push(l[i]);\n    }\n    even_values.sort();\n    for i in 0..even_indices.len()\
    \ {\n        l[even_indices[i]] = even_values[i];\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indices`\n   --> /tmp/tmpu6z99xbs.rs:21:17\n\
    \    |\n10  |     let mut even_indices = Vec::new();\n    |         ----------------\
    \ move occurs because `even_indices` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indices {\n    |            \
    \  ------------ `even_indices` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indices.len() {\n    |                 ^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indices`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indices {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for (i, _) in l.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        let mut sub_vec = Vec::new();\n\
    \        for j in i..l.len() {\n            if j % 2 == 0 {\n                sub_vec.push(l[j]);\n\
    \            }\n        }\n        sub_vec.sort();\n        for (j, k) in sub_vec.iter().enumerate()\
    \ {\n            l[i + j] = *k;\n        }\n    }\n    l\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpwd99h8qk.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l2 = l.clone();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n\
    \            l2[i] = l[i];\n        } else {\n            l2[i] = l[i - 1];\n\
    \        }\n    }\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpb838tlee.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut evens = Vec::new();\n    let mut odds = Vec::new();\n\
    \    for (i, x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n         \
    \   odds.push(*x);\n        } else {\n            evens.push(*x);\n        }\n\
    \    }\n    evens.sort();\n    for (i, x) in evens.iter().enumerate() {\n    \
    \    l[2 * i + 1] = *x;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 0, -5, 1, -3, 2, 9, 3, 123, 3, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp_9zh155u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l_prime = l.clone();\n    let mut even_indicies = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n\
    \        }\n    }\n    let mut even_values = Vec::new();\n    for i in even_indicies\
    \ {\n        even_values.push(l[i]);\n    }\n    even_values.sort();\n    for\
    \ i in 0..even_indicies.len() {\n        l_prime[even_indicies[i]] = even_values[i];\n\
    \    }\n    l_prime\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even_indicies`\n   --> /tmp/tmpy_ajrkze.rs:21:17\n\
    \    |\n10  |     let mut even_indicies = Vec::new();\n    |         -----------------\
    \ move occurs because `even_indicies` has type `Vec<usize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for i in even_indicies {\n    |           \
    \   ------------- `even_indicies` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for i in 0..even_indicies.len() {\n    |                 ^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `even_indicies`\nhelp: consider iterating over\
    \ a slice of the `Vec<usize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for i in &even_indicies {\n    |              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indicies.push(l[i]);\n\
    \        }\n    }\n    even_indicies.sort();\n    for i in 0..l.len() {\n    \
    \    if i % 2 == 0 {\n            l[i] = even_indicies[i / 2];\n        }\n  \
    \  }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 0
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indices: Vec<isize> = Vec::new();\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even_indices.push(l[i]);\n\
    \        }\n    }\n    even_indices.sort();\n    for i in 0..l.len() {\n     \
    \   if i % 2 == 0 {\n            l[i] = even_indices[i / 2];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010832
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut l = l;\n    let mut even_indicies = Vec::new();\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicies.push(i);\n        }\n\
    \    }\n    for i in even_indicies {\n        let mut temp = l[i];\n        for\
    \ j in i..l.len() {\n            if l[j] < temp {\n                l[i] = l[j];\n\
    \                l[j] = temp;\n                temp = l[i];\n            }\n \
    \       }\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 5, -5, 3, -3, 3, 0, 9, 1, 123, 2]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpx6tlvr5k.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010834
