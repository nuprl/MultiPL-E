name: HumanEval_55_fib
language: rs
prompt: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
  /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n      \
    \  return 1;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n        return\
    \ n;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n\
    \    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in 1..n {\n        let\
    \ c = a + b;\n        a = b;\n        b = c;\n    }\n    b", "    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);", "    if n == 0 {\n        return 0;\n    }\n    if\
    \ n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \   if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    return fib(n - 1) + fib(n - 2);", "    if n <= 1 {\n        return\
    \ n;\n    }\n    fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n      \
    \  return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }", "    if n <= 1 {\n        return n;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)", "    if n == 0 {\n        return 0;\n    } else if n ==\
    \ 1 {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }", "    if n == 0 {\n        return 0;\n    } else if n == 1 {\n       \
    \ return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }", " \
    \   if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n\
    \        fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        0\n    } else\
    \ if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }",
  "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n        n\n    } else\
    \ {\n        fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1)\
    \ + fib(n - 2);", "    if n == 0 {\n        return 0;\n    }\n    let mut a =\
    \ 0;\n    let mut b = 1;\n    for _ in 1..n {\n        let c = a + b;\n      \
    \  a = b;\n        b = c;\n    }\n    b", "    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);"]
stop_tokens:
- "\n}"
