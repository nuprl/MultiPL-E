language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0\
    \ {\n            String::from(\"A+\")\n        } else if *x >= 3.7 {\n       \
    \     String::from(\"A\")\n        } else if *x >= 3.3 {\n            String::from(\"\
    A-\")\n        } else if *x >= 3.0 {\n            String::from(\"B+\")\n     \
    \   } else if *x >= 2.7 {\n            String::from(\"B\")\n        } else if\
    \ *x >= 2.3 {\n            String::from(\"B-\")\n        } else if *x >= 2.0 {\n\
    \            String::from(\"C+\")\n        } else if *x >= 1.7 {\n           \
    \ String::from(\"C\")\n        } else if *x >= 1.3 {\n            String::from(\"\
    C-\")\n        } else if *x >= 1.0 {\n            String::from(\"D+\")\n     \
    \   } else if *x >= 0.7 {\n            String::from(\"D\")\n        } else if\
    \ *x >= 0.0 {\n            String::from(\"D-\")\n        } else {\n          \
    \  String::from(\"E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp86scqkbe.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpu23xoqhg.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let mut letter_grade = String::new();\n        if\
    \ grade >= 4.0 {\n            letter_grade.push_str(\"A+\");\n        } else if\
    \ grade >= 3.7 {\n            letter_grade.push_str(\"A\");\n        } else if\
    \ grade >= 3.3 {\n            letter_grade.push_str(\"A-\");\n        } else if\
    \ grade >= 3.0 {\n            letter_grade.push_str(\"B+\");\n        } else if\
    \ grade >= 2.7 {\n            letter_grade.push_str(\"B\");\n        } else if\
    \ grade >= 2.3 {\n            letter_grade.push_str(\"B-\");\n        } else if\
    \ grade >= 2.0 {\n            letter_grade.push_str(\"C+\");\n        } else if\
    \ grade >= 1.7 {\n            letter_grade.push_str(\"C\");\n        } else if\
    \ grade >= 1.3 {\n            letter_grade.push_str(\"C-\");\n        } else if\
    \ grade >= 1.0 {\n            letter_grade.push_str(\"D+\");\n        } else if\
    \ grade >= 0.7 {\n            letter_grade.push_str(\"D\");\n        } else if\
    \ grade >= 0.0 {\n            letter_grade.push_str(\"D-\");\n        } else {\n\
    \            letter_grade.push_str(\"E\");\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpuqvraspo.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0\
    \ {\n            String::from(\"A+\")\n        } else if *x >= 3.7 {\n       \
    \     String::from(\"A\")\n        } else if *x >= 3.3 {\n            String::from(\"\
    A-\")\n        } else if *x >= 3.0 {\n            String::from(\"B+\")\n     \
    \   } else if *x >= 2.7 {\n            String::from(\"B\")\n        } else if\
    \ *x >= 2.3 {\n            String::from(\"B-\")\n        } else if *x >= 2.0 {\n\
    \            String::from(\"C+\")\n        } else if *x >= 1.7 {\n           \
    \ String::from(\"C\")\n        } else if *x >= 1.3 {\n            String::from(\"\
    C-\")\n        } else if *x >= 1.0 {\n            String::from(\"D+\")\n     \
    \   } else if *x >= 0.7 {\n            String::from(\"D\")\n        } else if\
    \ *x >= 0.0 {\n            String::from(\"D-\")\n        } else {\n          \
    \  String::from(\"E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp86scqkbe.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0\
    \ {\n            String::from(\"A+\")\n        } else if *g >= 3.7 {\n       \
    \     String::from(\"A\")\n        } else if *g >= 3.3 {\n            String::from(\"\
    A-\")\n        } else if *g >= 3.0 {\n            String::from(\"B+\")\n     \
    \   } else if *g >= 2.7 {\n            String::from(\"B\")\n        } else if\
    \ *g >= 2.3 {\n            String::from(\"B-\")\n        } else if *g >= 2.0 {\n\
    \            String::from(\"C+\")\n        } else if *g >= 1.7 {\n           \
    \ String::from(\"C\")\n        } else if *g >= 1.3 {\n            String::from(\"\
    C-\")\n        } else if *g >= 1.0 {\n            String::from(\"D+\")\n     \
    \   } else if *g >= 0.7 {\n            String::from(\"D\")\n        } else if\
    \ *g >= 0.0 {\n            String::from(\"D-\")\n        } else {\n          \
    \  String::from(\"E\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpgm0d1_8n.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphy7l0anv.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpgn77imd1.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            String::from(\"A+\")\n        } else if *grade >= 3.7\
    \ {\n            String::from(\"A\")\n        } else if *grade >= 3.3 {\n    \
    \        String::from(\"A-\")\n        } else if *grade >= 3.0 {\n           \
    \ String::from(\"B+\")\n        } else if *grade >= 2.7 {\n            String::from(\"\
    B\")\n        } else if *grade >= 2.3 {\n            String::from(\"B-\")\n  \
    \      } else if *grade >= 2.0 {\n            String::from(\"C+\")\n        }\
    \ else if *grade >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *grade >= 1.3 {\n            String::from(\"C-\")\n        } else if *grade\
    \ >= 1.0 {\n            String::from(\"D+\")\n        } else if *grade >= 0.7\
    \ {\n            String::from(\"D\")\n        } else if *grade >= 0.0 {\n    \
    \        String::from(\"D-\")\n        } else {\n            String::from(\"E\"\
    )\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpu23xoqhg.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprns7l_p2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprns7l_p2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprns7l_p2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade\
    \ >= 4.0 {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n\
    \            \"A\".to_string()\n        } else if *grade >= 3.3 {\n          \
    \  \"A-\".to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8u02_9y4.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *x >= 3.7 {\n         \
    \   \"A\".to_string()\n        } else if *x >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *x >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *x >= 2.7 {\n            \"B\".to_string()\n        } else if *x >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *x >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *x >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *x >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *x >= 1.0 {\n            \"D+\".to_string()\n        } else if *x >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *x >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpocypb9fa.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe__pdsyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010642
