name: HumanEval_80_is_happy
language: rs
prompt: "/// You are given a string s.\n/// Your task is to check if the string is\
  \ happy or not.\n/// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n/// For example:\n/// >>> is_happy(a)\n/// false\n/// >>>\
  \ is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n/// >>> is_happy(aabb)\n\
  /// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n/// false\nfn\
  \ is_happy(s: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true", "    if\
    \ s.len() < 3 {\n        return false;\n    }\n    let mut chars = s.chars();\n\
    \    let mut prev = chars.next().unwrap();\n    let mut curr = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    while chars.next().is_some() {\n\
    \        if prev == curr || curr == next || prev == next {\n            return\
    \ false;\n        }\n        prev = curr;\n        curr = next;\n        next\
    \ = chars.next().unwrap();\n    }\n    true", '    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|
    x[0] != x[1] && x[1] != x[2] && x[0] != x[2])', "    let mut result = true;\n\
    \    let mut chars = s.chars();\n    let mut prev_char = chars.next();\n    let\
    \ mut prev_prev_char = chars.next();\n    for c in chars {\n        if prev_char\
    \ == Some(c) || prev_prev_char == Some(c) {\n            result = false;\n   \
    \         break;\n        }\n        prev_prev_char = prev_char;\n        prev_char\
    \ = Some(c);\n    }\n    result", "    let mut chars = s.chars();\n    let mut\
    \ prev = chars.next();\n    let mut prev_prev = chars.next();\n    for c in chars\
    \ {\n        if prev == Some(c) || prev_prev == Some(c) {\n            return\
    \ false;\n        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n\
    \    true", "    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true", "    let\
    \ mut chars = s.chars();\n    let mut prev = chars.next();\n    let mut prev_prev\
    \ = chars.next();\n    for c in chars {\n        if prev == Some(c) || prev_prev\
    \ == Some(c) {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = Some(c);\n    }\n    true", "    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true", "    let mut chars = s.chars();\n    let mut prev\
    \ = chars.next();\n    let mut prev_prev = chars.next();\n    for c in chars {\n\
    \        if prev == Some(c) || prev_prev == Some(c) {\n            return false;\n\
    \        }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true",
  "    let mut chars = s.chars();\n    let mut prev = chars.next();\n    let mut prev_prev\
    \ = chars.next();\n    for c in chars {\n        if prev == Some(c) || prev_prev\
    \ == Some(c) {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = Some(c);\n    }\n    true", "    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true", "    let mut chars = s.chars();\n    let mut prev\
    \ = chars.next();\n    let mut next = chars.next();\n    let mut next_next = chars.next();\n\
    \    while next_next.is_some() {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next();\n    }\n\
    \    true", "    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true", "    let\
    \ mut chars = s.chars();\n    let mut prev = chars.next();\n    let mut prev_prev\
    \ = chars.next();\n    let mut curr = chars.next();\n    while let Some(c) = curr\
    \ {\n        if prev == Some(c) || prev_prev == Some(c) {\n            return\
    \ false;\n        }\n        prev_prev = prev;\n        prev = curr;\n       \
    \ curr = chars.next();\n    }\n    true", "    let mut chars = s.chars();\n  \
    \  let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    for\
    \ c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n       \
    \     return false;\n        }\n        prev_prev = prev;\n        prev = Some(c);\n\
    \    }\n    true", '    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|
    w[0] != w[1] && w[1] != w[2] && w[0] != w[2])', "    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut next = chars.next();\n    let mut\
    \ next_next = chars.next();\n    while let (Some(p), Some(n), Some(nn)) = (prev,\
    \ next, next_next) {\n        if p == n || n == nn || p == nn {\n            return\
    \ false;\n        }\n        prev = next;\n        next = next_next;\n       \
    \ next_next = chars.next();\n    }\n    true", "    let mut chars = s.chars();\n\
    \    let mut prev = chars.next();\n    let mut prev_prev = chars.next();\n   \
    \ for c in chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n   \
    \         return false;\n        }\n        prev_prev = prev;\n        prev =\
    \ Some(c);\n    }\n    true", "    if s.len() < 3 {\n        return false;\n \
    \   }\n    let mut chars = s.chars();\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    while let Some(c) = chars.next() {\n        if first == second || second\
    \ == third || first == third {\n            return false;\n        }\n       \
    \ first = second;\n        second = third;\n        third = c;\n    }\n    true",
  "    let mut chars = s.chars();\n    let mut prev = chars.next();\n    let mut prev_prev\
    \ = chars.next();\n    for c in chars {\n        if prev == Some(c) || prev_prev\
    \ == Some(c) {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = Some(c);\n    }\n    true"]
stop_tokens:
- "\n}"
