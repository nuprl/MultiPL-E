name: HumanEval_160_do_algebra
language: rs
prompt: "/// Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n/// the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ list is equal to the length of operand list minus one.\n/// Operand is a list\
  \ of of non-negative integers.\n/// Operator list has at least one operator, and\
  \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
  \ operand: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = operand[0];\n    for i in 0..operator.len() {\n\
    \        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let val = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += val,\n            \"-\" => result -= val,\n\
    \            \"*\" => result *= val,\n            \"//\" => result /= val,\n \
    \           \"**\" => result = result.pow(val as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n        let\
    \ op_num = operand[i + 1];\n        match op.as_str() {\n            \"+\" =>\
    \ result += op_num,\n            \"-\" => result -= op_num,\n            \"*\"\
    \ => result *= op_num,\n            \"//\" => result /= op_num,\n            \"\
    **\" => result = result.pow(op_num as u32),\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let op1 = operand[i];\n        let\
    \ op2 = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ = op1 + op2,\n            \"-\" => result = op1 - op2,\n            \"*\" =>\
    \ result = op1 * op2,\n            \"//\" => result = op1 / op2,\n           \
    \ \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator\"\
    ),\n        }\n    }\n    result", "    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        match operator[i].as_str() {\n           \
    \ \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => println!(\"Invalid operator\"),\n        }\n    }\n    result", "   \
    \ let mut result = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += op1,\n  \
    \          \"-\" => result -= op1,\n            \"*\" => result *= op1,\n    \
    \        \"//\" => result /= op1,\n            \"**\" => result = result.pow(op1\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n        let\
    \ op_num = operand[i + 1];\n        match op.as_str() {\n            \"+\" =>\
    \ result += op_num,\n            \"-\" => result -= op_num,\n            \"*\"\
    \ => result *= op_num,\n            \"//\" => result /= op_num,\n            \"\
    **\" => result = result.pow(op_num as u32),\n            _ => panic!(\"Unknown\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op = op.as_str();\n        let operand = operand[i + 1];\n      \
    \  match op {\n            \"+\" => result += operand,\n            \"-\" => result\
    \ -= operand,\n            \"*\" => result *= operand,\n            \"//\" =>\
    \ result /= operand,\n            \"**\" => result = result.pow(operand as u32),\n\
    \            _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result",
  "    let mut result = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ op1 = operand[i];\n        let op2 = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result = op1 + op2,\n            \"-\" => result = op1\
    \ - op2,\n            \"*\" => result = op1 * op2,\n            \"//\" => result\
    \ = op1 / op2,\n            \"**\" => result = op1.pow(op2 as u32),\n        \
    \    _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let op1 = operand[i];\n        let op2 = operand[i +\
    \ 1];\n        match op.as_str() {\n            \"+\" => result = op1 + op2,\n\
    \            \"-\" => result = op1 - op2,\n            \"*\" => result = op1 *\
    \ op2,\n            \"//\" => result = op1 / op2,\n            \"**\" => result\
    \ = op1.pow(op2 as u32),\n            _ => panic!(\"Invalid operator\"),\n   \
    \     }\n    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ num = operand[i + 1];\n        result = match op.as_str() {\n            \"\
    +\" => result + num,\n            \"-\" => result - num,\n            \"*\" =>\
    \ result * num,\n            \"//\" => result / num,\n            \"**\" => result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n        };\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op = match op.as_str() {\n            \"+\" => |x, y| x + y,\n\
    \            \"-\" => |x, y| x - y,\n            \"*\" => |x, y| x * y,\n    \
    \        \"//\" => |x, y| x / y,\n            \"**\" => |x, y| x.pow(y as u32),\n\
    \            _ => panic!(\"Unknown operator\"),\n        };\n        result =\
    \ op(result, operand[i + 1]);\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let operand1 = result;\n        let operand2 = operand[i + 1];\n\
    \        match op.as_str() {\n            \"+\" => result = operand1 + operand2,\n\
    \            \"-\" => result = operand1 - operand2,\n            \"*\" => result\
    \ = operand1 * operand2,\n            \"//\" => result = operand1 / operand2,\n\
    \            \"**\" => result = operand1.pow(operand2 as u32),\n            _\
    \ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let mut\
    \ result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ num = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += num,\n            \"-\" => result -= num,\n            \"*\" => result *=\
    \ num,\n            \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result += op2,\n            \"-\" => result -= op2,\n            \"*\"\
    \ => result *= op2,\n            \"//\" => result /= op2,\n            \"**\"\
    \ => result = result.pow(op2 as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ num = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += num,\n            \"-\" => result -= num,\n            \"*\" => result *=\
    \ num,\n            \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let operand_1 = result;\n        let operand_2 = operand[i + 1];\n\
    \        result = match op.as_str() {\n            \"+\" => operand_1 + operand_2,\n\
    \            \"-\" => operand_1 - operand_2,\n            \"*\" => operand_1 *\
    \ operand_2,\n            \"//\" => operand_1 / operand_2,\n            \"**\"\
    \ => operand_1.pow(operand_2 as u32),\n            _ => panic!(\"Invalid operator\"\
    ),\n        };\n    }\n    result", "    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        match operator[i].as_str() {\n           \
    \ \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        let op = &operator[i];\n        let\
    \ num = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += num,\n            \"-\" => result -= num,\n            \"*\" => result *=\
    \ num,\n            \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        let op =\
    \ &operator[i];\n        let num = operand[i + 1];\n        match op.as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unsupported operator\"),\n        }\n    }\n    result", " \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for (i, op) in operator.iter().enumerate() {\n        match op.as_str() {\n\
    \            \"+\" => result += operand[i + 1],\n            \"-\" => result -=\
    \ operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n          \
    \  \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n    \
    \    }\n    }\n    result", "    let mut result = operand[0];\n    for (i, op)\
    \ in operator.iter().enumerate() {\n        match op.as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let op1 = operand[i];\n        let\
    \ op2 = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ = op1 + op2,\n            \"-\" => result = op1 - op2,\n            \"*\" =>\
    \ result = op1 * op2,\n            \"//\" => result = op1 / op2,\n           \
    \ \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => result = 0,\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op2 = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => result += op2,\n            \"\
    -\" => result -= op2,\n            \"*\" => result *= op2,\n            \"//\"\
    \ => result /= op2,\n            \"**\" => result = result.pow(op2 as u32),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator!\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        let op_result = match op.as_str() {\n            \"+\" => result\
    \ + operand[i + 1],\n            \"-\" => result - operand[i + 1],\n         \
    \   \"*\" => result * operand[i + 1],\n            \"//\" => result / operand[i\
    \ + 1],\n            \"**\" => result.pow(operand[i + 1] as u32),\n          \
    \  _ => panic!(\"Invalid operator\"),\n        };\n        result = op_result;\n\
    \    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut stack: Vec<isize> = Vec::new();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < operand.len() {\n        stack.push(operand[i]);\n\
    \        if j < operator.len() {\n            match operator[j].as_str() {\n \
    \               \"+\" => {\n                    let a = stack.pop().unwrap();\n\
    \                    let b = stack.pop().unwrap();\n                    stack.push(a\
    \ + b);\n                }\n                \"-\" => {\n                    let\
    \ a = stack.pop().unwrap();\n                    let b = stack.pop().unwrap();\n\
    \                    stack.push(b - a);\n                }\n                \"\
    *\" => {\n                    let a = stack.pop().unwrap();\n                \
    \    let b = stack.pop().unwrap();\n                    stack.push(a * b);\n \
    \               }\n                \"/\" => {\n                    let a = stack.pop().unwrap();\n\
    \                    let b = stack.pop().unwrap();\n                    stack.push(b\
    \ / a);\n                }\n                \"^\" => {\n                    let\
    \ a = stack.pop().unwrap();\n                    let b = stack.pop().unwrap();\n\
    \                    stack.push(b.pow(a as u32));\n                }\n       \
    \         _ => {}\n            }\n            j += 1;\n        }\n        i +=\
    \ 1;\n    }\n    stack.pop().unwrap()", "    let mut result = operand[0];\n  \
    \  for i in 0..operator.len() {\n        match operator[i].as_str() {\n      \
    \      \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => (),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_str() {\n            \"+\" => result += num,\n            \"-\"\
    \ => result -= num,\n            \"*\" => result *= num,\n            \"//\" =>\
    \ result /= num,\n            \"**\" => result = result.pow(num as u32),\n   \
    \         _ => panic!(\"Unknown operator {}\", op),\n        }\n    }\n    result",
  "    let mut result = operand[0];\n    for i in 0..operator.len() {\n        let\
    \ op = &operator[i];\n        let op1 = operand[i];\n        let op2 = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result = op1 + op2,\n\
    \            \"-\" => result = op1 - op2,\n            \"*\" => result = op1 *\
    \ op2,\n            \"//\" => result = op1 / op2,\n            \"**\" => result\
    \ = op1.pow(op2 as u32),\n            _ => panic!(\"Unknown operator\"),\n   \
    \     }\n    }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let operand2 = operand[i + 1];\n        match op.as_str() {\n       \
    \     \"+\" => result += operand2,\n            \"-\" => result -= operand2,\n\
    \            \"*\" => result *= operand2,\n            \"//\" => result /= operand2,\n\
    \            \"**\" => result = result.pow(operand2 as u32),\n            _ =>\
    \ panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_str() {\n            \"+\" => result += num,\n            \"-\"\
    \ => result -= num,\n            \"*\" => result *= num,\n            \"//\" =>\
    \ result /= num,\n            \"**\" => result = result.pow(num as u32),\n   \
    \         _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", " \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n   \
    \         \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i\
    \ + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" =>\
    \ result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for (i, op) in operator.iter().enumerate() {\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Unknown operator: {}\", operator[i]),\n        }\n    }\n  \
    \  result", "    let mut result = operand[0];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        match op.as_str() {\n            \"+\" => result += operand[i + 1],\n\
    \            \"-\" => result -= operand[i + 1],\n            \"*\" => result *=\
    \ operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n         \
    \   \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"\
    Unknown operator\"),\n        }\n    }\n    result", "    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result", "    let mut result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result", "    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result", "    let\
    \ mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result"]
stop_tokens:
- "\n}"
