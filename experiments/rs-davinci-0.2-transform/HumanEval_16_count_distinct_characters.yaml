name: HumanEval_16_count_distinct_characters
language: rs
prompt: "/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"\
  ))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn\
  \ count_distinct_characters(string: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut distinct_characters = HashSet::new();\n    for character\
    \ in string.chars() {\n        distinct_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut chars = string.chars().collect::<Vec<char>>();\n\
    \    chars.sort();\n    chars.dedup();\n    chars.len() as isize", "    let mut\
    \ distinct_characters = HashSet::new();\n    for character in string.chars() {\n\
    \        distinct_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut chars: Vec<char>\
    \ = string.chars().collect();\n    chars.sort();\n    chars.dedup();\n    chars.len()\
    \ as isize", "    let mut distinct_characters: HashSet<char> = HashSet::new();\n\
    \    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut distinct_characters\
    \ = HashSet::new();\n    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut chars: HashSet<char>\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize", "    let mut distinct_characters = HashSet::new();\n\
    \    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut count = 0;\n   \
    \ let mut chars = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    count = chars.len() as isize;\n    count", "    let mut chars: HashSet<char>\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize", "    let mut chars: Vec<char> = Vec::new();\n\
    \    for c in string.chars() {\n        if !chars.contains(&c.to_ascii_lowercase())\
    \ {\n            chars.push(c.to_ascii_lowercase());\n        }\n    }\n    chars.len()\
    \ as isize", "    let mut characters: Vec<char> = string.chars().collect();\n\
    \    characters.sort();\n    characters.dedup();\n    characters.len() as isize",
  "    let mut distinct_characters = HashSet::new();\n    for character in string.chars()\
    \ {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut chars: HashSet<char>\
    \ = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize", "    let mut distinct_characters: HashSet<char>\
    \ = HashSet::new();\n    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut distinct_characters\
    \ = HashSet::new();\n    for c in string.chars() {\n        distinct_characters.insert(c.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut distinct_chars =\
    \ HashSet::new();\n    for c in string.chars() {\n        distinct_chars.insert(c.to_lowercase().to_string());\n\
    \    }\n    distinct_chars.len() as isize", "    let mut distinct_characters =\
    \ HashSet::new();\n    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize", "    let mut distinct_chars =\
    \ HashSet::new();\n    for c in string.chars() {\n        distinct_chars.insert(c.to_lowercase().to_string());\n\
    \    }\n    distinct_chars.len() as isize", "    let mut distinct_characters =\
    \ HashSet::new();\n    for character in string.chars() {\n        distinct_characters.insert(character.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize"]
stop_tokens:
- "\n}"
