name: HumanEval_122_add_elements
language: rs
prompt: "/// Given a non-empty array of integers arr and an integer k, return\n///\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  /// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n///\
  \ 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\n\
  fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i\
    \ as usize];\n        if num < 10 {\n            sum += num;\n        } else if\
    \ num < 100 {\n            sum += num;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n        \
    \    sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for i in\
    \ 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", '    arr.iter().take(k as usize).filter(|&x| x <
    100).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", " \
    \   let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n\
    \            sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n        \
    \    sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for i in\
    \ 0..k {\n        if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n    \
    \    if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n       \
    \ }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ num = arr[i as usize];\n        if num < 10 {\n            sum += num;\n   \
    \     } else if num < 100 {\n            sum += num / 10 + num % 10;\n       \
    \ } else {\n            sum += num / 100 + (num % 100) / 10 + num % 10;\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        let\
    \ num = arr[i as usize];\n        if num < 100 {\n            sum += num;\n  \
    \      }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n      \
    \  if arr[i as usize] < 100 {\n            sum += arr[i as usize];\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            sum += arr[i as usize];\n        }\n    }\n    sum", " \
    \   let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 100 {\n            sum += num;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 100 {\n            sum += num;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n\
    \            sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n        \
    \    sum += arr[i as usize];\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
