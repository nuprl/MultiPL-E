language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq35fx955.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: Implement the function here\n    false\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp196h8k_m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b && a > c {\n        b * b + c * c == a * a\n    } else if b\
    \ > a && b > c {\n        a * a + c * c == b * b\n    } else {\n        a * a\
    \ + b * b == c * c\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw__byb1o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw__byb1o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9jwnu4hk.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwhvwdlfj.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw__byb1o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw__byb1o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoqw0qlty.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b && a > c {\n        a * a == b * b + c * c\n    } else if b\
    \ > a && b > c {\n        b * b == a * a + c * c\n    } else {\n        c * c\
    \ == a * a + b * b\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
