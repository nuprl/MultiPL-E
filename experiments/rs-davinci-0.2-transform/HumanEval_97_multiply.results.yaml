language: rs
name: HumanEval_97_multiply
results:
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let mut a = a;\n    let mut b = b;\n    if\
    \ a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    let a = a.abs();\n    let b = b.abs();\n  \
    \  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>>\
    \ multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a:\
    \ isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf1qi2y7i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011327
