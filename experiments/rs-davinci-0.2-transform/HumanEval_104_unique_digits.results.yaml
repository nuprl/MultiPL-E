language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ unimplemented!()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpo4nesj65.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for num in x {\n        if num.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(num);\n       \
    \ }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            res.push(num);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp97p4bb8v.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even = false;\n        let mut num = i;\n        while num > 0 {\n     \
    \       if num % 2 == 0 {\n                has_even = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if !has_even {\n  \
    \          result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4mywt2dx.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even = false;\n        let mut n = i;\n        while n > 0 {\n         \
    \   if n % 2 == 0 {\n                has_even = true;\n                break;\n\
    \            }\n            n /= 10;\n        }\n        if !has_even {\n    \
    \        result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ flag = true;\n        let mut num = i;\n        while num > 0 {\n          \
    \  if num % 2 == 0 {\n                flag = false;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if flag {\n       \
    \     result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| {\n        n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)\n    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp3jll8nn4.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut num = i;\n        while num > 0 {\n            if\
    \ num % 2 == 0 {\n                has_even = true;\n                break;\n \
    \           }\n            num /= 10;\n        }\n        if !has_even {\n   \
    \         result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even_digit = false;\n        let mut number = i;\n        while number >\
    \ 0 {\n            if number % 2 == 0 {\n                has_even_digit = true;\n\
    \                break;\n            }\n            number /= 10;\n        }\n\
    \        if !has_even_digit {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| {\n        let mut n = n;\n        while n > 0 {\n\
    \            if n % 2 == 0 {\n                return false;\n            }\n \
    \           n /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpcerqjg95.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut flag\
    \ = true;\n        let mut temp = i;\n        while temp > 0 {\n            if\
    \ temp % 2 == 0 {\n                flag = false;\n                break;\n   \
    \         }\n            temp /= 10;\n        }\n        if flag {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ is_unique = true;\n        for j in i.to_string().chars() {\n            if\
    \ j.to_digit(10).unwrap() % 2 == 0 {\n                is_unique = false;\n   \
    \             break;\n            }\n        }\n        if is_unique {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp1yukp7cv.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut num = i;\n        while num > 0 {\n            if\
    \ num % 2 == 0 {\n                has_even = true;\n                break;\n \
    \           }\n            num /= 10;\n        }\n        if !has_even {\n   \
    \         result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut v = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            v.push(i);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpfpnfv778.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp94ol6xar.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut is_unique\
    \ = true;\n        let mut n = i;\n        while n > 0 {\n            if n % 2\
    \ == 0 {\n                is_unique = false;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if is_unique {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp1yukp7cv.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ is_unique = true;\n        for j in i.to_string().chars() {\n            if\
    \ j.to_digit(10).unwrap() % 2 == 0 {\n                is_unique = false;\n   \
    \             break;\n            }\n        }\n        if is_unique {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| {\n        let mut n = n;\n        while n > 0 {\n\
    \            if n % 2 == 0 {\n                return false;\n            }\n \
    \           n /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpcerqjg95.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut is_even\
    \ = false;\n        let mut num = i;\n        while num > 0 {\n            if\
    \ num % 2 == 0 {\n                is_even = true;\n                break;\n  \
    \          }\n            num /= 10;\n        }\n        if !is_even {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even = false;\n        let mut n = i;\n        while n > 0 {\n         \
    \   if n % 2 == 0 {\n                has_even = true;\n                break;\n\
    \            }\n            n /= 10;\n        }\n        if !has_even {\n    \
    \        result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        let mut has_even = false;\n\
    \        let mut n = i;\n        while n > 0 {\n            if n % 2 == 0 {\n\
    \                has_even = true;\n                break;\n            }\n   \
    \         n /= 10;\n        }\n        if !has_even {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    for i in x {\n        let mut has_even = false;\n\
    \        let mut num = i;\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                has_even = true;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut is_unique\
    \ = true;\n        let mut j = i;\n        while j > 0 {\n            if j % 2\
    \ == 0 {\n                is_unique = false;\n                break;\n       \
    \     }\n            j /= 10;\n        }\n        if is_unique {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ flag = true;\n        let mut n = i;\n        while n > 0 {\n            if\
    \ n % 2 == 0 {\n                flag = false;\n                break;\n      \
    \      }\n            n /= 10;\n        }\n        if flag {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even = false;\n        let mut j = i;\n        while j > 0 {\n         \
    \   if j % 2 == 0 {\n                has_even = true;\n                break;\n\
    \            }\n            j /= 10;\n        }\n        if !has_even {\n    \
    \        result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp1yukp7cv.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut tmp = i;\n        while tmp > 0 {\n            if\
    \ tmp % 2 == 0 {\n                has_even = true;\n                break;\n \
    \           }\n            tmp /= 10;\n        }\n        if !has_even {\n   \
    \         result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ flag = true;\n        let mut temp = i;\n        while temp > 0 {\n        \
    \    if temp % 10 % 2 == 0 {\n                flag = false;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if flag {\n      \
    \      result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even_digit = false;\n        let mut n = i;\n        while n > 0 {\n   \
    \         if n % 2 == 0 {\n                has_even_digit = true;\n          \
    \      break;\n            }\n            n /= 10;\n        }\n        if !has_even_digit\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4mywt2dx.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ has_even_digit = false;\n        let mut num = i;\n        while num > 0 {\n\
    \            if num % 2 == 0 {\n                has_even_digit = true;\n     \
    \           break;\n            }\n            num /= 10;\n        }\n       \
    \ if !has_even_digit {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| {\n        let mut n = n;\n        while n > 0 {\n\
    \            if n % 2 == 0 {\n                return false;\n            }\n \
    \           n /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpcerqjg95.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut n = i;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut v = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            v.push(i);\n        }\n   \
    \ }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ is_unique = true;\n        for j in i.to_string().chars() {\n            if\
    \ j.to_digit(10).unwrap() % 2 == 0 {\n                is_unique = false;\n   \
    \             break;\n            }\n        }\n        if is_unique {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4mywt2dx.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpczz1yqba.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut v = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            v.push(i);\n        }\n   \
    \ }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpad5ha51x.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for i in x {\n        let mut has_even = false;\n\
    \        let mut num = i;\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                has_even = true;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        let mut has_even\
    \ = false;\n        let mut num = i;\n        while num > 0 {\n            if\
    \ num % 2 == 0 {\n                has_even = true;\n                break;\n \
    \           }\n            num /= 10;\n        }\n        if !has_even {\n   \
    \         result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkx7kn00i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp94ol6xar.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpauww8xsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut v = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            v.push(i);\n        }\n   \
    \ }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&x| {\n        let mut x = x;\n        while x > 0 {\n\
    \            if x % 2 == 0 {\n                return false;\n            }\n \
    \           x /= 10;\n        }\n        true\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_uqdb1qr.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028086
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ x.into_iter().filter(|&n| !has_even_digit(n)).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpgem1fepw.rs:10:32\n   |\n10 |     x.into_iter().filter(|&n| !has_even_digit(n)).collect()\n\
    \   |                                ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028086
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp4qpxna_3.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028085
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::<isize>::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028085
