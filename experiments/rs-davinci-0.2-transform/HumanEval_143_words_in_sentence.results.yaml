language: rs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut words: Vec<String> = sentence.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    words.retain(|s| is_prime(s.len()));\n    words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplrff1hno.rs:17:22\n\
    \   |\n17 |     words.retain(|s| is_prime(s.len()));\n   |                   \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if is_prime(word.len()) {\n            result.push_str(word);\n     \
    \       result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dlnmdqr.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if is_prime(word.len()) {\n            result.push_str(word);\n     \
    \       result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dlnmdqr.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(\" \").collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpi2id0m6g.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(\" \").collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpi2id0m6g.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(' ').collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5o7b16ed.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if is_prime(word.len()) {\n            result.push_str(word);\n     \
    \       result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dlnmdqr.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(\" \").collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpi2id0m6g.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words:\
    \ Vec<&str> = sentence.split_whitespace().collect();\n    for word in words.iter_mut()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp_b7ef1wo.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut words = sentence.split_whitespace();\n    let\
    \ mut result = String::new();\n    while let Some(word) = words.next() {\n   \
    \     if is_prime(word.len()) {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\n\
    fn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwnh9reda.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    if result.is_empty() {\n\
    \        result\n    } else {\n        result.pop();\n        result\n    }\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp1lnvmufv.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(\" \").collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpi2id0m6g.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(' ').collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5o7b16ed.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(' ').collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5o7b16ed.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split('\
    \ ') {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyg3exrfs.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let words: Vec<&str> = sentence.split(' ').collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5o7b16ed.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if is_prime(word.len()) {\n            result.push_str(word);\n     \
    \       result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dlnmdqr.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split('\
    \ ') {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyg3exrfs.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut words = sentence.split_whitespace();\n    let\
    \ mut result = String::new();\n    for word in words {\n        if is_prime(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\"\
    )), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for\
    \ swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5mao4fsl.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        if is_prime(word.len()) {\n            result.push_str(word);\n     \
    \       result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dlnmdqr.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split('\
    \ ') {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyg3exrfs.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let words = sentence.split_whitespace();\n\
    \    for word in words {\n        if is_prime(word.len()) {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp63gbspx2.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut res = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            res.push_str(word);\n    \
    \        res.push(' ');\n        }\n    }\n    res.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvoungr_v.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if first {\n                first = false;\n            } else\
    \ {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwoe_azzs.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_first\
    \ = true;\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"\
    ));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"\
    go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available\
    \ here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"\
    Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"\
    go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"\
    here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\"\
    )), String::from(\"is\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfxt8hv66.rs:19:12\n\
    \   |\n19 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk_ovbbbj.rs:18:24\n\
    \   |\n18 |         .filter(|word| is_prime(word.len()))\n   |               \
    \         ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace()\
    \ {\n        if is_prime(word.len()) {\n            result.push_str(word);\n \
    \           result.push(' ');\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
    This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
    lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
    there is no place available here\")), String::from(\"there is no place\"));\n\
    \    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"\
    Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
    go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvri7tcy3.rs:18:12\n\
    \   |\n18 |         if is_prime(word.len()) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660015811
