name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\"\
  )\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"\
  game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"\
  ), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\n\
  fn find_max(words: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max_count {\n            max_count = chars.len();\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut chars = HashSet::new();\n        for c in word.chars() {\n  \
    \          chars.insert(c);\n        }\n        if chars.len() > max_unique_chars\
    \ {\n            max_unique_chars = chars.len();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_unique_chars = 0;\n    for word in words {\n        let mut unique_chars\
    \ = 0;\n        for c in word.chars() {\n            if !max_word.contains(c)\
    \ {\n                unique_chars += 1;\n            }\n        }\n        if\
    \ unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut count =\
    \ 0;\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            if !chars.contains(&c) {\n                count += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = words[0].clone();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = 0;\n        for\
    \ c in word.chars() {\n            if !max_word.contains(c) {\n              \
    \  unique_chars += 1;\n            }\n        }\n        if unique_chars > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_len\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_len {\n            max_len = chars.len();\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_word =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_count {\n     \
    \       max_count = chars.len();\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = 0;\n        for c in word.chars() {\n        \
    \    if !max_word.contains(c) {\n                unique_chars += 1;\n        \
    \    }\n        }\n        if unique_chars > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_len = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_len {\n            max_len = chars.len();\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            unique_chars.insert(c);\n        }\n        if unique_chars.len()\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_len {\n       \
    \     max_len = chars.len();\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut unique_chars = HashSet::new();\n        for c in word.chars() {\n\
    \            unique_chars.insert(c);\n        }\n        if unique_chars.len()\
    \ > max_count {\n            max_count = unique_chars.len();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut count =\
    \ 0;\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            if !chars.contains(&c) {\n                count += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = words[0].clone();\n    let mut max_count = 0;\n    for word in words {\n \
    \       let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ ch in word.chars() {\n            if !chars.contains(&ch) {\n              \
    \  count += 1;\n                chars.insert(ch);\n            }\n        }\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ ch in word.chars() {\n            if !chars.contains(&ch) {\n              \
    \  count += 1;\n                chars.insert(ch);\n            }\n        }\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = 0;\n        for\
    \ c in word.chars() {\n            if !max_word.contains(c) {\n              \
    \  unique_chars += 1;\n            }\n        }\n        if unique_chars > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars: HashSet<char> = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut set = HashSet::new();\n\
    \        for c in word.chars() {\n            set.insert(c);\n        }\n    \
    \    if set.len() > max_count {\n            max_count = set.len();\n        \
    \    max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_len {\n       \
    \     max_len = chars.len();\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = 0;\n        for\
    \ c in word.chars() {\n            if word.matches(c).count() == 1 {\n       \
    \         unique_chars += 1;\n            }\n        }\n        if unique_chars\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars;\n       \
    \     max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = 0;\n        for c in word.chars() {\n        \
    \    if !max_word.contains(c) {\n                unique_chars += 1;\n        \
    \    }\n        }\n        if unique_chars > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_unique_chars = 0;\n    for word in words {\n        let unique_chars\
    \ = word.chars().collect::<HashSet<char>>().len();\n        if unique_chars >\
    \ max_unique_chars {\n            max_unique_chars = unique_chars;\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_word =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let mut letters = HashSet::new();\n        for letter in word.chars() {\n \
    \           letters.insert(letter);\n        }\n        if letters.len() > max_count\
    \ {\n            max_count = letters.len();\n            max_word = word;\n  \
    \      }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = words[0].clone();\n    let mut max_unique_chars = 0;\n    for word in words\
    \ {\n        let mut unique_chars = 0;\n        for c in word.chars() {\n    \
    \        if !max_word.contains(c) {\n                unique_chars += 1;\n    \
    \        }\n        }\n        if unique_chars > max_unique_chars {\n        \
    \    max_unique_chars = unique_chars;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_unique_chars = 0;\n    for\
    \ word in words {\n        let mut unique_chars = 0;\n        for c in word.chars()\
    \ {\n            if word.matches(c).count() == 1 {\n                unique_chars\
    \ += 1;\n            }\n        }\n        if unique_chars > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut count = 0;\n\
    \        let mut chars = HashSet::new();\n        for c in word.chars() {\n  \
    \          if !chars.contains(&c) {\n                count += 1;\n           \
    \     chars.insert(c);\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_unique_chars {\n            max_unique_chars = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut set = HashSet::new();\n        for c in word.chars() {\n          \
    \  set.insert(c);\n        }\n        if set.len() > max_len {\n            max_len\
    \ = set.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = words[0].clone();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            unique_chars.insert(c);\n        }\n        if unique_chars.len()\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for ch in word.chars() {\n            chars.insert(ch);\n        }\n   \
    \     if chars.len() > max_count {\n            max_count = chars.len();\n   \
    \         max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut seen\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !seen.contains(&c)\
    \ {\n                count += 1;\n                seen.insert(c);\n          \
    \  }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_len\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_len {\n            max_len = chars.len();\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_word =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let mut count = 0;\n        let mut chars = HashSet::new();\n        for c\
    \ in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_unique_chars = 0;\n    for word in words {\n        let mut unique_chars\
    \ = 0;\n        for c in word.chars() {\n            if word.matches(c).count()\
    \ == 1 {\n                unique_chars += 1;\n            }\n        }\n     \
    \   if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = words[0].clone();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_unique_chars = 0;\n    for\
    \ word in words {\n        let mut unique_chars = 0;\n        for c in word.chars()\
    \ {\n            if !max_word.contains(c) {\n                unique_chars += 1;\n\
    \            }\n        }\n        if unique_chars > max_unique_chars {\n    \
    \        max_unique_chars = unique_chars;\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut set = HashSet::new();\n     \
    \   for c in word.chars() {\n            set.insert(c);\n        }\n        if\
    \ set.len() > max_count {\n            max_count = set.len();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_unique_chars = 0;\n    for word in words {\n        let mut unique_chars\
    \ = 0;\n        for c in word.chars() {\n            if word.matches(c).count()\
    \ == 1 {\n                unique_chars += 1;\n            }\n        }\n     \
    \   if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = 0;\n        for c in word.chars() {\n        \
    \    if !max_word.contains(c) {\n                unique_chars += 1;\n        \
    \    }\n        }\n        if unique_chars > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_unique_count = 0;\n    for\
    \ word in words {\n        let unique_count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_count > max_unique_count {\n            max_unique_count =\
    \ unique_count;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_unique_chars = 0;\n    for\
    \ word in words {\n        let mut unique_chars = 0;\n        for c in word.chars()\
    \ {\n            if !max_word.contains(c) {\n                unique_chars += 1;\n\
    \            }\n        }\n        if unique_chars > max_unique_chars {\n    \
    \        max_unique_chars = unique_chars;\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_len\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_len {\n            max_len = chars.len();\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_word =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_count {\n     \
    \       max_count = chars.len();\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_unique_chars {\n            max_unique_chars = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_len {\n       \
    \     max_len = chars.len();\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            unique_chars.insert(c);\n        }\n        if unique_chars.len()\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = 0;\n        for\
    \ c in word.chars() {\n            if word.matches(c).count() == 1 {\n       \
    \         unique_chars += 1;\n            }\n        }\n        if unique_chars\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars;\n       \
    \     max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut seen = HashSet::new();\n        for c in word.chars() {\n       \
    \     seen.insert(c);\n        }\n        if seen.len() > max_count {\n      \
    \      max_count = seen.len();\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut set = HashSet::new();\n        for c in word.chars() {\n          \
    \  set.insert(c);\n        }\n        if set.len() > max_len {\n            max_len\
    \ = set.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut count = 0;\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            if !chars.contains(&c) {\n     \
    \           count += 1;\n                chars.insert(c);\n            }\n   \
    \     }\n        if count > max_count {\n            max_count = count;\n    \
    \        max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut char_set = HashSet::new();\n        for c in word.chars() {\n     \
    \       char_set.insert(c);\n        }\n        if char_set.len() > max_len {\n\
    \            max_len = char_set.len();\n            max_word = word;\n       \
    \ }\n    }\n    max_word", "    let mut max_word = String::new();\n    let mut\
    \ max_len = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_len {\n            max_len = chars.len();\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = 0;\n        for c in word.chars() {\n        \
    \    if word.matches(c).count() == 1 {\n                unique_chars += 1;\n \
    \           }\n        }\n        if unique_chars > max_unique_chars {\n     \
    \       max_unique_chars = unique_chars;\n            max_word = word;\n     \
    \   }\n    }\n    max_word", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = HashSet::new();\n\
    \        for ch in word.chars() {\n            unique_chars.insert(ch);\n    \
    \    }\n        if unique_chars.len() > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_unique_chars = 0;\n    for\
    \ word in words {\n        let mut unique_chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            unique_chars.insert(c);\n        }\n      \
    \  if unique_chars.len() > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = words[0].clone();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut unique_chars = 0;\n        for c in word.chars() {\n        \
    \    if word.matches(c).count() == 1 {\n                unique_chars += 1;\n \
    \           }\n        }\n        if unique_chars > max_unique_chars {\n     \
    \       max_unique_chars = unique_chars;\n            max_word = word;\n     \
    \   }\n    }\n    max_word", "    let mut max_word = String::new();\n    let mut\
    \ max_unique_chars = 0;\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n    for word in words {\n        let mut unique_chars = HashSet::new();\n\
    \        for c in word.chars() {\n            unique_chars.insert(c);\n      \
    \  }\n        if unique_chars.len() > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut char_count = 0;\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            if !chars.contains(&c) {\n     \
    \           chars.insert(c);\n                char_count += 1;\n            }\n\
    \        }\n        if char_count > max_count {\n            max_count = char_count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word"]
stop_tokens:
- "\n}"
