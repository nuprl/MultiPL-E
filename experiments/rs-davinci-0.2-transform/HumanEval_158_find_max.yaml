name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\"\
  )\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"\
  game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"\
  ), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\n\
  fn find_max(words: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max_count {\n            max_count = chars.len();\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let mut chars = HashSet::new();\n        for c in word.chars() {\n  \
    \          chars.insert(c);\n        }\n        if chars.len() > max_unique_chars\
    \ {\n            max_unique_chars = chars.len();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique_chars = 0;\n    for word in words {\n\
    \        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n \
    \       if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut count = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                count\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_unique_chars = 0;\n    for word in words {\n        let mut unique_chars\
    \ = 0;\n        for c in word.chars() {\n            if !max_word.contains(c)\
    \ {\n                unique_chars += 1;\n            }\n        }\n        if\
    \ unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word"]
stop_tokens:
- "\n}"
