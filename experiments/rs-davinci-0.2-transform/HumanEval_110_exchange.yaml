name: HumanEval_110_exchange
language: rs
prompt: "/// In this problem, you will implement a function that takes two lists of\
  \ numbers,\n/// and determines whether it is possible to perform an exchange of\
  \ elements\n/// between them to make lst1 a list of only even numbers.\n/// There\
  \ is no limit on the number of exchanged elements between lst1 and lst2.\n/// If\
  \ it is possible to exchange elements between the lst1 and lst2 to make\n/// all\
  \ the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\"\
  .\n/// For example:\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4])\n/// String::from(\"\
  YES\")\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4])\n/// String::from(\"\
  NO\")\n/// It is assumed that the input lists will be non-empty.\nfn exchange(lst1:\
  \ Vec<isize>, lst2: Vec<isize>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = exchange;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count\
    \ = 0;\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n        \
    \    even_count += 1;\n        }\n    }\n    if even_count == lst1.len() {\n \
    \       return String::from(\"YES\");\n    }\n    for i in 0..lst1.len() {\n \
    \       for j in 0..lst2.len() {\n            if lst1[i] % 2 == 0 && lst2[j] %\
    \ 2 != 0 {\n                lst1[i] = lst2[j];\n                lst2[j] = lst1[i];\n\
    \                even_count += 1;\n            }\n            if even_count ==\
    \ lst1.len() {\n                return String::from(\"YES\");\n            }\n\
    \        }\n    }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let\
    \ mut lst2 = lst2;\n    let mut even_lst1 = lst1.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>();\n\
    \    let mut odd_lst2 = lst2.iter().filter(|&x| x % 2 != 0).collect::<Vec<_>>();\n\
    \    let mut even_lst2 = lst2.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>();\n\
    \    let mut odd_lst1 = lst1.iter().filter(|&x| x % 2 != 0).collect::<Vec<_>>();\n\
    \    if even_lst1.len() > odd_lst2.len() {\n        return String::from(\"NO\"\
    );\n    }\n    if even_lst2.len() > odd_lst1.len() {\n        return String::from(\"\
    NO\");\n    }\n    for i in 0..even_lst1.len() {\n        let index = lst2.iter().position(|&x|\
    \ x == even_lst1[i]).unwrap();\n        lst2[index] = odd_lst2[i];\n    }\n  \
    \  for i in 0..even_lst2.len() {\n        let index = lst1.iter().position(|&x|\
    \ x == even_lst2[i]).unwrap();\n        lst1[index] = odd_lst1[i];\n    }\n  \
    \  if lst1.iter().all(|&x| x % 2 == 0) {\n        return String::from(\"YES\"\
    );\n    }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let mut lst2\
    \ = lst2;\n    let mut i = 0;\n    let mut j = 0;\n    while i < lst1.len() {\n\
    \        if lst1[i] % 2 == 1 {\n            while j < lst2.len() {\n         \
    \       if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j];\n      \
    \              lst2[j] = lst1[i];\n                    break;\n              \
    \  }\n                j += 1;\n            }\n            if j == lst2.len() {\n\
    \                return String::from(\"NO\");\n            }\n        }\n    \
    \    i += 1;\n    }\n    String::from(\"YES\")", "    let mut lst1 = lst1;\n \
    \   let mut lst2 = lst2;\n    let mut result = String::from(\"YES\");\n    for\
    \ i in 0..lst1.len() {\n        if lst1[i] % 2 != 0 {\n            let mut found\
    \ = false;\n            for j in 0..lst2.len() {\n                if lst2[j] %\
    \ 2 != 0 {\n                    lst1[i] = lst2[j];\n                    lst2[j]\
    \ = lst1[i];\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if !found {\n                result\
    \ = String::from(\"NO\");\n                break;\n            }\n        }\n\
    \    }\n    result", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n   \
    \ let mut lst1_even = lst1.iter().all(|&x| x % 2 == 0);\n    let mut lst2_even\
    \ = lst2.iter().all(|&x| x % 2 == 0);\n    if lst1_even && lst2_even {\n     \
    \   return String::from(\"YES\");\n    }\n    if lst1_even {\n        return String::from(\"\
    NO\");\n    }\n    if lst2_even {\n        return String::from(\"NO\");\n    }\n\
    \    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n            continue;\n\
    \        }\n        for j in 0..lst2.len() {\n            if lst2[j] % 2 == 0\
    \ {\n                lst1[i] = lst2[j];\n                lst2[j] = lst1[i];\n\
    \                lst1_even = lst1.iter().all(|&x| x % 2 == 0);\n             \
    \   lst2_even = lst2.iter().all(|&x| x % 2 == 0);\n                if lst1_even\
    \ && lst2_even {\n                    return String::from(\"YES\");\n        \
    \        }\n                if lst1_even {\n                    return String::from(\"\
    NO\");\n                }\n                if lst2_even {\n                  \
    \  return String::from(\"NO\");\n                }\n            }\n        }\n\
    \    }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let mut lst2\
    \ = lst2;\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i\
    \ in lst1.iter() {\n        if i % 2 == 0 {\n            even_count += 1;\n  \
    \      } else {\n            odd_count += 1;\n        }\n    }\n    for i in lst2.iter()\
    \ {\n        if i % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    if even_count > odd_count\
    \ {\n        String::from(\"YES\")\n    } else {\n        String::from(\"NO\"\
    )\n    }", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    for i in 0..lst1.len() {\n        if lst1[i]\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    for i in 0..lst2.len() {\n        if lst2[i] %\
    \ 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    if even_count > odd_count {\n        return String::from(\"\
    YES\");\n    }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let\
    \ mut lst2 = lst2;\n    let mut even_count = 0;\n    for i in 0..lst1.len() {\n\
    \        if lst1[i] % 2 == 0 {\n            even_count += 1;\n        }\n    }\n\
    \    if even_count == lst1.len() {\n        return String::from(\"YES\");\n  \
    \  }\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 != 0 {\n          \
    \  for j in 0..lst2.len() {\n                if lst2[j] % 2 == 0 {\n         \
    \           lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n     \
    \               even_count += 1;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    if even_count == lst1.len() {\n    \
    \    return String::from(\"YES\");\n    }\n    String::from(\"NO\")", "    let\
    \ mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count = 0;\n  \
    \  for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n            even_count\
    \ += 1;\n        }\n    }\n    if even_count == lst1.len() {\n        return String::from(\"\
    YES\");\n    }\n    for i in 0..lst1.len() {\n        for j in 0..lst2.len() {\n\
    \            if lst1[i] % 2 == 0 && lst2[j] % 2 != 0 {\n                lst1[i]\
    \ = lst2[j];\n                lst2[j] = lst1[i];\n                even_count +=\
    \ 1;\n            }\n            if even_count == lst1.len() {\n             \
    \   return String::from(\"YES\");\n            }\n        }\n    }\n    String::from(\"\
    NO\")", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count\
    \ = 0;\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n        \
    \    even_count += 1;\n        }\n    }\n    if even_count == lst1.len() {\n \
    \       return String::from(\"YES\");\n    }\n    for i in 0..lst1.len() {\n \
    \       for j in 0..lst2.len() {\n            if lst1[i] % 2 == 0 && lst2[j] %\
    \ 2 != 0 {\n                lst1[i] = lst2[j];\n                lst2[j] = lst1[i];\n\
    \                even_count += 1;\n            }\n            if even_count ==\
    \ lst1.len() {\n                return String::from(\"YES\");\n            }\n\
    \        }\n    }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let\
    \ mut lst2 = lst2;\n    let mut lst1_odd_count = lst1.iter().filter(|x| x % 2\
    \ != 0).count();\n    let mut lst2_odd_count = lst2.iter().filter(|x| x % 2 !=\
    \ 0).count();\n    if lst1_odd_count == 0 {\n        return String::from(\"YES\"\
    );\n    }\n    if lst2_odd_count == 0 {\n        return String::from(\"NO\");\n\
    \    }\n    if lst1_odd_count == lst2_odd_count {\n        return String::from(\"\
    YES\");\n    }\n    if lst1_odd_count < lst2_odd_count {\n        let mut i =\
    \ 0;\n        while i < lst1.len() {\n            if lst1[i] % 2 != 0 {\n    \
    \            let mut j = 0;\n                while j < lst2.len() {\n        \
    \            if lst2[j] % 2 != 0 {\n                        lst1[i] = lst2[j];\n\
    \                        lst2[j] = lst1[i];\n                        lst1_odd_count\
    \ -= 1;\n                        lst2_odd_count += 1;\n                      \
    \  if lst1_odd_count == 0 {\n                            return String::from(\"\
    YES\");\n                        }\n                        if lst1_odd_count\
    \ == lst2_odd_count {\n                            return String::from(\"YES\"\
    );\n                        }\n                        break;\n              \
    \      }\n                    j += 1;\n                }\n            }\n    \
    \        i += 1;\n        }\n    } else {\n        let mut i = 0;\n        while\
    \ i < lst2.len() {\n            if lst2[i] % 2 != 0 {\n                let mut\
    \ j = 0;\n                while j < lst1.len() {\n                    if lst1[j]\
    \ % 2 != 0 {\n                        lst2[i] = lst1[j];\n                   \
    \     lst1[j] = lst2[i];\n                        lst2_odd_count -= 1;\n     \
    \                   l", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < lst1.len() && j < lst2.len()\
    \ {\n        if lst1[i] % 2 == 0 {\n            i += 1;\n        } else if lst2[j]\
    \ % 2 == 0 {\n            lst1[i] = lst2[j];\n            i += 1;\n          \
    \  j += 1;\n        } else {\n            j += 1;\n        }\n    }\n    if lst1.iter().all(|x|\
    \ x % 2 == 0) {\n        String::from(\"YES\")\n    } else {\n        String::from(\"\
    NO\")\n    }", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut exchange = false;\n    while i < lst1.len()\
    \ {\n        if lst1[i] % 2 == 1 {\n            while j < lst2.len() {\n     \
    \           if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j];\n  \
    \                  lst2[j] = lst1[i];\n                    exchange = true;\n\
    \                    break;\n                }\n                j += 1;\n    \
    \        }\n        }\n        if !exchange {\n            return String::from(\"\
    NO\");\n        }\n        i += 1;\n    }\n    String::from(\"YES\")", "    let\
    \ mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < lst1.len() && j < lst2.len() {\n        if lst1[i] % 2\
    \ == 0 {\n            i += 1;\n        } else if lst2[j] % 2 == 0 {\n        \
    \    lst1[i] = lst2[j];\n            i += 1;\n            j += 1;\n        } else\
    \ {\n            j += 1;\n        }\n    }\n    if i == lst1.len() {\n       \
    \ String::from(\"YES\")\n    } else {\n        String::from(\"NO\")\n    }", " \
    \   let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut is_exchange = false;\n    while i < lst1.len() {\n \
    \       if lst1[i] % 2 == 1 {\n            while j < lst2.len() {\n          \
    \      if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j];\n       \
    \             lst2[j] = lst1[i];\n                    is_exchange = true;\n  \
    \                  break;\n                }\n                j += 1;\n      \
    \      }\n        }\n        if !is_exchange {\n            return String::from(\"\
    NO\");\n        }\n        i += 1;\n    }\n    String::from(\"YES\")", "    let\
    \ mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut i = 0;\n    while i\
    \ < lst1.len() {\n        if lst1[i] % 2 == 1 {\n            let mut j = 0;\n\
    \            while j < lst2.len() {\n                if lst2[j] % 2 == 0 {\n \
    \                   lst1[i] = lst2[j];\n                    lst2[j] = 1;\n   \
    \                 break;\n                }\n                j += 1;\n       \
    \     }\n            if j == lst2.len() {\n                return String::from(\"\
    NO\");\n            }\n        }\n        i += 1;\n    }\n    String::from(\"\
    YES\")", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count\
    \ = 0;\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n        \
    \    even_count += 1;\n        }\n    }\n    if even_count == lst1.len() {\n \
    \       return String::from(\"YES\");\n    }\n    for i in 0..lst1.len() {\n \
    \       if lst1[i] % 2 != 0 {\n            for j in 0..lst2.len() {\n        \
    \        if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j];\n     \
    \               lst2[j] = lst1[i];\n                    even_count += 1;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    if even_count == lst1.len() {\n        return String::from(\"YES\");\n  \
    \  }\n    String::from(\"NO\")", "    let mut lst1 = lst1;\n    let mut lst2 =\
    \ lst2;\n    let mut even_count = 0;\n    for i in 0..lst1.len() {\n        if\
    \ lst1[i] % 2 == 0 {\n            even_count += 1;\n        }\n    }\n    if even_count\
    \ == lst1.len() {\n        return String::from(\"YES\");\n    }\n    for i in\
    \ 0..lst1.len() {\n        if lst1[i] % 2 != 0 {\n            for j in 0..lst2.len()\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j];\n\
    \                    lst2[j] = lst1[i];\n                    even_count += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    if even_count == lst1.len() {\n        return String::from(\"YES\");\n\
    \    }\n    String::from(\"NO\")", "    if lst1.iter().any(|x| x % 2 != 0) {\n\
    \        return String::from(\"NO\");\n    }\n\n    if lst2.iter().any(|x| x %\
    \ 2 == 0) {\n        return String::from(\"YES\");\n    }\n\n    String::from(\"\
    NO\")", "    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < lst1.len() && j < lst2.len() {\n        if\
    \ lst1[i] % 2 == 0 {\n            i += 1;\n        } else if lst2[j] % 2 == 0\
    \ {\n            lst1[i] = lst2[j];\n            i += 1;\n            j += 1;\n\
    \        } else {\n            j += 1;\n        }\n    }\n    if lst1.iter().all(|x|\
    \ x % 2 == 0) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n\
    \    }"]
stop_tokens:
- "\n}"
