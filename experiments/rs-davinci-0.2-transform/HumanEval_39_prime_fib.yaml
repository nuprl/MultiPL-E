name: HumanEval_39_prime_fib
language: rs
prompt: "/// prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n/// >>> prime_fib(1)\n/// 2\n/// >>> prime_fib(2)\n/// 3\n/// >>> prime_fib(3)\n\
  /// 5\n/// >>> prime_fib(4)\n/// 13\n/// >>> prime_fib(5)\n/// 89\nfn prime_fib(n:\
  \ isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut fib = vec![2, 3];\n    let mut i = 2;\n    while i < n\
    \ {\n        let next = fib[i - 1] + fib[i - 2];\n        if is_prime(next) {\n\
    \            fib.push(next);\n            i += 1;\n        }\n    }\n    fib[n\
    \ - 1]", "    let mut fib = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n\
    \        let next = fib[i - 1] + fib[i - 2];\n        if is_prime(next) {\n  \
    \          fib.push(next);\n            i += 1;\n        }\n    }\n    fib[n -\
    \ 1]", "    let mut fib = Fibonacci::new();\n    let mut count = 0;\n    loop\
    \ {\n        let f = fib.next().unwrap();\n        if is_prime(f) {\n        \
    \    count += 1;\n            if count == n {\n                return f;\n   \
    \         }\n        }\n    }", "    let mut fib = vec![2, 3];\n    let mut i\
    \ = 2;\n    while i < n {\n        fib.push(fib[i - 1] + fib[i - 2]);\n      \
    \  i += 1;\n    }\n    fib.into_iter().filter(|&x| is_prime(x)).nth(n as usize\
    \ - 1).unwrap()", "    let mut fib_num = 0;\n    let mut fib_num_prev = 0;\n \
    \   let mut fib_num_prev_prev = 0;\n    let mut count = 0;\n    let mut i = 0;\n\
    \    while count < n {\n        if i == 0 {\n            fib_num = 1;\n      \
    \  } else if i == 1 {\n            fib_num = 2;\n        } else {\n          \
    \  fib_num = fib_num_prev + fib_num_prev_prev;\n        }\n        if is_prime(fib_num)\
    \ {\n            count += 1;\n            fib_num_prev_prev = fib_num_prev;\n\
    \            fib_num_prev = fib_num;\n        }\n        i += 1;\n    }\n    fib_num",
  "    let mut fib_num = 1;\n    let mut fib_num_prev = 1;\n    let mut count = 1;\n\
    \    while count < n {\n        let temp = fib_num;\n        fib_num += fib_num_prev;\n\
    \        fib_num_prev = temp;\n        if is_prime(fib_num) {\n            count\
    \ += 1;\n        }\n    }\n    fib_num", "    let mut i = 1;\n    let mut fib\
    \ = 1;\n    let mut fib_prev = 1;\n    let mut count = 0;\n    while count < n\
    \ {\n        let fib_next = fib + fib_prev;\n        fib_prev = fib;\n       \
    \ fib = fib_next;\n        if is_prime(fib) {\n            count += 1;\n     \
    \   }\n        i += 1;\n    }\n    fib", "    let mut fib_nums = vec![2, 3];\n\
    \    let mut i = 2;\n    while i < n {\n        let next_fib = fib_nums[i - 1]\
    \ + fib_nums[i - 2];\n        if is_prime(next_fib) {\n            fib_nums.push(next_fib);\n\
    \            i += 1;\n        }\n    }\n    fib_nums[n - 1]", "    let mut fib\
    \ = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n        fib.push(fib[i\
    \ - 1] + fib[i - 2]);\n        i += 1;\n    }\n    fib.into_iter().filter(|&x|\
    \ is_prime(x)).nth(n as usize - 1).unwrap()", "    let mut fib = vec![2, 3];\n\
    \    let mut i = 2;\n    while i < n {\n        fib.push(fib[i - 1] + fib[i -\
    \ 2]);\n        i += 1;\n    }\n    fib.into_iter().filter(|&x| is_prime(x)).nth(n\
    \ as usize - 1).unwrap()", "    let mut fib_num = vec![2, 3];\n    let mut fib_prime\
    \ = vec![2, 3];\n    let mut i = 2;\n    while fib_prime.len() < n as usize {\n\
    \        fib_num.push(fib_num[i - 1] + fib_num[i - 2]);\n        if is_prime(fib_num[i])\
    \ {\n            fib_prime.push(fib_num[i]);\n        }\n        i += 1;\n   \
    \ }\n    fib_prime[n as usize - 1]", "    let mut fib = vec![2, 3];\n    let mut\
    \ i = 2;\n    while i < n {\n        fib.push(fib[i - 1] + fib[i - 2]);\n    \
    \    i += 1;\n    }\n    fib.into_iter().filter(|&x| is_prime(x)).nth(n as usize\
    \ - 1).unwrap()", "    let mut fib = Fibonacci::new();\n    let mut i = 0;\n \
    \   let mut p = 0;\n    while i < n {\n        p = fib.next().unwrap();\n    \
    \    if is_prime(p) {\n            i += 1;\n        }\n    }\n    p", "    let\
    \ mut fib = Fibonacci::new();\n    let mut i = 0;\n    let mut res = 0;\n    loop\
    \ {\n        let f = fib.next().unwrap();\n        if is_prime(f) {\n        \
    \    i += 1;\n            if i == n {\n                res = f;\n            \
    \    break;\n            }\n        }\n    }\n    res", "    let mut fib = vec![2,\
    \ 3];\n    let mut i = 2;\n    while i < n {\n        let next = fib[i - 1] +\
    \ fib[i - 2];\n        if is_prime(next) {\n            fib.push(next);\n    \
    \        i += 1;\n        }\n    }\n    fib[n - 1]", "    let mut i = 1;\n   \
    \ let mut fib = 2;\n    while i < n {\n        fib = fibonacci(fib);\n       \
    \ if is_prime(fib) {\n            i += 1;\n        }\n    }\n    fib", "    let\
    \ mut fib = vec![2, 3];\n    let mut i = 2;\n    while i < n {\n        fib.push(fib[i\
    \ - 1] + fib[i - 2]);\n        i += 1;\n    }\n    fib.into_iter().filter(|&x|\
    \ is_prime(x)).nth(n as usize - 1).unwrap()", "    let mut fib = vec![2, 3];\n\
    \    let mut i = 2;\n    while i < n {\n        let next = fib[i - 1] + fib[i\
    \ - 2];\n        if is_prime(next) {\n            fib.push(next);\n          \
    \  i += 1;\n        }\n    }\n    fib[n - 1]", "    let mut fib = fibonacci();\n\
    \    let mut prime = prime();\n    let mut count = 0;\n    let mut result = 0;\n\
    \    while count < n {\n        let f = fib.next().unwrap();\n        let p =\
    \ prime.next().unwrap();\n        if f == p {\n            count += 1;\n     \
    \       result = f;\n        }\n    }\n    result", "    let mut fib = vec![2,\
    \ 3];\n    let mut i = 2;\n    while i < n {\n        let next = fib[i - 1] +\
    \ fib[i - 2];\n        if is_prime(next) {\n            fib.push(next);\n    \
    \        i += 1;\n        }\n    }\n    fib[n - 1]"]
stop_tokens:
- "\n}"
