name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
  /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
  /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4,\
  \ 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
  \ 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]),\
  \ vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n  \
  \  assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7,\
  \ 9, 7, 1]), Vec::<isize>::new());\n}\n"
completions: ["    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (index, value) in arr.iter().enumerate() {\n   \
    \     if value % 2 == 0 && value < &min_even {\n            min_even = *value;\n\
    \            min_even_index = index as isize;\n        }\n    }\n    if min_even\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    for\
    \ (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_index = evens.iter().min().unwrap();\n    let min_value =\
    \ arr[*min_index as usize];\n    vec![min_value, *min_index]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut evens: Vec<isize> = arr.iter().filter(|x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let min = evens[0];\n   \
    \ let mut min_idx = 0;\n    for (idx, val) in arr.iter().enumerate() {\n     \
    \   if val == &min {\n            min_idx = idx;\n            break;\n       \
    \ }\n    }\n    vec![min, min_idx as isize]", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_index = isize::max_value();\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if *x % 2 == 0 && *x < min_even {\n            min_even = *x;\n \
    \           min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ isize::max_value() {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_index]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indices:\
    \ Vec<usize> = Vec::new();\n    for (i, val) in arr.iter().enumerate() {\n   \
    \     if val % 2 == 0 {\n            evens.push(*val);\n            even_indices.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indices[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n  \
    \  for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n         \
    \   evens.push(v);\n        }\n    }\n    if evens.len() == 0 {\n        return\
    \ Vec::<isize>::new();\n    }\n    let min = evens.iter().min().unwrap();\n  \
    \  let mut min_index = 0;\n    for (i, v) in arr.iter().enumerate() {\n      \
    \  if v == min {\n            min_index = i;\n            break;\n        }\n\
    \    }\n    vec![*min, min_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < min_even {\n            min_even = val;\n            min_even_idx\
    \ = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n  \
    \      Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < min_even {\n            min_even = val;\n            min_even_idx\
    \ = idx as isize;\n        }\n    }\n    if min_even_idx == std::isize::MAX {\n\
    \        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_index = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens[0];\n    let index = arr.iter().position(|&x|\
    \ x == min_even).unwrap();\n    vec![min_even, index as isize]", "    let mut\
    \ min_even = isize::max_value();\n    let mut min_even_idx = isize::max_value();\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == isize::max_value() {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indices: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indices.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indices[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize>\
    \ = Vec::new();\n    for (index, value) in arr.iter().enumerate() {\n        if\
    \ value % 2 == 0 {\n            evens.push(*value);\n            even_indexes.push(index);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let smallest_even = evens[0];\n\
    \    let mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == smallest_even {\n            smallest_even_index = i;\n \
    \           break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min {\n            min = *val;\n            min_idx = idx as isize;\n   \
    \     }\n    }\n    if min == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, n) in evens.iter().enumerate() {\n        if *n < min_even {\n  \
    \          min_even = *n;\n            min_even_index = even_indexes[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens[0];\n    let mut min_even_index = 0;\n    for\
    \ (i, &x) in arr.iter().enumerate() {\n        if x == min_even {\n          \
    \  min_even_index = i;\n            break;\n        }\n    }\n    vec![min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let min = evens[0];\n   \
    \ let mut min_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x == min {\n            min_index = i;\n            break;\n        }\n\
    \    }\n    vec![min, min_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even_value = std::isize::MAX;\n    let\
    \ mut min_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even_value {\n            min_even_value\
    \ = *v;\n            min_even_index = i as isize;\n        }\n    }\n    if min_even_value\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even_value,\
    \ min_even_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 {\n            evens.push(*value);\n          \
    \  even_indexes.push(index);\n        }\n    }\n    if evens.len() == 0 {\n  \
    \      return Vec::<isize>::new();\n    }\n    let mut min_even = evens[0];\n\
    \    let mut min_even_index = even_indexes[0];\n    for (index, value) in evens.iter().enumerate()\
    \ {\n        if value < &min_even {\n            min_even = *value;\n        \
    \    min_even_index = even_indexes[index];\n        }\n    }\n    vec![min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if *n\
    \ % 2 == 0 && *n < smallest_even {\n            smallest_even = *n;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![smallest_even,\
    \ smallest_even_index]", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indices: Vec<usize> = Vec::new();\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 {\n            evens.push(*value);\n          \
    \  even_indices.push(index);\n        }\n    }\n    if evens.len() == 0 {\n  \
    \      return Vec::<isize>::new();\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indices[evens.iter().position(|&r| r == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < min_even {\n            min_even = val;\n            min_even_idx\
    \ = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n  \
    \      Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    let mut min_even_index = -1;\n    let mut min_even_value\
    \ = std::isize::MAX;\n    for (index, value) in arr.iter().enumerate() {\n   \
    \     if value % 2 == 0 && value < &min_even_value {\n            min_even_index\
    \ = index as isize;\n            min_even_value = *value;\n        }\n    }\n\
    \    if min_even_index == -1 {\n        return Vec::<isize>::new();\n    }\n \
    \   vec![min_even_value, min_even_index]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < &min_even {\n            min_even = *x;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x % 2 == 0 {\n            evens.push(x);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min = std::isize::MAX;\n    let mut\
    \ min_index = std::isize::MAX;\n    for (index, item) in arr.iter().enumerate()\
    \ {\n        if item % 2 == 0 && item < &min {\n            min = *item;\n   \
    \         min_index = index as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min, min_index]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < min_even {\n            min_even = val;\n            min_even_idx\
    \ = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n  \
    \      Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        Vec::<isize>::new()\n \
    \   } else {\n        vec![evens[0], arr.iter().position(|x| x == &evens[0]).unwrap()\
    \ as isize]\n    }", "    let mut smallest_even = std::isize::MAX;\n    let mut\
    \ smallest_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &smallest_even {\n            smallest_even\
    \ = *n;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![smallest_even, smallest_even_index]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = None;\n    let mut min_even_index\
    \ = None;\n    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0\
    \ {\n            if min_even.is_none() || v < min_even.unwrap() {\n          \
    \      min_even = Some(v);\n                min_even_index = Some(i);\n      \
    \      }\n        }\n    }\n    match (min_even, min_even_index) {\n        (Some(v),\
    \ Some(i)) => vec![v, i as isize],\n        _ => Vec::<isize>::new(),\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        return\
    \ Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]", "    let mut\
    \ smallest_even = isize::max_value();\n    let mut smallest_even_index = isize::max_value();\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if *v % 2 == 0 && *v < smallest_even\
    \ {\n            smallest_even = *v;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == isize::max_value() {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if *val % 2 == 0 && *val\
    \ < min_even {\n            min_even = *val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indices: Vec<usize> = Vec::new();\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n       \
    \     evens.push(*v);\n            even_indices.push(i);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indices[evens.iter().position(|&r|\
    \ r == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (index, value) in arr.iter().enumerate() {\n        if value % 2 == 0 &&\
    \ value < &smallest_even {\n            smallest_even = *value;\n            smallest_even_index\
    \ = index as isize;\n        }\n    }\n    if smallest_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![smallest_even, smallest_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 {\n            evens.push(*val);\n\
    \            if *val < min_even {\n                min_even = *val;\n        \
    \        min_even_idx = idx as isize;\n            }\n        }\n    }\n    if\
    \ evens.len() == 0 {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = isize::max_value();\n    let\
    \ mut min_even_index = isize::max_value();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && *v < min_even {\n            min_even = *v;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ isize::max_value() {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_index]\n    }", "    let mut min = std::isize::MAX;\n    let mut idx\
    \ = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v\
    \ % 2 == 0 && v < &min {\n            min = *v;\n            idx = i as isize;\n\
    \        }\n    }\n    if min == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min, idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n       \
    \ if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n       \
    \     min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]",
  "    let mut smallest_even = None;\n    let mut smallest_even_index = None;\n  \
    \  for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n        \
    \    if let Some(smallest_even_value) = smallest_even {\n                if v\
    \ < smallest_even_value {\n                    smallest_even = Some(v);\n    \
    \                smallest_even_index = Some(i);\n                }\n         \
    \   } else {\n                smallest_even = Some(v);\n                smallest_even_index\
    \ = Some(i);\n            }\n        }\n    }\n    if let Some(smallest_even_value)\
    \ = smallest_even {\n        if let Some(smallest_even_index) = smallest_even_index\
    \ {\n            return vec![smallest_even_value, smallest_even_index as isize];\n\
    \        }\n    }\n    Vec::<isize>::new()", "    let mut smallest = std::isize::MAX;\n\
    \    let mut smallest_index = std::isize::MAX;\n    for (index, &value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 && value < smallest {\n            smallest = value;\n\
    \            smallest_index = index as isize;\n        }\n    }\n    if smallest\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![smallest,\
    \ smallest_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = arr.into_iter().filter(|x|\
    \ x % 2 == 0).collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return Vec::<isize>::new();\n    }\n    let smallest_even = evens[0];\n  \
    \  let mut smallest_even_index = 0;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x == &smallest_even {\n            smallest_even_index = i;\n\
    \            break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut even_values = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    even_values.sort_by_key(|(i,\
    \ &x)| (x, *i));\n    if even_values.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let (i, &x) = even_values[0];\n    vec![x, i as isize]", "    let\
    \ mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        return\
    \ Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (index, value) in arr.iter().enumerate() {\n        if value % 2 == 0 &&\
    \ value < &smallest_even {\n            smallest_even = *value;\n            smallest_even_index\
    \ = index as isize;\n        }\n    }\n    if smallest_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![smallest_even, smallest_even_index]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < &min_even {\n            min_even = *val;\n          \
    \  min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even_idx == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = None;\n    let mut min_even_idx\
    \ = None;\n    for (idx, val) in arr.iter().enumerate() {\n        if *val % 2\
    \ == 0 {\n            if min_even.is_none() || *val < min_even.unwrap() {\n  \
    \              min_even = Some(*val);\n                min_even_idx = Some(idx);\n\
    \            }\n        }\n    }\n    match (min_even, min_even_idx) {\n     \
    \   (Some(min_even), Some(min_even_idx)) => vec![min_even, min_even_idx as isize],\n\
    \        _ => Vec::<isize>::new(),\n    }", "    let mut smallest_even = None;\n\
    \    let mut smallest_even_index = None;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            if smallest_even.is_none() || n < &smallest_even.unwrap()\
    \ {\n                smallest_even = Some(*n);\n                smallest_even_index\
    \ = Some(i);\n            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(n), Some(i)) => vec![n, i as isize],\n        _ => Vec::<isize>::new(),\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.is_empty() {\n        Vec::<isize>::new()\n    } else {\n\
    \        let min_index = evens.iter().min().unwrap();\n        vec![arr[*min_index\
    \ as usize], *min_index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let min = evens[0];\n   \
    \ let mut min_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x == min {\n            min_index = i;\n            break;\n        }\n\
    \    }\n    vec![min, min_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even_idx\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_index = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &smallest_even {\n            smallest_even = *n;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut min_even = std::isize::MAX;\n   \
    \ let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut result = Vec::<isize>::new();\n    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even {\n            min_even = *v;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even !=\
    \ std::isize::MAX {\n        result.push(min_even);\n        result.push(min_even_index);\n\
    \    }\n    result", "    let mut evens: Vec<isize> = Vec::new();\n    let mut\
    \ even_indexes: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min = std::isize::MAX;\n    let mut\
    \ min_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n\
    \        if val % 2 == 0 && val < &min {\n            min = *val;\n          \
    \  min_idx = idx as isize;\n        }\n    }\n    if min == std::isize::MAX {\n\
    \        Vec::<isize>::new()\n    } else {\n        vec![min, min_idx]\n    }",
  "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens[0];\n    let mut min_even_idx = 0;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val == min_even {\n          \
    \  min_even_idx = idx;\n            break;\n        }\n    }\n    vec![min_even,\
    \ min_even_idx as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        Vec::<isize>::new()\n  \
    \  } else {\n        let min_even = evens.iter().min().unwrap();\n        let\
    \ min_even_index = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n\
    \        vec![*min_even, min_even_index as isize]\n    }", "    let mut min_even\
    \ = isize::max_value();\n    let mut min_even_idx = isize::max_value();\n    for\
    \ (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == isize::max_value() {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n    } else\
    \ {\n        vec![smallest_even, smallest_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if *v % 2 == 0 && *v < min_even {\n            min_even = *v;\n \
    \           min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_index]", "    let mut smallest_even = std::isize::MAX;\n    let mut\
    \ smallest_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if *v % 2 == 0 && *v < smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![smallest_even, smallest_even_index]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    for (i,\
    \ n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(*n);\n\
    \            even_indexes.push(i);\n        }\n    }\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even_idx\
    \ == std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    if arr.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even_idx == std::isize::MAX {\n    \
    \    return Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    let mut index: Vec<usize> = Vec::new();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n      \
    \      evens.push(x);\n            index.push(i);\n        }\n    }\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_index = index[evens.iter().position(|&x| x == *min_even).unwrap()];\n\
    \    vec![*min_even, min_index as isize]", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < smallest_even {\n            smallest_even =\
    \ x;\n            smallest_even_index = i as isize;\n        }\n    }\n    if\
    \ smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n    } else\
    \ {\n        vec![smallest_even, smallest_even_index]\n    }", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < smallest_even\
    \ {\n            smallest_even = v;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even_idx == std::isize::MAX {\n    \
    \    Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v;\n            min_index = i as isize;\n        }\n  \
    \  }\n    if min == std::isize::MAX {\n        Vec::<isize>::new()\n    } else\
    \ {\n        vec![min, min_index]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even {\n            min_even = *v;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_index]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut\
    \ even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = isize::max_value();\n   \
    \ let mut min_even_index = isize::max_value();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even {\n            min_even = *v;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ isize::max_value() {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_index]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut\
    \ even_indexes: Vec<usize> = Vec::new();\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 {\n            evens.push(*x);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, x) in evens.iter().enumerate() {\n        if x < &min_even {\n  \
    \          min_even = *x;\n            min_even_index = even_indexes[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut even_nums:\
    \ Vec<isize> = Vec::new();\n    let mut even_nums_index: Vec<usize> = Vec::new();\n\
    \    for (i, num) in arr.iter().enumerate() {\n        if num % 2 == 0 {\n   \
    \         even_nums.push(*num);\n            even_nums_index.push(i);\n      \
    \  }\n    }\n    if even_nums.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = even_nums[0];\n    let mut min_even_index = even_nums_index[0];\n\
    \    for (i, num) in even_nums.iter().enumerate() {\n        if num < &min_even\
    \ {\n            min_even = *num;\n            min_even_index = even_nums_index[i];\n\
    \        }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = None;\n    let mut min_even_index = None;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 {\n            if min_even.is_none() || x < min_even.unwrap()\
    \ {\n                min_even = Some(x);\n                min_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (min_even, min_even_index) {\n   \
    \     (Some(x), Some(i)) => vec![x, i as isize],\n        _ => Vec::<isize>::new(),\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate() {\n     \
    \   if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n  \
    \  let mut even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let smallest_even = evens[0];\n\
    \    let mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == smallest_even {\n            smallest_even_index = i;\n \
    \           break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut min = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min\
    \ {\n            min = *v;\n            min_index = i as isize;\n        }\n \
    \   }\n    if min == std::isize::MAX {\n        Vec::<isize>::new()\n    } else\
    \ {\n        vec![min, min_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes: Vec<usize> = Vec::new();\n    for (index, value) in\
    \ arr.iter().enumerate() {\n        if value % 2 == 0 {\n            evens.push(*value);\n\
    \            even_indexes.push(index);\n        }\n    }\n    if evens.len() ==\
    \ 0 {\n        return Vec::<isize>::new();\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n            evens.push(x);\n\
    \            even_indexes.push(i);\n        }\n    }\n    if evens.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let mut min_even = evens[0];\n\
    \    let mut min_even_index = even_indexes[0];\n    for (i, &x) in evens.iter().enumerate()\
    \ {\n        if x < min_even {\n            min_even = x;\n            min_even_index\
    \ = even_indexes[i];\n        }\n    }\n    vec![min_even, min_even_index as isize]",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min_even {\n \
    \           min_even = *v;\n            min_even_index = i as isize;\n       \
    \ }\n    }\n    if min_even_index == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even_idx == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even_value\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min_even_value\
    \ {\n            min_even_value = *v;\n            min_even_index = i as isize;\n\
    \        }\n    }\n    if min_even_value == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even_value, min_even_index]\n    }", "    let\
    \ mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even\
    \ {\n            min_even = v;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (index, value) in arr.iter().enumerate() {\n        if value % 2 == 0\
    \ {\n            evens.push(*value);\n            even_indexes.push(index);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min = evens[0];\n    let mut min_index = even_indexes[0];\n\
    \    for (index, value) in evens.iter().enumerate() {\n        if value < &min\
    \ {\n            min = *value;\n            min_index = even_indexes[index];\n\
    \        }\n    }\n    vec![min, min_index as isize]", "    let mut min = std::isize::MAX;\n\
    \    let mut min_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min {\n            min = *val;\n      \
    \      min_idx = idx as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min, min_idx]\n \
    \   }", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (index, value) in arr.iter().enumerate() {\n   \
    \     if value % 2 == 0 && value < &smallest_even {\n            smallest_even\
    \ = *value;\n            smallest_even_index = index as isize;\n        }\n  \
    \  }\n    if smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even {\n \
    \           min_even = v;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n  \
    \  } else {\n        vec![min_even, min_even_index]\n    }", "    if arr.is_empty()\
    \ {\n        return Vec::<isize>::new();\n    }\n    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut index: usize = 0;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            index =\
    \ i;\n            break;\n        }\n    }\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &evens[0] {\n            evens[0] = *v;\n  \
    \          index = i;\n        }\n    }\n    vec![evens[0], index as isize]",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut even_nums:\
    \ Vec<isize> = Vec::new();\n    let mut even_nums_index: Vec<usize> = Vec::new();\n\
    \    for (i, num) in arr.iter().enumerate() {\n        if num % 2 == 0 {\n   \
    \         even_nums.push(*num);\n            even_nums_index.push(i);\n      \
    \  }\n    }\n    if even_nums.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_num = even_nums.iter().min().unwrap();\n    let min_index\
    \ = even_nums_index[even_nums.iter().position(|&r| r == *min_num).unwrap()];\n\
    \    vec![*min_num, min_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && *val < min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return Vec::<isize>::new();\n    }\n    vec![min_even,\
    \ min_even_idx]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x % 2 == 0 && x < min_even {\n            min_even = x;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (index, value) in arr.iter().enumerate() {\n\
    \        if value % 2 == 0 {\n            evens.push(*value);\n            even_indexes.push(index);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut smallest_even = evens[0];\n    let mut smallest_even_index\
    \ = even_indexes[0];\n    for (index, value) in evens.iter().enumerate() {\n \
    \       if value < &smallest_even {\n            smallest_even = *value;\n   \
    \         smallest_even_index = even_indexes[index];\n        }\n    }\n    vec![smallest_even,\
    \ smallest_even_index as isize]", "    let mut min_even = std::isize::MAX;\n \
    \   let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    for\
    \ (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_index = evens[0];\n    let mut min_value = arr[evens[0]\
    \ as usize];\n    for i in evens {\n        if arr[i as usize] < min_value {\n\
    \            min_value = arr[i as usize];\n            min_index = i;\n      \
    \  }\n    }\n    vec![min_value, min_index]", "    let mut evens: Vec<isize> =\
    \ arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    evens.sort();\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ smallest_even = evens[0];\n    let index = arr.iter().position(|x| x == &smallest_even).unwrap();\n\
    \    vec![smallest_even, index as isize]", "    let mut min = std::isize::MAX;\n\
    \    let mut min_index = std::isize::MAX;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 && value < &min {\n            min = *value;\n\
    \            min_index = index as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min, min_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n  \
    \  let mut even_idx: Vec<usize> = Vec::new();\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 {\n            evens.push(*val);\n            even_idx.push(idx);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_idx = even_idx[0];\n\
    \    for (idx, val) in evens.iter().enumerate() {\n        if val < &min_even\
    \ {\n            min_even = *val;\n            min_idx = even_idx[idx];\n    \
    \    }\n    }\n    vec![min_even, min_idx as isize]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < smallest_even\
    \ {\n            smallest_even = v;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut smallest_even = None;\n    let mut smallest_even_index = None;\n   \
    \ for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n          \
    \  if smallest_even.is_none() || *v < smallest_even.unwrap() {\n             \
    \   smallest_even = Some(*v);\n                smallest_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(v), Some(i)) => vec![v, i as isize],\n        _ => Vec::<isize>::new(),\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, &x) in arr.iter().enumerate() {\n        if x == smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n  \
    \  } else {\n        vec![min_even, min_even_index]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n       \
    \     evens.push(*v);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&r|\
    \ r == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min_even\
    \ {\n            min_even = *v;\n            min_even_index = i as isize;\n  \
    \      }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min_even {\n \
    \           min_even = *v;\n            min_even_index = i as isize;\n       \
    \ }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_index]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_index = std::isize::MAX;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < min_even {\n            min_even = n;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, &n) in arr.iter().enumerate() {\n    \
    \    if n % 2 == 0 {\n            evens.push(n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_index as isize]", "    let\
    \ mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return Vec::<isize>::new();\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_index = isize::max_value();\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut min = isize::max_value();\n    let mut index = 0;\n    for\
    \ (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n  \
    \          min = x;\n            index = i;\n        }\n    }\n    if min == isize::max_value()\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min, index as isize]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate() {\n     \
    \   if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indices: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            even_indices.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_even_index = even_indices[0];\n\
    \    for (i, v) in evens.iter().enumerate() {\n        if v < &min_even {\n  \
    \          min_even = *v;\n            min_even_index = even_indices[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indices: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indices.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ mut min_even = evens[0];\n    let mut min_even_index = even_indices[0];\n  \
    \  for (i, n) in evens.iter().enumerate() {\n        if n < &min_even {\n    \
    \        min_even = *n;\n            min_even_index = even_indices[i];\n     \
    \   }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if *val % 2 == 0 && *val < min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min\
    \ = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n    for (i, v)\
    \ in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min {\n         \
    \   min = *v;\n            min_index = i as isize;\n        }\n    }\n    if min\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min,\
    \ min_index]\n    }", "    let mut smallest_even = std::isize::MAX;\n    let mut\
    \ smallest_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < smallest_even {\n            smallest_even =\
    \ x;\n            smallest_even_index = i as isize;\n        }\n    }\n    if\
    \ smallest_even == std::isize::MAX {\n        Vec::<isize>::new()\n    } else\
    \ {\n        vec![smallest_even, smallest_even_index]\n    }", "    let mut smallest_index\
    \ = -1;\n    let mut smallest_value = -1;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 {\n            if smallest_value == -1 || value\
    \ < &smallest_value {\n                smallest_value = *value;\n            \
    \    smallest_index = index as isize;\n            }\n        }\n    }\n    if\
    \ smallest_index == -1 {\n        return Vec::<isize>::new();\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut\
    \ even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut even_numbers: Vec<isize> = arr\n   \
    \     .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n \
    \       .map(|(i, &x)| (i, x))\n        .collect();\n    even_numbers.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    if even_numbers.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let (index, value) = even_numbers[0];\n    vec![value, index as isize]",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even_idx == std::isize::MAX {\n    \
    \    return Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even_index == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    let mut even_indices: Vec<usize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(*n);\n            even_indices.push(i);\n   \
    \     }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_even_index = even_indices[0];\n\
    \    for (i, n) in evens.iter().enumerate() {\n        if n < &min_even {\n  \
    \          min_even = *n;\n            min_even_index = even_indices[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indices: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indices.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indices[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n   \
    \     }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_index as isize]", "    let\
    \ mut smallest_even = isize::max_value();\n    let mut smallest_even_index = isize::max_value();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < smallest_even\
    \ {\n            smallest_even = x;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == isize::max_value() {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize>\
    \ = Vec::new();\n    for (i, v) in arr.iter().enumerate() {\n        if v % 2\
    \ == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n   \
    \     }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = 0;\n    for (idx, val) in arr.iter().enumerate() {\n    \
    \    if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n    \
    \        min_even_idx = idx;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx\
    \ as isize]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n       \
    \ if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n       \
    \     min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even_idx\
    \ == std::isize::MAX {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even,\
    \ min_even_idx]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 {\n            evens.push(*value);\n          \
    \  even_indexes.push(index);\n        }\n    }\n    if evens.len() == 0 {\n  \
    \      return Vec::<isize>::new();\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x == smallest_even {\n         \
    \   smallest_even_index = i;\n            break;\n        }\n    }\n    vec![smallest_even,\
    \ smallest_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes: Vec<usize> = Vec::new();\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 {\n            evens.push(*x);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index\
    \ = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n    vec![*min_even,\
    \ min_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n  \
    \  let mut even_indexes: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n\
    \    }\n    let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, v) in evens.iter().enumerate() {\n        if v < &min_even {\n  \
    \          min_even = *v;\n            min_even_index = even_indexes[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even_idx == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, item) in arr.iter().enumerate() {\n        if item % 2 == 0 {\n \
    \           evens.push(*item);\n            even_indexes.push(i);\n        }\n\
    \    }\n    if evens.len() == 0 {\n        return Vec::<isize>::new();\n    }\n\
    \    let mut min_even = evens[0];\n    let mut min_index = even_indexes[0];\n\
    \    for (i, item) in evens.iter().enumerate() {\n        if item < &min_even\
    \ {\n            min_even = *item;\n            min_index = even_indexes[i];\n\
    \        }\n    }\n    vec![min_even, min_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n \
    \   for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min {\n            min = *val;\n            min_idx = idx as isize;\n   \
    \     }\n    }\n    if min == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < min_even {\n            min_even = n;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x == smallest_even {\n\
    \            smallest_even_index = i;\n            break;\n        }\n    }\n\
    \    vec![smallest_even, smallest_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n  \
    \  } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n    let\
    \ min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n    }\n\
    \    let mut min = arr[evens[0] as usize];\n    let mut min_index = evens[0];\n\
    \    for i in evens {\n        if arr[i as usize] < min {\n            min = arr[i\
    \ as usize];\n            min_index = i;\n        }\n    }\n    vec![min, min_index]",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        return\
    \ Vec::<isize>::new();\n    }\n    vec![min_even, min_even_idx]", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        Vec::<isize>::new()\n\
    \    } else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = None;\n    let mut min_even_index = None;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 {\n            if min_even.is_none() || value <\
    \ min_even.unwrap() {\n                min_even = Some(*value);\n            \
    \    min_even_index = Some(index);\n            }\n        }\n    }\n    match\
    \ (min_even, min_even_index) {\n        (Some(min_even), Some(min_even_index))\
    \ => vec![min_even, min_even_index as isize],\n        _ => Vec::<isize>::new(),\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < &min_even {\n            min_even = *val;\n          \
    \  min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x % 2 == 0 && x < min_even {\n            min_even = x;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    Vec::<isize>::new()\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return Vec::<isize>::new();\n\
    \    }\n    let min = evens[0];\n    let mut min_index = 0;\n    for (index, &value)\
    \ in arr.iter().enumerate() {\n        if value == min {\n            min_index\
    \ = index;\n            break;\n        }\n    }\n    vec![min, min_index as isize]",
  "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n   \
    \     }\n    }\n    if evens.is_empty() {\n        Vec::<isize>::new()\n    }\
    \ else {\n        let min_even = evens.iter().min().unwrap();\n        let min_even_index\
    \ = even_indexes[evens.iter().position(|&r| r == *min_even).unwrap()];\n     \
    \   vec![*min_even, min_even_index as isize]\n    }"]
stop_tokens:
- "\n}"
