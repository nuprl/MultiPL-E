name: HumanEval_151_double_the_difference
language: rs
prompt: "/// Given a list of numbers, return the sum of squares of the numbers\n///\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
  \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n\
  /// 0\n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
  \ Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i * i) as isize;\n        }\n   \
    \ }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += i.powi(2) as isize;\n        }\n \
    \   }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i * i) as isize;\n        }\n   \
    \ }\n    sum * 2", '    unimplemented!()', '    unimplemented!()', "    let mut\
    \ sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract() ==\
    \ 0.0 {\n            sum += i.powi(2) as isize;\n        }\n    }\n    sum * 2",
  "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract()\
    \ == 0.0 {\n            sum += (i * i) as isize;\n        }\n    }\n    sum *\
    \ 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i * i) as isize;\n        }\n   \
    \ }\n    sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i > 0.0\
    \ && i.floor() == i {\n            if i % 2.0 == 1.0 {\n                sum +=\
    \ i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2", "    let\
    \ mut sum = 0;\n    for num in lst {\n        if num.is_sign_positive() && num.fract()\
    \ == 0.0 {\n            sum += (num * num) as isize;\n        }\n    }\n    sum\
    \ * 2", "    // YOUR CODE HERE\n    unimplemented!()", "    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2", "    let mut sum\
    \ = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0\
    \ {\n            sum += i as isize;\n        }\n    }\n    sum * 2", "    let\
    \ mut sum = 0;\n    for i in lst {\n        if i % 2.0 == 1.0 {\n            sum\
    \ += i as isize;\n        }\n    }\n    sum * 2", "    let mut sum = 0;\n    for\
    \ i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n        \
    \    sum += i as isize;\n        }\n    }\n    sum * 2", "    let mut sum = 0;\n\
    \    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n \
    \           sum += i as isize;\n        }\n    }\n    sum * 2", "    let mut sum\
    \ = 0;\n    for i in lst {\n        if i > 0.0 && i.fract() == 0.0 {\n       \
    \     sum += (i as isize) * (i as isize);\n        }\n    }\n    sum * 2", " \
    \   let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract()\
    \ == 0.0 {\n            sum += (i * i) as isize;\n        }\n    }\n    sum *\
    \ 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += i as isize;\n        }\n    }\n  \
    \  sum * 2", "    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i * i) as isize;\n        }\n   \
    \ }\n    sum * 2"]
stop_tokens:
- "\n}"
