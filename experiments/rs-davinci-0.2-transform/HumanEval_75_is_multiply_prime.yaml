name: HumanEval_75_is_multiply_prime
language: rs
prompt: "/// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
  \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3 *\
  \ 5\nfn is_multiply_prime(a: isize) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut n = a;\n    let mut cnt = 0;\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            n /= i;\n            cnt += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    cnt == 3", "   \
    \ let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n    let mut\
    \ k = 2;\n    while i < a {\n        while j < a {\n            while k < a {\n\
    \                if i * j * k == a {\n                    result = true;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result", "    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n           \
    \ primes.push(i);\n        }\n        i += 1;\n    }\n    let mut result = false;\n\
    \    let mut j = 0;\n    while j < primes.len() {\n        let mut k = j + 1;\n\
    \        while k < primes.len() {\n            let mut l = k + 1;\n          \
    \  while l < primes.len() {\n                if primes[j] * primes[k] * primes[l]\
    \ == a {\n                    result = true;\n                }\n            \
    \    l += 1;\n            }\n            k += 1;\n        }\n        j += 1;\n\
    \    }\n    result", "    let mut a = a;\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while a > 1 {\n        if is_prime(i) {\n            if a %\
    \ i == 0 {\n                primes.push(i);\n                a /= i;\n       \
    \     } else {\n                i += 1;\n            }\n        } else {\n   \
    \         i += 1;\n        }\n    }\n    primes.len() == 3", "    let mut result\
    \ = false;\n    let mut primes: Vec<isize> = Vec::new();\n    for i in 2..a {\n\
    \        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n   \
    \ for i in 0..primes.len() {\n        for j in i..primes.len() {\n           \
    \ for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result", "    let mut a = a;\n    let mut result = true;\n\
    \    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n            a\
    \ /= i;\n            if !is_prime(i) {\n                result = false;\n    \
    \            break;\n            }\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    result", "    let mut primes = vec![];\n    let mut i = 2;\n\
    \    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n  \
    \      }\n        i += 1;\n    }\n    let mut j = 0;\n    while j < primes.len()\
    \ {\n        let mut k = j + 1;\n        while k < primes.len() {\n          \
    \  let mut l = k + 1;\n            while l < primes.len() {\n                if\
    \ primes[j] * primes[k] * primes[l] == a {\n                    return true;\n\
    \                }\n                l += 1;\n            }\n            k += 1;\n\
    \        }\n        j += 1;\n    }\n    false", "    let mut a = a;\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    primes.len() == 3", "    let mut a =\
    \ a;\n    let mut primes = vec![];\n    let mut i = 2;\n    while a > 1 {\n  \
    \      if a % i == 0 {\n            primes.push(i);\n            a /= i;\n   \
    \     } else {\n            i += 1;\n        }\n    }\n    primes.len() == 3",
  "    let mut a = a;\n    let mut primes = Vec::new();\n    for i in 2..a {\n   \
    \     if is_prime(i) {\n            while a % i == 0 {\n                primes.push(i);\n\
    \                a /= i;\n            }\n        }\n    }\n    primes.len() ==\
    \ 3", "    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result", "    let mut a = a;\n    let mut primes = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            while a % i == 0 {\n\
    \                a /= i;\n                primes.push(i);\n            }\n   \
    \     }\n    }\n    primes.len() == 3", "    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result",
  "    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n    while\
    \ a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n            a\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    primes.len()\
    \ == 3", "    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n\
    \    while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n   \
    \         a /= i;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   primes.len() == 3", "    let mut b = a;\n    let mut c = 0;\n    let mut d\
    \ = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut\
    \ h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let\
    \ mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n   \
    \ let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n\
    \    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa =\
    \ 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut\
    \ ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n   \
    \ let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n    let mut al =\
    \ 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut\
    \ ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n  \
    \  let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n    let mut aw =\
    \ 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut\
    \ ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n   \
    \ let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n    let mut bh =\
    \ 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   ", " \
    \   let mut primes = vec![];\n    let mut i = 2;\n    while i <= a {\n       \
    \ if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n\
    \    }\n    let mut result = false;\n    for i in 0..primes.len() {\n        for\
    \ j in i..primes.len() {\n            for k in j..primes.len() {\n           \
    \     if primes[i] * primes[j] * primes[k] == a {\n                    result\
    \ = true;\n                }\n            }\n        }\n    }\n    result", " \
    \   let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < prime_numbers.len() {\n        if a % prime_numbers[i]\
    \ == 0 {\n            result = true;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    result", "    let mut a = a;\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n\
    \            a /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    primes.len() == 3", "    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut result = false;\n    let mut i = 0;\n    while i < prime_numbers.len()\
    \ {\n        let mut j = i + 1;\n        while j < prime_numbers.len() {\n   \
    \         let mut k = j + 1;\n            while k < prime_numbers.len() {\n  \
    \              if prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result"]
stop_tokens:
- "\n}"
