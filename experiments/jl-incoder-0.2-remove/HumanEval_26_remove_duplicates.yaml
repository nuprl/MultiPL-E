name: HumanEval_26_remove_duplicates
language: jl
prompt: "\"\"\" From a list of integers, remove all elements that occur more than\
  \ once.\n    Keep order of elements left the same as in the input.\n        \"\"\
  \"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    numbers\
    \ = sort(numbers)\n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    numbers = numbers[numbers != 0]\n  \
    \  \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != 0]", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        if numbers[i] != numbers[i+1]\n            numbers\
    \ = numbers[2:end]\n        else\n            i += 1\n        end\n    end\n \
    \   \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n \
    \   \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] !=\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnumbers = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, ", "    \n    numbers = numbers[numbers != 0]\n    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    numbers = numbers[numbers != numbers[end-1]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = Vector{Int64}([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\nnumbers\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ where the values are the square of those in the original vector. For example,\
    \ if the input vector is [1,2,3,4,5], the output vector should be [1,2,3,4,5,8,9,16,25].\
    \ Do not use loops.", "    \n    numbers = numbers[numbers != numbers[end]] \n\
    \    numbers = numbers[numbers != numbers[end-1]] \n    numbers = numbers[numbers\
    \ != numbers[end-2]] \n    numbers = numbers[numbers != numbers[end-3]] \n   \
    \ numbers = numbers[numbers != numbers[end-4]] \n    numbers = numbers[numbers\
    \ != numbers[end-5]] \n    numbers = numbers[numbers != numbers[end-6]] \n   \
    \ numbers = numbers[numbers != numbers[end-7]] \n    numbers = numbers[numbers\
    \ != numbers[end-8]] \n    numbers = numbers[numbers != numbers[end-9]] \n   \
    \ numbers = numbers[numbers != numbers[end-10]] \n    numbers = numbers[numbers\
    \ != numbers[end-11]] \n    numbers = numbers[numbers != numbers[end-12]] \n \
    \   numbers = numbers[numbers != numbers[end-13]] \n    numbers = numbers[numbers\
    \ != numbers[end-14]] \n    numbers = numbers[numbers != numbers[end-15]] \n \
    \   numbers = numbers[numbers != numbers[end-16]] \n    numbers = numbers[numbers\
    \ != numbers[end-17]] \n    numbers = numbers[numbers != numbers[end-18]] \n \
    \   numbers = numbers[numbers != numbers[end-19]] \n    numbers = numbers[numbers\
    \ != numbers[end-20]] \n    numbers = numbers[numbers != numbers[end-21]] \n \
    \   numbers = numbers[numbers != numbers[end-22]] \n    numbers = numbers[numbers\
    \ != numbers[end-23]] \n    numbers = numbers[numbers != numbers[end-24]] \n \
    \   numbers = numbers[numbers != numbers[end-25]] \n    numbers = numbers[numbers\
    \ != numbers[end-26]] \n    numbers = numbers[numbers != numbers[end-27]] \n \
    \   numbers = numbers[numbers != numbers[end-28]] \n    numbers = numbers[numbers\
    \ != numbers[end-29]] \n    numbers = numbers[numbers != numbers[end-30]] \n \
    \   numbers = numbers[numbers != numbers[end-31]] \n    numbers = numbers[numbers\
    \ != numbers[end-32]] \n    numbers = numbers[numbers != numbers[end-33]] \n \
    \   numbers = numbers[numbers != numbers[end-34]] \n    numbers = numbers[numbers\
    \ != numbers[end-35]] \n    numbers = numbers[numbers != numbers[end-", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    numbers\
    \ = numbers[numbers != numbers[end-2]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\nprintln(numbers)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the sum of the\
    \ squares of the integers in the array.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<text>\nExercise\
    \ 2: Remove all elements that occur less than twice", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[i+1:length(numbers)]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n@time remove_duplicates([1,1,1,2,2,3,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of numbers and\
    \ returns the sum of the squares of the numbers.", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers. \nUse map() to apply the function to each element\
    \ in the vector.\nUse reduce() to sum the squares.", "    numbers = numbers[numbers\
    \ .!= numbers[numbers .== numbers[numbers .!=0]]]\n    return numbers\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nI came up with a solution\
    \ that is more efficient than removing duplicates and is more readable than using\
    \ an anonymous function.\n<code>", "    \n    numbers = sort(numbers)\n    \n\
    \    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,26",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    numbers = numbers[numbers != numbers[end]]\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns a new list with all the even numbers in\
    \ it.", "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,2,3,3,4,4,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,2",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n\
    \    numbers = numbers[numbers != numbers[end-2]]\n    numbers = numbers[numbers\
    \ != numbers[end-3]]\n    numbers = numbers[numbers != numbers[end-4]]\n    numbers\
    \ = numbers[numbers != numbers[end-5]]\n    numbers = numbers[numbers != numbers[end-6]]\n\
    \    numbers = numbers[numbers != numbers[end-7]]\n    numbers = numbers[numbers\
    \ != numbers[end-8]]\n    numbers = numbers[numbers != numbers[end-9]]\n    numbers\
    \ = numbers[numbers != numbers[end-10]]\n    numbers = numbers[numbers != numbers[end-11]]\n\
    \    numbers = numbers[numbers != numbers[end-12]]\n    numbers = numbers[numbers\
    \ != numbers[end-13]]\n    numbers = numbers[numbers != numbers[end-14]]\n   \
    \ numbers = numbers[numbers != numbers[end-15]]\n    numbers = numbers[numbers\
    \ != numbers[end-16]]\n    numbers = numbers[numbers != numbers[end-17]]\n   \
    \ numbers = numbers[numbers != numbers[end-18]]\n    numbers = numbers[numbers\
    \ != numbers[end-19]]\n    numbers = numbers[numbers != numbers[end-20]]\n   \
    \ numbers = numbers[numbers != numbers[end-21]]\n    numbers = numbers[numbers\
    \ != numbers[end-22]]\n    numbers = numbers[numbers != numbers[end-23]]\n   \
    \ numbers = numbers[numbers != numbers[end-24]]\n    numbers = numbers[numbers\
    \ != numbers[end-25]]\n    numbers = numbers[numbers != numbers[end-26]]\n   \
    \ numbers = numbers[numbers != numbers[end-27]]\n    numbers = numbers[numbers\
    \ != numbers[end-28]]\n    numbers = numbers[numbers != numbers[end-29]]\n   \
    \ numbers = numbers[numbers != numbers[end-30]]\n    numbers = numbers[numbers\
    \ != numbers[end-31]]\n    numbers = numbers[numbers != numbers[end-32]]\n   \
    \ numbers = numbers[numbers != numbers[end-33]]\n    numbers = numbers[numbers\
    \ != numbers[end-34]]\n    numbers = numbers[numbers != numbers[end-35]]\n   \
    \ numbers = numbers[numbers != numbers[end-36]]\n    numbers = numbers[numbers\
    \ != numbers[end-37]]\n    numbers = numbers[numbers != numbers[end-38]]\n    ",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nnumbers = [1,2,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    </cell>\n<code language=julia-1.4>\nremove_duplicates(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    \n    numbers = numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers\
    \ .!= numbers[", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while\
    \ i < length(numbers)\n        if numbers[i] != numbers[i+1]\n            numbers\
    \ = numbers[2:end]\n        else\n            i += 1\n        end\n    end\n \
    \   \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ if the input vector is [1,2,3,4,5], the output should be 55.", "    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,1,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a vector that\
    \ are less than a given value.", "    \n    numbers = sort(numbers)\n    \n  \
    \  numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,26",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time remove_duplicates(numbers)\n</cell>\n<text>\nExercise\n\
    Write a function that removes all the elements that are less than a given number\
    \ from a given list.", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend", "    \n    numbers = sort(numbers)\n    \n    numbers\
    \ = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.3>\nnumbers = [1,2,3,3,4,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,3,3,4,5,6,", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        if numbers[i] == numbers[i+1]\n            numbers\
    \ = numbers[2:end]\n        else\n            i += 1\n        end\n    end\n \
    \   \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,1,2,3,4,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    numbers = numbers[numbers .!= numbers[1]]\n    numbers = numbers[numbers\
    \ .!= numbers[2]]\n    numbers = numbers[numbers .!= numbers[3]]\n    numbers\
    \ = numbers[numbers .!= numbers[4]]\n    numbers = numbers[numbers .!= numbers[5]]\n\
    \    numbers = numbers[numbers .!= numbers[6]]\n    numbers = numbers[numbers\
    \ .!= numbers[7]]\n    numbers = numbers[numbers .!= numbers[8]]\n    numbers\
    \ = numbers[numbers .!= numbers[9]]\n    numbers = numbers[numbers .!= numbers[10]]\n\
    \    numbers = numbers[numbers .!= numbers[11]]\n    numbers = numbers[numbers\
    \ .!= numbers[12]]\n    numbers = numbers[numbers .!= numbers[13]]\n    numbers\
    \ = numbers[numbers .!= numbers[14]]\n    numbers = numbers[numbers .!= numbers[15]]\n\
    \    numbers = numbers[numbers .!= numbers[16]]\n    numbers = numbers[numbers\
    \ .!= numbers[17]]\n    numbers = numbers[numbers .!= numbers[18]]\n    numbers\
    \ = numbers[numbers .!= numbers[19]]\n    numbers = numbers[numbers .!= numbers[20]]\n\
    \    numbers = numbers[numbers .!= numbers[21]]\n    numbers = numbers[numbers\
    \ .!= numbers[22]]\n    numbers = numbers[numbers .!= numbers[23]]\n    numbers\
    \ = numbers[numbers .!= numbers[24]]\n    numbers = numbers[numbers .!= numbers[25]]\n\
    \    numbers = numbers[numbers .!= numbers[26]]\n    numbers = numbers[numbers\
    \ .!= numbers[27]]\n    numbers = numbers[numbers .!= numbers[28]]\n    numbers\
    \ = numbers[numbers .!= numbers[29]]\n    numbers = numbers[numbers .!= numbers[30]]\n\
    \    numbers = numbers[numbers .!= numbers[31]]\n    numbers = numbers[numbers\
    \ .!= numbers[32]]\n    numbers = numbers[numbers .!= numbers[33]]\n    numbers\
    \ = numbers[numbers .!= numbers[34]]\n    numbers = numbers[numbers .!= numbers[35]]\n\
    \    numbers = numbers[numbers .!= numbers[36]]\n    numbers = numbers[numbers\
    \ .!= numbers[37]]\n    numbers = numbers[numbers .!= numbers[38]]\n    numbers\
    \ = numbers[numbers .!= numbers[39]]\n    numbers = numbers[", "    numbers =\
    \ numbers[numbers != numbers[end]]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given value.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    numbers = numbers[numbers != numbers[end]]\n   \
    \ \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,4])\n</cell>\n<code language=",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test function\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[i+1:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,4,5,6,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,50,50,50,50,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,60,60,60,60,61,61,61,61,61,62,62,62,62,62,63,63,63,63,63,64,64,64,64,65,65,65,65,66,66,66,66,67,67,67,67,67,68,68,68,68,68,69,69,69,69,69,70,70,70,70,70,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,74",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n</cell>\n<code language=julia-1.5>\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers. \nThe function should only\
    \ take one argument, the vector of integers.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @time remove_duplicates([1,2,2,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n\
    \    numbers = numbers[numbers != numbers[end-2]]\n    numbers = numbers[numbers\
    \ != numbers[end-3]]\n    numbers = numbers[numbers != numbers[end-4]]\n    numbers\
    \ = numbers[numbers != numbers[end-5]]\n    numbers = numbers[numbers != numbers[end-6]]\n\
    \    numbers = numbers[numbers != numbers[end-7]]\n    numbers = numbers[numbers\
    \ != numbers[end-8]]\n    numbers = numbers[numbers != numbers[end-9]]\n    numbers\
    \ = numbers[numbers != numbers[end-10]]\n    numbers = numbers[numbers != numbers[end-11]]\n\
    \    numbers = numbers[numbers != numbers[end-12]]\n    numbers = numbers[numbers\
    \ != numbers[end-13]]\n    numbers = numbers[numbers != numbers[end-14]]\n   \
    \ numbers = numbers[numbers != numbers[end-15]]\n    numbers = numbers[numbers\
    \ != numbers[end-16]]\n    numbers = numbers[numbers != numbers[end-17]]\n   \
    \ numbers = numbers[numbers != numbers[end-18]]\n    numbers = numbers[numbers\
    \ != numbers[end-19]]\n    numbers = numbers[numbers != numbers[end-20]]\n   \
    \ numbers = numbers[numbers != numbers[end-21]]\n    numbers = numbers[numbers\
    \ != numbers[end-22]]\n    numbers = numbers[numbers != numbers[end-23]]\n   \
    \ numbers = numbers[numbers != numbers[end-24]]\n    numbers = numbers[numbers\
    \ != numbers[end-25]]\n    numbers = numbers[numbers != numbers[end-26]]\n   \
    \ numbers = numbers[numbers != numbers[end-27]]\n    numbers = numbers[numbers\
    \ != numbers[end-28]]\n    numbers = numbers[numbers != numbers[end-29]]\n   \
    \ numbers = numbers[numbers != numbers[end-30]]\n    numbers = numbers[numbers\
    \ != numbers[end-31]]\n    numbers = numbers[numbers != numbers[end-32]]\n   \
    \ numbers = numbers[numbers != numbers[end-33]]\n    numbers = numbers[numbers\
    \ != numbers[end-34]]\n    numbers = numbers[numbers != numbers[end-35]]\n   \
    \ numbers = numbers[numbers != numbers[end-36]]\n    numbers = numbers[numbers\
    \ != numbers[end-37]]\n    numbers = numbers[numbers != numbers[end-38]]\n    ",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>\nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    numbers\
    \ = numbers[numbers != numbers[end-2]]\n    numbers = numbers[numbers != numbers[end-3]]\n\
    \    numbers = numbers[numbers != numbers[end-4]]\n    numbers = numbers[numbers\
    \ != numbers[end-5]]\n    numbers = numbers[numbers != numbers[end-6]]\n    numbers\
    \ = numbers[numbers != numbers[end-7]]\n    numbers = numbers[numbers != numbers[end-8]]\n\
    \    numbers = numbers[numbers != numbers[end-9]]\n    numbers = numbers[numbers\
    \ != numbers[end-10]]\n    numbers = numbers[numbers != numbers[end-11]]\n   \
    \ numbers = numbers[numbers != numbers[end-12]]\n    numbers = numbers[numbers\
    \ != numbers[end-13]]\n    numbers = numbers[numbers != numbers[end-14]]\n   \
    \ numbers = numbers[numbers != numbers[end-15]]\n    numbers = numbers[numbers\
    \ != numbers[end-16]]\n    numbers = numbers[numbers != numbers[end-17]]\n   \
    \ numbers = numbers[numbers != numbers[end-18]]\n    numbers = numbers[numbers\
    \ != numbers[end-19]]\n    numbers = numbers[numbers != numbers[end-20]]\n   \
    \ numbers = numbers[numbers != numbers[end-21]]\n    numbers = numbers[numbers\
    \ != numbers[end-22]]\n    numbers = numbers[numbers != numbers[end-23]]\n   \
    \ numbers = numbers[numbers != numbers[end-24]]\n    numbers = numbers[numbers\
    \ != numbers[end-25]]\n    numbers = numbers[numbers != numbers[end-26]]\n   \
    \ numbers = numbers[numbers != numbers[end-27]]\n    numbers = numbers[numbers\
    \ != numbers[end-28]]\n    numbers = numbers[numbers != numbers[end-29]]\n   \
    \ numbers = numbers[numbers != numbers[end-30]]\n    numbers = numbers[numbers\
    \ != numbers[end-31]]\n    numbers = numbers[numbers != numbers[end-32]]\n   \
    \ numbers = numbers[numbers != numbers[end-33]]\n    numbers = numbers[numbers\
    \ != numbers[end-34]]\n    numbers = numbers[numbers != numbers[end-35]]\n   \
    \ numbers = numbers[numbers != numbers[end-36]]\n    numbers = numbers[numbers\
    \ != numbers[end-37]]\n    numbers = numbers[numbers != numbers[end-38]]\n    ",
  "    \n    numbers = numbers[numbers != 0]\n    numbers = numbers[numbers != 1]\n\
    \    numbers = numbers[numbers != 2]\n    numbers = numbers[numbers != 3]\n  \
    \  numbers = numbers[numbers != 4]\n    numbers = numbers[numbers != 5]\n    numbers\
    \ = numbers[numbers != 6]\n    numbers = numbers[numbers != 7]\n    numbers =\
    \ numbers[numbers != 8]\n    numbers = numbers[numbers != 9]\n    numbers = numbers[numbers\
    \ != 10]\n    numbers = numbers[numbers != 11]\n    numbers = numbers[numbers\
    \ != 12]\n    numbers = numbers[numbers != 13]\n    numbers = numbers[numbers\
    \ != 14]\n    numbers = numbers[numbers != 15]\n    numbers = numbers[numbers\
    \ != 16]\n    numbers = numbers[numbers != 17]\n    numbers = numbers[numbers\
    \ != 18]\n    numbers = numbers[numbers != 19]\n    numbers = numbers[numbers\
    \ != 20]\n    numbers = numbers[numbers != 21]\n    numbers = numbers[numbers\
    \ != 22]\n    numbers = numbers[numbers != 23]\n    numbers = numbers[numbers\
    \ != 24]\n    numbers = numbers[numbers != 25]\n    numbers = numbers[numbers\
    \ != 26]\n    numbers = numbers[numbers != 27]\n    numbers = numbers[numbers\
    \ != 28]\n    numbers = numbers[numbers != 29]\n    numbers = numbers[numbers\
    \ != 30]\n    numbers = numbers[numbers != 31]\n    numbers = numbers[numbers\
    \ != 32]\n    numbers = numbers[numbers != 33]\n    numbers = numbers[numbers\
    \ != 34]\n    numbers = numbers[numbers != 35]\n    numbers = numbers[numbers\
    \ != 36]\n    numbers = numbers[numbers != 37]\n    numbers = numbers[numbers\
    \ != 38]\n    numbers = numbers[numbers != 39]\n    numbers = numbers[numbers\
    \ != 40]\n    numbers = numbers[numbers != 41]\n    numbers = numbers[numbers\
    \ != 42]\n    numbers = numbers[numbers != 43]\n    numbers = numbers[numbers\
    \ != 44]\n    numbers = numbers[numbers != 45]\n    numbers = numbers[numbers\
    \ != 46]\n    numbers = numbers[numbers != 47]\n    numbers = numbers[numbers\
    \ != 48]\n    numbers = numbers[numbers != 49]\n    numbers = numbers[numbers\
    \ != 50]\n    numbers = numbers[numbers != 51]\n    ", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    \n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,2",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[2:end]\n    \n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,2,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,46,46,47,47,47,47,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,58,58,58,58,59,59,59,59,59,60,60,60,60,61,61,61,61,61,62,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,66,66,66,66,67,67,67,67,67,68,68,68,68,68,69,69,69,69,69,70,70,70,70,70,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,74,74,74,74,74,75,75,75,75,75,76,76,76,76,76,77,77,77,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] !=\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnumbers = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,13",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend", "    \n    numbers = sort(numbers)\n    \n  \
    \  numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,26",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,4,5,5,6,6,7,8,9,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers where the integers are in descending order.",
  "    \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end-1]] \n    numbers = numbers[numbers != numbers[end-2]] \n   \
    \ numbers = numbers[numbers != numbers[end-3]] \n    numbers = numbers[numbers\
    \ != numbers[end-4]] \n    numbers = numbers[numbers != numbers[end-5]] \n   \
    \ numbers = numbers[numbers != numbers[end-6]] \n    numbers = numbers[numbers\
    \ != numbers[end-7]] \n    numbers = numbers[numbers != numbers[end-8]] \n   \
    \ numbers = numbers[numbers != numbers[end-9]] \n    numbers = numbers[numbers\
    \ != numbers[end-10]] \n    numbers = numbers[numbers != numbers[end-11]] \n \
    \   numbers = numbers[numbers != numbers[end-12]] \n    numbers = numbers[numbers\
    \ != numbers[end-13]] \n    numbers = numbers[numbers != numbers[end-14]] \n \
    \   numbers = numbers[numbers != numbers[end-15]] \n    numbers = numbers[numbers\
    \ != numbers[end-16]] \n    numbers = numbers[numbers != numbers[end-17]] \n \
    \   numbers = numbers[numbers != numbers[end-18]] \n    numbers = numbers[numbers\
    \ != numbers[end-19]] \n    numbers = numbers[numbers != numbers[end-20]] \n \
    \   numbers = numbers[numbers != numbers[end-21]] \n    numbers = numbers[numbers\
    \ != numbers[end-22]] \n    numbers = numbers[numbers != numbers[end-23]] \n \
    \   numbers = numbers[numbers != numbers[end-24]] \n    numbers = numbers[numbers\
    \ != numbers[end-25]] \n    numbers = numbers[numbers != numbers[end-26]] \n \
    \   numbers = numbers[numbers != numbers[end-27]] \n    numbers = numbers[numbers\
    \ != numbers[end-28]] \n    numbers = numbers[numbers != numbers[end-29]] \n \
    \   numbers = numbers[numbers != numbers[end-30]] \n    numbers = numbers[numbers\
    \ != numbers[end-31]] \n    numbers = numbers[numbers != numbers[end-32]] \n \
    \   numbers = numbers[numbers != numbers[end-33]] \n    numbers = numbers[numbers\
    \ != numbers[end-34]] \n    numbers = numbers[numbers != numbers[end-35]] \n \
    \   numbers = numbers[numbers != numbers[end-", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    \n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test our function\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    println(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers where the values are the square\
    \ of those numbers. \nFor example, remove_duplicates([1,2,3]) should return [1,2,9].",
  "    numbers = sort(numbers)\n    numbers = numbers[numbers != numbers[end]]\n \
    \   return numbers\nend", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    \n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nremove_duplicates(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the numbers in the list.", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end", "    \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    numbers = numbers[numbers != numbers[end-1]]\n    numbers = numbers[numbers\
    \ != numbers[end-2]]\n    numbers = numbers[numbers != numbers[end-3]]\n    numbers\
    \ = numbers[numbers != numbers[end-4]]\n    numbers = numbers[numbers != numbers[end-5]]\n\
    \    numbers = numbers[numbers != numbers[end-6]]\n    numbers = numbers[numbers\
    \ != numbers[end-7]]\n    numbers = numbers[numbers != numbers[end-8]]\n    numbers\
    \ = numbers[numbers != numbers[end-9]]\n    numbers = numbers[numbers != numbers[end-10]]\n\
    \    numbers = numbers[numbers != numbers[end-11]]\n    numbers = numbers[numbers\
    \ != numbers[end-12]]\n    numbers = numbers[numbers != numbers[end-13]]\n   \
    \ numbers = numbers[numbers != numbers[end-14]]\n    numbers = numbers[numbers\
    \ != numbers[end-15]]\n    numbers = numbers[numbers != numbers[end-16]]\n   \
    \ numbers = numbers[numbers != numbers[end-17]]\n    numbers = numbers[numbers\
    \ != numbers[end-18]]\n    numbers = numbers[numbers != numbers[end-19]]\n   \
    \ numbers = numbers[numbers != numbers[end-20]]\n    numbers = numbers[numbers\
    \ != numbers[end-21]]\n    numbers = numbers[numbers != numbers[end-22]]\n   \
    \ numbers = numbers[numbers != numbers[end-23]]\n    numbers = numbers[numbers\
    \ != numbers[end-24]]\n    numbers = numbers[numbers != numbers[end-25]]\n   \
    \ numbers = numbers[numbers != numbers[end-26]]\n    numbers = numbers[numbers\
    \ != numbers[end-27]]\n    numbers = numbers[numbers != numbers[end-28]]\n   \
    \ numbers = numbers[numbers != numbers[end-29]]\n    numbers = numbers[numbers\
    \ != numbers[end-30]]\n    numbers = numbers[numbers != numbers[end-31]]\n   \
    \ numbers = numbers[numbers != numbers[end-32]]\n    numbers = numbers[numbers\
    \ != numbers[end-33]]\n    numbers = numbers[numbers != numbers[end-34]]\n   \
    \ numbers = numbers[numbers != numbers[end-35]]\n    numbers = numbers[numbers\
    \ != numbers[end-36]]\n    numbers = numbers[numbers != numbers[end-37]]\n   \
    \ numbers = numbers[numbers != numbers[end-38]]\n    ", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] ==\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    \n    while i < length(numbers)\n        if numbers[i] == numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n prime numbers. \nThe function should take an optional argument\
    \ n that defaults to 5.\nThe function should return an array of n prime numbers.\n\
    The function should return nothing if n is less than 2.\nThe function should return\
    \ nothing if n is less than 2.\nThe function should return nothing if n is less\
    \ than 2.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than 2.\nThe function should return nothing if n is less than 2.\n\
    The function should return nothing if n is less than 2.\nThe function should return\
    \ nothing if n is less than 2.\nThe function should return nothing if n is less\
    \ than 2.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than 2.\nThe function should return nothing if n is less than 2.\n\
    The function should return nothing if n is less than 2.\nThe function should return\
    \ nothing if n is less than 2.\nThe function should return nothing if n is less\
    \ than 2.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than 2.\nThe function should return nothing if n is less than 2.\n\
    The function should return nothing if n is less than 2.\nThe function should return\
    \ nothing if n is less than 2.\nThe function should return nothing if n is less\
    \ than 2.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than 2.\nThe function should return nothing if n is less than 2.\n\
    The function should return nothing if n is less than 2.\nThe function should return\
    \ nothing if n is less than 2.\nThe function should return nothing if n is less\
    \ than 2.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than 2.\nThe function should return nothing if n", "    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the values\
    \ are the square of those in the original vector. For example, if the input vector\
    \ is [1,2,3,4,5], the output vector should be [1,2,3,4,5].", "    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[2:end]\n    \n    return numbers\n\
    end", "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n \
    \   \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] !=\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,4,5,5,6,7,8,9,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    </cell>\n<code language=julia-1.5>\nnumbers = remove_duplicates(numbers)\n</cell>\n\
    <code language=julia-1.5>\nnumbers\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a vector that are less than a given value.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\n@time remove_duplicates([1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,14",
  "    numbers = sort(numbers)\n    numbers = numbers[numbers != numbers[end]]\n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers.\
    \ \nFor example, \n$$ f([1,2,3]) $$\nshould return $1 + 4 + 9 + 16 = 25$. \nThe\
    \ function should work for any vector and any element type.", "    \n    numbers\
    \ = numbers[numbers != numbers[end]]\n    \n    return numbers\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first element of a vector, if it exists and\
    \ a default value otherwise. \nIf no element exists, return default.", "    \n\
    \    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nremove_duplicates(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given value.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] ==\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time remove_duplicates([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i = 0\n  \
    \  \n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n  \
    \          numbers = numbers[2:end]\n        else\n            i += 1\n      \
    \  end\n    end\n    \n    numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @time remove_duplicates(rand(1:10000,100));\n</cell>\n<text>\nExercise: Remove\
    \ all elements that occur more than once.\nWrite a function that removes all elements\
    \ that occur more than once.\nUse a while loop to remove all elements that occur\
    \ more than once.\nUse a for loop to remove all elements that occur more than\
    \ once.\nUse a while loop to remove all elements that occur more than once.\n\
    Use a for loop to remove all elements that occur more than once.\nUse a while\
    \ loop to remove all elements that occur more than once.\nUse a for loop to remove\
    \ all elements that occur more than once.\nUse a while loop to remove all elements\
    \ that occur more than once.\nUse a for loop to remove all elements that occur\
    \ more than once.\nUse a while loop to remove all elements that occur more than\
    \ once.\nUse a for loop to remove all elements that occur more than once.\nUse\
    \ a while loop to remove all elements that occur more than once.\nUse a for loop\
    \ to remove all elements that occur more than once.\nUse a while loop to remove\
    \ all elements that occur more than once.\nUse a for loop to remove all elements\
    \ that occur more than once.\nUse a while loop to remove all elements that occur\
    \ more than once.\nUse a for loop to remove all elements that occur more than\
    \ once.\nUse a while loop to remove all elements that occur more than once.\n\
    Use a for loop to remove all elements that occur more than once.\nUse a while\
    \ loop to remove all elements that occur more than once.\nUse a for loop to remove\
    \ all elements that occur more than once.\nUse a while loop to remove all elements\
    \ that occur more than once.\nUse a for loop to remove all elements that occur\
    \ more than once.\nUse a while loop to remove all elements that occur more than\
    \ once.\nUse a for loop to remove all elements that occur more than once.\nUse\
    \ a while loop to remove all elements that occur more than once.\nUse a for loop\
    \ to remove all elements that occur more than once.\nUse a while loop to remove\
    \ all elements that occur more than once.\nUse a for loop to remove all elements\
    \ that occur more than once.\nUse a while loop to remove all elements that occur\
    \ more than once.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers = numbers[numbers .!= numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers.\
    \ \n    Use a for loop to iterate over the vector and add squared integers.\n\
    \    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared integers.\
    \ \n    \n    Use a while loop to iterate over the vector and add squared ", " \
    \   \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end-1]] \n    numbers = numbers[numbers != numbers[end-2]] \n   \
    \ numbers = numbers[numbers != numbers[end-3]] \n    numbers = numbers[numbers\
    \ != numbers[end-4]] \n    numbers = numbers[numbers != numbers[end-5]] \n   \
    \ numbers = numbers[numbers != numbers[end-6]] \n    numbers = numbers[numbers\
    \ != numbers[end-7]] \n    numbers = numbers[numbers != numbers[end-8]] \n   \
    \ numbers = numbers[numbers != numbers[end-9]] \n    numbers = numbers[numbers\
    \ != numbers[end-10]] \n    numbers = numbers[numbers != numbers[end-11]] \n \
    \   numbers = numbers[numbers != numbers[end-12]] \n    numbers = numbers[numbers\
    \ != numbers[end-13]] \n    numbers = numbers[numbers != numbers[end-14]] \n \
    \   numbers = numbers[numbers != numbers[end-15]] \n    numbers = numbers[numbers\
    \ != numbers[end-16]] \n    numbers = numbers[numbers != numbers[end-17]] \n \
    \   numbers = numbers[numbers != numbers[end-18]] \n    numbers = numbers[numbers\
    \ != numbers[end-19]] \n    numbers = numbers[numbers != numbers[end-20]] \n \
    \   numbers = numbers[numbers != numbers[end-21]] \n    numbers = numbers[numbers\
    \ != numbers[end-22]] \n    numbers = numbers[numbers != numbers[end-23]] \n \
    \   numbers = numbers[numbers != numbers[end-24]] \n    numbers = numbers[numbers\
    \ != numbers[end-25]] \n    numbers = numbers[numbers != numbers[end-26]] \n \
    \   numbers = numbers[numbers != numbers[end-27]] \n    numbers = numbers[numbers\
    \ != numbers[end-28]] \n    numbers = numbers[numbers != numbers[end-29]] \n \
    \   numbers = numbers[numbers != numbers[end-30]] \n    numbers = numbers[numbers\
    \ != numbers[end-31]] \n    numbers = numbers[numbers != numbers[end-32]] \n \
    \   numbers = numbers[numbers != numbers[end-33]] \n    numbers = numbers[numbers\
    \ != numbers[end-34]] \n    numbers = numbers[numbers != numbers[end-35]] \n \
    \   numbers = numbers[numbers != numbers[end-", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    \n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[i+1:length(numbers)]\n        else\n          \
    \  i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates(numbers)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers are in descending order.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    numbers = numbers[numbers != numbers[end]]\
    \ \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test remove_duplicates\n\
    numbers = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = numbers[numbers != 0]\n    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    numbers = numbers[numbers\
    \ != numbers[end-1]]\n    \n    numbers = numbers[numbers != numbers[end-2]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-3]]\n    \n    numbers = numbers[numbers\
    \ != numbers[end-4]]\n    \n    numbers = numbers[numbers != numbers[end-5]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-6]]\n    \n    numbers = numbers[numbers\
    \ != numbers[end-7]]\n    \n    numbers = numbers[numbers != numbers[end-8]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-9]]\n    \n    numbers = numbers[numbers\
    \ != numbers[end-10]]\n    \n    numbers = numbers[numbers != numbers[end-11]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-12]]\n    \n    numbers =\
    \ numbers[numbers != numbers[end-13]]\n    \n    numbers = numbers[numbers !=\
    \ numbers[end-14]]\n    \n    numbers = numbers[numbers != numbers[end-15]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-16]]\n    \n    numbers =\
    \ numbers[numbers != numbers[end-17]]\n    \n    numbers = numbers[numbers !=\
    \ numbers[end-18]]\n    \n    numbers = numbers[numbers != numbers[end-19]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-20]]\n    \n    numbers =\
    \ numbers[numbers != numbers[end-21]]\n    \n    numbers = numbers[numbers !=\
    \ numbers[end-22]]\n    \n    numbers = numbers[numbers != numbers[end-23]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-24]]\n    \n    numbers =\
    \ numbers[numbers != numbers[end-25]]\n    \n    numbers = numbers[numbers !=\
    \ numbers[end-26]]\n    \n    numbers = numbers[numbers != numbers[end-27]]\n\
    \    \n    numbers = numbers[numbers != numbers[end-28]]\n    \n    numbers =\
    \ numbers[numbers != numbers[end-29]]\n    \n    numbers = numbers[numbers !=\
    \ numbers[end-30]]\n    \n    numbers = numbers[numbers != numbers[end-31]]\n\
    \    \n    numbers = numbers[numbers != number", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    numbers\
    \ = numbers[numbers != numbers[end-2]]\n    numbers = numbers[numbers != numbers[end-3]]\n\
    \    numbers = numbers[numbers != numbers[end-4]]\n    numbers = numbers[numbers\
    \ != numbers[end-5]]\n    numbers = numbers[numbers != numbers[end-6]]\n    numbers\
    \ = numbers[numbers != numbers[end-7]]\n    numbers = numbers[numbers != numbers[end-8]]\n\
    \    numbers = numbers[numbers != numbers[end-9]]\n    numbers = numbers[numbers\
    \ != numbers[end-10]]\n    numbers = numbers[numbers != numbers[end-11]]\n   \
    \ numbers = numbers[numbers != numbers[end-12]]\n    numbers = numbers[numbers\
    \ != numbers[end-13]]\n    numbers = numbers[numbers != numbers[end-14]]\n   \
    \ numbers = numbers[numbers != numbers[end-15]]\n    numbers = numbers[numbers\
    \ != numbers[end-16]]\n    numbers = numbers[numbers != numbers[end-17]]\n   \
    \ numbers = numbers[numbers != numbers[end-18]]\n    numbers = numbers[numbers\
    \ != numbers[end-19]]\n    numbers = numbers[numbers != numbers[end-20]]\n   \
    \ numbers = numbers[numbers != numbers[end-21]]\n    numbers = numbers[numbers\
    \ != numbers[end-22]]\n    numbers = numbers[numbers != numbers[end-23]]\n   \
    \ numbers = numbers[numbers != numbers[end-24]]\n    numbers = numbers[numbers\
    \ != numbers[end-25]]\n    numbers = numbers[numbers != numbers[end-26]]\n   \
    \ numbers = numbers[numbers != numbers[end-27]]\n    numbers = numbers[numbers\
    \ != numbers[end-28]]\n    numbers = numbers[numbers != numbers[end-29]]\n   \
    \ numbers = numbers[numbers != numbers[end-30]]\n    numbers = numbers[numbers\
    \ != numbers[end-31]]\n    numbers = numbers[numbers != numbers[end-32]]\n   \
    \ numbers = numbers[numbers != numbers[end-33]]\n    numbers = numbers[numbers\
    \ != numbers[end-34]]\n    numbers = numbers[numbers != numbers[end-35]]\n   \
    \ numbers = numbers[numbers != numbers[end-36]]\n    numbers = numbers[numbers\
    \ != numbers[end-37]]\n    numbers = numbers[numbers != numbers[end-38]]\n    ",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n\
    \    numbers = numbers[numbers != numbers[end-2]]\n    numbers = numbers[numbers\
    \ != numbers[end-3]]\n    numbers = numbers[numbers != numbers[end-4]]\n    numbers\
    \ = numbers[numbers != numbers[end-5]]\n    numbers = numbers[numbers != numbers[end-6]]\n\
    \    numbers = numbers[numbers != numbers[end-7]]\n    numbers = numbers[numbers\
    \ != numbers[end-8]]\n    numbers = numbers[numbers != numbers[end-9]]\n    numbers\
    \ = numbers[numbers != numbers[end-10]]\n    numbers = numbers[numbers != numbers[end-11]]\n\
    \    numbers = numbers[numbers != numbers[end-12]]\n    numbers = numbers[numbers\
    \ != numbers[end-13]]\n    numbers = numbers[numbers != numbers[end-14]]\n   \
    \ numbers = numbers[numbers != numbers[end-15]]\n    numbers = numbers[numbers\
    \ != numbers[end-16]]\n    numbers = numbers[numbers != numbers[end-17]]\n   \
    \ numbers = numbers[numbers != numbers[end-18]]\n    numbers = numbers[numbers\
    \ != numbers[end-19]]\n    numbers = numbers[numbers != numbers[end-20]]\n   \
    \ numbers = numbers[numbers != numbers[end-21]]\n    numbers = numbers[numbers\
    \ != numbers[end-22]]\n    numbers = numbers[numbers != numbers[end-23]]\n   \
    \ numbers = numbers[numbers != numbers[end-24]]\n    numbers = numbers[numbers\
    \ != numbers[end-25]]\n    numbers = numbers[numbers != numbers[end-26]]\n   \
    \ numbers = numbers[numbers != numbers[end-27]]\n    numbers = numbers[numbers\
    \ != numbers[end-28]]\n    numbers = numbers[numbers != numbers[end-29]]\n   \
    \ numbers = numbers[numbers != numbers[end-30]]\n    numbers = numbers[numbers\
    \ != numbers[end-31]]\n    numbers = numbers[numbers != numbers[end-32]]\n   \
    \ numbers = numbers[numbers != numbers[end-33]]\n    numbers = numbers[numbers\
    \ != numbers[end-34]]\n    numbers = numbers[numbers != numbers[end-35]]\n   \
    \ numbers = numbers[numbers != numbers[end-36]]\n    numbers = numbers[numbers\
    \ != numbers[end-37]]\n    numbers = numbers[numbers != numbers[end-38]]\n    ",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test our\
    \ function\nnumbers = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, ", "    \n    numbers = numbers[numbers != numbers[end]]\n    numbers\
    \ = numbers[numbers != numbers[end-1]]\n    numbers = numbers[numbers != numbers[end-2]]\n\
    \    numbers = numbers[numbers != numbers[end-3]]\n    numbers = numbers[numbers\
    \ != numbers[end-4]]\n    numbers = numbers[numbers != numbers[end-5]]\n    numbers\
    \ = numbers[numbers != numbers[end-6]]\n    numbers = numbers[numbers != numbers[end-7]]\n\
    \    numbers = numbers[numbers != numbers[end-8]]\n    numbers = numbers[numbers\
    \ != numbers[end-9]]\n    numbers = numbers[numbers != numbers[end-10]]\n    numbers\
    \ = numbers[numbers != numbers[end-11]]\n    numbers = numbers[numbers != numbers[end-12]]\n\
    \    numbers = numbers[numbers != numbers[end-13]]\n    numbers = numbers[numbers\
    \ != numbers[end-14]]\n    numbers = numbers[numbers != numbers[end-15]]\n   \
    \ numbers = numbers[numbers != numbers[end-16]]\n    numbers = numbers[numbers\
    \ != numbers[end-17]]\n    numbers = numbers[numbers != numbers[end-18]]\n   \
    \ numbers = numbers[numbers != numbers[end-19]]\n    numbers = numbers[numbers\
    \ != numbers[end-20]]\n    numbers = numbers[numbers != numbers[end-21]]\n   \
    \ numbers = numbers[numbers != numbers[end-22]]\n    numbers = numbers[numbers\
    \ != numbers[end-23]]\n    numbers = numbers[numbers != numbers[end-24]]\n   \
    \ numbers = numbers[numbers != numbers[end-25]]\n    numbers = numbers[numbers\
    \ != numbers[end-26]]\n    numbers = numbers[numbers != numbers[end-27]]\n   \
    \ numbers = numbers[numbers != numbers[end-28]]\n    numbers = numbers[numbers\
    \ != numbers[end-29]]\n    numbers = numbers[numbers != numbers[end-30]]\n   \
    \ numbers = numbers[numbers != numbers[end-31]]\n    numbers = numbers[numbers\
    \ != numbers[end-32]]\n    numbers = numbers[numbers != numbers[end-33]]\n   \
    \ numbers = numbers[numbers != numbers[end-34]]\n    numbers = numbers[numbers\
    \ != numbers[end-35]]\n    numbers = numbers[numbers != numbers[end-36]]\n   \
    \ numbers = numbers[numbers != numbers[end-37]]\n    numbers = numbers[numbers\
    \ != numbers[end-38]]\n    ", "    numbers = numbers[findall(numbers .!= numbers\
    \ .&. numbers .==0)]\n    return numbers\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\nI wrote a function to remove duplicates from a vector. \n<code>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != 0]\n    \n    numbers = sort(numbers)\n    \n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n \
    \   numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n\
    \    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[number", "    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[number",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n        if numbers[i]\
    \ != numbers[i+1]\n            numbers = numbers[2:end]\n        else\n      \
    \      i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<code language=julia-1.5>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    numbers\
    \ = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,26",
  "    \n    numbers = numbers[numbers .!= numbers[end]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-1]]\n    numbers = numbers[numbers .!= numbers[end-2]]\n   \
    \ numbers = numbers[numbers .!= numbers[end-3]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-4]]\n    numbers = numbers[numbers .!= numbers[end-5]]\n   \
    \ numbers = numbers[numbers .!= numbers[end-6]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-7]]\n    numbers = numbers[numbers .!= numbers[end-8]]\n   \
    \ numbers = numbers[numbers .!= numbers[end-9]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-10]]\n    numbers = numbers[numbers .!= numbers[end-11]]\n \
    \   numbers = numbers[numbers .!= numbers[end-12]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-13]]\n    numbers = numbers[numbers .!= numbers[end-14]]\n \
    \   numbers = numbers[numbers .!= numbers[end-15]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-16]]\n    numbers = numbers[numbers .!= numbers[end-17]]\n \
    \   numbers = numbers[numbers .!= numbers[end-18]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-19]]\n    numbers = numbers[numbers .!= numbers[end-20]]\n \
    \   numbers = numbers[numbers .!= numbers[end-21]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-22]]\n    numbers = numbers[numbers .!= numbers[end-23]]\n \
    \   numbers = numbers[numbers .!= numbers[end-24]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-25]]\n    numbers = numbers[numbers .!= numbers[end-26]]\n \
    \   numbers = numbers[numbers .!= numbers[end-27]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-28]]\n    numbers = numbers[numbers .!= numbers[end-29]]\n \
    \   numbers = numbers[numbers .!= numbers[end-30]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-31]]\n    numbers = numbers[numbers .!= numbers[end-32]]\n \
    \   numbers = numbers[numbers .!= numbers[end-33]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-34]]\n    numbers = numbers[numbers .!= numbers[end-35]]\n \
    \   numbers = number", "    \n    numbers = sort(numbers)\n    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\n@time remove_duplicates(numbers)\n\
    </cell>\n<text>\nExercise: Remove all elements that occur more than once.\nWhat\
    \ is the time complexity of this function?", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = numbers[numbers .!= numbers[end]]\n    \n    return\
    \ numbers\nend", "    \n    numbers = numbers[numbers != 0]\n    \n    numbers\
    \ = sort(numbers)\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n \
    \   numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n\
    \    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[number",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers .!= numbers[end]]\n    return numbers\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without sorting the entire vector. Maybe by using a different data\
    \ structure that doesn't require sorting at all?\n<|/ c |>\n<| c |>\nI believe\
    \ that sorting is O(n log n), so this solution is O(n log n). Sorting is a very\
    \ common operation and I believe that Julia has some data structure that can do\
    \ it in O(n log n).\n<|/ c |>\n<| c |>\nI believe that sorting is O(n log n) but\
    \ it is also O(n) because of the sorting algorithm. Sorting is a very common operation\
    \ and I believe that Julia has some data structure that can do it in O(n log n).\n\
    <|/ c |>\n<| c |>\nI believe that sorting is O(n log n) but it is also O(n) because\
    \ of the sorting algorithm. Sorting is a very common operation and I believe that\
    \ Julia has some data structure that can do it in O(n log n).\n<|/ c |>\n<| c\
    \ |>\nI believe that sorting is O(n log n) but it is also O(n) because of the\
    \ sorting algorithm. Sorting is a very common operation and I believe that Julia\
    \ has some data structure that can do it in O(n log n).\n<|/ c |>\n<| a dscore=4\
    \ |>\nHere's a solution using Sets:\n<code>\njulia> function remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n           numbers = sort(numbers)\n           numbers = numbers[numbers .!=\
    \ numbers[end]]\n           return numbers\n       end\nremove_duplicates (generic\
    \ function with 1 method)", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n        if numbers[i]\
    \ == numbers[i+1]\n            numbers = numbers[2:end]\n        else\n      \
    \      i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n@time remove_duplicates(rand(1:10000))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers are all even.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] ==\
    \ numbers[i+1]\n            numbers = numbers[2:end]\n        else\n         \
    \   i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.3>\nnumbers = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,13",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    numbers = remove_duplicates(numbers)\n</cell>\n<code language=julia-1.4>\nnumbers\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers where the values are the square of those integers\
    \ in the input vector.", "    \n    numbers = sort(numbers)\n    \n    numbers\
    \ = numbers[numbers != numbers[end]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n\
    \    while i < length(numbers)\n        if numbers[i] == numbers[i+1]\n      \
    \      numbers = numbers[2:end]\n        else\n            i += 1\n        end\n\
    \    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    numbers\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns a vector of integers where the integers are in descending\
    \ order.", "    numbers = sort(numbers)\n    numbers = numbers[numbers != numbers[end]]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the values\
    \ are the square of those integers in the input vector. For example, if the input\
    \ vector is [1,2,3,4,5], the output vector should be [1,2,3,4,5].", "    \n  \
    \  numbers = numbers[numbers .!= numbers[end]]\n    numbers = numbers[numbers\
    \ .!= numbers[end-1]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    numbers = [1,2,2,3,4,4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n</cell>\n\
    <code language=julia-1.4>\nremove_duplicates(numbers)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers where the integers are in descending order.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    numbers = sort(numbers)\n    numbers\
    \ = numbers[numbers != numbers[end]]\n    return numbers\nend\n</code>\n<|/ a\
    \ tags=julia,arrays |>\n<| c |>\nThanks for your answer! I tested it and it works\
    \ well. However I still don't understand why my code didn't work. Could you please\
    \ explain it to me?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\nThe reason your code doesn't work is because you never\
    \ actually remove any elements from the array. Your code only removes elements\
    \ that occur more than once.\nTo fix this, you can use the removeall function\
    \ from the Base package:\n<code>", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    return numbers\nend", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    remove_duplicates([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,3,3])",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    numbers = numbers[numbers\
    \ != numbers[end-1]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nnumbers = remove_duplicates(numbers)\n\
    </cell>\n<code language=julia-1.5>\nnumbers\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the first n prime numbers. \nThe function should take\
    \ an argument n and return a vector of n prime numbers.\nThe function should return\
    \ nothing if the argument n is less than 2.\nThe function should return nothing\
    \ if the argument n is greater than 20.\nThe function should return nothing if\
    \ the argument n is 0.\nThe function should return nothing if the argument n is\
    \ NaN.\nThe function should return nothing if the argument n is Inf.\nThe function\
    \ should return nothing if the argument n is NaN.\nThe function should return\
    \ nothing if the argument n is Inf.\nThe function should return nothing if the\
    \ argument n is NaN.\nThe function should return nothing if the argument n is\
    \ Inf.\nThe function should return nothing if the argument n is NaN.\nThe function\
    \ should return nothing if the argument n is Inf.\nThe function should return\
    \ nothing if the argument n is NaN.\nThe function should return nothing if the\
    \ argument n is Inf.\nThe function should return nothing if the argument n is\
    \ NaN.\nThe function should return nothing if the argument n is Inf.\nThe function\
    \ should return nothing if the argument n is NaN.\nThe function should return\
    \ nothing if the argument n is Inf.\nThe function should return nothing if the\
    \ argument n is NaN.\nThe function should return nothing if the argument n is\
    \ Inf.\nThe function should return nothing if the argument n is NaN.\nThe function\
    \ should return nothing if the argument n is Inf.\nThe function should return\
    \ nothing if the argument n is NaN.\nThe function should return nothing if the\
    \ argument n is Inf.\nThe function should return nothing if the argument n is\
    \ NaN.\nThe function should return nothing if the argument n is Inf.\nThe function\
    \ should return nothing if the argument n is NaN.\nThe function should return\
    \ nothing if the argument n is Inf.\nThe function should return nothing if the\
    \ argument n is NaN.\nThe function should return nothing if the argument n is\
    \ Inf.\nThe function should return nothing if the argument n is NaN.\nThe function\
    \ should return nothing if the argument n is Inf.\nThe function should return\
    \ nothing if the argument n is NaN.\nThe function should return nothing if the\
    \ argument n is ", "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,2,3,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the number of unique elements in the list.",
  "    \n    numbers = numbers[numbers != 0]\n    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[number", '    numbers = numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .!= numbers[numbers .!= numbers[numbers .!= numbers[numbers .!=
    numbers[numbers .', "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    \n    return numbers\nend", "    \n    numbers = numbers[numbers\
    \ != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n    numbers\
    \ = numbers[numbers != numbers[end-2]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,25",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[number",
  "    \n    numbers = numbers[numbers != 0]\n    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[number", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,13",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != numbers[end]]\n    \n    return numbers\nend", "    \n  \
    \  numbers = sort(numbers)\n    \n    numbers_copy = copy(numbers)\n    \n   \
    \ numbers_copy[numbers_copy .!= numbers_copy[1]] .= numbers_copy[numbers_copy\
    \ .!= numbers_copy[1]]\n    \n    numbers_copy[numbers_copy .!= numbers_copy[end]]\
    \ .= numbers_copy[numbers_copy .!= numbers_copy[end]]\n    \n    numbers_copy[numbers_copy\
    \ .!= numbers_copy[1]] .= numbers_copy[numbers_copy .!= numbers_copy[1]]\n   \
    \ \n    numbers_copy[numbers_copy .!= numbers_copy[end]] .= numbers_copy[numbers_copy\
    \ .!= numbers_copy[end]]\n    \n    numbers_copy[numbers_copy .!= numbers_copy[1]]\
    \ .= numbers_copy[numbers_copy .!= numbers_copy[1]]\n    \n    numbers_copy[numbers_copy\
    \ .!= numbers_copy[end]] .= numbers_copy[numbers_copy .!= numbers_copy[end]]\n\
    \    \n    numbers_copy[numbers_copy .!= numbers_copy[1]] .= numbers_copy[numbers_copy\
    \ .!= numbers_copy[1]]\n    \n    numbers_copy[numbers_copy .!= numbers_copy[end]]\
    \ .= numbers_copy[numbers_copy .!= numbers_copy[end]]\n    \n    numbers_copy[numbers_copy\
    \ .!= numbers_copy[1]] .= numbers_copy[numbers_copy .!= numbers_copy[1]]\n   \
    \ \n    numbers_copy[numbers_copy .!= numbers_copy[end]] .= numbers_copy[numbers_copy\
    \ .!= numbers_copy[end]]\n    \n    numbers_copy[numbers_copy .!= numbers_copy[1]]\
    \ .= numbers_copy[numbers_copy .!= numbers_copy[1]]\n    \n    numbers_copy[numbers_copy\
    \ .!= numbers_copy[end]] .= numbers_copy[numbers_copy .!= numbers_copy[end]]\n\
    \    \n    numbers_copy[numbers_copy .!= numbers_copy[1]] .= numbers_copy[numbers_copy\
    \ .!= numbers_copy[1]]\n    \n    numbers_copy[numbers_copy .!= numbers_copy[end]]\
    \ .= numbers_copy[numbers_copy .!= numbers_copy[end]]\n    \n    numbers_copy[numbers_copy ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ numbers[numbers != 0]\n    \n    numbers = sort(numbers)\n    \n    numbers\
    \ = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n \
    \   numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers != 0]\n\
    \    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[numbers != 0]\n    \n    numbers = numbers[numbers\
    \ != 0]\n    \n    numbers = numbers[number", "    \n    numbers = numbers[numbers\
    \ != 0]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 1]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 2]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 3]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 4]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 5]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 6]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 7]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 8]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 9]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end\
    \ - 10]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers !=\
    \ numbers[end - 11]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 12]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 13]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 14]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 15]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 16]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 17]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 18]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 19]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 20]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != numbers[end - 21]]\n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers\
    \ != number", "    \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers != numbers[end]]\
    \ \n    numbers = numbers[numbers != numbers[end]] \n    numbers = numbers[numbers\
    \ != numbers[end]] \n    numbers = numbers[numbers != numbers[end]] \n    numbers\
    \ = numbers[numbers != numbers[end]] \n    numbers = numbers[number", "    \n\
    \    numbers = numbers[numbers != numbers[end]]\n    return numbers\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n        if\
    \ numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n        else\n\
    \            i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nnumbers = [1,2,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    numbers_unique = Vector{Int64}()\n    \n    for number\
    \ in numbers\n        if number in numbers_unique\n            numbers_unique\
    \ += number\n        else\n            numbers_unique += number\n        end\n\
    \    end\n    \n    return numbers_unique\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,1,2,3,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,",
  "    \n    numbers = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers\
    \ = numbers[2:end]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    while i < length(numbers)\n        if numbers[i] != numbers[i+1]\n\
    \            numbers = numbers[2:end]\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n</cell>\n<code\
    \ language=julia-1.5>\nremove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.", "    \n    numbers = numbers[numbers .!= numbers[end]]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    while i < length(numbers)\n        if numbers[i] == numbers[i+1]\n  \
    \          numbers = numbers[2:end]\n        else\n            i += 1\n      \
    \  end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    numbers = [1,2,3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nremove_duplicates(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers. \nFor example, \n$$\n\\\
    begin{align}\n\\text{sum of the squares of the integers} &=& \\sum{i=1}^n i^2\n\
    \\end{align}\n$$\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum of the squares of the integers} &=& \\sum{i=1}^n i^2\n\\end{align}\n\
    $$\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers. \nFor example, \n$$\n\\begin{align}\n\\text{sum of\
    \ the squares of the integers} &=& \\sum{i=1}^n i^2\n\\end{align}\n$$", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    numbers = sort(numbers)\n\
    \    numbers = numbers[numbers != numbers[end]]\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nremove_duplicates([1,2,2,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    numbers = sort(numbers)\n    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ [1,2,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,",
  "    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test our function\nnumbers = [1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ are in descending order.", "    \n    numbers = numbers[numbers != numbers[end]]\n\
    \    numbers = numbers[numbers != numbers[end-1]]\n    numbers = numbers[numbers\
    \ != numbers[end-2]]\n    numbers = numbers[numbers != numbers[end-3]]\n    numbers\
    \ = numbers[numbers != numbers[end-4]]\n    numbers = numbers[numbers != numbers[end-5]]\n\
    \    numbers = numbers[numbers != numbers[end-6]]\n    numbers = numbers[numbers\
    \ != numbers[end-7]]\n    numbers = numbers[numbers != numbers[end-8]]\n    numbers\
    \ = numbers[numbers != numbers[end-9]]\n    numbers = numbers[numbers != numbers[end-10]]\n\
    \    numbers = numbers[numbers != numbers[end-11]]\n    numbers = numbers[numbers\
    \ != numbers[end-12]]\n    numbers = numbers[numbers != numbers[end-13]]\n   \
    \ numbers = numbers[numbers != numbers[end-14]]\n    numbers = numbers[numbers\
    \ != numbers[end-15]]\n    numbers = numbers[numbers != numbers[end-16]]\n   \
    \ numbers = numbers[numbers != numbers[end-17]]\n    numbers = numbers[numbers\
    \ != numbers[end-18]]\n    numbers = numbers[numbers != numbers[end-19]]\n   \
    \ numbers = numbers[numbers != numbers[end-20]]\n    numbers = numbers[numbers\
    \ != numbers[end-21]]\n    numbers = numbers[numbers != numbers[end-22]]\n   \
    \ numbers = numbers[numbers != numbers[end-23]]\n    numbers = numbers[numbers\
    \ != numbers[end-24]]\n    numbers = numbers[numbers != numbers[end-25]]\n   \
    \ numbers = numbers[numbers != numbers[end-26]]\n    numbers = numbers[numbers\
    \ != numbers[end-27]]\n    numbers = numbers[numbers != numbers[end-28]]\n   \
    \ numbers = numbers[numbers != numbers[end-29]]\n    numbers = numbers[numbers\
    \ != numbers[end-30]]\n    numbers = numbers[numbers != numbers[end-31]]\n   \
    \ numbers = numbers[numbers != numbers[end-32]]\n    numbers = numbers[numbers\
    \ != numbers[end-33]]\n    numbers = numbers[numbers != numbers[end-34]]\n   \
    \ numbers = numbers[numbers != numbers[end-35]]\n    numbers = numbers[numbers\
    \ != numbers[end-36]]\n    numbers = numbers[numbers != numbers[end-37]]\n   \
    \ numbers = numbers[numbers != numbers[end-38]]\n    ", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,2,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] != numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers\
    \ = numbers[numbers != numbers[end]]\n    numbers = numbers[numbers != numbers[end-1]]\n\
    \    numbers = numbers[numbers != numbers[end-2]]\n    \n    return numbers\n\
    end", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] == numbers[i+1]\n            numbers = numbers[2:end]\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    remove_duplicates(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the values\
    \ are the product of all the numbers in the original vector. For example, if the\
    \ input vector is [1,2,3,4,5], the output vector should be [1,2,6,24,120].", " \
    \   \n    numbers = numbers[numbers != numbers[end]]\n    numbers = numbers[numbers\
    \ != numbers[end-1]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nremove_duplicates(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the numbers in the list.", "    \n    numbers = sort(numbers)\n\
    \    \n    numbers = numbers[numbers != numbers[end]]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ", "    \n    numbers\
    \ = numbers[numbers != 0]\n    numbers = sort(numbers)\n    numbers = numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
