name: HumanEval_65_circular_shift
language: jl
prompt: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
  \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
  \ shift::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
  \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
  \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) ==\
  \ \"11\")\nend\n"
completions: ["    if shift > length(x)\n        return reverse(x)\n    else\n   \
    \     return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 21)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 29)\n</",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 26)\n</cell>\n<code\
    \ language=", "    digits = digits(x)\n    if shift > length(digits)\n       \
    \ digits = reverse(digits)\n    end\n    digits[shift] = digits[shift] .- digits[shift-1]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\n    For example, the string \"\
    hello\" has 4 vowels.\n    Write a function that takes a string and returns the\
    \ number of consonants contained in the string.\n    For example, the string \"\
    hello\" has 5 consonants.\n    Write a function that takes a string and returns\
    \ the number of consonants and vowels contained in the string.\n    For example,\
    \ the string \"hello\" has 5 vowels and 4 consonants.\n    Write a function that\
    \ takes a string and returns the number of vowels and consonants contained in\
    \ the string.\n    For example, the string \"hello\" has 5 consonants and 4 vowels.\n\
    \    Write a function that takes a string and returns the number of consonants\
    \ and vowels contained in the string.\n    For example, the string \"hello\" has\
    \ 5 vowels and 4 consonants.\n    Write a function that takes a string and returns\
    \ the number of vowels and consonants contained in the string.\n    For example,\
    \ the string \"hello\" has 5 consonants and 4 vowels.\n    Write a function that\
    \ takes a string and returns the number of consonants and vowels contained in\
    \ the string.\n    For example, the string \"hello\" has 5 vowels and 4 consonants.\n\
    \    Write a function that takes a string and returns the number of vowels and\
    \ consonants contained in the string.\n    For example, the string \"hello\" has\
    \ 5 consonants and 4 vowels.\n    Write a function that takes a string and returns\
    \ the number of consonants and vowels contained in the string.\n    For example,\
    \ the string \"hello\" has 5 vowels and 4 consonants.\n    Write a function that\
    \ takes a string and returns the number of vowels and consonants contained in\
    \ the string.\n    For example, the string \"hello\" has 5 consonants and 4 vowels.\n\
    \    Write a function that takes a string and returns the number of consonants\
    \ and vowels contained in the string.\n    For example, the string \"hello\" has\
    \ 5 vowels and 4 consonants.\n    Write a function that takes a string and returns\
    \ the number of vowels and consonants contained in the string.\n    For example,\
    \ the string \"hello\" has 5 consonants and 4 vowels.\n    Write a function that\
    \ takes a string and returns the number of consonants and vowels contained in\
    \ the string.\n    For example, the string \"hello\" has 5 vowels and 4 consonants.\n\
    \    Write a function that ", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ elseif shift == 0\n        return x\n    else\n        digits = split(x, \"\"\
    )\n        digits_reversed = reverse(digits)\n        digits_shifted = circular_shift(digits_reversed,\
    \ shift - 1)\n        return join(digits_shifted, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a string to a vector of integers. If the string does not represent\
    \ a vector of integers, raise an error.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a string to a vector of integers.\
    \ For example,", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nFor example,\
    \ length(123456789) == 10.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to\
    \ a vector of integers. If the string contains non-numeric characters, return\
    \ an error.", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string.", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n</cell>\n<code language=julia-", "    digits = string(x:digits)\n    digits\
    \ = digits[digits.length - shift:digits.length]\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string reversed.",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nFor example, length(123456789)\
    \ == 10.", "    if shift > length(x)\n        return reverse(x)\n    else\n  \
    \      return reverse(x[shift:end])\nend", "    digits = digits(x)\n    digits_reversed\
    \ = reverse(digits)\n    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return digits_shifted_reversed\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 29)\n</cell>\n<code language=juli",
  "    digits = digits(x)\n    shift = shift % length(digits)\n    if shift > length(digits)\n\
    \        digits = reverse(digits)\n        shift = shift - length(digits)\n  \
    \  end\n    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer. For\
    \ example, given \"011\", return 8.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a string to a vector of integers.\
    \ If the string contains non-numeric characters, return an error.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + x[(shift + 1):length(x)]\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.", "    digits = digits(x)\n    shift = shift %\
    \ length(digits)\n    digits = digits[shift:end]\n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = split(x, \"\")\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        digits_shifted_reversed_str\
    \ = join(digits_shifted_reversed, \"\")\n        return digits_shifted_reversed_str\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 25)\n</cell>\n<code language=julia-", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ reversed, without using reverse.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n\
    </cell", "    if shift > length(x)\n        return reverse(x)\n    else\n    \
    \    return reverse(x[shift:end])\nend", "    digits = digits(x)\n    if shift\
    \ > length(digits)\n        return reverse(digits)\n    else\n        digits =\
    \ digits[shift:end]\n        return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in ", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend", "    digits = digits(x)\n    digits_reversed =\
    \ reverse(digits)\n    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return digits_shifted_reversed\nend", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend", " \
    \   if shift > length(x)\n        return reverse(x)\n    else\n        return\
    \ reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to\
    \ a vector of integers. If the string cannot be converted to a vector of integers,\
    \ return an empty vector.\nFor example, if the string \"123abc\" can be converted\
    \ to a vector of integers, return [1,2,3]. If the string cannot be converted to\
    \ a vector of integers, return an empty vector.\n            \"\"\"", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int", "    digits = digits(x)\n    digits_reversed\
    \ = reverse(digits)\n    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return join(digits_shifted_reversed)\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ a number like 1234 has 4 digits, a number like 123 has 3 digits, and a number\
    \ like 123 has 2 digits. Write a function that returns the number of digits in\
    \ an integer.", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 1)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 28)\n</cell>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer. Test it\
    \ on $10$ and $12$.", "    if shift > length(x)\n        return reverse(x)\n \
    \   else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, length(1234) = 4.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n\
    </cell", "    digits = digits(x)\n    if shift > length(digits)\n        digits\
    \ = reverse(digits)\n    end\n    digits[shift] = digits[shift] .- digits[shift-1]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a vector of integers, using the\n\
    \    following rules:", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on $x = 123456789$.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n", "    if shift > length(x)\n        shift = length(x)\n    end\n    \n\
    \    digits = split(x, \"\")\n    digits[1:end-1] = digits[1:end-1].shift(shift)\n\
    \    digits[end] = digits[end].shift(-shift)\n    \n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=",
  "    if shift > length(x)\n        shift = length(x)\n    end\n    digits = split(x,\
    \ \"\")\n    digits[end] = digits[end]\n    digits[end] = digits[end - shift]\n\
    \    digits[end - shift] = digits[end]\n    digits = join(digits, \"\")\n    return\
    \ digits\nend", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend", "    if shift > length(x) - 1 \n        shift %=\
    \ length(x) - 1\n        x >>= shift\n        x .= reverse(x)\n    end\n    return\
    \ reverse(x)\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to\
    \ a vector of integers, splitting the string at the spaces.\nFor example, converting\
    \ the string \"1 2 3 4\" to a vector of integers [1, 2, 3, 4]\nHint: split() function\
    \ will be useful.", "    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n        return reverse(x[shift+1:end-1]) + reverse(x[1:shift])\n    else\n\
    \        return x\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[1:shift]) + x[1:shift]\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 31)\n</cell", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:])\n    end\n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n digits of an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 31)\n</cell", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts a string to\
    \ a vector of integers. If the string contains non-numeric characters, return\
    \ an error.\nWrite a function that converts a vector of integers to a string.\n\
    Write a function that converts a vector of integers to a vector of floats.\nWrite\
    \ a function that converts a vector of floats to a vector of integers.\nWrite\
    \ a function that converts a vector of floats to a vector of floats.\nWrite a\
    \ function that converts a vector of strings to a vector of integers.\nWrite a\
    \ function that converts a vector of strings to a vector of floats.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite a function\
    \ that converts a vector of strings to a vector of strings.\nWrite ", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return x[(length(x)-shift):end]\n\
    end", "    if shift > length(x)\n        shift = length(x)\n    end\n    digits\
    \ = split(x, \"\")\n    digits[1:shift] = digits[shift:end]\n    digits[shift]\
    \ = digits[end - shift]\n    return join(digits, \"\")\nend", "    digits = digits(x)\n\
    \    shift = shift % length(digits)\n    digits = digits[shift+1:end]\n    digits\
    \ = reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      digits = reverse(x)\n    else\n        digits = digits(x)\n    end\n  \
    \  digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. Test it on all integers from\
    \ 1 to 10, and on negative numbers.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end", "    if shift > length(x) || shift < 0\n        error(\"shift must be between\
    \ 0 and length(x)\")\n    else\n        return reverse(digits(x))[shift:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 1)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 2)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 4)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 5)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 6)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 7)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 8)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 9)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 10)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 11)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 12)\n</cell>\n<code language=julia-1.5>\nx =\
    \ 123456789\ncircular_shift(x, 13)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 14)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 16)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 17)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 18)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 19)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 20)\n</cell>\n<code language=julia-1.5>\nx =\
    \ 123456789\ncircular_shift(x, 21)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 22)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 24)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 25)\n</cell",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be between 0\
    \ and length(x)\")\n    elseif shift == 0\n        return x\n    else\n      \
    \  digits = digits(x)\n        digits_reversed = reverse(digits)\n        digits_shifted\
    \ = shift(digits_reversed, shift)\n        return join(digits_shifted)\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[1:shift]) + x[(shift+1):length(x)]\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on $10^9$ and $10^10$.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n</cell>\n<code language=julia-", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a string to a vector of integers.\
    \ \n    Each character in the string should be converted to an integer and added\
    \ to the vector.\n    You may assume that the string contains only digits and\
    \ spaces.\n    You may assume that the string has at least 1 digit.\n    You may\
    \ assume that the string has at least 1 space.\n    You may assume that the string\
    \ has at least 2 spaces.\n    You may assume that the string has at least 3 spaces.\n\
    \    You may assume that the string has at least 4 spaces.\n    You may assume\
    \ that the string has at least 5 spaces.\n    You may assume that the string has\
    \ at least 6 spaces.\n    You may assume that the string has at least 7 spaces.\n\
    \    You may assume that the string has at least 8 spaces.\n    You may assume\
    \ that the string has at least 9 spaces.\n    You may assume that the string has\
    \ at least 10 spaces.\n    You may assume that the string has at least 11 spaces.\n\
    \    You may assume that the string has at least 12 spaces.\n    You may assume\
    \ that the string has at least 13 spaces.\n    You may assume that the string\
    \ has at least 14 spaces.\n    You may assume that the string has at least 15\
    \ spaces.\n    You may assume that the string has at least 16 spaces.\n    You\
    \ may assume that the string has at least 17 spaces.\n    You may assume that\
    \ the string has at least 18 spaces.\n    You may assume that the string has at\
    \ least 19 spaces.\n    You may assume that the string has at least 20 spaces.\n\
    \    You may assume that the string has at least 21 spaces.\n    You may assume\
    \ that the string has at least 22 spaces.\n    You may assume that the string\
    \ has at least 23 spaces.\n    You may assume that the string has at least 24\
    \ spaces.\n    You may assume that the string has at least 25 spaces.\n    You\
    \ may assume that the string has at least 26 spaces.\n    You may assume that\
    \ the string has at least 27 spaces.\n    You may assume that the string has at\
    \ least 28 spaces.\n    You may assume that the string has at least 29 spaces.\n\
    \    You may assume that the string has at least 30 spaces.\n    You may assume\
    \ that the string has at least 31 spaces.\n    You may assume that the string\
    \ has at least 32 spaces.\n    You may assume that the string has at least 33\
    \ spaces.\n    You may assume that the string has at least 34 spaces.\n    You\
    \ may assume that the string has at least 35 spaces.\n    You may assume that\
    \ the string has at least 36 spaces.\n    You may assume that the string has at\
    \ least 37 spaces.\n    You may assume ", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[shift:end]) + reverse(x[1:shift])\nend", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.3>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return x[shift:length(x)]\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of lines in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces. \nWrite a function that takes a string and returns the number of lines\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces and words\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of lines in the string that are not spaces and words in the\
    \ string that are not spaces. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces and words in the\
    \ string that are not spaces and lines in the string that are not spaces. \nWrite\
    \ a function that takes a string and returns the number of lines in the string\
    \ that are not spaces and words in the string that are not spaces and characters\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces and words\
    \ in the string that are not spaces and lines in the string that are not spaces\
    \ and characters in the string that are not spaces. \nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces and\
    \ words in the string that are not spaces and characters in the string that are\
    \ not spaces and characters in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces and words in the string that are not spaces and lines in the\
    \ string that are not spaces and characters in the string that are not spaces\
    \ and characters in the string that are not spaces. \nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces and\
    \ words in the string that are not spaces and characters in the string that are\
    \ not spaces and characters in the string that are not spaces and characters in\
    \ the string that are not spaces. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces and words in the\
    \ string that are not spaces and lines in the string that are not spaces and characters\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces and characters in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces and words in the string that are not spaces and characters in the string\
    \ that are not spaces and characters in the string that are not spaces and characters\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces. \nWrite a function that takes a string and ", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.",
  "    digits = digits(x)\n    digits_reversed = reverse(digits)\n    digits_shifted\
    \ = shift(digits_reversed, shift)\n    digits_shifted_reversed = reverse(digits_shifted)\n\
    \    return digits_shifted_reversed\nend", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n", "    if shift > length(x)\n        return reverse(x)\n    else\n   \
    \     return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. Test it on $10^9$ and $10^8$.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x) || shift < 0\n        return \"\"\n    else\n        return\
    \ reverse(digits(x))[shift:end]\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<text>\nExercise: Implement a function\
    \ that returns the sum of the digits of an integer.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts a string to\
    \ a vector of integers. If the string contains any non-digit characters, return\
    \ an error.\nFor example, convert(\"123abc\") should return [1,2,3]. convert(\"\
    123abc\") should return an error.\nHint: Use isdigit() to test if a character\
    \ is a digit.", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer. For example, length(12345) = 5.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return x[shift:end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\nFor example, 5 is a prime number, since it has no\
    \ positive divisors other than 1 and itself.\nThe function should return the prime\
    \ numbers in ascending order, starting from 2.\nThe function should return an\
    \ empty array if n is less than or equal to 0.\nThe function should return an\
    \ array of integers rather than an array of strings.\nThe function should return\
    \ an error if n is negative or zero.\nThe function should return an error if n\
    \ is greater than the length of the input array.\nThe function should return an\
    \ error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe ", "    digits = digits(x)\n    shift = shift\
    \ % length(digits)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend",
  "    digits = string(x:digits)\n    digits = digits[digits.length - shift:digits.length]\n\
    \    digits = digits[::-1]\n    return digits\nend", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \n    Use this function to write a function\
    \ count_chars(x::String)::Int64.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x) - 1 \n        shift\
    \ %= length(x) - 1\n        return reverse(x)\n    else\n        return x[shift:end]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncircular_shift(12345, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer. For example, the number 12345 has 5 digits. Write a function\
    \ that returns the number of digits in an integer.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\n\
    circular_", "    if shift > length(x)\n        return reverse(x)\n    else\n \
    \       return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 21)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 29)\n", " \
    \   if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits, \"\")\n\
    end\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 25)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return x[shift:end]\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 7)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 9)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 14)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 16)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 21)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 23)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\n@time circular_",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:end])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    digits(x::Int64)::Array{Int64,1}\nReturn the digits of x in a 1-dimensional\
    \ array\n\"\"\"", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return x[(length(x)-shift):(length(x)-shift-1)]\nend", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(1234,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. For example, the number 1234 has 4 digits, while 12345\
    \ has 5 digits.", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return x[(length(x)-shift):length(x)]\nend", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end", "    if shift > length(x)\n        digits = reverse(x)\n    else\n     \
    \   digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. Test it on $10$ and $100$.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a binary string to a decimal integer.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on all integers from 0 to 9 and all integers between 100 and 999.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    digits\
    \ = digits(x)\n    shift = shift % length(digits)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    return join(digits, \"\")\nend", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end", "    digits = digits(x)\n    shift = shift % length(digits)\n    digits\
    \ = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number to\
    \ a string in base 10 and returns the string as a vector of strings. \nFor example,\
    \ \n    convert_base10(123456789, 10)\nshould return a vector of strings:\n  \
    \  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n</text>\n\
    <code language=julia-1.5>", "    digits = string(x:digits)\n    digits = digits[digits.length\
    \ - shift:digits.length]\n    digits = digits[::-1]\n    return digits\nend",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return x[shift:end]\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a string to a vector of integers\
    \ using the function split. \n    For example, if the string \"1 2 3 4 5\" is\
    \ passed to the function, the vector [1,2,3,4,5] should be returned.", "    digits\
    \ = string(x:digits)\n    digits = digits[shift:end]\n    digits = digits[::-1]\n\
    \    return digits\nend", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.", "    if shift > length(x) || shift < 0\n        error(\"shift\
    \ must be non-negative and less than number of digits\")\n    elseif shift ==\
    \ 0\n        return x\n    else\n        digits = split(x, \"\")\n        digits[shift]\
    \ = digits[shift].reverse()\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return x[shift:end]\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 10)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 12)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 14)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 18)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 21)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 22)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 24)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 26)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 27)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 28)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 29)\n</cell>\n\
    <code language=julia-1.4>\n", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    digits = digits(x)\n    shift = shift % length(digits)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to\
    \ a vector of integers. If the string contains non-numeric characters, return\
    \ an empty vector.", "    if shift > length(x)\n        return reverse(x)\n  \
    \  else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend", " \
    \   if shift > length(x)\n        return reverse(x)\n    else\n        return\
    \ reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 29)\n</", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in that string.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $x = 123456789$.", " \
    \   if shift > length(x)\n        return reverse(x)\n    else\n        return\
    \ reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. For example, length(12345) = 5.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return x[shift:end]\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a vector of integers. If the string\
    \ contains non-numeric characters, return an error.", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    end\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 7)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 9)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 14)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 16)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 21)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 23)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n       \
    \ digits = reverse(x)\n    else\n        digits = shift(x)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:length(x)])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1234, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) returns 4.", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    elseif shift\
    \ == 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift-1])\
    \ + reverse(x[shift:])\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=juli", "    if shift > length(x)\n        return reverse(x)\n \
    \   else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $x = 123456789$.", " \
    \   digits = digits(x)\n    shift = shift % length(digits)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise: Circular shift a number by any number of digits", " \
    \   if shift > length(x)\n        shift = length(x)\n    end\n    \n    digits\
    \ = split(x, \"\")\n    digits[1:end-1] = digits[1:end-1].shift(shift)\n    digits[end]\
    \ = digits[end].shift(shift)\n    \n    join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a number to a string with leading zeros, e.g.\n    to_str_with_leading_zeros(123456789)\
    \ = \"0000000001234567\"\nWrite a function that converts a string to a number,\
    \ e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite\
    \ a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567\") = 123456789\nWrite a function that converts a string to a\
    \ number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\") = 123456789\n\
    Write a function that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"\
    0000000001234567", "    if shift > length(x)\n        shift = length(x)\n    end\n\
    \    \n    digits = split(x, \"\")\n    \n    digits[1:shift] = digits[1:shift][1:shift]\n\
    \    digits[shift] = digits[shift][shift]\n    \n    digits = join(digits, \"\"\
    )\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 27)\n", " \
    \   if shift > length(x) || shift < 0\n        error(\"shift must be in range\
    \ 0 to length(x)\")\n    else\n        digits = split(x, \"\")\n        digits\
    \ = digits[shift:end]\n        digits = join(digits, \"\")\n        return digits\n\
    \    end\nend", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return reverse(x[1:shift]) + reverse(x[shift+1:length(x)])\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 7)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 9)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 14)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 16)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 20)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 21)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 23)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 26)\n</cell>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe function should\
    \ accept a parameter that specifies the number of prime numbers to return.\nThe\
    \ function should return an array of integers representing the first n prime numbers.\n\
    The function should return nothing if n is less than 1.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is greater than the number of prime numbers in the\
    \ array.\nThe function should return nothing if n is less than or equal to 0.\n\
    The function should return nothing if n is greater than the number of prime numbers\
    \ in the array.\nThe function should return nothing if n is less than or equal\
    \ to 0.\nThe function should return nothing if n is greater than the number of\
    \ prime numbers in the array.\nThe function should return nothing if n is less\
    \ than or equal to 0.\nThe function should return nothing if n is greater than\
    \ the number of prime numbers in the array.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than the number of prime numbers in the array.\nThe function should\
    \ return nothing if n is less than or equal to 0.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is greater than the number of prime numbers in the\
    \ array.\nThe function should return nothing if n is less than or equal to 0.\n\
    The function should return nothing if n is greater than the number of prime numbers\
    \ in the array.\nThe function should return nothing if n is less than or equal\
    \ to 0.\nThe function should return nothing if n is greater than the number of\
    \ prime numbers in the array.\nThe function should return nothing if n is less\
    \ than or equal to 0.\nThe function should return nothing if n is greater than\
    \ the number of prime numbers in the array.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than the number of prime numbers in the array.\nThe function should\
    \ return nothing if n is less than or equal to 0.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is greater than the number of prime numbers in the\
    \ array.\nThe function should return nothing if n is less than or equal to 0.\n\
    The function should return nothing if n is greater than the number of prime numbers\
    \ in the array.\nThe function should return nothing if n", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return x[(length(x)-shift):(length(x)-1)]\n\
    end", "    if shift > length(x) return reverse(x)\n    else return shift(x, shift)\n\
    end", "    if shift > length(x)\n        return reverse(x)\n    else\n       \
    \ return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 1)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 28)\n</cell>\n<code language=julia-1.5", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(1,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(", "    digits = digits(x)\n\
    \    shift = shift % length(digits)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>", "    digits = digits(x)\n    shift\
    \ = shift % length(digits)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1234, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n       \
    \ return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a binary string to a decimal integer. For example, if the binary string\
    \ \"1001\" is passed in, return 19 (1001 in base 10 is 19 in base 2). Do not use\
    \ any string functions (i.e. no indexing).", "    if shift > length(x)\n     \
    \   return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if shift > length(x)\n        return reverse(x)\n    else\n \
    \       return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 9)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 13)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 17)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 21)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 25)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 29)\n", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    elseif shift\
    \ == 0\n        return x\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        return join(digits_shifted)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n digits of an integer.", "    if shift > length(x)\n    \
    \    return reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, ", "    if shift > length(x)\n        return reverse(x)\n  \
    \  else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend", " \
    \   if shift > length(x)\n        return reverse(x)\n    else\n        return\
    \ reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. For example, length(123456789) returns\
    \ 10. You may assume that the integer is positive.", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits = digits[shift:end]\n     \
    \   digits = reverse(digits)\n        return join(digits)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\n    end\nend", "    if shift > length(x)\n     \
    \   return reverse(x)\n    else\n        return x[shift:end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n prime numbers. \n    For example,\
    \ for n=5, the function should return [2, 3, 5, 7, 11].\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop to implement this\
    \ function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop to implement this function.\n    \n    Use a recursive\
    \ function to implement this function.\n    \n    Use a while loop to implement\
    \ this function.\n    \n    Use a for loop to implement this function.\n    \n\
    \    Use a recursive function to implement this function.\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop to implement this\
    \ function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop to implement this function.\n    \n    Use a recursive\
    \ function to implement this function.\n    \n    Use a while loop to implement\
    \ this function.\n    \n    Use a for loop to implement this function.\n    \n\
    \    Use a recursive function to implement this function.\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop to implement this\
    \ function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop to implement this function.\n    \n    Use a recursive\
    \ function to implement this function.\n    \n    Use a while loop to implement\
    \ this function.\n    \n    Use a for loop to implement this function.\n    \n\
    \    Use a recursive function to implement this function.\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime\
    \ numbers. \nThe function should return an array. \nThe function should accept\
    \ a parameter, n, that specifies the number of prime numbers to return.\nThe function\
    \ should return an array of prime numbers. \nThe function should return nothing\
    \ if the number of prime numbers to return is less than or equal to 0.\nThe function\
    \ should return nothing if the input is not an integer.\nThe function should return\
    \ nothing if the input is a negative integer.\nThe function should return nothing\
    \ if the input is a floating point number.\nThe function should return nothing\
    \ if the input is a string.\nThe function should return nothing if the input is\
    \ an array.\nThe function should return nothing if the input is an empty array.\n\
    The function should return nothing if the input is an empty string.\nThe function\
    \ should return nothing if the input is an empty dictionary.\nThe function should\
    \ return nothing if the input is an empty set.\nThe function should return nothing\
    \ if the input is an empty tuple.\nThe function should return nothing if the input\
    \ is an empty vector.\nThe function should return nothing if the input is an empty\
    \ matrix.\nThe function should return nothing if the input is an empty dictionary.\n\
    The function should return nothing if the input is an empty set.\nThe function\
    \ should return nothing if the input is an empty tuple.\nThe function should return\
    \ nothing if the input is an empty vector.\nThe function should return nothing\
    \ if the input is an empty matrix.\nThe function should return nothing if the\
    \ input is an empty dictionary.\nThe function should return nothing if the input\
    \ is an empty set.\nThe function should return nothing if the input is an empty\
    \ tuple.\nThe function should return nothing if the input is an empty vector.\n\
    The function should return nothing if the input is an empty matrix.\nThe function\
    \ should return nothing if the input is an empty dictionary.\nThe function should\
    \ return nothing if the input is an empty set.\nThe function should return nothing\
    \ if the input is an empty tuple.\nThe function should return nothing if the input\
    \ is an empty vector.\nThe function should return nothing if the input is an empty\
    \ matrix.\nThe function should return nothing if the input is an empty dictionary.\n\
    The function should return nothing if the input is an empty set.\nThe function\
    \ should return nothing if the input is an empty tuple.\nThe function should return\
    \ nothing if the input is an empty vector.\nThe function should return nothing\
    \ if the input is an empty matrix.\nThe function should return nothing if the\
    \ input is an empty dictionary.\nThe function should return nothing if the input\
    \ is an empty set.\nThe function should return nothing if the input is an empty\
    \ tuple.\nThe function should return nothing if the input is an empty vector.\n\
    The ", "    digits = digits(x)\n    shift = shift % length(digits)\n    digits\
    \ = digits[shift+1:end]\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    digits = digits(x)\n    shift = shift % length(digits)\n    if shift > length(digits)\n\
    \        digits = reverse(digits)\n        shift = shift - length(digits)\n  \
    \  end\n    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of digits in an integer.", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end", "    digits = digits(x)\n    shift = shift % length(digits)\n    digits\
    \ = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a string to a vector of integers,\
    \ one per character. \n    For example, given \"hello\", the function should return\
    \ [1,2,3,4,5,6,7,8,9].", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n</cell>\n<code language=julia-", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:length(x)])\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 2)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell", "    digits\
    \ = digits(x)\n    shift = shift % length(digits)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
