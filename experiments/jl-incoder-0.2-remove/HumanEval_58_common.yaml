name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two lists.\n        \n   \
  \ \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    \n    common = Set()\n    \n    for el in l1 \n        push!(common,\
    \ el)\n    end\n    \n    for el in l2 \n        push!(common, el)\n    end\n\
    \    \n    common\nend", "    \n    common = Set()\n    for x in l1\n        common\
    \ = Set([x] ++ common)\n    end\n    for x in l2\n        common = Set([x] ++\
    \ common)\n    end\n    return common\nend", "    \n    common = Set()\n    for\
    \ x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        common = Set([x for x in common if x != x])\n    end\n    for x in l2\n\
    \        common = Set([x for x in common if x != x])\n    end\n    common\nend",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el] + common)\n\
    \    end\n    \n    for el in l2\n        common = Set([el] + common)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1\n \
    \       common = Set([x] + common)\n    end\n    for x in l2\n        common =\
    \ Set([x] + common)\n    end\n    return common\nend", "    \n    common = Set()\n\
    \    \n    for a in l1\n        for b in l2\n            if a == b\n         \
    \       common.add(a)\n            end\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for i in l1\n        common.add(i)\n\
    \    end\n    \n    for i in l2\n        common.add(i)\n    end\n    \n    return\
    \ sort(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n    common =\
    \ Set()\n    for el in l1\n        common = Set([el] + common)\n    end\n    for\
    \ el in l2\n        common = Set([el] + common)\n    end\n    common\nend", " \
    \   \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n    end\n\
    \    for x in l2\n        common.add(x)\n    end\n    common = Set([x for x in\
    \ common if !iszero(x)]) \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for el in l1\n        common = Set([el]) & common\n\
    \    end\n    for el in l2\n        common = Set([el]) & common\n    end\n   \
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        common = Set([x\
    \ | common])\n    end\n    for x in l2\n        common = Set([x | common])\n \
    \   end\n    return common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common = Set([x for x in common if x != 0])\n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1 \n        common = Set([x | common])\n\
    \    end\n    for x in l2 \n        common = Set([x | common])\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return sorted unique common elements\
    \ for two lists.\n    \n\"\"\"", "    \n    common = Set()\n    for x in l1\n\
    \        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common = Set([x for x in common if x != 0])\n    return common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1 \n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2 \n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for el\
    \ in l1 \n        common = Set([el] + common)\n    end\n    for el in l2 \n  \
    \      common = Set([el] + common)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    for el in l1 \u222A l2\n        if !has(common, el)\n         \
    \   common = Set([el])\n        else\n            common = common \u222A Set([el])\n\
    \        end\n    end\n    return common\nend", "    \n    common = Set()\n  \
    \  for a in l1\n        for b in l2\n            if a == b\n                common\
    \ = Set([a])\n                break\n            else\n                common\
    \ = Set([a]) & common\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = Set([x | common])\n\
    \    end\n    for x in l2\n        common = Set([x | common])\n    end\n    common\n\
    end", "    \n    common = Set()\n    for el in l1 \n        common = union(common,\
    \ Set(el))\n    end\n    for el in l2 \n        common = union(common, Set(el))\n\
    \    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n     \
    \   common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common\nend\n</cell>\n<code language=julia-1.5>\ncommon(common_elements,\
    \ common_elements_2)\n</cell>\n<code language=julia-1.5>\ncommon_elements_3 =\
    \ Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_3\n</cell>\n<code language=julia-1.5>\n\
    common_elements_4 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_4\n</cell>\n<code language=julia-1.5>\n\
    common_elements_5 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_5\n</cell>\n<code language=julia-1.5>\n\
    common_elements_6 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_6\n</cell>\n<code language=julia-1.5>\n\
    common_elements_7 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_7\n</cell>\n<code language=julia-1.5>\n\
    common_elements_8 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_8\n</cell>\n<code language=julia-1.5>\n\
    common_elements_9 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_9\n</cell>\n<code language=julia-1.5>\n\
    common_elements_10 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_10\n</cell>\n<code language=julia-1.5>\n\
    common_elements_11 = Set([common_elements[1],common_elements[2],common_elements[3],common_elements[4]])\n\
    </cell>\n<code language=julia-1.5>\ncommon_elements_11\n</cell>\n<code language=julia-1.5>\n\
    common_elements_12 = Set([common_", "    \n    common = Set()\n    \n    for x\
    \ in l1\n        common.add(x)\n    end\n    \n    for x in l2\n        common.add(x)\n\
    \    end\n    \n    common = Set()\n    \n    for x in common\n        if x !=\
    \ 0\n            for y in l1\n                if x == y\n                    common.add(x)\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n\
    \    end\n    for x in l2\n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in common\n        common.add(x)\n    end\n    common = Set()\n   \
    \ for x in common\n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in common\n        common.add(x)\n    end\n    common = Set()\n    for x in\
    \ common\n        common.add(x)\n    end\n    common = Set()\n    for x in common\n\
    \        common.add(x)\n    end\n    common = Set()\n    for x in common\n   \
    \     common.add(x)\n    end\n    common = Set()\n    for x in common\n      \
    \  common.add(x)\n    end\n    common = Set()\n    for x in common\n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in common\n        common.add(x)\n   \
    \ end\n    common = Set()\n    for x in common\n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in common\n        common.add(x)\n    end\n   \
    \ common = Set()\n    for x in common\n        common.add(x)\n    end\n    common\
    \ = Set()\n    for x in common\n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in common\n        common.add(x)\n    end\n    common = Set()\n   \
    \ for x in common\n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in common\n        common.add(x)\n    end\n    common = Set()\n    for x in\
    \ common\n        common.add(x)\n    end\n    common = Set()\n    for x in common\n\
    \        common.add(x)\n    end\n    common = Set()\n    for x in common\n   \
    \     common.add(x)\n    end\n    common = Set()\n    for x in common\n      \
    \  common.add(x)\n    end\n    common = Set()\n    for x in common\n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in common\n        common.add(x)\n   \
    \ end\n    common = Set()\n    for x in common\n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in common\n        common.add(x)\n    end\n   \
    \ common = Set()\n    for x in common\n        common.add(x)\n    end\n    common\
    \ = Set()\n    for x in common\n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in common\n        common.add(x)\n    end\n    common = Set()\n   \
    \ for x in common\n        common.add(x)\n    end\n    common = Set()\n", "  \
    \  \n    common = Set()\n    \n    for e in l1 \n        common = Set([e] ++ common)\n\
    \    end\n    \n    for e in l2 \n        common = Set([e] ++ common)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1 \n\
    \        common = Set([x | common])\n    end\n    for x in l2 \n        common\
    \ = Set([x | common])\n    end\n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = common | Set([x])\n    end\n    for x in l2\n\
    \        common = common & Set([x])\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        common.add(x)\n    end\n    for x in l2\n\
    \        common.add(x)\n    end\n    common = Set([x for x in common if !iszero(x)])\
    \ \n    return common\nend", "    \n    common = Set()\n    \n    for x in l1\n\
    \        if x in common\n            continue\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        if x in common\n            continue\n       \
    \ push!(common, x)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for el in l1 \n        if el in l2 \n            common = union(common,\
    \ el)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1 \n        common += Set(el)\n    end\n    \n\
    \    for el in l2 \n        common -= Set(el)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n\
    \    end\n    for x in l2\n        common.add(x)\n    end\n    common\nend", " \
    \   \n    common = Set()\n    \n    for a in l1\n        for b in l2\n       \
    \     if a == b\n                common = Set([a])\n            else\n       \
    \         common = Set([a] ++ common)\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for x in l1\n        common = Set([x | common])\n\
    \    end\n    \n    for x in l2\n        common = Set([x | common])\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1\n \
    \       common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for el in l1 \n        common\
    \ = Set([el]) & common\n    end\n    for el in l2 \n        common = Set([el])\
    \ & common\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3],\
    \ Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n\
    </cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    common(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3],\
    \ Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n\
    </cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    common(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3],\
    \ Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n\
    </cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\ncommon(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    common(Int64[1,2,3], Int64[2,3,4])\n</cell>\n<code language=julia-1.5>\ncommon(Int64[1,2,3],\
    \ Int64[2,3,4])\n</cell>\n<code language=julia-", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x for x in common if x != x])\n    end\n\
    \    for x in l2\n        common = Set([x for x in common if x != x])\n    end\n\
    \    common\nend\n</cell>\n<code language=julia-1.4>\ncommon(common_elements,\
    \ common_elements_2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of unique elements in a list.", "    \n    common = Set()\n    for\
    \ x in l1\n        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n\
    \    end\n    common = Set([x for x in common if !iszero(x)]) \n    return common\n\
    end", "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n\
    \            if a == b\n                common = union(common, a)\n          \
    \  end\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return sort(common)\nend", "   \
    \ \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for el\
    \ in l1 \n        common += Set(l2[l1 .== el])\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n    end\n\
    \    for x in l2\n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in common\n        if !ismember(x, l1)\n            common.add(x)\n      \
    \  end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n    for x in common\n        if !ismember(x,\
    \ l2)\n            common.add(x)\n        end\n    end\n    common = Set()\n \
    \   for x in common\n        if !ismember(x, l1)\n            common.add(x)\n\
    \        end\n    end\n    common = Set()\n", "    \n    common = Set()\n    for\
    \ x in l1\n        common = Set([x | common])\n    end\n    for x in l2\n    \
    \    common = Set([x | common])\n    end\n    return common\nend", "    \n   \
    \ common = Set()\n    for x in l1 \n        common = Set([x] ++ common)\n    end\n\
    \    for x in l2 \n        common = Set([x] ++ common)\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        common = common & Set(l2)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x for x in common if x != x])\n    end\n\
    \    for x in l2\n        common = Set([x for x in common if x != x])\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n\
    \    end\n    for x in l2\n        common.add(x)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        common.add(x)\n\
    \    end\n    \n    for x in l2\n        common.add(x)\n    end\n    \n    common\
    \ = Set()\n    \n    for x in common\n        if !haskey(l1, x)\n            push!(common,\
    \ x)\n        end\n    end\n    \n    for x in common\n        if !haskey(l2,\
    \ x)\n            push!(common, x)\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]\
    \ + common)\n    end\n    \n    for el in l2\n        common = Set([el] + common)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el in l1\n        common = Set([el] + common)\n    end\n    \n    for el\
    \ in l2\n        common = Set([el] + common)\n    end\n    \n    return Set([el\
    \ for el in common if !contains(common, el)])\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) &\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return Set([el for el in common if el != 0])\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n  \
    \  end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = Set([x] ++\
    \ common)\n    end\n    for x in l2\n        common = Set([x] ++ common)\n   \
    \ end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) &\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x] + common)\n    end\n    for x in l2\n      \
    \  common = Set([x] + common)\n    end\n    common\nend", "    \n    common =\
    \ Set()\n    \n    for x in l1\n        common = Set([x | common])\n    end\n\
    \    \n    for x in l2\n        common = Set([x | common])\n    end\n    \n  \
    \  return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n    end\n\
    \    for x in l2\n        common.add(x)\n    end\n    common\nend", "    \n  \
    \  common = Set()\n    for x in l1\n        common = Set([x] + common)\n    end\n\
    \    for x in l2\n        common = Set([x] + common)\n    end\n    common\nend",
  "    \n    common = Set()\n    for x in l1\n        common = Set([x for x in common\
    \ if x != x])\n    end\n    for x in l2\n        common = Set([x for x in common\
    \ if x != x])\n    end\n    common\nend", "    \n    common = Set()\n    for el\
    \ in l1 \n        if el in l2 \n            common = union(common, el)\n     \
    \   end\n    end\n    return common\nend", "    \n    common = Set()\n    for\
    \ el in l1\n        common = union(common, Set(el))\n    end\n    for el in l2\n\
    \        common = union(common, Set(el))\n    end\n    common\nend", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [4,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\ncommon([1,2,3], [4,5,6,7])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        common = Set([x | common])\n    end\n    for x in l2\n        common\
    \ = Set([x | common])\n    end\n    common\nend", "    common = Set()\n    for\
    \ x in l1\n        common = common & Set(l2)\n    end\n    return common\nend",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for el in l1 \n        common = union(common,\
    \ Set(el))\n    end\n    \n    for el in l2 \n        common = union(common, Set(el))\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for a\
    \ in l1\n        for b in l2\n            if a == b\n                common.add(a)\n\
    \            end\n        end\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    for a in l1\n        for b in l2\n            if a ==\
    \ b\n                common = common.add(a)\n            end\n        end\n  \
    \  end\n    \n    return common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1 \n\
    \        common = Set([x] + common)\n    end\n    for x in l2 \n        common\
    \ = Set([x] + common)\n    end\n    common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        if !contains(common, x)\n            common = Set([x])\n\
    \        end\n    end\n    for x in l2\n        if !contains(common, x)\n    \
    \        common = Set([x])\n        end\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        if x in common\n     \
    \       common.add(x)\n        else\n            common.add(x)\n            for\
    \ y in l2\n                if x == y\n                    common.add(x)\n    \
    \            end\n            end\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n\
    \    end\n    common = Set([x for x in common if !haskey(common, x)])\n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        common = Set([x]\
    \ ++ common)\n    end\n    for x in l2\n        common = Set([x] ++ common)\n\
    \    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n     \
    \   common = Set([x] ++ common)\n    end\n    for x in l2\n        common = Set([x]\
    \ ++ common)\n    end\n    return common\nend", "    common = Set()\n    for x\
    \ in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n     \
    \   common = Set([x] ++ common)\n    end\n    return common\nend", "    \n   \
    \ common = Set()\n    for x in l1\n        common.add(x)\n    end\n    for x in\
    \ l2\n        common.add(x)\n    end\n    common = Set([x for x in common if !haskey(common,\
    \ x)])\n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        common = Set([x | common])\n    end\n    \n    for x in l2\n   \
    \     common = Set([x | common])\n    end\n    \n    return common\nend", "  \
    \  common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        else\n            common = Set([el] ++ common)\n      \
    \  end\n    end\n    \n    for el in l2\n        if !contains(common, el)\n  \
    \          common = Set([el])\n        else\n            common = Set([el] ++\
    \ common)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        common = Set([el]) & common\n    end\n\
    \    \n    for el in l2\n        common = Set([el]) & common\n    end\n    \n\
    \    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for x in l1\n        common = Set([x | common])\n    end\n    for\
    \ x in l2\n        common = Set([x | common])\n    end\n    common\nend", "  \
    \  \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for el in l1 \n        common = Set([el])\
    \ & common\n    end\n    for el in l2 \n        common = Set([el]) & common\n\
    \    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n     \
    \   common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for x in l1\n        common\
    \ = common | Set([x])\n    end\n    for x in l2\n        common = common & Set([x])\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for el\
    \ in l1\n        common = Set([el]) | common\n    end\n    \n    for el in l2\n\
    \        common = Set([el]) | common\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = Set([x for\
    \ x in common if x != x])\n    end\n    for x in l2\n        common = Set([x for\
    \ x in common if x != x])\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for el in l1 \n        if !contains(common, el) \n\
    \            common = Set([el])\n        else \n            common = union(common,\
    \ Set([el]))\n        end\n    end\n    for el in l2 \n        if !contains(common,\
    \ el) \n            common = Set([el])\n        else \n            common = union(common,\
    \ Set([el]))\n        end\n    end\n    return common\nend", "    \n    common\
    \ = Set()\n    for el in l1\n        common = Set([el]) & common\n    end\n  \
    \  for el in l2\n        common = Set([el]) & common\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n\
    \        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for el in l1 \n        if !contains(common,\
    \ el) \n            common = Set([el])\n        end\n    end\n    for el in l2\
    \ \n        if !contains(common, el) \n            common = Set([el])\n      \
    \  end\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for x in l1\n        common = Set([x] + common)\n\
    \    end\n    \n    for x in l2\n        common = Set([x] + common)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for el in\
    \ l1 \n        common |= Set(el)\n    end\n    \n    for el in l2 \n        common\
    \ |= Set(el)\n    end\n    \n    return collect(common)\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        common = common & Set(l2)\n    end\n    \n\
    \    return common\nend", "    \n    common = Set()\n    for x in l1\n       \
    \ push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n\
    \    \n    return collect(common)\nend", "    \n    common = Set()\n    \n   \
    \ for i in l1 \n        common.add(i)\n    end\n    \n    for i in l2 \n     \
    \   common.add(i)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncommon([1,2,3], [2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3], [1,2,4])\n</cell>\n\
    <code language=julia-1.5>\ncommon([1,2,3], [1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    common([1,2,3], [1,2,4])\n</cell>\n<code language=julia-1.5>\ncommon([1,2,3],\
    \ [1,2,3])\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n \
    \   \n    for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n\
    \        common.add(i)\n    end\n    \n    return common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for el in l1 \n       \
    \ common = Set([el] + common)\n    end\n    for el in l2 \n        common = Set([el]\
    \ + common)\n    end\n    common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n\
    \    end\n    common = Set([x for x in common if !iszero(x)]) \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        common.add(x)\n\
    \    end\n    \n    for x in l2\n        common.add(x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1 \n       \
    \ push!(common, x)\n    end\n    for x in l2 \n        push!(common, x)\n    end\n\
    \    \n    common\nend", "    \n    common = Set()\n    \n    for el in l1\n \
    \       common = Set([el]) & common\n    end\n    \n    for el in l2\n       \
    \ common = Set([el]) & common\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common.add(x)\n    end\n    for\
    \ x in l2\n        common.add(x)\n    end\n    common = Set([x for x in common\
    \ if x != 0])\n    return common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        common = common & Set(l2)\n    end\n    \n    return common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ el in l1\n        common = union(common, Set(el))\n    end\n    \n    for el\
    \ in l2\n        common = union(common, Set(el))\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for el in l1\n        common = Set([el])\
    \ & common\n    end\n    for el in l2\n        common = Set([el]) & common\n \
    \   end\n    common\nend", "    \n    common = Set()\n    for a in l1\n      \
    \  for b in l2\n            if a == b\n                common = Set([a])\n   \
    \             break\n            else\n                common = Set([a] + common)\n\
    \            end\n        end\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common = Set([x for x in common\
    \ if x != x])\n    end\n    for x in l2\n        common = Set([x for x in common\
    \ if x != x])\n    end\n    common\nend", "    \n    common = Set()\n    \n  \
    \  for el in l1\n        common = Set([el] ++ common)\n    end\n    \n    for\
    \ el in l2\n        common = Set([el] ++ common)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        common.add(x)\n\
    \    end\n    \n    for x in l2\n        common.add(x)\n    end\n    \n    return\
    \ common\nend", "    common = Set()\n    for x in l1\n        common = Set([x]\
    \ ++ common)\n    end\n    for x in l2\n        common = Set([x] ++ common)\n\
    \    end\n    return Set([x for x in common if !iszero(x)]) \nend", "    \n  \
    \  common = Set()\n    \n    for x in l1\n        common.add(x)\n    end\n   \
    \ \n    for x in l2\n        common.add(x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = Set([x for\
    \ x in common if x != x])\n    end\n    for x in l2\n        common = Set([x for\
    \ x in common if x != x])\n    end\n    common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        if x in common\n            common.add(x)\n        else\n\
    \            common.add(x)\n            for y in l2\n                if x == y\n\
    \                    common.add(x)\n                end\n            end\n   \
    \     end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for a in l1\n        for b in l2\n            if a == b\n               \
    \ common.add(a)\n            end\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        if x in common\n   \
    \         common.add(x)\n        else\n            common.add(x)\n           \
    \ for y in l2\n                if x == y\n                    common.add(x)\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = union(common,\
    \ Set(l2[x]))\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for a in l1\n        for\
    \ b in l2\n            if a == b\n                common = Set([a])\n        \
    \    else\n                common = Set([a] ++ common)\n            end\n    \
    \    end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1 \n        common = Set([el] + common)\n    end\n\
    \    \n    for el in l2 \n        common = Set([el] + common)\n    end\n    \n\
    \    return common\nend", "    \n    common = Set()\n    for x in l1\n       \
    \ common = union(common, l2[x])\n    end\n    \n    return common\nend", "   \
    \ \n    common = Set()\n    for el in l1 \u222A l2\n        common = common \u222A\
    \ Set(el)\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1 \n        common = Set([x] ++ common)\n    end\n    for x in\
    \ l2 \n        common = Set([x] ++ common)\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n   \
    \     push!(common, x)\n    end\n    \n    common\nend", "    \n    common = Set()\n\
    \    \n    for i in l1 \n        common.add(i)\n    end\n    \n    for i in l2\
    \ \n        common.add(i)\n    end\n    \n    common = Set([i for i in common])\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        common = Set([x | common])\n    end\n    \n    for x in l2\n   \
    \     common = Set([x | common])\n    end\n    \n    return common\nend", "  \
    \  \n    common = Set()\n    \n    for i in l1\n        common.add(i)\n    end\n\
    \    \n    for i in l2\n        common.add(i)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        if x in common\n            push!(common, x)\n        else\n\
    \            push!(common, x)\n        end\n    end\n    for x in l2\n       \
    \ if x in common\n            push!(common, x)\n        else\n            push!(common,\
    \ x)\n        end\n    end\n    common\nend", "    \n    common = Set()\n    for\
    \ x in l1\n        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in common\n        common.add(x)\n   \
    \ end\n    return common\nend", "    \n    common = Set()\n    for x in l1\n \
    \       common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common = Set([x for x in common if x != 0])\n    return common\nend", " \
    \   \n    common = Set()\n    \n    for e in l1\n        common = Set([e] ++ common)\n\
    \    end\n    \n    for e in l2\n        common = Set([e] ++ common)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1\n \
    \       push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    common\nend", "    \n    common = Set()\n    for el in l1\n    \
    \    common = Set([el]) & common\n    end\n    for el in l2\n        common =\
    \ Set([el]) & common\n    end\n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        if el in l2\n            common = Set([el])\n\
    \        else\n            common = Set([el] ++ common)\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for el in\
    \ l1\n        common = Set([el] + common)\n    end\n    \n    for el in l2\n \
    \       common = Set([el] + common)\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1 \n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2 \n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el in l1\n        common = Set([el]) & common\n    end\n    \n    for el\
    \ in l2\n        common = Set([el]) & common\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for e in l1\n        if e in l2\n \
    \           common = union(common, e)\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1\n        common\
    \ = Set([el]) & common\n    end\n    \n    for el in l2\n        common = Set([el])\
    \ & common\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    for a in l1\n        for b in l2\n            if a == b\n     \
    \           common = Set([a])\n                break\n            else\n     \
    \           common = Set([a] + common)\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for x in l1\n        common = Set([x | common])\n\
    \    end\n    \n    for x in l2\n        common = Set([x | common])\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1\n \
    \       common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    \n    return sort(common)\nend", "    \n    common = Set()\n    \n    for\
    \ el in l1 \n        common = Set([el]) & common\n    end\n    \n    for el in\
    \ l2 \n        common = Set([el]) & common\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1 \n        push!(common, x)\n    end\n    for x in l2 \n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        if x in common\n            push!(common, x)\n        else\n        \
    \    push!(common, x)\n        end\n    end\n    for x in l2\n        if x in\
    \ common\n            push!(common, x)\n        else\n            push!(common,\
    \ x)\n        end\n    end\n    \n    return common\nend", "    \n    common =\
    \ Set()\n    \n    for a in l1\n        for b in l2\n            if a == b\n \
    \               common = Set([a])\n                break\n            else\n \
    \               common = Set([a] + common)\n            end\n        end\n   \
    \ end\n    \n    return common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n        common\
    \ = Set([x] ++ common)\n    end\n    return common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        common.add(x)\n    end\n    for x in l2\n  \
    \      common.add(x)\n    end\n    common\nend", "    \n    common = Set()\n \
    \   \n    for el in l1\n        common = Set([el] ++ common)\n    end\n    \n\
    \    for el in l2\n        common = Set([el] ++ common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1 do \n        common\
    \ = Set([x | common]); \n    end\n    for x in l2 do \n        common = Set([x\
    \ | common]); \n    end\n    common\nend", "    \n    common = Set()\n    for\
    \ x in l1\n        common.add(x)\n    end\n    for x in l2\n        common.add(x)\n\
    \    end\n    common = Set([x for x in common if x != 0])\n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for el\
    \ in l1\n        common = Set([el]) & common\n    end\n    for el in l2\n    \
    \    common = Set([el]) & common\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   common.add(x)\n    end\n    for x in l2\n        common.add(x)\n    end\n\
    \    common = Set([x for x in common if !haskey(common, x)])\n    return common\n\
    end", "    \n    common = Set()\n    for x in l1 \n        push!(common, x)\n\
    \    end\n    for x in l2 \n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend", "    \n    common = Set()\n    \n    for el in l1\n    \
    \    common = Set([el]) & common\n    end\n    \n    for el in l2\n        common\
    \ = Set([el]) & common\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        common = Set([x] ++ common)\n    end\n   \
    \ for x in l2\n        common = Set([x] ++ common)\n    end\n    common\nend",
  "    \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el in l1\n        common = Set([el]) | common\n    end\n    \n    for el\
    \ in l2\n        common = Set([el]) | common\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        common = common & Set(l2)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    \n    for\
    \ el in l1 \n        push!(common, el)\n    end\n    \n    for el in l2 \n   \
    \     push!(common, el)\n    end\n    \n    common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        common = Set([x] ++ common)\n    end\n    for\
    \ x in l2\n        common = Set([x] ++ common)\n    end\n    return common\nend",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) &\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x for x in common if x != x])\n    end\n    for\
    \ x in l2\n        common = Set([x for x in common if x != x])\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>\ncommon(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common(common",
  "    \n    common = Set()\n    for el in l1\n        common = Set([el]) & common\n\
    \    end\n    for el in l2\n        common = Set([el]) & common\n    end\n   \
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1\n        common\
    \ = Set([el] + common)\n    end\n    \n    for el in l2\n        common = Set([el]\
    \ + common)\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el in l1 \n        common = Set([el] + common)\n    end\n    \n\
    \    for el in l2 \n        common = Set([el] + common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1\n        common\
    \ = Set([el]) & common\n    end\n    \n    for el in l2\n        common = Set([el])\
    \ & common\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        common = Set([el]) & common\n    end\n    \n\
    \    for el in l2\n        common = Set([el]) & common\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1 do \n        if x in\
    \ l2 \n            common.add(x)\n        end\n    end\n    return common\nend\n\
    </cell>\n<code language=julia-1.3>", "    \n    common = Set()\n    for x in l1\n\
    \        common = common & Set(l2)\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1 \n        common = Set([el] +\
    \ common)\n    end\n    \n    for el in l2 \n        common = Set([el] + common)\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    for el in l1\n        if el in l2\n            common\
    \ = union(common, el)\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for el in l1\n        common = Set([el] + common)\n\
    \    end\n    for el in l2\n        common = Set([el] + common)\n    end\n   \
    \ common\nend", "    \n    common = Set()\n    \n    for e in l1\n        if e\
    \ in l2\n            common = Set([e])\n        else\n            common = Set([e]\
    \ ++ common)\n        end\n    end\n    \n    return common\nend", "    \n   \
    \ common = Set()\n    for el in l1\n        if !contains(common, el)\n       \
    \     common = Set([el])\n        else\n            common = union(common, Set([el]))\n\
    \        end\n    end\n    \n    for el in l2\n        if !contains(common, el)\n\
    \            common = Set([el])\n        else\n            common = union(common,\
    \ Set([el]))\n        end\n    end\n    \n    return common\nend", "    \n   \
    \ common = Set()\n    \n    for x in l1\n        common.add(x)\n    end\n    \n\
    \    for x in l2\n        common.add(x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n     \
    \   common = Set([x] ++ common)\n    end\n    return Set([x for x in common if\
    \ !haskey(common, x)])\nend", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    common = Set()\n \
    \   for x in l1 \n        common = common & Set(l2)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Return sorted unique common elements\
    \ for two lists.\n    \n\"\"\"", "    \n    common = Set()\n    for el in l1 \n\
    \        common = union(common, Set(el))\n    end\n    for el in l2 \n       \
    \ common = union(common, Set(el))\n    end\n    common\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
