language: jl
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, plus\
    \ 1. \nWrite a function that returns the last element of a vector, minus 1. \n\
    Write a function that returns the sum of a vector, plus 1. \nWrite a function\
    \ that returns the product of a vector, multiplied by 1. \nWrite a function that\
    \ returns the quotient of a vector, divided by 1. \nWrite a function that returns\
    \ the absolute value of a vector, plus 1. \nWrite a function that returns the\
    \ absolute value of a vector, minus 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1. \nWrite a function that returns the absolute\
    \ value of a vector, divided by 1. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttoox_qr.jl:7\nin expression starting at /tmp/tmpttoox_qr.jl:7\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise: Write a function that returns a list with elements incremented by 1\
    \ starting from 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ixv3m6_.jl:7\nin expression starting at /tmp/tmp2ixv3m6_.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrglbr0t.jl:7\nin expression starting at /tmp/tmpzrglbr0t.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmxt2yy4.jl:6\nin expression starting at /tmp/tmpnmxt2yy4.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgqyw37bv.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpgqyw37bv.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmxt2yy4.jl:6\nin expression starting at /tmp/tmpnmxt2yy4.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, if it\
    \ exists, or returns an empty string if it does not.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtoizraf.jl:7\nin expression starting at /tmp/tmpwtoizraf.jl:7\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array and returns a new array where\
    \ each element is the sum of the elements in the original array except for the\
    \ first element. For example, if the input array is [1,2,3,4,5], the output should\
    \ be [2,4,6,8,10].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsxv8lek.jl:7\nin expression starting at /tmp/tmpqsxv8lek.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfocwb3i.jl:7\nin expression starting at /tmp/tmppfocwb3i.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector as input and returns a vector\
    \ with elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicn__vc5.jl:7\nin expression starting at /tmp/tmpicn__vc5.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns a list with elements incremented by 1\
    \ starting from element n.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6x_6hkg.jl:7\nin expression starting at /tmp/tmpu6x_6hkg.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaplnj8pr.jl:6\nin expression starting at /tmp/tmpaplnj8pr.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu909_b5p.jl:7\nin expression starting at /tmp/tmpu909_b5p.jl:7\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a list with elements incremented\
    \ by 1 starting at element x.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjypwsdm1.jl:7\nin expression starting at /tmp/tmpjypwsdm1.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprft5ai2i.jl:7\nin expression starting at /tmp/tmprft5ai2i.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mhzzx5j.jl:7\nin expression starting at /tmp/tmp_mhzzx5j.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7cd7_hs.jl:7\nin expression starting at /tmp/tmpw7cd7_hs.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a vector.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxt8nk3w.jl:7\nin expression starting at /tmp/tmpaxt8nk3w.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a vector with elements\
    \ incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ae9j4ct.jl:7\nin expression starting at /tmp/tmp1ae9j4ct.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, if it\
    \ exists. Otherwise, return 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpty82mi8q.jl:7\nin expression starting at /tmp/tmpty82mi8q.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a new vector with\
    \ each element multiplied by 2.\nHint: use map!\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b7h88jt.jl:7\nin expression starting at /tmp/tmp5b7h88jt.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an array and returns the array reversed.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplb1q1fea.jl:7\nin expression starting at /tmp/tmplb1q1fea.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, if it\
    \ exists, otherwise the second element. Test it on vectors of length 2, 3, 4,\
    \ and 5.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24pr9cj2.jl:7\nin expression starting at /tmp/tmp24pr9cj2.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.4>\nincr_list(1:10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp238n39bb.jl:6\nin expression starting at /tmp/tmp238n39bb.jl:6\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgqyw37bv.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpgqyw37bv.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a list\
    \ that is greater than a specified value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9p9_7bn.jl:7\nin expression starting at /tmp/tmpz9p9_7bn.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a list with elements incremented\
    \ by 1 until a condition is met. For example, if the list is [1,2,3,4,5,6,7],\
    \ the function should return [2,3,4,5,6,7,8].\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfm5lr4re.jl:7\nin expression starting at /tmp/tmpfm5lr4re.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector as input and returns\
    \ a vector with elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgs0blwfv.jl:7\nin expression starting at /tmp/tmpgs0blwfv.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmxt2yy4.jl:6\nin expression starting at /tmp/tmpnmxt2yy4.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrglbr0t.jl:7\nin expression starting at /tmp/tmpzrglbr0t.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7cd7_hs.jl:7\nin expression starting at /tmp/tmpw7cd7_hs.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [Int64(1)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplmntypzu.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmplmntypzu.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmplmntypzu.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplmntypzu.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplmntypzu.jl:10\ntest set:\
    \ Error During Test at /tmp/tmplmntypzu.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmplmntypzu.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplmntypzu.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplmntypzu.jl:10\ntest set:\
    \ Error During Test at /tmp/tmplmntypzu.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector as input and returns\
    \ a vector with elements incremented by 1.\nHint: Use map!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplculbtl_.jl:7\nin expression starting at /tmp/tmplculbtl_.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gos5q2t.jl:7\nin expression starting at /tmp/tmp4gos5q2t.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3ws0b88.jl:7\nin expression starting at /tmp/tmpu3ws0b88.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of an\
    \ array. \nWrite a function that returns the product of the elements of an array.\
    \ \nWrite a function that returns the maximum of the elements of an array. \n\
    Write a function that returns the minimum of the elements of an array. \nWrite\
    \ a function that returns the absolute value of the elements of an array. \nWrite\
    \ a function that returns the reciprocal of the elements of an array. \nWrite\
    \ a function that returns the exponential of the elements of an array. \nWrite\
    \ a function that returns the natural logarithm of the elements of an array. \n\
    Write a function that returns the square root of the elements of an array. \n\
    Write a function that returns the sine of the elements of an array. \nWrite a\
    \ function that returns the cosine of the elements of an array. \nWrite a function\
    \ that returns the tangent of the elements of an array. \nWrite a function that\
    \ returns the hyperbolic sine of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic cosine of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic tangent of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic arctangent of the elements of an array. \nWrite\
    \ a function that returns the hyperbolic arctangent of the elements of an array.\
    \ \nWrite a function that returns the hyperbolic arctangent of the elements of\
    \ an array. \nWrite a function that returns the hyperbolic arctangent of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic arctangent of the\
    \ elements of an array. \nWrite a function that returns the hyperbolic arctangent\
    \ of the elements of an array. \nWrite a function that returns the hyperbolic\
    \ arctangent of the elements of an array. \nWrite a function that returns the\
    \ hyperbolic arctangent of the elements of an array. \nWrite a function that returns\
    \ the hyperbolic arctangent of the elements of an array. \nWrite a function that\
    \ returns the hyperbolic arctangent of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic arctangent of the elements of an array. \nWrite\
    \ a function that returns the hyperbolic arctangent of the elements of an array.\
    \ \nWrite a function that returns the hyperbolic arctangent of the elements of\
    \ an array. \nWrite a function that returns the hyperbolic arctangent of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic arctangent of the\
    \ elements of an array. \nWrite a function that returns the hyperbolic arctangent\
    \ of the elements of an array. \nWrite a function that returns the hyperbolic\
    \ arctangent of the elements of an array. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr151pomy.jl:7\nin expression starting at /tmp/tmpr151pomy.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the elements of a vector in\
    \ reverse order. \nThe function should take one argument, that is a vector of\
    \ Int64s.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l2da27k.jl:7\nin expression starting at /tmp/tmp9l2da27k.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the product of the elements of a vector. \n\
    Write a function that returns the maximum of the elements of a vector. \nWrite\
    \ a function that returns the minimum of the elements of a vector. \nWrite a function\
    \ that returns the absolute value of a number. \nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc_w2y9s.jl:7\nin expression starting at /tmp/tmpmc_w2y9s.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers. \nThe function should work also for vectors\
    \ of different lengths.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3r59jxfu.jl:7\nin expression starting at /tmp/tmp3r59jxfu.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhuew8ci.jl:7\nin expression starting at /tmp/tmpjhuew8ci.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh95l8sq.jl:7\nin expression starting at /tmp/tmpmh95l8sq.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1 until a condition is met.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpey2pzu12.jl:7\nin expression starting at /tmp/tmpey2pzu12.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [Int64(1)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.\
    \ \nThe function should take an argument of type Array{Int64,1}.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wyhququ.jl:6\nin expression starting at /tmp/tmp6wyhququ.jl:6\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector and returns a vector with elements\
    \ incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbeptqc5c.jl:7\nin expression starting at /tmp/tmpbeptqc5c.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector as input and returns\
    \ a vector with elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsusatzo6.jl:7\nin expression starting at /tmp/tmpsusatzo6.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the vector with its\
    \ elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlp5alwi.jl:7\nin expression starting at /tmp/tmpxlp5alwi.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1.\nWrite a function that returns a list with elements incremented by 1.\nWrite\
    \ a function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9agywed7.jl:7\nin expression starting at /tmp/tmp9agywed7.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the same\
    \ vector but with each element incremented by 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8bnf5p8.jl:7\nin expression starting at /tmp/tmps8bnf5p8.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the elements of an array.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mpm0q_o.jl:7\nin expression starting at /tmp/tmp6mpm0q_o.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9a_c8kc.jl:7\nin expression starting at /tmp/tmpp9a_c8kc.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1 starting from element n.\nHint: use incr_list\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2a_frz4.jl:6\nin expression starting at /tmp/tmpq2a_frz4.jl:6\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitderdbz.jl:7\nin expression starting at /tmp/tmpitderdbz.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a list.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftzc6qwy.jl:7\nin expression starting at /tmp/tmpftzc6qwy.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o4p62eu.jl:7\nin expression starting at /tmp/tmp9o4p62eu.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, if it\
    \ is not empty, otherwise return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2fwt4vo.jl:7\nin expression starting at /tmp/tmpr2fwt4vo.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector and returns a new vector with the\
    \ elements incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvlewbmc.jl:7\nin expression starting at /tmp/tmprvlewbmc.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers where the integers are incremented by 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjon0b7x.jl:6\nin expression starting at /tmp/tmprjon0b7x.jl:6\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0igpyfzb.jl:7\nin expression starting at /tmp/tmp0igpyfzb.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [Int64(1)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a vector.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_5qkxrh.jl:6\nin expression starting at /tmp/tmpq_5qkxrh.jl:6\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ incremented by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0___gbmu.jl:7\nin expression starting at /tmp/tmp0___gbmu.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns a list with elements incremented by 1 starting\
    \ from 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfngc5vo.jl:6\nin expression starting at /tmp/tmppfngc5vo.jl:6\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gos5q2t.jl:7\nin expression starting at /tmp/tmp4gos5q2t.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxoki7x6m.jl:7\nin expression starting at /tmp/tmpxoki7x6m.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1 starting from 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr94vwx1g.jl:7\nin expression starting at /tmp/tmpr94vwx1g.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [Int64(1)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_n5v6p1a.jl:6\nin expression starting at /tmp/tmp_n5v6p1a.jl:6\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfdgnpuo.jl:7\nin expression starting at /tmp/tmpdfdgnpuo.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprft5ai2i.jl:7\nin expression starting at /tmp/tmprft5ai2i.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first element of a vector, if it\
    \ exists. Otherwise return 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclc0pbfr.jl:7\nin expression starting at /tmp/tmpclc0pbfr.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the product of the elements of an array. \n\
    Write a function that returns the maximum of the elements of an array. \nWrite\
    \ a function that returns the minimum of the elements of an array. \nWrite a function\
    \ that returns the absolute value of a number. \nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyv5xrd1.jl:7\nin expression starting at /tmp/tmpoyv5xrd1.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [Int64(1)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of a list of numbers. \n\
    The function should work for lists of any length.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgimk0oi_.jl:6\nin expression starting at /tmp/tmpgimk0oi_.jl:6\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtquq0gm.jl:7\nin expression starting at /tmp/tmpgtquq0gm.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a list that satisfies\
    \ a condition. For example, if the list is [1,2,3,4,5,6] and we want the first\
    \ element that satisfies x>3, the function should return 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3bh4ful.jl:6\nin expression starting at /tmp/tmpj3bh4ful.jl:6\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun_s6xcr.jl:7\nin expression starting at /tmp/tmpun_s6xcr.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhcamjvs.jl:7\nin expression starting at /tmp/tmpdhcamjvs.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1 starting at position n. \nFor example, incr_list([1,2,3], 2) should return\
    \ [2,3,4].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvm7zbafe.jl:7\nin expression starting at /tmp/tmpvm7zbafe.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ if it is not empty, otherwise it returns 0.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mnf83df.jl:7\nin expression starting at /tmp/tmp_mnf83df.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgqyw37bv.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpgqyw37bv.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgqyw37bv.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgqyw37bv.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgqyw37bv.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpgqyw37bv.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmijt8a2.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpqmijt8a2.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmijt8a2.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmijt8a2.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpqmijt8a2.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpqmijt8a2.jl:4\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1659747953
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb72irfux.jl:7\nin expression starting at /tmp/tmpb72irfux.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4rexa3.jl:7\nin expression starting at /tmp/tmp8v4rexa3.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector as input and returns a vector\
    \ with elements that are the sum of the input vector's elements. \nFor example,\
    \ incr_vec([1,2,3]) should return [2,3,4].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqldsfzlj.jl:7\nin expression starting at /tmp/tmpqldsfzlj.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, if it\
    \ is not empty. Otherwise return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjur8xjfs.jl:6\nin expression starting at /tmp/tmpjur8xjfs.jl:6\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprffhl1l2.jl:7\nin expression starting at /tmp/tmprffhl1l2.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns a list with elements incremented by 1 but starting\
    \ from index 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecnp4fpg.jl:6\nin expression starting at /tmp/tmpecnp4fpg.jl:6\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gos5q2t.jl:7\nin expression starting at /tmp/tmp4gos5q2t.jl:7\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj414ex9e.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpj414ex9e.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj414ex9e.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj414ex9e.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj414ex9e.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpj414ex9e.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the array\
    \ reversed.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj9mwh46.jl:7\nin expression starting at /tmp/tmpoj9mwh46.jl:7\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements of the vector. \nThe function should also return\
    \ the squares of the elements of the vector.\nThe function should also return\
    \ the sum of the squares of the elements of the vector.\nThe function should also\
    \ return the sum of the squares of the elements of the vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh7posc6.jl:7\nin expression starting at /tmp/tmpmh7posc6.jl:7\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a new vector\
    \ with elements incremented by 1.\nFor example, incr_vec([1,2,3]) should return\
    \ [2,3,4].\nHint: Use map!.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrj5bhzi.jl:7\nin expression starting at /tmp/tmpdrj5bhzi.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns a vector with elements incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3vkbxpg.jl:7\nin expression starting at /tmp/tmpf3vkbxpg.jl:7\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprffhl1l2.jl:7\nin expression starting at /tmp/tmprffhl1l2.jl:7\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44z70800.jl:6\nin expression starting at /tmp/tmp44z70800.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmxt2yy4.jl:6\nin expression starting at /tmp/tmpnmxt2yy4.jl:6\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o4p62eu.jl:7\nin expression starting at /tmp/tmp9o4p62eu.jl:7\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + [1]\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp84xz3xeb.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp84xz3xeb.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp84xz3xeb.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp84xz3xeb.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp84xz3xeb.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp84xz3xeb.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod6dd2li.jl:7\nin expression starting at /tmp/tmpod6dd2li.jl:7\n"
  stdout: ''
  timestamp: 1659747950
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns a list with elements incremented by 1 starting\
    \ from 0.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpls5j6j4f.jl:6\nin expression starting at /tmp/tmpls5j6j4f.jl:6\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\n\
    function incr_list(l::Vector{Int64})::Vector{Int64} \n    return l + [1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz9fn9hs5.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpz9fn9hs5.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:11 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz9fn9hs5.jl:4\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz9fn9hs5.jl:12 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz9fn9hs5.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpz9fn9hs5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \   "
  timestamp: 1659747952
