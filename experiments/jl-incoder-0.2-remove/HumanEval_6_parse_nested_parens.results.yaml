language: jl
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_levels_stack = Vector{Int64}()\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7momt8yf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7momt8yf.jl:1\n\
    in expression starting at /tmp/tmp7momt8yf.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf20bs38f.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf20bs38f.jl:1\n\
    in expression starting at /tmp/tmpf20bs38f.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars()\n\
    \    paren_chars = paren_chars.filter(x -> x != ')')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '(')\n    paren_chars = paren_chars.filter(x -> x != ' ')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\n')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\t')\n    paren_chars = paren_chars.filter(x -> x != '\\r')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\a')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\e')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\v')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\a')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\e')\n    paren_chars = paren_chars.filter(x -> x != '\\v')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\a')\n    paren_chars = paren_chars.filter(x -> x != '\\e')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\a')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\e')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\v')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\a')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\e')\n    paren_chars = paren_chars.filter(x -> x != '\\v')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqz5g2cnz.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqz5g2cnz.jl:1\n\
    in expression starting at /tmp/tmpqz5g2cnz.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cja1ij3.jl:1\nin expression starting at /tmp/tmp3cja1ij3.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels = paren_levels\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_level += 1\n            paren_levels\
    \ = paren_levels\n        elseif paren == ')'\n            paren_level -= 1\n\
    \            paren_levels = paren_levels[paren_levels:end]\n        else\n   \
    \         paren_levels = paren_levels[paren_levels:end]\n        end\n    end\n\
    \    return paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4egynxld.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp4egynxld.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp4egynxld.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4egynxld.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4egynxld.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4egynxld.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp4egynxld.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4egynxld.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4egynxld.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4egynxld.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field trim\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp4egynxld.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4egynxld.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4egynxld.jl:28\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnhq2s1fc.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnhq2s1fc.jl:1\n\
    in expression starting at /tmp/tmpnhq2s1fc.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_level = 0\n    for paren_level in paren_array\n\
    \        if paren_level == \"(\"\n            paren_array_level += 1\n       \
    \ elseif paren_level == \")\"\n            paren_array_level -= 1\n          \
    \  if paren_array_level == 0\n                if paren_array_max < paren_array_level\n\
    \                    paren_array_max = paren_array_level\n                end\n\
    \            end\n        end\n    end\n    paren_array_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjvrfgq4d.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpjvrfgq4d.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpjvrfgq4d.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjvrfgq4d.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjvrfgq4d.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjvrfgq4d.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpjvrfgq4d.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjvrfgq4d.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjvrfgq4d.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjvrfgq4d.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpjvrfgq4d.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjvrfgq4d.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjvrfgq4d.jl:29\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak3462tt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak3462tt.jl:1\n\
    in expression starting at /tmp/tmpak3462tt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split('\
    \ ').map(x -> parse(Int64, x))\n    paren_stack = paren_stack[1..end]\n    paren_stack\
    \ = paren_stack.map(x -> max(paren_stack[x], paren_stack[x-1]))\n    return paren_stack\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvtwrfnbh.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpvtwrfnbh.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpvtwrfnbh.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvtwrfnbh.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvtwrfnbh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvtwrfnbh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpvtwrfnbh.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvtwrfnbh.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvtwrfnbh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvtwrfnbh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpvtwrfnbh.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvtwrfnbh.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvtwrfnbh.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_max_index\
    \ = 0\n    paren_array_max_value = 0\n    paren_array_max_value_index = 0\n  \
    \  for paren_array_index in 1:paren_array_size\n        paren_array_value = paren_array[paren_array_index]\n\
    \        if paren_array_value == \"(\"\n            paren_array_max_value = paren_array_max_value_index\n\
    \            paren_array_max_value_index = paren_array_index\n        elseif paren_array_value\
    \ == \")\"\n            if paren_array_max_value == paren_array_max_value_index\n\
    \                paren_array_max = paren_array_max_value\n            else\n \
    \               paren_array_max = paren_array_max_value\n            end\n   \
    \     elseif paren_array_value == \"(\"\n            paren_array_max_value = paren_array_max_value_index\n\
    \            paren_array_max_value_index = paren_array_index\n        elseif paren_array_value\
    \ == \")\"\n            if paren_array_max_value == paren_array_max_value_index\n\
    \                paren_array_max = paren_array_max_value\n            else\n \
    \               paren_array_max = paren_array_max_value\n            end\n   \
    \     else\n            paren_array_max = paren_array_max_value\n        end\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_max_index\
    \ = paren_array_max_index + 1\n    paren_array_max_value = paren_array[paren_array_max_index]\n\
    \    paren_array_max_value_index = paren_array_max_value_index + 1\n    paren_array_max\
    \ = paren_array_max + 1\n    paren_array_max_index = paren_array_max_index + 1\n\
    \    paren_array_max_value = paren_array[paren_array_max_index]\n    paren_array_max_value_index\
    \ = paren_array_max_value_index + 1\n    paren_array_max = paren_array_max + 1\n\
    \    paren_array_max_index = paren_array_max_index + 1\n    paren_array_max_value\
    \ = paren_array[paren_array_max_index]\n    paren_array_max_value_index = paren_array_max_value_index\
    \ + 1\n    paren_array_max = paren_array_max + 1\n    paren_array_max_index =\
    \ paren_array_max_index + 1\n    paren_array_max_value = paren_array[paren_array_max_index]\n\
    \    paren_array_max_value_index = paren_array_max_value_index + 1\n    paren_array_max\
    \ = paren_array_max + 1\n    paren_array_max_index = paren_array_max_index + 1\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp339it_w9.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp339it_w9.jl:1\n\
    in expression starting at /tmp/tmp339it_w9.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 2\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 3\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 4\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 5\n    paren_levels[paren_level] = paren_level\n    paren_level = 6\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 7\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 8\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 9\n    paren_levels[paren_level] = paren_level\n    paren_level = 10\n   \
    \ paren_levels[paren_level] = paren_level\n    paren_level = 11\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 12\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 13\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 14\n    paren_levels[paren_level] = paren_level\n    paren_level = 15\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 16\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 17\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 18\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 19\n    paren_levels[paren_level] = paren_level\n    paren_level = 20\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 21\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 22\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 23\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 24\n    paren_levels[paren_level] = paren_level\n    paren_level = 25\n  \
    \  paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp__oly47b.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp__oly47b.jl:1\n\
    in expression starting at /tmp/tmp__oly47b.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_groups = paren_string.split(\"\
    \ \")\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfkcq0rt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfkcq0rt.jl:1\n\
    in expression starting at /tmp/tmptfkcq0rt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")()()\", paren_groups)\n    paren_groups = filter(x -> x != \")()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \")()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \")()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()\",\
    \ paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\")()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpnudjed_i.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpnudjed_i.jl:34\nin expression starting at /tmp/tmpnudjed_i.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa52hrcuz.jl:1\nin expression starting at /tmp/tmpa52hrcuz.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in range(paren_array_size)\n\
    \        if paren_array[paren_array_index] != \"()\"\n            paren_array_max\
    \ = paren_array_index\n            break\n    end\n    paren_array_max = paren_array_max\
    \ + 1\n    paren_array_size = paren_array_size - paren_array_max\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpccxli9ou.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpccxli9ou.jl:1\n\
    in expression starting at /tmp/tmpccxli9ou.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1 : (length(paren_vec)\
    \ - 1)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0bwal3pa.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0bwal3pa.jl:1\n\
    in expression starting at /tmp/tmp0bwal3pa.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpx72hmmx_.jl:38\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpx72hmmx_.jl:38\nin expression starting at /tmp/tmpx72hmmx_.jl:38\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1gjpu5ld.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1gjpu5ld.jl:1\n\
    in expression starting at /tmp/tmp1gjpu5ld.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack =\
    \ paren_stack.replace(\"(\",\"\").replace(\")\",\"\")\n    paren_stack = paren_stack.replace(\"\
    )\",\"\")\n    paren_stack = paren_stack.replace(\"(\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\")\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ,\",\"\")\n    paren_stack = paren_stack.replace(\";\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\":\",\"\")\n    paren_stack = paren_stack.replace(\"\
    {\",\"\")\n    paren_stack = paren_stack.replace(\"}\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"[\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ]\",\"\")\n    paren_stack = paren_stack.replace(\"+\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"/\",\"\")\n    paren_stack = paren_stack.replace(\"\
    *\",\"\")\n    paren_stack = paren_stack.replace(\"-\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"^\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ~\",\"\")\n    paren_stack = paren_stack.replace(\"%\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"&\",\"\")\n    paren_stack = paren_stack.replace(\"\
    <\",\"\")\n    paren_stack = paren_stack.replace(\">\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"|\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ?\",\"\")\n    paren_stack = paren_stack.replace(\"!\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"|\",\"\")\n    paren_stack = paren_stack.replace(\"\
    {\",\"\")\n    paren_stack = paren_stack.replace(\"}\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"[\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ]\",\"\")\n    paren_stack = paren_stack.replace(\"+\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"/\",\"\")\n    paren_stack = paren_stack.replace(\"\
    *\",\"\")\n    paren_stack = paren_stack.replace(\"-\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"^\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ~\",\"\")\n    paren_stack = paren_stack.replace(\"%\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"&\",\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kwhzzxh.jl:49\nin expression starting at\
    \ /tmp/tmp2kwhzzxh.jl:49\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array = [Int64(x) for x in paren_array]\n    paren_array = [x\
    \ for x in paren_array if x != 0]\n    paren_array = [x for x in paren_array if\
    \ x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1bdvsfjn.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1bdvsfjn.jl:1\n\
    in expression starting at /tmp/tmp1bdvsfjn.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_level::Int64 = 0\n    paren_levels = Vector{Int64}()\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_levels[paren_level + 1] = 1\n    paren_levels[paren_level\
    \ + 2] = 1\n    paren_levels[paren_level + 3] = 1\n    paren_levels[paren_level\
    \ + 4] = 1\n    paren_levels[paren_level + 5] = 1\n    paren_levels[paren_level\
    \ + 6] = 1\n    paren_levels[paren_level + 7] = 1\n    paren_levels[paren_level\
    \ + 8] = 1\n    paren_levels[paren_level + 9] = 1\n    paren_levels[paren_level\
    \ + 10] = 1\n    paren_levels[paren_level + 11] = 1\n    paren_levels[paren_level\
    \ + 12] = 1\n    paren_levels[paren_level + 13] = 1\n    paren_levels[paren_level\
    \ + 14] = 1\n    paren_levels[paren_level + 15] = 1\n    paren_levels[paren_level\
    \ + 16] = 1\n    paren_levels[paren_level + 17] = 1\n    paren_levels[paren_level\
    \ + 18] = 1\n    paren_levels[paren_level + 19] = 1\n    paren_levels[paren_level\
    \ + 20] = 1\n    paren_levels[paren_level + 21] = 1\n    paren_levels[paren_level\
    \ + 22] = 1\n    paren_levels[paren_level + 23] = 1\n    paren_levels[paren_level\
    \ + 24] = 1\n    paren_levels[paren_level + 25] = 1\n    paren_levels[paren_level\
    \ + 26] = 1\n    paren_levels[paren_level + 27] = 1\n    paren_levels[paren_level\
    \ + 28] = 1\n    paren_levels[paren_level + 29] = 1\n    paren_levels[paren_level\
    \ + 30] = 1\n    paren_levels[paren_level + 31] = 1\n    paren_levels[paren_level\
    \ + 32] = 1\n    paren_levels[paren_level + 33] = 1\n    paren_levels[paren_level\
    \ + 34] = 1\n    paren_levels[paren_level + 35] = 1\n    paren_levels[paren_level\
    \ + 36] = 1\n    paren_levels[paren_level + 37] = 1\n    paren_levels[paren_level\
    \ + 38] = 1\n    paren_levels[paren_level + 39] = 1\n    paren_levels[paren_level\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2umpn6sf.jl:1\nin expression starting at /tmp/tmp2umpn6sf.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_level = 0\n    for paren_array_index\
    \ in 1:paren_array_size\n        if paren_array[paren_array_index] == '('\n  \
    \          paren_array_level = paren_array_level + 1\n        elseif paren_array[paren_array_index]\
    \ == ')'\n            paren_array_level = paren_array_level - 1\n            if\
    \ paren_array_level == 0\n                paren_array_max = paren_array_max +\
    \ 1\n            end\n        end\n    end\n    paren_array_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7jowwium.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp7jowwium.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp7jowwium.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7jowwium.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7jowwium.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7jowwium.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp7jowwium.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7jowwium.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7jowwium.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7jowwium.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7jowwium.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7jowwium.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7jowwium.jl:27\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array = [Int64(elem) for elem in paren_array]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \"\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \")\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \")\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \"]\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \")\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in \n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpm73qfw52.jl:39\nin expression starting at /tmp/tmpm73qfw52.jl:39\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqczfltr0.jl:8\nin expression starting at /tmp/tmpqczfltr0.jl:8\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplphaikl4.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplphaikl4.jl:1\n\
    in expression starting at /tmp/tmplphaikl4.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3uryikfk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3uryikfk.jl:1\n\
    in expression starting at /tmp/tmp3uryikfk.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppvyy74ny.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvyy74ny.jl:1\n\
    in expression starting at /tmp/tmppvyy74ny.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_size = paren_array_size\n    paren_array_max_size = 1\n \
    \   paren_array_max_size = 1\n    for paren_array_index in range(paren_array_size-1)\n\
    \        paren_array_max_size = paren_array_max_size * paren_array[paren_array_index\
    \ + 1]\n    end\n    paren_array_max_size\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmprbwu58s0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmprbwu58s0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmprbwu58s0.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprbwu58s0.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprbwu58s0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprbwu58s0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmprbwu58s0.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprbwu58s0.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprbwu58s0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprbwu58s0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmprbwu58s0.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprbwu58s0.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprbwu58s0.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_level = 0\n\
    \    paren_array_level_size = 0\n    paren_array_level_max = 0\n    paren_array_level_max_index\
    \ = 0\n    paren_array_level_max_size = 0\n    paren_array_level_max_index = 0\n\
    \    paren_array_level_max_size_index = 0\n    paren_array_level_max_size_index\
    \ = 0\n    for paren_array_index in range(paren_array_size)\n        if paren_array[paren_array_index]\
    \ ~= \"(\"\n            paren_array_level_size += 1\n        elseif paren_array[paren_array_index]\
    \ == \")\"\n            if paren_array_level_size >= paren_array_max\n       \
    \         paren_array_max = paren_array_level_size\n                paren_array_level_max\
    \ = paren_array_index\n            elseif paren_array_level_size < paren_array_max\n\
    \                paren_array_level_size += 1\n            end\n        elseif\
    \ paren_array[paren_array_index] == \")\"\n            if paren_array_level_size\
    \ >= paren_array_max\n                paren_array_max = paren_array_level_size\n\
    \                paren_array_level_max_size = paren_array_index\n            elseif\
    \ paren_array_level_size < paren_array_max\n                paren_array_level_size\
    \ += 1\n            end\n        elseif paren_array[paren_array_index] ~= \"(\"\
    \n            if paren_array_level_size >= paren_array_max\n                paren_array_max\
    \ = paren_array_level_size\n                paren_array_level_max_size = paren_array_index\n\
    \            elseif paren_array_level_size < paren_array_max\n               \
    \ paren_array_level_size += 1\n            end\n        elseif paren_array[paren_array_index]\
    \ == \")\"\n            if paren_array_level_size >= paren_array_max\n       \
    \         paren_array_max = paren_array_level_size\n                paren_array_level_max_size\
    \ = paren_array_index\n            elseif paren_array_level_size < paren_array_max\n\
    \                paren_array_level_size += 1\n            end\n        end\n \
    \   end\n    paren_array_level_max_size_index = 0\n    for paren_array_level_max_size_index\
    \ in range(paren_array_level_max_size)\n        if paren_array[paren_array_level_max_size_index]\
    \ ~= \"(\"\n            paren_array_level_max_size += 1\n        elseif paren_array[paren_array_level_max_size_index]\
    \ == \")\"\n            if paren_array_level_max_size >= paren_array_level_max\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6o9106j5.jl:1\nin expression starting at /tmp/tmp6o9106j5.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end-1]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ymmdh0q.jl:1\nin expression starting at /tmp/tmp_ymmdh0q.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels::Vector{Int64} = []\n    paren_level = 0\n    paren_levels\
    \ << paren_level\n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()[]()[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()[]()[]()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]()[]()[]\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]()[]()[]()[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()[]()\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpump6m7e5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpump6m7e5.jl:1\n\
    in expression starting at /tmp/tmpump6m7e5.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlqs8lhy.jl:8\nin expression starting at /tmp/tmptlqs8lhy.jl:8\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(elem)\
    \ for elem in paren_array]\n    paren_array = [elem for elem in paren_array if\
    \ elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpuk_75y1q.jl:38\nin expression starting at /tmp/tmpuk_75y1q.jl:38\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    levels\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptizah3_n.jl:15\nin expression starting at\
    \ /tmp/tmptizah3_n.jl:15\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpxkrpve9h.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpxkrpve9h.jl:33\nin expression starting at /tmp/tmpxkrpve9h.jl:33\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqch7rbw.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqch7rbw.jl:1\n\
    in expression starting at /tmp/tmpsqch7rbw.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_vector =\
    \ Vector{Int64}(paren_array_max)\n    for paren_array_index in 1:paren_array_size\n\
    \        paren_array_vector[paren_array_index] = paren_array_index\n    end\n\
    \    return paren_array_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmuq_5_mu.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpmuq_5_mu.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpmuq_5_mu.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmuq_5_mu.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmuq_5_mu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmuq_5_mu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpmuq_5_mu.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmuq_5_mu.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmuq_5_mu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmuq_5_mu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpmuq_5_mu.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmuq_5_mu.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmuq_5_mu.jl:24\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", \n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99defchj.jl:31\nin expression starting at\
    \ /tmp/tmp99defchj.jl:31\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpm3lpernr.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpm3lpernr.jl:37\nin expression starting at /tmp/tmpm3lpernr.jl:37\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_level = 0\n    paren_array_level = 0\n    paren_array_max_level\
    \ = 0\n    for paren_array_level in 1:paren_array_size\n        if paren_array[paren_array_level]\
    \ == '('\n            if paren_array_level > paren_array_max_level\n         \
    \       paren_array_max_level = paren_array_level\n            end\n        elseif\
    \ paren_array[paren_array_level] == ')'\n            if paren_array_level > paren_array_max_level\n\
    \                paren_array_max_level = paren_array_level\n            end\n\
    \        end\n    end\n    paren_array_max_level\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe31fql37.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpe31fql37.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpe31fql37.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe31fql37.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe31fql37.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe31fql37.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpe31fql37.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe31fql37.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe31fql37.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe31fql37.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe31fql37.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe31fql37.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe31fql37.jl:29\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_level = 0\n\
    \    paren_array_max_index = 0\n    paren_array_max_level = 0\n    paren_array_max_level_index\
    \ = 0\n    paren_array_max_level_paren_index = 0\n    paren_array_max_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_index = 0\n    paren_array_max_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level = 0\n    paren_array_max_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_index = 0\n   \
    \ paren_array_max_level_paren_level_paren_level_paren_level = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpojko23jr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojko23jr.jl:1\n\
    in expression starting at /tmp/tmpojko23jr.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(' ')\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_size = paren_array_size\n    paren_array_max_size = 1\n \
    \   paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp29rbfdn7.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29rbfdn7.jl:1\n\
    in expression starting at /tmp/tmp29rbfdn7.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \         else\n                paren_level += paren_level\n        end\n    \
    \    paren_levels[paren_level] += 1\n    end\n    return paren_levels\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy212dp1d.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy212dp1d.jl:1\n\
    in expression starting at /tmp/tmpy212dp1d.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdwwy_2r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdwwy_2r.jl:1\n\
    in expression starting at /tmp/tmpzdwwy_2r.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7iqz1fmr.jl:1\nin expression starting at /tmp/tmp7iqz1fmr.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpm3lpernr.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpm3lpernr.jl:37\nin expression starting at /tmp/tmpm3lpernr.jl:37\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [x for x in\
    \ paren_array if x != \"\"]\n    paren_array = [x for x in paren_array if x !=\
    \ \"()\"]\n    paren_array = [x for x in paren_array if x != \"[]\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}\"]\n    paren_array = [x for x in paren_array\
    \ if x != \"{}[]\"]\n    paren_array = [x for x in paren_array if x != \"{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}[]\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}{}{}\"]\n    paren_array = [x for x in\
    \ paren_array if x != \"{}{}{}[]\"]\n    paren_array = [x for x in paren_array\
    \ if x != \"{}{}{}{}\"]\n    paren_array = [x for x in paren_array if x != \"\
    {}{}{}{}[]\"]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}[]\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}{}{}{}{}{}\"]\n    paren_array = [x for\
    \ x in paren_array if x != \"{}{}{}{}{}{}[]\"]\n    paren_array = [x for x in\
    \ paren_array if x != \"{}{}{}{}{}{}{}\"]\n    paren_array = [x for x in paren_array\
    \ if x != \"{}{}{}{}{}{}{}[]\"]\n    paren_array = [x for x in paren_array if\
    \ x != \"{}{}{}{}{}{}{}{}\"]\n    paren_array = [x for x in paren_array if x !=\
    \ \"{}{}{}{}{}{}{}{}[]\"]\n    paren_array = [x for x in paren_array if x != \"\
    {}{}{}{}{}{}{}{}{}\"]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}[]\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}[]\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}[]\"\
    ]\n    paren_array = [x for x in paren_array if \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5w7_v756.jl:36\nin expression starting at /tmp/tmp5w7_v756.jl:36\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \") |> String.split \"\\\\(|\\\\\
    )\" |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpe94e2fy1.jl:6 expected\
    \ \"end\", got \"\"\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe94e2fy1.jl:7\n\
    in expression starting at /tmp/tmpe94e2fy1.jl:7\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpbvdupd4s.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpbvdupd4s.jl:37\nin expression starting at /tmp/tmpbvdupd4s.jl:37\n"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   paren_array_index = 0\n    paren_array_max_index = 0\n    paren_array_max_value\
    \ = 0\n    paren_array_max_value_count = 0\n    paren_array_max_value_count_index\
    \ = 0\n    for paren_array_index in 1:paren_array_size\n        paren_array_value\
    \ = paren_array[paren_array_index]\n        if paren_array_value == \"(\"\n  \
    \          paren_array_max_value = paren_array_max_value + 1\n            if paren_array_max_value\
    \ == paren_array_max_value_count\n                paren_array_max_value_count_index\
    \ = paren_array_index\n            end\n        elseif paren_array_value == \"\
    )\"\n            if paren_array_max_value == paren_array_max_value_count\n   \
    \             paren_array_max_value_count_index = paren_array_index\n        \
    \    end\n        elseif paren_array_value == \"(\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_array_value == \")\"\n         \
    \   if paren_array_max == paren_array_max_value\n                paren_array_max_index\
    \ = paren_array_index\n            end\n        end\n    end\n    paren_array_max_value_count\
    \ = paren_array_max_value_count + 1\n    paren_array_max_value_count_index = paren_array_index\n\
    \    paren_array_max_value = paren_array_max\n    paren_array_max_index = paren_array_index\n\
    \    paren_array_max_value_count_index = paren_array_max_index\n    paren_array_max_value_count\
    \ = paren_array_max_value_count + 1\n    paren_array_max_value_count_index = paren_array_index\n\
    \    paren_array_max_value = paren_array_max\n    paren_array_max_index = paren_array_index\n\
    \    paren_array_max_value_count_index = paren_array_max_index\n    paren_array_max_value_count\
    \ = paren_array_max_value_count + 1\n    paren_array_max_value_count_index = paren_array_index\n\
    \    paren_array_max_value = paren_array_max\n    paren_array_max_index = paren_array_index\n\
    \    paren_array_max_value_count_index = paren_array_max_index\n    paren_array_max_value_count\
    \ = paren_array_max_value_count + 1\n    paren_array_max_value_count_index = paren_array_index\n\
    \    paren_array_max_value = paren_array_max\n    paren_array_max_index = paren_array_index\n\
    \    paren_array_max_value_count_index = paren_array_max_index\n    paren_array_max_value_count\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62cms0pj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62cms0pj.jl:1\n\
    in expression starting at /tmp/tmp62cms0pj.jl:1\n"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppvyy74ny.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvyy74ny.jl:1\n\
    in expression starting at /tmp/tmppvyy74ny.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    level = 1\n    for paren_group in paren_groups\n        if paren_group ==\
    \ \"(\"\n            push!(levels, level)\n            level += 1\n        elseif\
    \ paren_group == \")\"\n            level = pop!(levels)\n        else\n     \
    \       error(\"Parentheses group not correctly formatted\")\n        end\n  \
    \  end\n    level\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x79d_uu.jl:22\nin expression starting at\
    \ /tmp/tmp0x79d_uu.jl:22\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpxkrpve9h.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpxkrpve9h.jl:33\nin expression starting at /tmp/tmpxkrpve9h.jl:33\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels_of_nesting = []\n\
    \    for paren_group in paren_groups\n        paren_group_levels_of_nesting =\
    \ parse_nested_parens(paren_group)\n        push!(levels_of_nesting, paren_group_levels_of_nesting)\n\
    \    end\n    return levels_of_nesting\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps96humj1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmps96humj1.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  MethodError:\
    \ no method matching parse_nested_parens(::SubString{String})\n  Closest candidates\
    \ are:\n    parse_nested_parens(!Matched::String) at /tmp/tmps96humj1.jl:6\n \
    \ Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmps96humj1.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps96humj1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps96humj1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmps96humj1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching parse_nested_parens(::SubString{String})\n  Closest candidates are:\n\
    \    parse_nested_parens(!Matched::String) at /tmp/tmps96humj1.jl:6\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmps96humj1.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps96humj1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps96humj1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmps96humj1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  MethodError: no method matching parse_nested_parens(::SubString{String})\n\
    \  Closest candidates are:\n    parse_nested_parens(!Matched::String) at /tmp/tmps96humj1.jl:6\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmps96humj1.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tm"
  timestamp: 1659748364
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fk715gv.jl:1\nin expression starting at /tmp/tmp0fk715gv.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdwwy_2r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdwwy_2r.jl:1\n\
    in expression starting at /tmp/tmpzdwwy_2r.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n   \
    \ paren_array = [x for x in paren_array if x <= paren_array.length]\n    paren_array\
    \ = [x for x in paren_array if x != paren_array.length]\n    paren_array = [x\
    \ for x in paren_array if x == paren_array.length]\n    paren_array = [x for x\
    \ in paren_array if x == 0]\n    return paren_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpoe__yc0v.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpoe__yc0v.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpoe__yc0v.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe__yc0v.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe__yc0v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpoe__yc0v.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpoe__yc0v.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe__yc0v.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe__yc0v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpoe__yc0v.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpoe__yc0v.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe__yc0v.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe__yc0v.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqch7rbw.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqch7rbw.jl:1\n\
    in expression starting at /tmp/tmpsqch7rbw.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpxkrpve9h.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpxkrpve9h.jl:33\nin expression starting at /tmp/tmpxkrpve9h.jl:33\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3uryikfk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3uryikfk.jl:1\n\
    in expression starting at /tmp/tmp3uryikfk.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_levels_stack = Vector{Int64}()\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7momt8yf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7momt8yf.jl:1\n\
    in expression starting at /tmp/tmp7momt8yf.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_sorted = sort(paren_array)\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[1]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[2]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[3]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[4]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[5]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[6]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[7]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[8]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[9]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[10]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[11]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[12]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[13]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[14]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[15]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[16]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[17]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[18]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[19]]\n\
    \    paren_array_sorted = paren_array_sorted[paren_array_sorted .!= paren_array_sorted[20]]\n\
    \    paren_array_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpntr0fkqh.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpntr0fkqh.jl:1\n\
    in expression starting at /tmp/tmpntr0fkqh.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(' ')\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_level = paren_array_size\n    paren_array_level = 1\n   \
    \ paren_array_max_level = 0\n    for paren_element in paren_array\n        if\
    \ paren_element == '('\n            if paren_array_level > paren_array_max_level\n\
    \                paren_array_max_level = paren_array_level\n            paren_array_level\
    \ += 1\n        elseif paren_element == ')'\n            if paren_array_level\
    \ > paren_array_max_level\n                paren_array_max_level = paren_array_level\n\
    \            paren_array_level -= 1\n        end\n    end\n    paren_array_max_level\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzso8i56.jl:25\nin expression starting at\
    \ /tmp/tmplzso8i56.jl:25\n"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> !isdigit(x), paren_groups)\n    paren_groups = filter(x -> x == \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x == \" \", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}()\",\
    \ paren_groups)\n    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgy4v3ln.jl:34\nin expression starting at\
    \ /tmp/tmpsgy4v3ln.jl:34\n"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n    paren_level\
    \ = 1\n    paren_levels << paren_level\n    paren_level = 1\n    paren_levels\
    \ << paren_level\n    paren_level\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp64_xthc0.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp64_xthc0.jl:1\n\
    in expression starting at /tmp/tmp64_xthc0.jl:1\n"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[paren_vec!=\"\
    \")\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren_vec != \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ != \"\"]\n    paren_vec = paren_vec[paren\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(paren_vec != \"\"))\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpex29_06n.jl:8\n\
    in expression starting at /tmp/tmpex29_06n.jl:8\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    parsed_parens = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_split = split(paren_group,\
    \ \")\")\n        paren_group_split[end] = paren_group_split[end][2:end]\n   \
    \     parsed_parens = parsed_parens ++ paren_group_split\n    end\n    return\
    \ parsed_parens\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfy6pjb1f.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpfy6pjb1f.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfy6pjb1f.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfy6pjb1f.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfy6pjb1f.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfy6pjb1f.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfy6pjb1f.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfy6pjb1f.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfy6pjb1f.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfy6pjb1f.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpfy6pjb1f.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfy6pjb1f.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfy6pjb1f.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdwwy_2r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdwwy_2r.jl:1\n\
    in expression starting at /tmp/tmpzdwwy_2r.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpx72hmmx_.jl:38\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpx72hmmx_.jl:38\nin expression starting at /tmp/tmpx72hmmx_.jl:38\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak3462tt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak3462tt.jl:1\n\
    in expression starting at /tmp/tmpak3462tt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    levels\nend\n</cell>\n\
    <code language=julia-1.5>\nparse_nested_parens(\"((()))\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsi_mmak.jl:15\nin expression starting at\
    \ /tmp/tmppsi_mmak.jl:15\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> !isdigit(x), paren_groups)\n    paren_groups = filter(x -> x == \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x == \" \", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmptyu_2xvg.jl:35\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmptyu_2xvg.jl:35\nin expression starting at /tmp/tmptyu_2xvg.jl:35\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfbt_zkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfbt_zkt.jl:1\n\
    in expression starting at /tmp/tmpgfbt_zkt.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[end-1:end]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \"\"]\n    paren_stack = paren_stack[paren_stack .!= \" \"]\n    paren_stack\
    \ = paren_stack[paren_stack .!= \" \\n\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\r\"]\n   \
    \ paren_stack = paren_stack[paren_stack .!= \" \\t\\n\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\\
    n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \"]\n    paren_stack\
    \ = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \"\
    \ \\t\\r\\n \\t\\r\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\\
    r\\n \\t\\r\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n\
    \ \\t\\r\\n \"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\\
    t\\r\\n \\t\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\\
    t\\r\\n \\t\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n\
    \ \\t\\r\\n \\t\\r\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\\
    r\\n \\t\\r\\n \\t\\r\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \"\
    \ \\t\\r\\n \\t\\r\\n \\t\\r\\n \"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\r\\n \\t\\r\\n \\t\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\r\\n \\t\\r\\n \\t\\n\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\r\\n \\t\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1y8cfnaf.jl:37\nin expression starting at\
    \ /tmp/tmp1y8cfnaf.jl:37\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpm3lpernr.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpm3lpernr.jl:37\nin expression starting at /tmp/tmpm3lpernr.jl:37\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_9n7yn_a.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_9n7yn_a.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_9n7yn_a.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9n7yn_a.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9n7yn_a.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_9n7yn_a.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_9n7yn_a.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9n7yn_a.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9n7yn_a.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_9n7yn_a.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_9n7yn_a.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9n7yn_a.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9n7yn_a.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nleel4z.jl:43\nin expression starting at\
    \ /tmp/tmp7nleel4z.jl:43\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7kymzys.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7kymzys.jl:1\n\
    in expression starting at /tmp/tmpd7kymzys.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\",\
    \ paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpmjjqxdmc.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpmjjqxdmc.jl:33\nin expression starting at /tmp/tmpmjjqxdmc.jl:33\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    return levels\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6fhx6vb7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp6fhx6vb7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  MethodError:\
    \ no method matching parse_nested_parens(::SubString{String})\n  Closest candidates\
    \ are:\n    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n \
    \ Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp6fhx6vb7.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fhx6vb7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhx6vb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6fhx6vb7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching parse_nested_parens(::SubString{String})\n  Closest candidates are:\n\
    \    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp6fhx6vb7.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fhx6vb7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhx6vb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6fhx6vb7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  MethodError: no method matching parse_nested_parens(::SubString{String})\n\
    \  Closest candidates are:\n    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp6fhx6vb7.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tm"
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfbt_zkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfbt_zkt.jl:1\n\
    in expression starting at /tmp/tmpgfbt_zkt.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_level in paren_array\n        if paren_level\
    \ == \"()\"\n            paren_array_max = paren_array_max + 1\n        elseif\
    \ paren_level == \"[]\"\n            paren_array_max = paren_array_max + 1\n \
    \       elseif paren_level == \"{}\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[]{}\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}[]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}{}[]\"\n            paren_array_max =\
    \ paren_array_max + 1\n        elseif paren_level == \"[]{}[]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"{}[][]\"\n          \
    \  paren_array_max = paren_array_max + 1\n        elseif paren_level == \"[][][]\"\
    \n            paren_array_max = paren_array_max + 1\n        elseif paren_level\
    \ == \"{}{}[][]\"\n            paren_array_max = paren_array_max + 1\n       \
    \ elseif paren_level == \"[]{}[][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}[][][]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"[][][][]\"\n        \
    \    paren_array_max = paren_array_max + 1\n        elseif paren_level == \"{}{}[][][]\"\
    \n            paren_array_max = paren_array_max + 1\n        elseif paren_level\
    \ == \"[]{}[][][]\"\n            paren_array_max = paren_array_max + 1\n     \
    \   elseif paren_level == \"{}[][][][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[][][][][]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"{}{}[][][][]\"\n    \
    \        paren_array_max = paren_array_max + 1\n        elseif paren_level ==\
    \ \"[]{}[][][][]\"\n            paren_array_max = paren_array_max + 1\n      \
    \  elseif paren_level == \"{}[][][][]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[][][][]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp8qk6d4s9.jl:57\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp8qk6d4s9.jl:57\nin expression starting at /tmp/tmp8qk6d4s9.jl:57\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") # split string into vector of strings by space\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('(')\
    \ # split string into vector of strings by '('\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split(')')\
    \ # split string into vector of strings by ')'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('[')\
    \ # split string into vector of strings by '['\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split(']')\
    \ # split string into vector of strings by ']'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('{')\
    \ # split string into vector of strings by '{'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('}')\
    \ # split string into vector of strings by '}'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('+')\
    \ # split string into vector of strings by '+'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('-')\
    \ # split string into vector of strings by '-'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('*')\
    \ # split string into vector of strings by '*'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('/')\
    \ # split string into vector of strings by '/'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('%')\
    \ # split string into vector of strings by '%'\n    paren_stack = paren_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkq7cm8c.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkq7cm8c.jl:1\n\
    in expression starting at /tmp/tmpnkq7cm8c.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpx72hmmx_.jl:38\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpx72hmmx_.jl:38\nin expression starting at /tmp/tmpx72hmmx_.jl:38\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \             if paren_level == 0\n                    paren_levels << paren_level\n\
    \                end\n            end\n        end\n    end\n    return paren_levels\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstk0i07w.jl:24\nin expression starting at\
    \ /tmp/tmpstk0i07w.jl:24\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x != 0]\n  \
    \  paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array[1]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[2]]\n    paren_array = [x for x in paren_array if x <= paren_array[3]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[4]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[5]] \n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[6]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[7]]\n    paren_array = [x for x in paren_array if x <= paren_array[8]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[9]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[10]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[11]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[12]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[13]]\n    paren_array = [x for x in paren_array if x <= paren_array[14]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[15]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[16]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[17]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[18]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[19]]\n    paren_array = [x for x in paren_array if x <= paren_array[20]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[21]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[22]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[23]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[24]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[25]]\n    paren_array = [x for x in paren_array if x <= paren_array[26]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[27]]\n    paren_array\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpocu771r5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpocu771r5.jl:1\n\
    in expression starting at /tmp/tmpocu771r5.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfbt_zkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfbt_zkt.jl:1\n\
    in expression starting at /tmp/tmpgfbt_zkt.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqch7rbw.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqch7rbw.jl:1\n\
    in expression starting at /tmp/tmpsqch7rbw.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1s0p3o7w.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1s0p3o7w.jl:1\n\
    in expression starting at /tmp/tmp1s0p3o7w.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak3462tt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak3462tt.jl:1\n\
    in expression starting at /tmp/tmpak3462tt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n   \
    \ paren_array = [x for x in paren_array if x < paren_array.length]\n    paren_array\
    \ = [x for x in paren_array if x == paren_array.length]\n    paren_array = [x\
    \ for x in paren_array if x == 0]\n    return paren_array\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp12n75bli.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp12n75bli.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp12n75bli.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp12n75bli.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp12n75bli.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp12n75bli.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp12n75bli.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp12n75bli.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp12n75bli.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp12n75bli.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp12n75bli.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp12n75bli.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp12n75bli.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fokpw27.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fokpw27.jl:1\n\
    in expression starting at /tmp/tmp6fokpw27.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_level\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqi3ftzlp.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqi3ftzlp.jl:1\n\
    in expression starting at /tmp/tmpqi3ftzlp.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfbt_zkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfbt_zkt.jl:1\n\
    in expression starting at /tmp/tmpgfbt_zkt.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end-1]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ymmdh0q.jl:1\nin expression starting at /tmp/tmp_ymmdh0q.jl:1\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels::Vector{Int64} = Vector{Int64}()\n    paren_levels::Vector{Int64}\
    \ = []\n    paren_levels::Vector{Int64} = [paren_levels[1]] \n    for paren in\
    \ paren_string\n        if paren == '('\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[1] + 1]\n        elseif paren == ')'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        elseif paren == '['\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        elseif paren == ']'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        elseif paren == '{'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        elseif paren == '}'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        else\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        end\n    end\n    return paren_levels\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"paren_levels\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf6fzue7w.jl:1\nin expression\
    \ starting at /tmp/tmpf6fzue7w.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8r9q_kn.jl:8\nin expression starting at /tmp/tmpe8r9q_kn.jl:8\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyfszmt6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyfszmt6.jl:1\n\
    in expression starting at /tmp/tmpyyfszmt6.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    return levels\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6fhx6vb7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp6fhx6vb7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  MethodError:\
    \ no method matching parse_nested_parens(::SubString{String})\n  Closest candidates\
    \ are:\n    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n \
    \ Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp6fhx6vb7.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fhx6vb7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhx6vb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6fhx6vb7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching parse_nested_parens(::SubString{String})\n  Closest candidates are:\n\
    \    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp6fhx6vb7.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fhx6vb7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhx6vb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6fhx6vb7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  MethodError: no method matching parse_nested_parens(::SubString{String})\n\
    \  Closest candidates are:\n    parse_nested_parens(!Matched::String) at /tmp/tmp6fhx6vb7.jl:6\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp6fhx6vb7.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tm"
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = [paren_groups[i]\
    \ for i in range(1,length(paren_groups)) if paren_groups[i]!=\"\"]\n    paren_groups\
    \ = [paren_groups[i] for i in range(1,length(paren_groups)) if paren_groups[i]!=\"\
    \"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ybbfytn.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ybbfytn.jl:1\n\
    in expression starting at /tmp/tmp2ybbfytn.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpn5gjzqsc.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpn5gjzqsc.jl:37\nin expression starting at /tmp/tmpn5gjzqsc.jl:37\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \         else\n                paren_level += paren_level\n            end\n\
    \        end\n        paren_levels[paren_level] += 1\n    end\n    paren_levels\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgwziotnp.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpgwziotnp.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgwziotnp.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgwziotnp.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgwziotnp.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpgwziotnp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgwziotnp.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgwziotnp.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgwziotnp.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpgwziotnp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpgwziotnp.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgwziotnp.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6]"
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38yzbze1.jl:1\nin expression starting at /tmp/tmp38yzbze1.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in range(paren_array_size)\n\
    \        if paren_array[paren_array_index] == \")\"\n            paren_array_max\
    \ = paren_array_max+1\n        end\n    end\n    \n    parsed_paren_array = zeros(paren_array_max)\n\
    \    for paren_array_index in range(paren_array_size)\n        if paren_array[paren_array_index]\
    \ == \")\"\n            parsed_paren_array[paren_array_index] = paren_array_max\n\
    \        end\n    end\n    return parsed_paren_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_grgx2dh.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_grgx2dh.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_grgx2dh.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_grgx2dh.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_grgx2dh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_grgx2dh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_grgx2dh.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_grgx2dh.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_grgx2dh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_grgx2dh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_grgx2dh.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_grgx2dh.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_grgx2dh.jl:28\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   for paren_array_index in 1:paren_array_size\n        if paren_array[paren_array_index]\
    \ != \"()\"\n            paren_array_max = paren_array_max+1\n        end\n  \
    \  end\n    paren_array_max = paren_array_max+1\n    paren_array_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvcrj3h_d.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpvcrj3h_d.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpvcrj3h_d.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvcrj3h_d.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvcrj3h_d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvcrj3h_d.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpvcrj3h_d.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvcrj3h_d.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvcrj3h_d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvcrj3h_d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field trim\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpvcrj3h_d.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvcrj3h_d.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvcrj3h_d.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n   \
    \ paren_array = [x for x in paren_array if x <= paren_array[1]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[2]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[3]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[4]]\n    paren_array = [x for x in paren_array if x <= paren_array[5]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[6]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[7]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[8]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[9]]\n    paren_array = [x for x in paren_array if x <= paren_array[10]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[11]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[12]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[13]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[14]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[15]]\n    paren_array = [x for x in paren_array if x <= paren_array[16]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[17]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[18]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[19]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[20]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[21]]\n    paren_array = [x for x in paren_array if x <= paren_array[22]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[23]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[24]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[25]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[26]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[27]]\n    paren_array = [x for x in paren_array if x <= paren_array[28]]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpapm7emi5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapm7emi5.jl:1\n\
    in expression starting at /tmp/tmpapm7emi5.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjk2v8q3s.jl:1\nin expression starting at /tmp/tmpjk2v8q3s.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end-1]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"](\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n2rynrt.jl:1\nin expression starting at /tmp/tmp7n2rynrt.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x != 0]\n  \
    \  paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array.length]\n    paren_array = [x for x in paren_array\
    \ if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmposbnmw8a.jl:42\nin expression starting at /tmp/tmposbnmw8a.jl:42\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()[]()()()[]()()()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpva0aubk5.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpva0aubk5.jl:34\nin expression starting at /tmp/tmpva0aubk5.jl:34\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \\\\s\")\n    paren_array_size = length(paren_array)\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtcazwmk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtcazwmk.jl:1\n\
    in expression starting at /tmp/tmpqtcazwmk.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn9r5twz.jl:1\nin expression starting at /tmp/tmptn9r5twz.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpbqg1pzmz.jl:35\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpbqg1pzmz.jl:35\nin expression starting at /tmp/tmpbqg1pzmz.jl:35\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_max\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2jr4ifby.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp2jr4ifby.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp2jr4ifby.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2jr4ifby.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2jr4ifby.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2jr4ifby.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp2jr4ifby.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2jr4ifby.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2jr4ifby.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2jr4ifby.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp2jr4ifby.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2jr4ifby.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2jr4ifby.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(' ')\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n   \
    \ paren_array = [x for x in paren_array if x <= paren_array.length]\n    paren_array\
    \ = [paren_array[x-1] for x in paren_array]\n    return paren_array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy5g64xmc.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpy5g64xmc.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpy5g64xmc.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy5g64xmc.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy5g64xmc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpy5g64xmc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpy5g64xmc.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy5g64xmc.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy5g64xmc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpy5g64xmc.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpy5g64xmc.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy5g64xmc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy5g64xmc.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748367
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp27g_u6w_.jl:38\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp27g_u6w_.jl:38\nin expression starting at /tmp/tmp27g_u6w_.jl:38\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7iqz1fmr.jl:1\nin expression starting at /tmp/tmp7iqz1fmr.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_level in paren_array\n        if paren_level\
    \ == \"(\"\n            paren_array_max = max(paren_array_max, paren_array_size+1)\n\
    \        elseif paren_level == \")\"\n            paren_array_max = max(paren_array_max,\
    \ paren_array_size-1)\n        end\n    end\n    paren_array_max = max(paren_array_max,\
    \ 1)\n    paren_array_size = paren_array_max\n    paren_array = []\n    for paren_level\
    \ in paren_array\n        if paren_level == \"(\"\n            paren_array_size\
    \ = paren_array_size + 1\n        elseif paren_level == \")\"\n            paren_array_size\
    \ = paren_array_size - 1\n        end\n        paren_array = [paren_array_size]\
    \ + paren_array\n    end\n    return paren_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1k5dhkij.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp1k5dhkij.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp1k5dhkij.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1k5dhkij.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1k5dhkij.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1k5dhkij.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp1k5dhkij.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1k5dhkij.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1k5dhkij.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1k5dhkij.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1k5dhkij.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1k5dhkij.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1k5dhkij.jl:34\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748368
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp8k0bjb62.jl:37\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp8k0bjb62.jl:37\nin expression starting at /tmp/tmp8k0bjb62.jl:37\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    parsed_parens = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_split = split(paren_group,\
    \ \")\")\n        parsed_parens = parsed_parens + paren_group_split\n    end\n\
    \    return parsed_parens\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp86t96gjh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp86t96gjh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{SubString{String}})\n     @ Base ./arraymath.jl:45\n   [4] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp86t96gjh.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp86t96gjh.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp86t96gjh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp86t96gjh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(2),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{SubString{String}})\n     @ Base ./arraymath.jl:45\n   [4] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp86t96gjh.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp86t96gjh.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp86t96gjh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp86t96gjh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(8),), mismatch at\
    \ 1\""
  timestamp: 1659748368
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_vr0i_t.jl:8\nin expression starting at /tmp/tmpl_vr0i_t.jl:8\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \         end\n        end\n        paren_levels[paren_level] += 1\n    end\n\
    \    return paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0ryiga_i.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp0ryiga_i.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp0ryiga_i.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0ryiga_i.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0ryiga_i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0ryiga_i.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp0ryiga_i.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0ryiga_i.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0ryiga_i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0ryiga_i.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp0ryiga_i.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0ryiga_i.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6]"
  timestamp: 1659748368
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfbt_zkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfbt_zkt.jl:1\n\
    in expression starting at /tmp/tmpgfbt_zkt.jl:1\n"
  stdout: ''
  timestamp: 1659748363
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") # split on space\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[end-1:end] # remove last\
    \ element which is empty\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvo88383.jl:1\nin expression starting at /tmp/tmpyvo88383.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3rmya7p5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3rmya7p5.jl:1\n\
    in expression starting at /tmp/tmp3rmya7p5.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdwwy_2r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdwwy_2r.jl:1\n\
    in expression starting at /tmp/tmpzdwwy_2r.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyfszmt6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyfszmt6.jl:1\n\
    in expression starting at /tmp/tmpyyfszmt6.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ik5xms.jl:43\nin expression starting at\
    \ /tmp/tmpw2ik5xms.jl:43\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   paren_array_index = 0\n    paren_array_max_index = 0\n    paren_array_max_value\
    \ = 0\n    for paren_array_index in 1:paren_array_size\n        paren_array_value\
    \ = paren_array[paren_array_index]\n        if paren_array_value == \"(\"\n  \
    \          paren_array_max += 1\n        elseif paren_array_value == \")\"\n \
    \           if paren_array_max > paren_array_max_value\n                paren_array_max_value\
    \ = paren_array_max\n                paren_array_max_index = paren_array_index\n\
    \            end\n            paren_array_max -= 1\n        end\n    end\n   \
    \ paren_array_max_index\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0pkv758.jl:28\nin expression starting at\
    \ /tmp/tmp_0pkv758.jl:28\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak3462tt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak3462tt.jl:1\n\
    in expression starting at /tmp/tmpak3462tt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_level::Int64 = 0\n    paren_stack::Vector{Int64} = Vector{Int64}()\n\
    \    paren_stack[paren_level] = paren_level\n    paren_stack[paren_level + 1]\
    \ = paren_level + 1\n    paren_stack[paren_level + 2] = paren_level + 2\n    paren_stack[paren_level\
    \ + 3] = paren_level + 3\n    paren_stack[paren_level + 4] = paren_level + 4\n\
    \    paren_stack[paren_level + 5] = paren_level + 5\n    paren_stack[paren_level\
    \ + 6] = paren_level + 6\n    paren_stack[paren_level + 7] = paren_level + 7\n\
    \    paren_stack[paren_level + 8] = paren_level + 8\n    paren_stack[paren_level\
    \ + 9] = paren_level + 9\n    paren_stack[paren_level + 10] = paren_level + 10\n\
    \    paren_stack[paren_level + 11] = paren_level + 11\n    paren_stack[paren_level\
    \ + 12] = paren_level + 12\n    paren_stack[paren_level + 13] = paren_level +\
    \ 13\n    paren_stack[paren_level + 14] = paren_level + 14\n    paren_stack[paren_level\
    \ + 15] = paren_level + 15\n    paren_stack[paren_level + 16] = paren_level +\
    \ 16\n    paren_stack[paren_level + 17] = paren_level + 17\n    paren_stack[paren_level\
    \ + 18] = paren_level + 18\n    paren_stack[paren_level + 19] = paren_level +\
    \ 19\n    paren_stack[paren_level + 20] = paren_level + 20\n    paren_stack[paren_level\
    \ + 21] = paren_level + 21\n    paren_stack[paren_level + 22] = paren_level +\
    \ 22\n    paren_stack[paren_level + 23] = paren_level + 23\n    paren_stack[paren_level\
    \ + 24] = paren_level + 24\n    paren_stack[paren_level + 25] = paren_level +\
    \ 25\n    paren_stack[paren_level + 26] = paren_level + 26\n    paren_stack[paren_level\
    \ + 27] = paren_level + 27\n    paren_stack[paren_level + 28] = paren_level +\
    \ 28\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpps9evqpb.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpps9evqpb.jl:1\n\
    in expression starting at /tmp/tmpps9evqpb.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyfszmt6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyfszmt6.jl:1\n\
    in expression starting at /tmp/tmpyyfszmt6.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdwwy_2r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdwwy_2r.jl:1\n\
    in expression starting at /tmp/tmpzdwwy_2r.jl:1\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_max_index = 0\n    for paren_array_index\
    \ in 1:paren_array_size\n        if paren_array[paren_array_index] == \")\"\n\
    \            paren_array_max = paren_array_max+1\n            if paren_array_max\
    \ > paren_array_max_index\n                paren_array_max_index = paren_array_index\n\
    \            end\n        end\n    end\n    paren_array_max_index\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_ye1lqfi.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp_ye1lqfi.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_ye1lqfi.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ye1lqfi.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_ye1lqfi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_ye1lqfi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmp_ye1lqfi.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ye1lqfi.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_ye1lqfi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_ye1lqfi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_ye1lqfi.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ye1lqfi.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_ye1lqfi.jl:25\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659748368
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpxkrpve9h.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpxkrpve9h.jl:33\nin expression starting at /tmp/tmpxkrpve9h.jl:33\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n   \
    \ paren_array = [x for x in paren_array if x <= paren_array[1]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[1]]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array[2]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[2]]\n    paren_array = [x for x in paren_array if x <= paren_array[3]]\n\
    \    paren_array = [x for x in paren_array if x > paren_array[3]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[4]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[4]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[5]] \n    paren_array = [x for x in paren_array if x > paren_array[5]]\
    \ \n    paren_array = [x for x in paren_array if x <= paren_array[6]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[6]]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array[7]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[7]]\n    paren_array = [x for x in paren_array if x <= paren_array[8]]\n\
    \    paren_array = [x for x in paren_array if x > paren_array[8]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[9]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[9]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[10]]\n    paren_array = [x for x in paren_array if x > paren_array[10]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[11]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[11]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[12]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[12]]\n    paren_array = [x for x in paren_array if x <= paren_array[13]]\n\
    \    paren_array = [x for x in paren_array if x > paren_array[13]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[14]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[14]]\n    paren_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcj4w4qzg.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcj4w4qzg.jl:1\n\
    in expression starting at /tmp/tmpcj4w4qzg.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(elem)\
    \ for elem in paren_array]\n    paren_array = [elem for elem in paren_array if\
    \ elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpuk_75y1q.jl:38\nin expression starting at /tmp/tmpuk_75y1q.jl:38\n"
  stdout: ''
  timestamp: 1659748360
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak3462tt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak3462tt.jl:1\n\
    in expression starting at /tmp/tmpak3462tt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \")\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn9r5twz.jl:1\nin expression starting at /tmp/tmptn9r5twz.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf7n2eg.jl:50\nin expression starting at\
    \ /tmp/tmp3sf7n2eg.jl:50\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_groups = paren_string.split(\"\
    \ \")\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfkcq0rt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfkcq0rt.jl:1\n\
    in expression starting at /tmp/tmptfkcq0rt.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kqdfrgr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kqdfrgr.jl:1\n\
    in expression starting at /tmp/tmp3kqdfrgr.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp78mi71zs.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp78mi71zs.jl:34\nin expression starting at /tmp/tmp78mi71zs.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_groups = split(paren_group,\
    \ \")\")\n        level = 0\n        for paren_group in paren_groups\n       \
    \     if paren_group == \"(\"\n                level += 1\n            elseif\
    \ paren_group == \")\"\n                level -= 1\n            else\n       \
    \         throw(ArgumentError(\"Parentheses group is not balanced\"))\n      \
    \  end\n        push!(levels, level)\n    end\n    return levels\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vvoywj3.jl:24\nin expression starting at\
    \ /tmp/tmp0vvoywj3.jl:24\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split('\
    \ ').map(x -> parse(x)) |> collect\n    paren_stack = paren_stack[1..end]\n  \
    \  paren_stack = paren_stack.map(x -> max(paren_stack[x], paren_stack[x-1]))\n\
    end\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"()()\")\n</cell>\n\
    <code language=julia-1.5>\nparse_nested_parens(\"((()))\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"(()())\")\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"\
    (()()())\")\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())\"\
    )\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()\")\n\
    </cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()()\")\n\
    </cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()()()\")\n\
    </cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()()()()\"\
    )\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()()()()()()\"\
    )\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"((()())())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tv45ogj.jl:12\nin expression starting at\
    \ /tmp/tmp5tv45ogj.jl:12\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyfszmt6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyfszmt6.jl:1\n\
    in expression starting at /tmp/tmpyyfszmt6.jl:1\n"
  stdout: ''
  timestamp: 1659748365
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ml4uu6d.jl:8\nin expression starting at /tmp/tmp0ml4uu6d.jl:8\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split('\
    \ ').collect{|x| paren_stack.push(x)}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack.collect{|x| paren_stack.count(x)}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpxbks5x.jl:8\nin expression starting at /tmp/tmpzpxbks5x.jl:8\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x\
    \ -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()[]()[]()[]()[]()[]()[]()[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpom9a3wjd.jl:34\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpom9a3wjd.jl:34\nin expression starting at /tmp/tmpom9a3wjd.jl:34\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 2\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 3\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 4\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 5\n    paren_levels[paren_level] = paren_level\n    paren_level = 6\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 7\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 8\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 9\n    paren_levels[paren_level] = paren_level\n    paren_level = 10\n   \
    \ paren_levels[paren_level] = paren_level\n    paren_level = 11\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 12\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 13\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 14\n    paren_levels[paren_level] = paren_level\n    paren_level = 15\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 16\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 17\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 18\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 19\n    paren_levels[paren_level] = paren_level\n    paren_level = 20\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 21\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 22\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 23\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 24\n    paren_levels[paren_level] = paren_level\n    paren_level = 25\n  \
    \  paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp__oly47b.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp__oly47b.jl:1\n\
    in expression starting at /tmp/tmp__oly47b.jl:1\n"
  stdout: ''
  timestamp: 1659748358
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvu13eqgd.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvu13eqgd.jl:1\n\
    in expression starting at /tmp/tmpvu13eqgd.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_level = 0\n\
    \    paren_array_max_level = 0\n    paren_array_max_level_paren_array = []\n \
    \   for paren_array_index in 1:paren_array_size\n        if paren_array[paren_array_index]\
    \ ~= \"(\"\n            paren_array_level = paren_array_level + 1\n        elseif\
    \ paren_array[paren_array_index] == \")\"\n            paren_array_level = paren_array_level\
    \ - 1\n            if paren_array_level == 0\n                paren_array_max_level\
    \ = paren_array_max_level + 1\n                if paren_array_max < paren_array_max_level\n\
    \                    paren_array_max = paren_array_max_level\n               \
    \     paren_array_max_level_paren_array = paren_array_index\n                end\n\
    \            end\n        end\n    end\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array + 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvif_cq16.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvif_cq16.jl:1\n\
    in expression starting at /tmp/tmpvif_cq16.jl:1\n"
  stdout: ''
  timestamp: 1659748366
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars()\n\
    \    paren_chars = paren_chars.filter(x -> x != ')')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '(')\n    paren_chars = paren_chars.filter(x -> x != ' ')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\n')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\t')\n    paren_chars = paren_chars.filter(x -> x != '\\r')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsmfxvcvq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmfxvcvq.jl:1\n\
    in expression starting at /tmp/tmpsmfxvcvq.jl:1\n"
  stdout: ''
  timestamp: 1659748367
